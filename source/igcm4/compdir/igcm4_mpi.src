*COMDECK DOC                                                               DOC.1     
! IGCM Intermediate Global Circulation Model                               DOC.2     
!                                                                          DOC.3     
! Department of Meteorology, University of Reading, UK                     DOC.4     
!                                                                          DOC.5     
! This code is maintained at Reading using the Cray NUPDATE utility,       DOC.6     
! which has been ported to SUN and SGI.  Each parameter statement or       DOC.7     
! common block is maintained in a separate COMDECK and each                DOC.8     
! subroutine is in a separate DECK.                                        DOC.9     
!                                                                          DOC.10    
! Parallel version of code (Marc November 2010)                            DOC.11    
! =============================================                            DOC.12    
! This code forms the parallel version of the IGCM for versions 1,         DOC.13    
! 2.2 and 3 of the code. Where differences occur between any of the        DOC.14    
! versions this has been dealt with by using the nupdate directives        DOC.15    
! *IF, *ELSE and *ENDIF.                                                   DOC.16    
!   The code has been parallised with the Message Passing Interface        DOC.17    
! (MPI) which consists of a number of routines beginning MPI_. They        DOC.18    
! allow information to be passed from one Processor Element (PE) to        DOC.19    
! another. Generally data is stored in a buffer space on a PE until        DOC.20    
! the receiving PE is ready to receive it.                                 DOC.21    
!   The code has employed a 2D decomposition across PEs. There is          DOC.22    
! said to be columns and rows of PEs, as shown in the example below        DOC.23    
! for 8 PEs with 4 columns of PEs (Px) and two rows of PEs (Py).           DOC.24    
!         -----------------------------------                              DOC.25    
!        |  PE 4  |  PE 5  |  PE 6  |  PE 7  |                             DOC.26    
! 2 rows  -----------------------------------                              DOC.27    
!        |  PE 0  |  PE 1  |  PE 2  |  PE 3  |                             DOC.28    
!         -----------------------------------                              DOC.29    
!                     4 columns                                            DOC.30    
!                                                                          DOC.31    
! The code is expected to be most efficient when the number of             DOC.32    
! columns and rows are of a similar size.                                  DOC.33    
!   This means that at any stage only one of the three dimensions is       DOC.34    
! not divided across PEs. A lot of transposing is required to ensure       DOC.35    
! that the one complete dimension is the correct one for a given           DOC.36    
! stage in the code.                                                       DOC.37    
!   Mostly the complete dimension is the levels. In spectral space         DOC.38    
! this means that the zonal wavenumber dimension is split across the       DOC.39    
! columns of PEs, while the meridional wavenumber dimension is split       DOC.40    
! across the rows of PEs. And in grid space the longitude dimension        DOC.41    
! is split across the columns of PEs, while the latitude dimension is      DOC.42    
! split across the rows of PEs.                                            DOC.43    
!   But for example, before calling the FFT on the way to creating         DOC.44    
! grid space variables the meridional wavenumber dimension needs to be     DOC.45    
! the complete dimension. Going from spectral space to grid space and      DOC.46    
! back to spectral space requires six transpositions (the TRANS*           DOC.47    
! subroutines) the complete dimension changes from: levels -> zonal        DOC.48    
! wavenumber (before LTI/HEXPV) -> meridional wavenumber (before FFTs)     DOC.49    
! -> levels (before MGRMLT/DGRMLT/ICTGRMLT) -> longitude (before           DOC.50    
! LTD/HANALV) -> latitude (before FFTs) -> levels.                         DOC.51    
!   The advantage of the 2D decomposition over a 1D decomposition          DOC.52    
! (only one dimension is divided across PEs, and so two dimensions         DOC.53    
! are complete) is that each transposition only requires data to be        DOC.54    
! passed between PEs all on either the same row or column. For a 1D        DOC.55    
! decomposition any transpositiion requires all the PEs to comunicate      DOC.56    
! with one another, and generally more data needs to be sent.              DOC.57    
! Literature, such as `Development of Fully Parallelized Regional          DOC.58    
! Spectral Model at NCEP' by Han and Juang, show that the 2D               DOC.59    
! decomposition shows significant improvement in speed-up and memory       DOC.60    
! usage.                                                                   DOC.61    
!   A further issue with parallel code is that in nearly all cases we      DOC.62    
! only want one PE to read in and write out the data. Routines -           DOC.63    
! who's names begin READ - read input on PE 0 and pass it to the           DOC.64    
! other PEs, while several routines - their names beginning WRITE -        DOC.65    
! allow PE 0 to collect the data from the other PEs and write it to        DOC.66    
! file. The SHARE* routines have been written to help with both the        DOC.67    
! reading and writing process.                                             DOC.68    
!                                                                          DOC.69    
! Extra comdeck                                                            DOC.70    
! =============                                                            DOC.71    
! Most of the comdeck have been altered but there is only one new          DOC.72    
! comdeck, MPIDECK, which ncludes the MPI header file and and defines      DOC.73    
! many of the variables needed for the MPI calls.                          DOC.74    
!                                                                          DOC.75    
! Extra subroutines                                                        DOC.76    
! =================                                                        DOC.77    
! For all versions:                                                        DOC.78    
!   - subroutine INIPARA has been added to initialise a MPI session        DOC.79    
!     and set many of the variables needed for a parallel session          DOC.80    
!   - when not running a parallel session, several subroutines have        DOC.81    
!     been added in the NOMPI deck- by including *DEF NOMPI as a           DOC.82    
!     nupdate directive. These routines are just Fortran stubs that        DOC.83    
!     allow the code to compile, becuase the linker can find routines      DOC.84    
!     called MPI_INIT etc, but they should never be called in the          DOC.85    
!     process of running the code.                                         DOC.86    
!   - the subroutines TRANS1, TRANS2, TRANS3, TRANS4, TRAN5, and           DOC.87    
!     TRANS6 have been added to transpose variables between PEs.           DOC.88    
!   - the subroutine HANALVICT is similar to HANALV but only does          DOC.89    
!     calculations for the tracer variable                                 DOC.90    
!   - the subroutines READCOEF, SHARECOEF and WRITECOEF have been          DOC.91    
!     added so that one PE can read and write data.                        DOC.92    
!                                                                          DOC.93    
*IF DEF,ABOVE_V1                                                           DOC.94    
! For versions 2.2 and 3                                                   DOC.95    
!   - the subroutines TRANS2A, TRANS3A, TRANS4A, TRANS5A, TRANS6A          DOC.96    
!     have been added for transposing variables in the spectral-to-        DOC.97    
!     grid-space-to-spectal loop involving ICTRAC.                         DOC.98    
!   - the subroutines TRANS4B, TRANS5B and TRANS6B have been added         DOC.99    
!     for transposing variables in the spectral-to-grid-space-to-          DOC.100   
!     spectal loop involving DGRMLT.                                       DOC.101   
!   - the subroutines SHAREGRID, SHAREGRID3 and SHAREGRID4                 DOC.102   
!     (SHAREGRID2 is only used in IGCM3), WRITEDIAG and WRITEGRID          DOC.103   
!     have been added so that one PE can read and write data.              DOC.104   
!                                                                          DOC.105   
*ENDIF                                                                     DOC.106   
*IF DEF,ONLY_V3                                                            DOC.107   
! For version 3 only                                                       DOC.108   
!   - the subroutines SHAREGRID2 and READCLIM have been added so           DOC.109   
!     that one PE can read and write data.                                 DOC.110   
!                                                                          DOC.111   
*ENDIF                                                                     DOC.112   
! Removed subroutines                                                      DOC.113   
! ===================                                                      DOC.114   
! The subroutines HANAL, HANAL1, HEXP and HEXP1, along with logical        DOC.115   
! LTVEC - have been removed for simplicity and because their job was       DOC.116   
! already being done by HANALV and HEXPV.                                  DOC.117   
!                                                                          DOC.118   
! Old documentation giving a history of code development                   DOC.119   
! ======================================================                   DOC.120   
! IGCM1 - first portable version derived from the Reading Simple           DOC.121   
!         Global Circulation model. Created in February 1997. Tested       DOC.122   
!         on SUN, SGI and Cray                                             DOC.123   
!                                                                          DOC.124   
*IF DEF,ABOVE_V1                                                           DOC.125   
! IGCM2 - first portable version with simple parametrizations,             DOC.126   
!         moisture and additional optional tracers. The                    DOC.127   
!         parametrizations closely follow those in the previous            DOC.128   
!         Cray-specific moist model, BGCM5. Moisture/tracer advection      DOC.129   
!         can be in advective or flux form. Piers Forster, April 1997.     DOC.130   
!                                                                          DOC.131   
!         New common block/decks included in this version:                 DOC.132   
!         COMGRM,GRIDPP,PHYSCA,PTENDZ,XTRAP                                DOC.133   
!                                                                          DOC.134   
!         New routines/decks included in this version:                     DOC.135   
!         BLAYER,VDIFF,CONVEC,DRYADJ         }    physical                 DOC.136   
!         CUDIF,CUBM,CBCON,CBADJ,LSCRN,RADN  } parametrizations            DOC.137   
!         ICTRAC,INIPHYS       -  initialisation                           DOC.138   
!         DLSGCR,PVCR          -  initialise a PV tracer                   DOC.139   
!         DGRMLT,LTIDT,LTDDIA  -  grid-point calculations & transforms     DOC.140   
!                                                                          DOC.141   
!         NUPDATE modsets included in this version:                        DOC.142   
!         TRAC - multiple tracer advection                                 DOC.143   
!         PHYS - infrastructure for parametrizations                       DOC.144   
!                                                                          DOC.145   
! IGCM 2.1 - updated version of IGCM2.                                     DOC.146   
!            Created May 2000 using modsets from several contributors.     DOC.147   
!                                                                          DOC.148   
!         New routines/decks included in this version:                     DOC.149   
!         DANALV     -  direct transforms for the diabatic timestep        DOC.150   
!         MASCOR     -  global mass correction to enforce conservation     DOC.151   
!                                                                          DOC.152   
*ENDIF                                                                     DOC.153   
*IF DEF,ONLY_V2                                                            DOC.154   
! IGCM 2.2 - updated version of IGCM2.                                     DOC.155   
!            Created November 2000 using a single modset.                  DOC.156   
!                                                                          DOC.157   
!         New routines/decks included in this version:                     DOC.158   
!         TRBUD      -  Global tracer budget                               DOC.159   
!         TRGAV      -  Global mass-weighted average (spectral sum)        DOC.160   
!         VADV1      -  Centred-diffs vertical advection of tracers        DOC.161   
!         VADV2      -  TVD low order vertical advection of tracers.       DOC.162   
!         VADV3      -  TVD higher order vertical advection of tracers.    DOC.163   
!                                                                          DOC.164   
!         NUPDATE modsets included in this version:                        DOC.165   
!         IGCM22     -  all dynamical and technical changes                DOC.166   
!                                                                          DOC.167   
*ENDIF                                                                     DOC.168   
*IF DEF,ONLY_V3                                                            DOC.169   
! IGCM3   IGCM2 with orography and modified physics. Knows about day of    DOC.170   
!         Year for solar insolation, surface temperature and humidity,     DOC.171   
!         Land/ Sea contrast in surface fields.                            DOC.172   
! IGCM3_1   IGCM3 tidied and with bug fixes. New long wave radiation       DOC.173   
!           code with more gasses.                                         DOC.174   
!           SH 2000                                                        DOC.175   
!                                                                          DOC.176   
*ENDIF                                                                     DOC.177   
! COMDECK     COMMON BLOCK DESCRIPTION                                     DOC.178   
! =====================================================================    DOC.179   
!  PARAM1     (PARAMETERs) Model resolution parameters                     DOC.180   
!  PARAM2     (PARAMETERs) Basic constants derived from PARAM1,            DOC.181   
!                          mainly for array dimensions                     DOC.182   
!  BLANK                   Basic planetary constants plus information      DOC.183   
!                          on the vertical grid and spectral domain        DOC.184   
!  BATS       BATS         Constant arrays and variables associated        DOC.185   
!                          mainly with time and vertical differencing      DOC.186   
!  LEGAU      LEGAU        Legendre polynomials and information about      DOC.187   
!                          gaussian latitudes                              DOC.188   
!  OUTCON     OUTCON       Switches, counters and constants controlling    DOC.189   
!                          the type and frequency of model output          DOC.190   
!  COMFFT     COMFFT       Arrays and constants for the FFT                DOC.191   
!  POLYNO     POLYNO       Polynomial to aid vectorisation of the          DOC.192   
!                          Legendre transforms                             DOC.193   
!  RESTIJ     RESTIJ       Restoration temperature field and constants     DOC.194   
!                          which determine it, plus timescales             DOC.195   
!  RESTOR     RESTOR       Restoration fields and timescale                DOC.196   
!  BALAN      BALAN        Constants and arrays for balancing              DOC.197   
!  GRIDPA     GRIDPA       The core half transforms. The levels are        DOC.198   
!                          split across the columns of PEs, the zonal      DOC.199   
!                          wavenumbers are split across the rows of        DOC.200   
!                          PEs and the latitudes are complete.             DOC.201   
!  GRIDPB     GRIDPB       Like GRIDPA but the other half transforms       DOC.202   
!                          needed in the MGRMLT spectral to grid space     DOC.203   
!                          loop                                            DOC.204   
!  GRIDPA2    GRIDPA2      Can be either half transforms or grid space     DOC.205   
!                          variables for the same variables in GRIDPA.     DOC.206   
!                          The levels are always split across the          DOC.207   
!                          columns of PEs and the latitudes are always     DOC.208   
!                          split across the rows of PEs.                   DOC.209   
!  GRIDPB2    GRIDPB2      Like GRIDA2 for variables in GRIDB              DOC.210   
!  GRIDPA3    GRIDPA3      Grid space variables for the same variables     DOC.211   
!                          found in GRIDPA1 and GRIDPA2. The levels are    DOC.212   
!                          complete with the longitudes splits across      DOC.213   
!                          the columns of PEs and the latitudes splits     DOC.214   
!                          across the rows of PEs.                         DOC.215   
!  GRIDPB3    GRIDPB3      Like GRIDA3 for variables in GRIDB and          DOC.216   
!                          GRIDB2.                                         DOC.217   
*IF DEF,ABOVE_V1                                                           DOC.218   
!  GRIDPC     GRIDPC       Radiation variables                             DOC.219   
*ENDIF                                                                     DOC.220   
!  SPECTR     SPECTR       Spectral arrays. The meriodonal wavenumbers     DOC.221   
!                          are split across the columns of PEs, the        DOC.222   
!                          the zonal wavenumbers are split across the      DOC.223   
!                          rows of PEs, and the levels are complete.       DOC.224   
!  SPECTR2    SPECTR2      Same as SPECTR, except the levels are split     DOC.225   
!                          across the columns of PEs instead of the        DOC.226   
!                          the meriodonal wavenumbers.                     DOC.227   
*IF DEF,ABOVE_V1                                                           DOC.228   
!  COMGRM     COMGRM       Vertical derivative arrays for interpolation    DOC.229   
!  PHYSCA     PHYS         Variables/arrays for the parametrizations       DOC.230   
!  PTENDZ     PTENDZ       Zonally averaged parametrization diagnostics    DOC.231   
!  GRIDPP     GRIDP        Grid point arrays, defined as REAL, for the     DOC.232   
!                          diabatic timestep.  This equivalences the       DOC.233   
!                          parametrization forcings to fields in GRIDP     DOC.234   
!  CPIERS     CPIERS       Radiation variables                             DOC.235   
!  OROG_G     GSG          Orography variables                             DOC.236   
!  QSTABS     QSTABS       Used for PQSAT function                         DOC.237   
!  RADHT      RADHT        More radiation variables                        DOC.238   
!  PARRAY                  Sets some parameters                            DOC.239   
*ENDIF                                                                     DOC.241   
!  MPIDECK    MPIDECK      Includes the MPI header file and defines the    DOC.242   
!                          variables that will be needed with the MPI      DOC.243   
!                          routines.                                       DOC.244   
!                                                                          DOC.245   
! DECK        SUBROUTINE   DESCRIPTION                                     DOC.246   
! =====================================================================    DOC.247   
!  MLTRI      MLTRI        Main program.  Calls subroutines to perform     DOC.248   
!                          the spectral transforms, balancing and time-    DOC.249   
!                          stepping.  Organises the counters and output    DOC.250   
!  INITAL     INITAL       Calls the initialisation subroutines.           DOC.251   
!  INIPARA    INIPARA      Initializes the MPI session and decides         DOC.252   
!                          which latitude and zonal wavenumber will be     DOC.253   
!                          run on each PE.                                 DOC.254   
!  INISET     INISET       Sets the default namelist values, reads the     DOC.255   
!                          namelists INPPL, INPRN, INPOP, then checks      DOC.256   
!                          and writes the namelist values.  Sets           DOC.257   
!                          certain run-specific common-block values.       DOC.258   
!  INIGAU     INIGAU       Initialises the gaussian latitudes & weights    DOC.259   
!  INISI      INISI        Initialises arrays and variables for the        DOC.260   
!                          vertical structure and semi-implicit scheme.    DOC.261   
!  INIRESIJ   INIRESIJ     Sets up restoration variables and arrays, by    DOC.262   
!                          setting the default values for namelist         DOC.263   
!                          INPRSIJ and then reading the namelist.          DOC.264   
!  INIRES     INIRES       Sets up restoration variables and arrays by     DOC.265   
!                          setting the default values for namelist         DOC.266   
!                          INPRS and then reading the namelist.            DOC.267   
!  INISTR     INISTR       Reads spectral data for a start/restart run.    DOC.268   
!  INIBAL     INIBAL       Reads the namelist INPBL and computes arrays    DOC.269   
!                          needed for balancing.                           DOC.270   
!  INISP      INISP        Initialises the spectral arrays.                DOC.271   
*IF DEF,ABOVE_V1                                                           DOC.272   
!  ICTRAC     ICTRAC       Initialises moisture, optional tracers          DOC.273   
!                          and a zonally symmetric surface state.          DOC.274   
!  INIPHYS    INIPHYS      Initialises parametrizations.                   DOC.275   
!  INIQS      INIQS        Calculates saturation specific humidity.        DOC.276   
!  INISURF    INISURF      Initialises surface model.                      DOC.277   
*ENDIF                                                                     DOC.278   
!  BALANC     BALANC       Performs balancing from wind (vorticity)        DOC.279   
!                          to mass (temperature, surface pressure).        DOC.280   
*IF DEF,ABOVE_V1                                                           DOC.281   
!  BLAYER     BLAYER       Surface turbulent fluxes of momentum, heat      DOC.282   
!                          and moisture, affecting the lowest level only   DOC.283   
*ENDIF                                                                     DOC.284   
*IF DEF,ONLY_V3                                                            DOC.285   
!  BLSURF     BLSURF       Time-splitting integration of surface and       DOC.286   
!                          boundary layer schemes.                         DOC.287   
!  CALNDR     CALNDR       Calculated month and day from Julian day.       DOC.288   
*ENDIF                                                                     DOC.289   
*IF DEF,ABOVE_V1                                                           DOC.290   
!  CBADJ      CBADJ        Deep convective adjustment scheme,              DOC.291   
!                          based on the Betts-Miller scheme.               DOC.292   
!  CBCON      CBCON        Deep convection. Old routine using a crude      DOC.293   
!                          non-entraining mass-flux scheme.                DOC.294   
*ENDIF                                                                     DOC.295   
*IF DEF,ONLY_V3                                                            DOC.296   
!  CLDTRN     CLDTRN       Cloud parameterisation for radiation scheme.    DOC.297   
*ENDIF                                                                     DOC.298   
*IF DEF,ABOVE_V1                                                           DOC.299   
!  CONVEC     CONVEC       Main convection routine. Finds unstable layer   DOC.300   
!                          based on parcel instability and                 DOC.301   
!                          calls relevant routines.                        DOC.302   
!  CUBM       CUBM         Shallow convective adjustment scheme,           DOC.303   
!                          based on the Betts-Miller scheme.               DOC.304   
!  CUDIF      CUDIF        Shallow convection. Old routine based on        DOC.305   
!                          enhanced vertical diffusion. Default-not used   DOC.306   
!  DANALV     DANALV       Direct transforms for the diabatic              DOC.307   
!                          timestep.  Optimised for vector machines.       DOC.308   
*ENDIF                                                                     DOC.309   
*IF DEF,ONLY_V3                                                            DOC.310   
!  DEDD       DEDD         Computes cloud reflectivity for SW.             DOC.311   
*ENDIF                                                                     DOC.312   
!  DIFUSE     DIFUSE       Calculates spectral tendencies from restor-     DOC.313   
!                          ation (if included) and hyper-diffusion.        DOC.314   
*IF DEF,ABOVE_V1                                                           DOC.315   
!  DGRMLT     DGMRLT       Grid-point calculations in diabatic timestep    DOC.316   
!                          and calls to the parametrization routines.      DOC.317   
!  DLSGCR     DLSGCR       Calculates vertical derivative.                 DOC.318   
!  DRYADJ     DRYADJ       Dry convective adjustment (heat and moisture)   DOC.319   
*ENDIF                                                                     DOC.320   
!  DSTEP      DSTEP        Performs the diabatic part of the timestep,     DOC.321   
!                          including completion of the time-filter.        DOC.322   
!  ENERGY     ENERGY       Calculates & writes various global              DOC.323   
!                          diagnostic quantities.                          DOC.324   
!  FFT        FFT          Calculates either the fast Fourier transform    DOC.325   
!                          or the inverse fast Fourier transform.          DOC.326   
!  HANALV     HANALV       Direct Legendre transform from Fourier to       DOC.327   
!                          spectral space.  Black-box routine for one      DOC.328   
!                          transform-type for a multi-level field.         DOC.329   
!                          fields/transform-types in the adiabatic step    DOC.330   
!  HANALVICT  HANALVICT    Same as HANALV but just for tracer variable     DOC.331   
!  HEXPV      HEXPV        Inverse Legendre transform from spectral to     DOC.332   
!                          Fourier space.  Black-box routine for one       DOC.333   
!                          transform-type for a multi-level field.         DOC.334   
*IF DEF,ONLY_V3                                                            DOC.335   
!  INTERP     INTERPF      Interpolates from climatology to model vertic   DOC.336   
!                          grid. Not used for O3.                          DOC.337   
!  IRRAD      IRRAD        LW radiation scheme.                            DOC.338   
*ENDIF                                                                     DOC.339   
!  LGNDRE     LGNDRE       Calculates the Legendre polynomials and         DOC.340   
!                          their derivatives at a single latitude.         DOC.341   
*IF DEF,ABOVE_V1                                                           DOC.342   
!  LSCRN      LSCRN        Stratiform precipitation, removing super-       DOC.343   
!                          saturation without re-evaporation.              DOC.344   
*ENDIF                                                                     DOC.345   
!  LTD        LTD          Direct Legendre transform for the adiabatic     DOC.346   
!                          part of the timestep.  Control routine.         DOC.347   
*IF DEF,ABOVE_V1                                                           DOC.348   
!  LTDDIA     LTDDIA       Inverse Legendre transforms for the diabatic    DOC.349   
!                          timestep.                                       DOC.350   
*ENDIF                                                                     DOC.351   
!  LTI        LTI          Inverse Legendre transform for the adiabatic    DOC.352   
!                          part of the timestep.  Control routine.         DOC.353   
*IF DEF,ABOVE_V1                                                           DOC.354   
!  LTIDT      LTIDT        Inverse Legendre transform required to          DOC.355   
!                          initialise moisture and tracers.                DOC.356   
!  MASCOR     MASCOR       Global mass correction.                         DOC.357   
*ENDIF                                                                     DOC.358   
!  MATINV     MATINV       Inverts a matrix.                               DOC.359   
!  MGRMLT     MGRMLT       Computes grid point values of the non-linear    DOC.360   
!                          contributions to the tendencies.                DOC.361   
*IF DEF,ONLY_V3                                                            DOC.362   
!  MORC       RADN         Initialises radiation scheme.                   DOC.363   
!  NIKOS      NIKOSRAD     Calls LW and SW radiation schemes.              DOC.364   
*ENDIF                                                                     DOC.365   
!  NOISE      NOISE        Uses a random number generator to add a         DOC.366   
!                          white noise perturbation to (ln) surface        DOC.367   
!                          pressure.                                       DOC.368   
!  NOMPI      NOMPI        This is used when the code is not being run     DOC.369   
!                          in parallel and the MPI routines aren't         DOC.370   
!                          being used. It just provides FORTRAN stubs      DOC.371   
!                          that allow the code to compile without          DOC.372   
!                          searching for the MPI routines. It only has     DOC.373   
!                          content if *DEF,NOMPI is added to update        DOC.374   
!                          file.                                           DOC.375   
*IF DEF,ONLY_V3                                                            DOC.376   
!  O3INTERP   O3INTERP     INTERPF for O3.                                 DOC.377   
*ENDIF                                                                     DOC.378   
*IF DEF,ABOVE_V1                                                           DOC.379   
!  PVCR       PVCR         Calculates PV to initialise a tracer.           DOC.380   
*ENDIF                                                                     DOC.381   
*IF DEF,ONLY_V3                                                            DOC.382   
!  RADSW      RADSW        Initialises SW radiation scheme.                DOC.383   
*ENDIF                                                                     DOC.384   
!  READCOEF   READCOEF     Reads in spectral coefficients on PE 0 and      DOC.385   
!                          passed the spectral coefficients to the         DOC.386   
!                          other PEs                                       DOC.387   
!  SETRES     SETRES       Sets up and saves a restoration state from      DOC.388   
!                          the initial zonally averaged state.             DOC.389   
!  SETTEE     SETTEE       Modifies the restoration temperature field      DOC.390   
!                          to include a seasonal cycle.                    DOC.391   
!  SETZT      SETZT        Sets up a restoration temperature field,        DOC.392   
!                          using lapse-rate and tropopause parameters.     DOC.393   
!  SHARECOEF  SHARECOEF    Either shares spectral coefficients from        DOC.394   
!                          PE 0 to the other PEs or gets the spectral      DOC.395   
!                          coefficients from the other PEs onto PE 0.      DOC.396   
*IF DEF,ABOVE_V1                                                           DOC.397   
!  SHAREGRID  SHAREGRID    Grid variable is either shared from PE 0        DOC.398   
!                          to the other PEs or other PEs send all          DOC.399   
!                          the data to PE 0.                               DOC.400   
*ENDIF                                                                     DOC.401   
*IF DEF,ONLY_V3                                                            DOC.402   
!  SHAREGRID2 SHAREGRID2   Same as SHAREGRID2 but dimensions are in a      DOC.403   
!                          a different order.                              DOC.404   
*ENDIF                                                                     DOC.405   
*IF DEF,ABOVE_V1                                                           DOC.406   
!  SHAREGRID3 SHAREGRID3   Like SHAREGRID but it only retreive data        DOC.407   
!                          and the only dimension separated across         DOC.408   
!                          PEs for the variables here is the latitude      DOC.409   
!                          dimension.                                      DOC.410   
*ENDIF                                                                     DOC.411   
!  SPDEL2     SPDEL2       Compute del-squared or its inverse for a        DOC.412   
!                          spectral field.                                 DOC.413   
!  SPOP       SPOP         Controls diagnostic output of the spectral      DOC.414   
!                          coefficients.                                   DOC.415   
*IF DEF,ONLY_V3                                                            DOC.416   
!  SURFM      SURFM        Performs soil moisture/ snow depth update.      DOC.417   
!  SW         SW           Computes short wave radiation fluxes.           DOC.418   
!  SWTT       SWTT         Computes transmission functions for SW.         DOC.419   
*ENDIF                                                                     DOC.420   
!  TBAL       TBAL         Performs balancing from mass (temperature,      DOC.421   
!                          surface pressure) to wind (vorticity).          DOC.422   
!  TRANS1     TRANS1       Before coming to LTI and HANALV the             DOC.423   
!                          meridional wave dimension must be complete      DOC.424   
!                          on each PE. This routine achieves this by       DOC.425   
!                          splitting the levels across the columns of      DOC.426   
!                          PEs for the spectral coefficients.              DOC.427   
!  TRANS2     TRANS2       Before coming to FFT991 the zonal               DOC.428   
!                          wavenumber dimension must be complete on        DOC.429   
!                          each PE. The routine achieves this by           DOC.430   
!                          splitting the latitudes across the rows         DOC.431   
!                          of PEs for the half transforms.                 DOC.432   
*IF DEF,ABOVE_V1                                                           DOC.433   
!  TRANS2A    TRANS2A      Similar to TRANS2 but only for CHIG and SFG.    DOC.434   
*ENDIF                                                                     DOC.435   
!  TRANS3     TRANS3       Before coming to MGRMLT the levels must         DOC.436   
!                          be complete. This is done by splitting          DOC.437   
!                          the longitudes across the columns of PEs        DOC.438   
!                          for these grid space variables.                 DOC.439   
*IF DEF,ABOVE_V1                                                           DOC.440   
!  TRANS3A    TRANS3A      Similar to TRANS2 but for CHIG2 and SFG2.       DOC.441   
*ENDIF                                                                     DOC.442   
!  TRANS4     TRANS4       Before coming to FFT991 the longitude           DOC.443   
!                          dimension must be complete. This is done        DOC.444   
!                          by splitting the levels across the              DOC.445   
!                          columns of PEs for these grid space             DOC.446   
!                          variables.                                      DOC.447   
*IF DEF,ABOVE_V1                                                           DOC.448   
!  TRANS4A    TRANS4A      Similar to TRANS4 but only for TRANLG2          DOC.449   
!  TRANS4B    TRANS4B      Similar to TRANS4 but only for TNLG2, FUG2,     DOC.450   
!                          FVG2 and TRANLG2.                               DOC.451   
*ENDIF                                                                     DOC.452   
!  TRANS5     TRANS5       Before coming to LTD and HANALV the             DOC.453   
!                          latitudes dimension be complete. This is        DOC.454   
!                          is done by splitting the zonal wavenumbers      DOC.455   
!                          across the rows of PEs for these half           DOC.456   
!                          transforms.                                     DOC.457   
*IF DEF,ABOVE_V1                                                           DOC.458   
!  TRANS5A    TRANS5A      Similar to TRANS5 but only for TRANLG           DOC.459   
!  TRANS5B    TRANS5B      Similar TRANS5 but only for TNLG, FUG,          DOC.460   
!                          FVG and TRANLG.                                 DOC.461   
*ENDIF                                                                     DOC.462   
!  TRANS6     TRANS6       Most of the program requires the levels         DOC.463   
!                          for the source terms for the spectral           DOC.464   
!                          coefficients, ZT etc, to be complete. This      DOC.465   
!                          is done by splitting the meriodonal             DOC.466   
!                          wavenumbers across the columns of PEs.          DOC.467   
*IF DEF,ABOVE_V1                                                           DOC.468   
!  TRANS6A    TRANS6A      Similar to TRANS6 but only for TRAT             DOC.469   
!  TRANS6B    TRANS6B      Similar to TRANS6 but only for ZT, DT, TT       DOC.470   
!                          and TRAT.                                       DOC.471   
*ENDIF                                                                     DOC.472   
!  TSTEP      TSTEP        Performs an adiabatic timestep in spectral      DOC.473   
!                          space, including the semi-implicit treatment    DOC.474   
!                          of gravity wave propagation.  Performs the      DOC.475   
!                          explicit part of the time-filter.               DOC.476   
*IF DEF,ABOVE_V1                                                           DOC.477   
!  VDIFF      VDIFF        Vertical diffusion of momentum, heat            DOC.478   
!                          and moisture throughout the atmospheric depth   DOC.479   
!                          with constant exchange coefficients.            DOC.480   
*ENDIF                                                                     DOC.481   
!  WRITECOEF  WRITECOEF    Gets spectal coefficients onto PE 0 and         DOC.482   
!                          writes them to file.                            DOC.483   
*IF DEF,ABOVE_V1                                                           DOC.484   
!  WRITEDIAG  WRITEDIAG    Uses SHAREGRID3 to collect all the data         DOC.485   
!                          onto PE 0 and write to file.                    DOC.486   
!  WRITEGRID  WRITEGRID    Uses SHAREGRID to collect all the data          DOC.487   
!                          onto PE 0 and write to file.                    DOC.488   
*ENDIF                                                                     DOC.489   
!  WRSPS      WRSPS        Writes spectral coefficients.                   DOC.490   
!  XSECT      XSECT        Writes sigma-latitude cross-sections for        DOC.491   
!                          quick-look diagnostic output.                   DOC.492   
!                                                                          DOC.493   
! DECK        FUNCTION     DESCRIPTION                                     DOC.494   
! =====================================================================    DOC.495   
*IF DEF,ABOVE_1                                                            DOC.496   
!  FTSL       FTSL         Used in CUBM and CUDIF.                         DOC.497   
*ENDIF                                                                     DOC.498   
!  POLAR      POLAR        Return the magnitude of a complex number        DOC.499   
!                          and it's arctangent.                            DOC.500   
*IF DEF,ONLY_V3                                                            DOC.501   
!  PQSAT      PQSAT        Exponential function involving tendency of      DOC.502   
!                          temperature                                     DOC.503   
*ENDIF                                                                     DOC.504   
! =====================================================================    DOC.505   
! Note: DECKs that begin Z_ are compiled at a lower optimisation,          DOC.506   
! because they are written in such a way that compiling at a higher        DOC.507   
! precison produces different results.                                     DOC.508   
*COMDECK PARAM1                                                            PARAM1.1     
!-----------------------------------------------------                     PARAM1.2     
! Determines model resolution                                              PARAM1.3     
!-----------------------------------------------------                     PARAM1.4     
! Determines domain of integration:                                        PARAM1.5     
!   =1, hemisheric, with flow symmetric about equator                      PARAM1.6     
!   =2, full global domain                                                 PARAM1.7     
      INTEGER, PARAMETER :: NHEM=2                                         T42IGCM4.1     
! Highest zonal wavenumber retained in the spectral series,                PARAM1.9     
! the jagged triangular truncation on retains m.le.MM-1                    PARAM1.10    
      INTEGER, PARAMETER :: MM=42                                          T42IGCM4.2     
! Symmetry imposed in longitude. Only retaining m=0, MOCT, 2*MOCT,         PARAM1.12    
! 3*MOCT, ...                                                              PARAM1.13    
      INTEGER, PARAMETER :: MOCT=1                                         PARAM1.14    
! Number of levels in the vertical                                         PARAM1.15    
      INTEGER, PARAMETER :: NL=35                                          T42IGCM4.3     
! Number of longitudes in the transform grid (assumed even).               PARAM1.17    
      INTEGER, PARAMETER :: MG=128                                         T42IGCM4.4     
! Number of Gaussian latitudes in the transform grid between               PARAM1.19    
! pole and equator                                                         PARAM1.20    
      INTEGER, PARAMETER :: JG=32                                          T42IGCM4.5     
*IF DEF,ABOVE_V1                                                           PARAM1.22    
! The number of tracers                                                    PARAM1.23    
      INTEGER, PARAMETER :: NTRAC=1                                        T42IGCM4.6     
*ELSE                                                                      PARAM1.25    
! NTRAC and NTRACO are needed in IGCM versions 2 and 3, so set to          PARAM1.26    
! zero here for convenience.                                               PARAM1.27    
      INTEGER, PARAMETER :: NTRAC=0                                        PARAM1.28    
      INTEGER, PARAMETER :: NTRACO=0                                       PARAM1.29    
*ENDIF                                                                     PARAM1.30    
! Highest total wavenumber retained in the spectral series                 PARAM1.31    
      INTEGER, PARAMETER :: NN=MM                                          PARAM1.32    
! Number of either even or odd spectral cofficients retained               PARAM1.33    
! in spectral series (equation overstimates for odd MM & MOCT=1)           PARAM1.34    
      INTEGER, PARAMETER :: NWJ2=462                                       T42IGCM4.7     
! Optimum number of Fast Fourier Transforms to be performed                PARAM1.37    
! in parallel                                                              PARAM1.38    
      INTEGER, PARAMETER :: NCRAY=64                                       PARAM1.39    
!-----------------------------------------------------                     PARAM1.40    
! Multi-processor variables                                                PARAM1.41    
!-----------------------------------------------------                     PARAM1.42    
! Number of processor elements (PEs)                                       PARAM1.43    
*IF DEF,NOMPI                                                              PARAM1.44    
      INTEGER, PARAMETER :: npe=1                                          PARAM1.45    
*ELSE                                                                      PARAM1.46    
      INTEGER, PARAMETER :: npe=32                                         T42IGCM4.8     
*ENDIF                                                                     PARAM1.48    
!                                                                          PARAM1.49    
      INTEGER, PARAMETER :: NLEVRF=3                                       T42IGCM4.9     
*COMDECK PARAM2                                                            PARAM2.1     
!-----------------------------------------------------                     PARAM2.2     
! Sets basic constants, especially those needed for array dimensions       PARAM2.3     
!-----------------------------------------------------                     PARAM2.4     
! Used in counting the no. of odd or even coefficients                     PARAM2.5     
      INTEGER, PARAMETER :: MH=2                                           PARAM2.6     
! Value of pi                                                              PARAM2.7     
      REAL, PARAMETER :: PI=3.14159265359                                  PARAM2.8     
! Value of 2*pi                                                            PARAM2.9     
      REAL, PARAMETER :: PI2=2.0*PI                                        PARAM2.10    
      INTEGER, PARAMETER :: NNP=NN+1                                       PARAM2.11    
! Real dimension of a single level of the grid-point/half transform        PARAM2.12    
! arrays, for a single latitude or for just odd of even values             PARAM2.13    
      INTEGER, PARAMETER :: MGPP=MG+2                                      PARAM2.14    
! No. of odd or even coefficients for m=0 at single level                  PARAM2.15    
      INTEGER, PARAMETER :: IDM=NNP/2                                      PARAM2.16    
*COMDECK PARAM3                                                            PARAM3.1     
!-----------------------------------------------------                     PARAM3.2     
! Core variables which are reduced in size because of running on more      PARAM3.3     
! than one processor                                                       PARAM3.4     
!-----------------------------------------------------                     PARAM3.5     
! Zonal wavenumbers are twinned, zonal wavenumbers with many               PARAM3.6     
! meridional wavenumbers are paired with those with few.                   PARAM3.7     
      INTEGER, PARAMETER :: MMT=((MM+MOCT-1)/MOCT+1)/2                     PARAM3.8     
! Number of meridional wavenumber for `twinned' zonal wavenumbers          PARAM3.9     
      INTEGER, PARAMETER :: NNT=(MM/2)+((MOCT+1)/2)                        PARAM3.10    
! Number of PEs to divide longitude domain                                 PARAM3.11    
      INTEGER, PARAMETER :: Px=8                                           T42IGCM4.10    
! Number of PEs to divide the latitude domain                              PARAM3.13    
      INTEGER, PARAMETER :: Py=(NPE+Px-1)/Px                               PARAM3.14    
! Number of twinned zonal wavenumber when separated between PEs            PARAM3.15    
      INTEGER, PARAMETER :: MMTy=(MMT+Py-1)/Py                             PARAM3.16    
! Number of meridional wavenumbers when separated between PEs              PARAM3.17    
      INTEGER, PARAMETER :: NNTx=(NNT+Px-1)/Px                             PARAM3.18    
! Number of layers when separated between PEs                              PARAM3.19    
      INTEGER, PARAMETER :: NLx=(NL+Px-1)/Px                               PARAM3.20    
! Number of longitudes when separated between PEs                          PARAM3.21    
      INTEGER, PARAMETER :: MGx=(MG+Px-1)/Px                               PARAM3.22    
! Number of latitudes when separated between PEs                           PARAM3.23    
      INTEGER, PARAMETER :: JGy=(JG+Py-1)/Py                               PARAM3.24    
*COMDECK BLANK                                                             BLANK.1     
!-----------------------------------------------------                     BLANK.2     
! Basic planetary parameters for run plus information about                BLANK.3     
! vertical grid structure                                                  BLANK.4     
!-----------------------------------------------------                     BLANK.5     
      COMMON        SQ,RSQ,SIGMAH,SIGMA,T01S2,T0,ALPHA,DSIGMA              BLANK.6     
     &     ,RDSIG,TKP,C,AKAP,GA,GASCON,RADEA,WW,PFAC                       BLANK.7     
*IF DEF,ABOVE_V1                                                           BLANK.8     
     &     ,P0,RD,RV,CPD,CLATNT                                            BLANK.9     
*ENDIF                                                                     BLANK.10    
      COMMON/BLANKCOM/EZ,AIOCT                                             BLANK.11    
      COMMON/BLANKLOG/LRSTRT,LSHORT,LSTRETCH,LBALAN,LRESTIJ,LNOISE         BLANK.12    
*IF DEF,ABOVE_V1                                                           BLANK.13    
     &     ,LFLUX                                                          BLANK.14    
*ENDIF                                                                     BLANK.15    
*IF DEF,ONLY_V2                                                            BLANK.16    
     &     ,LTRBUD                                                         BLANK.17    
*ENDIF                                                                     BLANK.18    
*IF DEF,ONLY_V3                                                            BLANK.19    
     &     ,LCLIM, LPERPET, L22L, LOROG ,LCSFCT                            BLANK.20    
*ENDIF                                                                     BLANK.21    
! SQ(n+1) =n (n+1)                                                         BLANK.22    
      REAL :: SQ(NNP)                                                      BLANK.23    
! RSQ(n+1) = 1/(n(n+1)) for n>0 and RSQ(1)=0 for n=0                       BLANK.24    
      REAL :: RSQ(NNP)                                                     BLANK.25    
! Sigma at half levels (r+1/2) for r=1 to NL-1                             BLANK.26    
      REAL :: SIGMAH(NL-1)                                                 BLANK.27    
! Sigma at full levels for r=1 to NL                                       BLANK.28    
      REAL :: SIGMA(NL)                                                    BLANK.29    
! (Mean of temperature at r+1) - (Mean of temperature at r)                BLANK.30    
      REAL :: T01S2(NL-1)                                                  BLANK.31    
! Mean of temperature at r for r=1 to NL                                   BLANK.32    
      REAL :: T0(NL)                                                       BLANK.33    
! ln( (sigma at r+1/2) / (sigma at r-1/2) ) (no longer used at r=1)        BLANK.34    
      REAL :: ALPHA(NL)                                                    BLANK.35    
! (sigma at r+1/2) - (sigma at r-1/2) for r=1 to NL                        BLANK.36    
      REAL :: DSIGMA(NL)                                                   BLANK.37    
! RDSIG(r) = 1 / (2*DSIGMA(r)) for r=1 to NL                               BLANK.38    
      REAL :: RDSIG(NL)                                                    BLANK.39    
! Kappa * (mean Temperature at r) for r=1 to NL                            BLANK.40    
      REAL :: TKP(NL)                                                      BLANK.41    
! NL by NL matrix, C_rs=(DSIGMA(s)/DSIGMA(r)) * g_sr                       BLANK.42    
      REAL :: C(NL,NL)                                                     BLANK.43    
! Kappa=R/C_p for dry air                                                  BLANK.44    
      REAL :: AKAP                                                         BLANK.45    
! Gravitational acceleration                                               BLANK.46    
      REAL :: GA                                                           BLANK.47    
! R, gas constant for dry air                                              BLANK.48    
      REAL :: GASCON                                                       BLANK.49    
! Earth's radius                                                           BLANK.50    
      REAL :: RADEA                                                        BLANK.51    
! Earth's rotation rate                                                    BLANK.52    
      REAL :: WW                                                           BLANK.53    
! 0.5*(a*Omega)^2 p_0/g, used in MSPECT                                    BLANK.54    
      REAL :: PFAC                                                         BLANK.55    
! sqrt(8/3)                                                                BLANK.56    
      COMPLEX :: EZ                                                        BLANK.57    
! i*MOCT, where i = sqrt(-1)                                               BLANK.58    
      COMPLEX :: AIOCT                                                     BLANK.59    
! True: restart run from stored spectral data;                             BLANK.60    
! false: initial run with bal'                                             BLANK.61    
      LOGICAL :: LRSTRT                                                    BLANK.62    
! True: restart with short timesteps;                                      BLANK.63    
! false: restart without short timesteps                                   BLANK.64    
      LOGICAL :: LSHORT                                                    BLANK.65    
! Strecth vertical coordinate if true                                      BLANK.66    
      LOGICAL :: LSTRETCH                                                  BLANK.67    
! Carry out balancing of vorticity from temperate perturbation or          BLANK.68    
! vice versa if true                                                       BLANK.69    
      LOGICAL :: LBALAN                                                    BLANK.70    
! Use restoration fields if true                                           BLANK.71    
      LOGICAL :: LRESTIJ                                                   BLANK.72    
! Add white noise to surface pressure if true                              BLANK.73    
      LOGICAL :: LNOISE                                                    BLANK.74    
*IF DEF,ABOVE_V1                                                           BLANK.75    
      LOGICAL :: LFLUX                                                     BLANK.76    
      REAL :: P0                                                           BLANK.77    
      REAL :: RD                                                           BLANK.78    
      REAL :: RV                                                           BLANK.79    
      REAL :: CPD                                                          BLANK.80    
      REAL :: CLATNT                                                       BLANK.81    
*ENDIF                                                                     BLANK.82    
*IF DEF,ONLY_V2                                                            BLANK.83    
      LOGICAL :: LTRBUD                                                    BLANK.84    
*ENDIF                                                                     BLANK.85    
*IF DEF,ONLY_V3                                                            BLANK.86    
      LOGICAL :: LCLIM                                                     BLANK.87    
      LOGICAL :: LPERPET                                                   BLANK.88    
      LOGICAL :: L22L                                                      BLANK.89    
      LOGICAL :: LOROG                                                     BLANK.90    
      LOGICAL :: LCSFCT                                                    BLANK.91    
*ENDIF                                                                     BLANK.92    
*COMDECK BATS                                                              BATS.1     
!-----------------------------------------------------                     BATS.2     
! Constant arrays and variables associated with time and vertical          BATS.3     
! differencing. Also counters.                                             BATS.4     
!-----------------------------------------------------                     BATS.5     
      COMMON/BATS/  BM1,AK,AQ,G,TAU,BEGDAY,PNU21                           BATS.6     
     &     ,DELT,DELT2,CV,CG,CT,PNU,PNU2                                   BATS.7     
*IF DEF,ABOVE_V1                                                           BATS.8     
     &     ,CQ,CTRA,RGG,BEGDOY,DOY                                         BATS.9     
*ENDIF                                                                     BATS.10    
*IF DEF,ONLY_V2                                                            BATS.11    
     &     ,GTR,GTRIT,GTRAT                                                BATS.12    
*ENDIF                                                                     BATS.13    
      COMMON/BATSINT/  KOUNT,KITS,KTOTAL,KRUN,ITSPD                        BATS.14    
*IF DEF,ABOVE_V1                                                           BATS.15    
     &     ,KSTART,NTRACO,KOLOUR                                           BATS.16    
*ENDIF                                                                     BATS.17    
*IF DEF,ONLY_V2                                                            BATS.18    
     &     ,NTRVAD,NTRVADO                                                 BATS.19    
*ENDIF                                                                     BATS.20    
! Contains inverse of A matrix for calculating divergence                  BATS.21    
      REAL :: BM1(NL,NL,NN)                                                BATS.22    
! Non-dimensional dissipation factor for wavenumber n                      BATS.23    
      REAL :: AK(NNP)                                                      BATS.24    
      REAL :: AQ(NL,NL)                                                    BATS.25    
! Defines vertical scheme                                                  BATS.26    
      REAL :: G(NL,NL)                                                     BATS.27    
! Used for temperature tendency                                            BATS.28    
      REAL :: TAU(NL,NL)                                                   BATS.29    
! Number of timesteps completed                                            BATS.30    
      INTEGER :: KOUNT                                                     BATS.31    
! Number of short timesteps                                                BATS.32    
      INTEGER :: KITS                                                      BATS.33    
! Total number of timestep that need completing                            BATS.34    
      INTEGER :: KTOTAL                                                    BATS.35    
! The last timestep                                                        BATS.36    
      INTEGER :: KRUN                                                      BATS.37    
! Start of day                                                             BATS.38    
      REAL :: BEGDAY                                                       BATS.39    
      INTEGER :: ITSPD                                                     BATS.40    
      REAL :: PNU21                                                        BATS.41    
! Size of timestep                                                         BATS.42    
      REAL :: DELT                                                         BATS.43    
! 2*DELT                                                                   BATS.44    
      REAL :: DELT2                                                        BATS.45    
      REAL :: CV                                                           BATS.46    
      REAL :: CG                                                           BATS.47    
      REAL :: CT                                                           BATS.48    
      REAL :: PNU                                                          BATS.49    
      REAL :: PNU2                                                         BATS.50    
*IF DEF,ABOVE_V1                                                           BATS.51    
      INTEGER :: KSTART                                                    BATS.52    
      REAL :: CQ                                                           BATS.53    
      INTEGER :: NTRACO                                                    BATS.54    
      REAL :: CTRA(NTRAC)                                                  BATS.55    
      INTEGER :: KOLOUR(NTRAC)                                             BATS.56    
      REAL :: RGG(NL,NL)                                                   BATS.57    
      REAL :: BEGDOY,DOY                                                   BATS.58    
*ENDIF                                                                     BATS.59    
*IF DEF,ONLY_V2                                                            BATS.60    
      INTEGER :: NTRVAD                                                    BATS.61    
      INTEGER :: NTRVADO                                                   BATS.62    
      REAL :: GTR(NTRAC,3)                                                 BATS.63    
      REAL :: GTRIT(NTRAC,5)                                               BATS.64    
      REAL :: GTRAT(NTRAC,5)                                               BATS.65    
*ENDIF                                                                     BATS.66    
*COMDECK LEGAU                                                             LEGAU.1     
!-----------------------------------------------------                     LEGAU.2     
! Legendre polynomials and information about gaussian latitudes            LEGAU.3     
!-----------------------------------------------------                     LEGAU.4     
      COMMON/LEGAU/ ALP,DALP,RLP,RDLP,SI,CS,                               LEGAU.5     
     &     CSSQ,SECSQ,ALAT,AW                                              LEGAU.6     
! Legendre function, P^m_n                                                 LEGAU.7     
      REAL :: ALP(NNT,MMTy,2,JG)                                           LEGAU.8     
! (1 - mu^2)(d(P^m_n)/d mu)                                                LEGAU.9     
      REAL :: DALP(NNT,MMTy,2,JG)                                          LEGAU.10    
      REAL :: RLP(NNT,MMTy,2,JG)                                           LEGAU.11    
      REAL :: RDLP(NNT,MMTy,2,JG)                                          LEGAU.12    
! mu = sin (latitude)                                                      LEGAU.13    
      REAL :: SI(JG,NHEM)                                                  LEGAU.14    
! (1 - mu^2) = cos (latitude)                                              LEGAU.15    
      REAL :: CS(JG,NHEM)                                                  LEGAU.16    
! (cos(mu))^2                                                              LEGAU.17    
      REAL :: CSSQ(JG,NHEM)                                                LEGAU.18    
! 1 / (cos(mu))^2                                                          LEGAU.19    
      REAL :: SECSQ(JG,NHEM)                                               LEGAU.20    
      REAL :: AW(JG,NHEM)                                                  LEGAU.21    
! Latitude in degrees (needed by XSECT)                                    LEGAU.22    
      REAL :: ALAT(JG,NHEM)                                                LEGAU.23    
*COMDECK OUTCON                                                            OUTCON.1     
!-----------------------------------------------------                     OUTCON.2     
! Switches counters and constants controlling type and frequency of        OUTCON.3     
! model output                                                             OUTCON.4     
!-----------------------------------------------------                     OUTCON.5     
      COMMON/OUTCON/RNTAPE,DAY,SQR2,RSQR2,EAM1,EAM2,TOUT1                  OUTCON.6     
     &     ,TOUT2,LSPO,LGPO                                                OUTCON.7     
*IF DEF,ABOVE_V1                                                           OUTCON.8     
     &     ,RNTAPO                                                         OUTCON.9     
*ENDIF                                                                     OUTCON.10    
*IF DEF,ONLY_V3                                                            OUTCON.11    
     &     ,LSHIST,LMINIH                                                  OUTCON.12    
*ENDIF                                                                     OUTCON.13    
      COMMON/OUTCONINT/NCOEFF,NLAT,INLAT,INSPC,KOUNTP                      OUTCON.14    
     &                 ,KOUNTE,KOUNTH,KOUNTR,KOUTP                         OUTCON.15    
     &                 ,KOUTE,KOUTH,KOUTR                                  OUTCON.16    
! Identyfying run number                                                   OUTCON.17    
      REAL :: RNTAPE                                                       OUTCON.18    
! Maximum wavenumber of printed spectral coeffecients                      OUTCON.19    
      INTEGER :: NCOEFF                                                    OUTCON.20    
! Number of latitudes in printed grid point fields                         OUTCON.21    
      INTEGER :: NLAT                                                      OUTCON.22    
      INTEGER :: INLAT                                                     OUTCON.23    
!                                                                          OUTCON.24    
      INTEGER :: INSPC                                                     OUTCON.25    
! Number of timsteps between successive writing of spectral                OUTCON.26    
! and gridded fields                                                       OUTCON.27    
      INTEGER :: KOUNTP                                                    OUTCON.28    
      INTEGER :: KOUNTE                                                    OUTCON.29    
! Number of timsteps between successive writing of history                 OUTCON.30    
! records, containing spectral fields at the present and                   OUTCON.31    
! previous time levels.                                                    OUTCON.32    
      INTEGER :: KOUNTH                                                    OUTCON.33    
! Number of timsteps between successive writing of restart                 OUTCON.34    
! records, containing the spectral fields at the present and               OUTCON.35    
! previous time levels                                                     OUTCON.36    
      INTEGER :: KOUNTR                                                    OUTCON.37    
      INTEGER :: KOUTP                                                     OUTCON.38    
      INTEGER :: KOUTE                                                     OUTCON.39    
      INTEGER :: KOUTH                                                     OUTCON.40    
      INTEGER :: KOUTR                                                     OUTCON.41    
      REAL :: DAY                                                          OUTCON.42    
      REAL :: SQR2                                                         OUTCON.43    
      REAL :: RSQR2                                                        OUTCON.44    
      REAL :: EAM1                                                         OUTCON.45    
      REAL :: EAM2                                                         OUTCON.46    
      REAL :: TOUT1                                                        OUTCON.47    
      REAL :: TOUT2                                                        OUTCON.48    
      LOGICAL :: LSPO(NL)                                                  OUTCON.49    
      LOGICAL :: LGPO(NL)                                                  OUTCON.50    
*IF DEF,ABOVE_V1                                                           OUTCON.51    
      REAL :: RNTAPO                                                       OUTCON.52    
*ENDIF                                                                     OUTCON.53    
*IF DEF,ONLY_V3                                                            OUTCON.54    
      LOGICAL :: LSHIST                                                    OUTCON.55    
! Reduce the history file to single precision if true                      OUTCON.56    
      LOGICAL :: LMINIH                                                    OUTCON.57    
*ENDIF                                                                     OUTCON.58    
*COMDECK COMFFT                                                            COMFFT.1     
!-----------------------------------------------------                     COMFFT.2     
! Constants and arrays needed for the fast Fourier transforms              COMFFT.3     
!-----------------------------------------------------                     COMFFT.4     
*IF DEF,FFTW                                                               COMFFT.5     
      COMMON/COMFFT/PlanBW3d,PlanBW2d,PlanBWtrac,                          COMFFT.6     
     &     PlanFW3d,PlanFW2d,PlanFWtrac                                    COMFFT.7     
! Pointers to the plans used for FFTs                                      COMFFT.8     
      INTEGER(KIND=8) :: PlanBW3d,PlanBW2d,PlanBWtrac,                     COMFFT.9     
     &     PlanFW3d,PlanFW2d,PlanFWtrac                                    COMFFT.10    
!----------------------------------------------                            COMFFT.11    
! Include the FFTW header file                                             COMFFT.12    
!----------------------------------------------                            COMFFT.13    
      INCLUDE 'fftw3.f'                                                    COMFFT.14    
*ELSE                                                                      COMFFT.15    
      COMMON/COMFFT/TRIG,WORK                                              COMFFT.16    
      COMMON/COMFFTINT/IFAX                                                COMFFT.17    
      REAL :: TRIG((MG+MG+MG)/2+1)                                         COMFFT.18    
      REAL :: WORK(NCRAY*(MG+1))                                           COMFFT.19    
      INTEGER :: IFAX(10)                                                  COMFFT.20    
*ENDIF                                                                     COMFFT.21    
*COMDECK POLYNO                                                            POLYNO.1     
!-----------------------------------------------------                     POLYNO.2     
! Polynomial used to aid vectorization of Legendre transforms              POLYNO.3     
!-----------------------------------------------------                     POLYNO.4     
      COMMON/POLYNO/POLY,CMPA                                              POLYNO.5     
      REAL :: POLY(NNT,MMTy,2,2)                                           POLYNO.6     
      COMPLEX :: CMPA(2*MMTy,NHEM)                                         POLYNO.7     
*COMDECK RESTIJ                                                            RESTIJ.1     
!-----------------------------------------------------                     RESTIJ.2     
! Restoration temperature field and constants which determine it,          RESTIJ.3     
! also contains timescales                                                 RESTIJ.4     
!-----------------------------------------------------                     RESTIJ.5     
      COMMON/RESTIJ/TTRES                                                  RESTIJ.6     
     + ,DTNS,DTEP,DTTRP,FAC,DDAMP,TFRC,YRLEN,TRS                           RESTIJ.7     
     +  ,ALR,ZTROP,TGR                                                     RESTIJ.8     
      COMPLEX :: TTRES(NNTx,MMTy,NHEM,NL)                                  RESTIJ.9     
      REAL :: DTNS                                                         RESTIJ.10    
      REAL :: DTEP                                                         RESTIJ.11    
      REAL :: DTTRP                                                        RESTIJ.12    
      REAL :: FAC(NL)                                                      RESTIJ.13    
      REAL :: DDAMP(NL)                                                    RESTIJ.14    
      REAL :: TFRC(NL)                                                     RESTIJ.15    
      REAL :: YRLEN                                                        RESTIJ.16    
      REAL :: TRS(NL)                                                      RESTIJ.17    
      REAL :: ALR                                                          RESTIJ.18    
      REAL :: ZTROP                                                        RESTIJ.19    
      REAL :: TGR                                                          RESTIJ.20    
*COMDECK RESTOR                                                            RESTOR.1     
!-----------------------------------------------------                     RESTOR.2     
! Restoration fields and timescale                                         RESTOR.3     
!-----------------------------------------------------                     RESTOR.4     
      COMMON/RESTOR/ZRES,DRES,TRES,SPRES,DAMP                              RESTOR.5     
      REAL :: ZRES(IDM,NHEM,NL)                                            RESTOR.6     
      REAL :: DRES(IDM,NHEM,NL)                                            RESTOR.7     
      REAL :: TRES(IDM,NHEM,NL)                                            RESTOR.8     
      REAL :: SPRES(IDM,NHEM)                                              RESTOR.9     
      REAL :: DAMP                                                         RESTOR.10    
*COMDECK BALAN                                                             BALAN.1     
!-----------------------------------------------------                     BALAN.2     
! Constants and arrays needed for balancing                                BALAN.3     
!-----------------------------------------------------                     BALAN.4     
      COMMON/BALAN/BFILT,RGT0,RG,TMEAN                                     BALAN.5     
     +            ,EP1,EP2,KBAL,SRGT0,LTBAL                                BALAN.6     
     &            ,PMNRE                                                   BALAN.7     
! Maximum zonal wavenumbers used for balancing                             BALAN.8     
      INTEGER, PARAMETER :: MFTBAL=9                                       BALAN.9     
! Number of zonal wavenumbers used for balancing                           BALAN.10    
      INTEGER, PARAMETER :: NFTBAL=1+MFTBAL/MOCT                           BALAN.11    
      REAL :: BFILT(NL)                                                    BALAN.12    
      REAL :: RGT0(NL)                                                     BALAN.13    
      REAL :: RG(NL,NL)                                                    BALAN.14    
      REAL :: TMEAN(NL)                                                    BALAN.15    
      REAL :: EP1(IDM,NFTBAL,NHEM)                                         BALAN.16    
      REAL :: EP2(IDM,NFTBAL,NHEM)                                         BALAN.17    
      INTEGER :: KBAL                                                      BALAN.18    
      REAL :: SRGT0                                                        BALAN.19    
      LOGICAL :: LTBAL                                                     BALAN.20    
      REAL :: PMNRE(IDM,IDM,3)                                             BALAN.21    
*COMDECK GRIDPA                                                            GRIDPA.1     
!-----------------------------------------------------                     GRIDPA.2     
! Half transforms. The levels are divided across the columns of PEs;       GRIDPA.3     
! the zonal wavenumbers are divided across the row of PEs; and on          GRIDPA.4     
! ech PE the latitude are complete.                                        GRIDPA.5     
! Common block GRIDPA contains the variables just needed in both           GRIDPA.6     
! MGRMLT and DGRMLT (for version > 1) loops.                               GRIDPA.7     
!-----------------------------------------------------                     GRIDPA.8     
      COMMON/GRIDPA/UG,FUG,VG,FVG,TG,TNLG,PLG                              GRIDPA.9     
*IF DEF,ABOVE_V1                                                           GRIDPA.10    
     &     ,TRAG,TRANLG                                                    GRIDPA.11    
*ENDIF                                                                     GRIDPA.12    
*IF DEF,NOMPI                                                              GRIDPA.13    
! U_psi, then U (rotational wind)                                          GRIDPA.14    
      COMPLEX :: UG(MGPP/2,NHEM,JG,NL)                                     GRIDPA.15    
      COMPLEX :: FUG(MGPP/2,NHEM,JG,NL)                                    GRIDPA.16    
! V_chi, then V (divergent wind)                                           GRIDPA.17    
      COMPLEX :: VG(MGPP/2,NHEM,JG,NL)                                     GRIDPA.18    
      COMPLEX :: FVG(MGPP/2,NHEM,JG,NL)                                    GRIDPA.19    
! Temperature anomaly (T')                                                 GRIDPA.20    
      COMPLEX :: TG(MGPP/2,NHEM,JG,NL)                                     GRIDPA.21    
      COMPLEX :: TNLG(MGPP/2,NHEM,JG,NL)                                   GRIDPA.22    
! ln p* or p*                                                              GRIDPA.23    
      COMPLEX :: PLG(MGPP/2,NHEM,JG)                                       GRIDPA.24    
*IF DEF,ABOVE_V1                                                           GRIDPA.25    
! Tracer term                                                              GRIDPA.26    
      COMPLEX :: TRAG(MGPP/2,NHEM,JG,NL,NTRAC)                             GRIDPA.27    
      COMPLEX :: TRANLG(MGPP/2,NHEM,JG,NL,NTRAC)                           GRIDPA.28    
*ENDIF                                                                     GRIDPA.29    
*ELSE                                                                      GRIDPA.30    
! U_psi, then U (rotational wind)                                          GRIDPA.31    
      COMPLEX :: UG(2*MMTy,NHEM,JG,NLx)                                    GRIDPA.32    
      COMPLEX :: FUG(2*MMTy,NHEM,JG,NLx)                                   GRIDPA.33    
! V_chi, then V (divergent wind)                                           GRIDPA.34    
      COMPLEX :: VG(2*MMTy,NHEM,JG,NLx)                                    GRIDPA.35    
      COMPLEX :: FVG(2*MMTy,NHEM,JG,NLx)                                   GRIDPA.36    
! Temperature anomaly (T')                                                 GRIDPA.37    
      COMPLEX :: TG(2*MMTy,NHEM,JG,NLx)                                    GRIDPA.38    
      COMPLEX :: TNLG(2*MMTy,NHEM,JG,NLx)                                  GRIDPA.39    
! ln p* or p*                                                              GRIDPA.40    
      COMPLEX :: PLG(2*MMTy,NHEM,JG)                                       GRIDPA.41    
*IF DEF,ABOVE_V1                                                           GRIDPA.42    
! Tracer term                                                              GRIDPA.43    
      COMPLEX :: TRAG(2*MMTy,NHEM,JG,NLx,NTRAC)                            GRIDPA.44    
!                                                                          GRIDPA.45    
      COMPLEX :: TRANLG(2*MMTy,NHEM,JG,NLx,NTRAC)                          GRIDPA.46    
*ENDIF                                                                     GRIDPA.47    
*ENDIF                                                                     GRIDPA.48    
*COMDECK GRIDPB                                                            GRIDPB.1     
!-----------------------------------------------------                     GRIDPB.2     
! Half transforms needed in MGRMLT loop                                    GRIDPB.3     
!-----------------------------------------------------                     GRIDPB.4     
      COMMON/GRIDPB/ZG,DG,PJG,PMG,SPG,VPG,EG,UTG,VTG                       GRIDPB.5     
*IF DEF,ABOVE_V1                                                           GRIDPB.6     
     &     ,UTRAG,VTRAG                                                    GRIDPB.7     
*ENDIF                                                                     GRIDPB.8     
     &     ,CHIG,SFG,FVGT,FUGT                                             GRIDPB.9     
*IF DEF,NOMPI                                                              GRIDPB.10    
! Vorticity (zeta)                                                         GRIDPB.11    
      COMPLEX :: ZG(MGPP/2,NHEM,JG,NL)                                     GRIDPB.12    
! Divergence (d)                                                           GRIDPB.13    
      COMPLEX :: DG(MGPP/2,NHEM,JG,NL)                                     GRIDPB.14    
! (1-mu^2) (d(ln p*)/d mu)                                                 GRIDPB.15    
      COMPLEX :: PJG(MGPP/2,NHEM,JG)                                       GRIDPB.16    
! (d(ln p*)/d lambda)                                                      GRIDPB.17    
      COMPLEX :: PMG(MGPP/2,NHEM,JG)                                       GRIDPB.18    
      COMPLEX :: SPG(MGPP/2,NHEM,JG)                                       GRIDPB.19    
      COMPLEX :: VPG(MGPP/2,NHEM,JG)                                       GRIDPB.20    
! (U^2 + V^2)                                                              GRIDPB.21    
      COMPLEX :: EG(MGPP/2,NHEM,JG,NL)                                     GRIDPB.22    
      COMPLEX :: UTG(MGPP/2,NHEM,JG,NL)                                    GRIDPB.23    
      COMPLEX :: VTG(MGPP/2,NHEM,JG,NL)                                    GRIDPB.24    
*IF DEF,ABOVE_V1                                                           GRIDPB.25    
      COMPLEX :: UTRAG(MGPP/2,NHEM,JG,NL,NTRAC)                            GRIDPB.26    
      COMPLEX :: VTRAG(MGPP/2,NHEM,JG,NL,NTRAC)                            GRIDPB.27    
*ENDIF                                                                     GRIDPB.28    
      COMPLEX :: CHIG(MGPP/2,NHEM,JG,NL)                                   GRIDPB.29    
      COMPLEX :: SFG(MGPP/2,NHEM,JG,NL)                                    GRIDPB.30    
      COMPLEX :: FVGT(MGPP/2,NHEM,JG,NL)                                   GRIDPB.31    
      COMPLEX :: FUGT(MGPP/2,NHEM,JG,NL)                                   GRIDPB.32    
*ELSE                                                                      GRIDPB.33    
! Vorticity (zeta)                                                         GRIDPB.34    
      COMPLEX :: ZG(2*MMTy,NHEM,JG,NLx)                                    GRIDPB.35    
! Divergence (d)                                                           GRIDPB.36    
      COMPLEX :: DG(2*MMTy,NHEM,JG,NLx)                                    GRIDPB.37    
! (1-mu^2) (d(ln p*)/d mu)                                                 GRIDPB.38    
      COMPLEX :: PJG(2*MMTy,NHEM,JG)                                       GRIDPB.39    
! (d(ln p*)/d lambda)                                                      GRIDPB.40    
      COMPLEX :: PMG(2*MMTy,NHEM,JG)                                       GRIDPB.41    
      COMPLEX :: SPG(2*MMTy,NHEM,JG)                                       GRIDPB.42    
      COMPLEX :: VPG(2*MMTy,NHEM,JG)                                       GRIDPB.43    
! (U^2 + V^2)                                                              GRIDPB.44    
      COMPLEX :: EG(2*MMTy,NHEM,JG,NLx)                                    GRIDPB.45    
      COMPLEX :: UTG(2*MMTy,NHEM,JG,NLx)                                   GRIDPB.46    
      COMPLEX :: VTG(2*MMTy,NHEM,JG,NLx)                                   GRIDPB.47    
*IF DEF,ABOVE_V1                                                           GRIDPB.48    
      COMPLEX :: UTRAG(2*MMTy,NHEM,JG,NLx,NTRAC)                           GRIDPB.49    
      COMPLEX :: VTRAG(2*MMTy,NHEM,JG,NLx,NTRAC)                           GRIDPB.50    
*ENDIF                                                                     GRIDPB.51    
      COMPLEX :: CHIG(2*MMTy,NHEM,JG,NLx)                                  GRIDPB.52    
      COMPLEX :: SFG(2*MMTy,NHEM,JG,NLx)                                   GRIDPB.53    
      COMPLEX :: FVGT(2*MMTy,NHEM,JG,NLx)                                  GRIDPB.54    
      COMPLEX :: FUGT(2*MMTy,NHEM,JG,NLx)                                  GRIDPB.55    
*ENDIF                                                                     GRIDPB.56    
*COMDECK GRIDPA2                                                           GRIDPA2.1     
!-----------------------------------------------------                     GRIDPA2.2     
! Similar to variables in GRIDP but in grid space, and without             GRIDPA2.3     
! equivalent variables for CHIG, SFG, FVGT and FUGT. The levels            GRIDPA2.4     
! are divided across the columns of PEs; the latitudes are divided         GRIDPA2.5     
! across the row of PEs; and the zonal wavenumbers/longitudes are          GRIDPA2.6     
! complete.                                                                GRIDPA2.7     
! Common block GRIDPA contains the variables just needed in both           GRIDPA2.8     
! MGRMLT and DGRMLT (for version > 1) loops.                               GRIDPA2.9     
!-----------------------------------------------------                     GRIDPA2.10    
*IF DEF,NOMPI                                                              GRIDPA2.11    
      COMMON/GRIDPA/UG2,FUG2,VG2,FVG2,TG2,TNLG2,PLG2                       GRIDPA2.12    
*ELSE                                                                      GRIDPA2.13    
      COMMON/GRIDPA2/UG2,FUG2,VG2,FVG2,TG2,TNLG2,PLG2                      GRIDPA2.14    
*ENDIF                                                                     GRIDPA2.15    
*IF DEF,ABOVE_V1                                                           GRIDPA2.16    
     &     ,TRAG2,TRANLG2                                                  GRIDPA2.17    
*ENDIF                                                                     GRIDPA2.18    
! U_psi, then U (rotational wind)                                          GRIDPA2.19    
      REAL :: UG2(MGPP,NHEM,JGy,NLx)                                       GRIDPA2.20    
      REAL :: FUG2(MGPP,NHEM,JGy,NLx)                                      GRIDPA2.21    
! V_chi, then V (divergent wind)                                           GRIDPA2.22    
      REAL :: VG2(MGPP,NHEM,JGy,NLx)                                       GRIDPA2.23    
      REAL :: FVG2(MGPP,NHEM,JGy,NLx)                                      GRIDPA2.24    
! Temperature anomaly (T')                                                 GRIDPA2.25    
      REAL :: TG2(MGPP,NHEM,JGy,NLx)                                       GRIDPA2.26    
      REAL :: TNLG2(MGPP,NHEM,JGy,NLx)                                     GRIDPA2.27    
! ln p* or p*                                                              GRIDPA2.28    
      REAL :: PLG2(MGPP,NHEM,JGy)                                          GRIDPA2.29    
*IF DEF,ABOVE_V1                                                           GRIDPA2.30    
! Tracer term                                                              GRIDPA2.31    
      REAL :: TRAG2(MGPP,NHEM,JGy,NLx,NTRAC)                               GRIDPA2.32    
      REAL :: TRANLG2(MGPP,NHEM,JGy,NLx,NTRAC)                             GRIDPA2.33    
*ENDIF                                                                     GRIDPA2.34    
*COMDECK GRIDPB2                                                           GRIDPB2.1     
!-----------------------------------------------------                     GRIDPB2.2     
! Half transforms needed in MGRMLT loop                                    GRIDPB2.3     
!-----------------------------------------------------                     GRIDPB2.4     
*IF DEF,NOMPI                                                              GRIDPB2.5     
      COMMON/GRIDPB/ZG2,DG2,PJG2,PMG2,SPG2,VPG2,EG2,UTG2,VTG2              GRIDPB2.6     
*ELSE                                                                      GRIDPB2.7     
      COMMON/GRIDPB2/ZG2,DG2,PJG2,PMG2,SPG2,VPG2,EG2,UTG2,VTG2             GRIDPB2.8     
*ENDIF                                                                     GRIDPB2.9     
*IF DEF,ABOVE_V1                                                           GRIDPB2.10    
     &     ,UTRAG2,VTRAG2                                                  GRIDPB2.11    
*ENDIF                                                                     GRIDPB2.12    
     &     ,CHIG2,SFG2                                                     GRIDPB2.13    
! Vorticity (zeta)                                                         GRIDPB2.14    
      REAL :: ZG2(MGPP,NHEM,JGy,NLx)                                       GRIDPB2.15    
! Divergence (d)                                                           GRIDPB2.16    
      REAL :: DG2(MGPP,NHEM,JGy,NLx)                                       GRIDPB2.17    
! (1-mu^2) (d(ln p*)/d mu)                                                 GRIDPB2.18    
      REAL :: PJG2(MGPP,NHEM,JGy)                                          GRIDPB2.19    
! (d(ln p*)/d lambda)                                                      GRIDPB2.20    
      REAL :: PMG2(MGPP,NHEM,JGy)                                          GRIDPB2.21    
      REAL :: SPG2(MGPP,NHEM,JGy)                                          GRIDPB2.22    
      REAL :: VPG2(MGPP,NHEM,JGy)                                          GRIDPB2.23    
! (U^2 + V^2)                                                              GRIDPB2.24    
      REAL :: EG2(MGPP,NHEM,JGy,NLx)                                       GRIDPB2.25    
      REAL :: UTG2(MGPP,NHEM,JGy,NLx)                                      GRIDPB2.26    
      REAL :: VTG2(MGPP,NHEM,JGy,NLx)                                      GRIDPB2.27    
*IF DEF,ABOVE_V1                                                           GRIDPB2.28    
      REAL :: UTRAG2(MGPP,NHEM,JGy,NLx,NTRAC)                              GRIDPB2.29    
      REAL :: VTRAG2(MGPP,NHEM,JGy,NLx,NTRAC)                              GRIDPB2.30    
*ENDIF                                                                     GRIDPB2.31    
      REAL :: CHIG2(MGPP,NHEM,JGy,NLx)                                     GRIDPB2.32    
      REAL :: SFG2(MGPP,NHEM,JGy,NLx)                                      GRIDPB2.33    
*COMDECK GRIDPA3                                                           GRIDPA3.1     
!-----------------------------------------------------                     GRIDPA3.2     
! Almost the same as GRIDP2 variables but levels are complete              GRIDPA3.3     
! instead of the longitudes.                                               GRIDPA3.4     
! Common block GRIDPA contains the variables just needed in both           GRIDPA3.5     
! MGRMLT and DGRMLT (for version > 1) loops.                               GRIDPA3.6     
!-----------------------------------------------------                     GRIDPA3.7     
*IF DEF,NOMPI                                                              GRIDPA3.8     
      COMMON/GRIDPA/UG3,FUG3,VG3,FVG3,TG3,TNLG3,PLG3                       GRIDPA3.9     
*ELSE                                                                      GRIDPA3.10    
      COMMON/GRIDPA3/UG3,FUG3,VG3,FVG3,TG3,TNLG3,PLG3                      GRIDPA3.11    
*ENDIF                                                                     GRIDPA3.12    
*IF DEF,ABOVE_V1                                                           GRIDPA3.13    
     &     ,TRAG3,TRANLG3                                                  GRIDPA3.14    
*ENDIF                                                                     GRIDPA3.15    
*IF DEF,ONLY_V2                                                            GRIDPA3.16    
     &     ,TRAGMI3                                                        GRIDPA3.17    
*ENDIF                                                                     GRIDPA3.18    
*IF DEF,NOMPI                                                              GRIDPA3.19    
 ! U_psi, then U (rotational wind)                                         GRIDPA3.20    
      REAL :: UG3(MGPP,NHEM,JG,NL)                                         GRIDPA3.21    
      REAL :: FUG3(MGPP,NHEM,JG,NL)                                        GRIDPA3.22    
! V_chi, then V (divergent wind)                                           GRIDPA3.23    
      REAL :: VG3(MGPP,NHEM,JG,NL)                                         GRIDPA3.24    
      REAL :: FVG3(MGPP,NHEM,JG,NL)                                        GRIDPA3.25    
! Temperature anomaly (T')                                                 GRIDPA3.26    
      REAL :: TG3(MGPP,NHEM,JG,NL)                                         GRIDPA3.27    
      REAL :: TNLG3(MGPP,NHEM,JG,NL)                                       GRIDPA3.28    
! ln p* or p*                                                              GRIDPA3.29    
      REAL :: PLG3(MGPP,NHEM,JG)                                           GRIDPA3.30    
*IF DEF,ABOVE_V1                                                           GRIDPA3.31    
      REAL :: TRAG3(MGPP,NHEM,JG,NL,NTRAC)                                 GRIDPA3.32    
      REAL :: TRANLG3(MGPP,NHEM,JG,NL,NTRAC)                               GRIDPA3.33    
*ENDIF                                                                     GRIDPA3.34    
*ELSE                                                                      GRIDPA3.35    
! U_psi, then U (rotational wind)                                          GRIDPA3.36    
      REAL :: UG3(MGx,NHEM,JGy,NL)                                         GRIDPA3.37    
      REAL :: FUG3(MGx,NHEM,JGy,NL)                                        GRIDPA3.38    
! V_chi, then V (divergent wind)                                           GRIDPA3.39    
      REAL :: VG3(MGx,NHEM,JGy,NL)                                         GRIDPA3.40    
      REAL :: FVG3(MGx,NHEM,JGy,NL)                                        GRIDPA3.41    
! Temperature anomaly (T')                                                 GRIDPA3.42    
      REAL :: TG3(MGx,NHEM,JGy,NL)                                         GRIDPA3.43    
      REAL :: TNLG3(MGx,NHEM,JGy,NL)                                       GRIDPA3.44    
! ln p* or p*                                                              GRIDPA3.45    
      REAL :: PLG3(MGx,NHEM,JGy)                                           GRIDPA3.46    
*IF DEF,ABOVE_V1                                                           GRIDPA3.47    
! Tracer term                                                              GRIDPA3.48    
      REAL :: TRAG3(MGx,NHEM,JGy,NL,NTRAC)                                 GRIDPA3.49    
      REAL :: TRANLG3(MGx,NHEM,JGy,NL,NTRAC)                               GRIDPA3.50    
*ENDIF                                                                     GRIDPA3.51    
*ENDIF                                                                     GRIDPA3.52    
*IF DEF,ONLY_V2                                                            GRIDPA3.53    
      REAL :: TRAGMI3(MGx,NHEM,JGy,NL,NTRAC)                               GRIDPA3.54    
*ENDIF                                                                     GRIDPA3.55    
*COMDECK GRIDPB3                                                           GRIDPB3.1     
!-----------------------------------------------------                     GRIDPB3.2     
! Half transforms needed in MGRMLT loop                                    GRIDPB3.3     
!-----------------------------------------------------                     GRIDPB3.4     
*IF DEF,NOMPI                                                              GRIDPB3.5     
      COMMON/GRIDPB/ZG3,DG3,PJG3,PMG3,SPG3,VPG3,EG3,UTG3,VTG3              GRIDPB3.6     
*ELSE                                                                      GRIDPB3.7     
      COMMON/GRIDPB3/ZG3,DG3,PJG3,PMG3,SPG3,VPG3,EG3,UTG3,VTG3             GRIDPB3.8     
*ENDIF                                                                     GRIDPB3.9     
*IF DEF,ABOVE_V1                                                           GRIDPB3.10    
     &     ,UTRAG3,VTRAG3                                                  GRIDPB3.11    
*ENDIF                                                                     GRIDPB3.12    
     &     ,CHIG3,SFG3                                                     GRIDPB3.13    
*IF DEF,NOMPI                                                              GRIDPB3.14    
! Vorticity (zeta)                                                         GRIDPB3.15    
      REAL :: ZG3(MGPP,NHEM,JG,NL)                                         GRIDPB3.16    
! Divergence (d)                                                           GRIDPB3.17    
      REAL :: DG3(MGPP,NHEM,JG,NL)                                         GRIDPB3.18    
! (1-mu^2) (d(ln p*)/d mu)                                                 GRIDPB3.19    
      REAL :: PJG3(MGPP,NHEM,JG)                                           GRIDPB3.20    
! (d(ln p*)/d lambda)                                                      GRIDPB3.21    
      REAL :: PMG3(MGPP,NHEM,JG)                                           GRIDPB3.22    
      REAL :: SPG3(MGPP,NHEM,JG)                                           GRIDPB3.23    
      REAL :: VPG3(MGPP,NHEM,JG)                                           GRIDPB3.24    
! (U^2 + V^2)                                                              GRIDPB3.25    
      REAL :: EG3(MGPP,NHEM,JG,NL)                                         GRIDPB3.26    
      REAL :: UTG3(MGPP,NHEM,JG,NL)                                        GRIDPB3.27    
      REAL :: VTG3(MGPP,NHEM,JG,NL)                                        GRIDPB3.28    
*IF DEF,ABOVE_V1                                                           GRIDPB3.29    
! Tracer term                                                              GRIDPB3.30    
      REAL :: UTRAG3(MGPP,NHEM,JG,NL,NTRAC)                                GRIDPB3.31    
      REAL :: VTRAG3(MGPP,NHEM,JG,NL,NTRAC)                                GRIDPB3.32    
*ENDIF                                                                     GRIDPB3.33    
      REAL :: CHIG3(MGPP,NHEM,JG,NL)                                       GRIDPB3.34    
      REAL :: SFG3(MGPP,NHEM,JG,NL)                                        GRIDPB3.35    
*ELSE                                                                      GRIDPB3.36    
! Vorticity (zeta)                                                         GRIDPB3.37    
      REAL :: ZG3(MGx,NHEM,JGy,NL)                                         GRIDPB3.38    
! Divergence (d)                                                           GRIDPB3.39    
      REAL :: DG3(MGx,NHEM,JGy,NL)                                         GRIDPB3.40    
! (1-mu^2) (d(ln p*)/d mu)                                                 GRIDPB3.41    
      REAL :: PJG3(MGx,NHEM,JGy)                                           GRIDPB3.42    
! (d(ln p*)/d lambda)                                                      GRIDPB3.43    
      REAL :: PMG3(MGx,NHEM,JGy)                                           GRIDPB3.44    
      REAL :: SPG3(MGx,NHEM,JGy)                                           GRIDPB3.45    
      REAL :: VPG3(MGx,NHEM,JGy)                                           GRIDPB3.46    
! (U^2 + V^2)                                                              GRIDPB3.47    
      REAL :: EG3(MGx,NHEM,JGy,NL)                                         GRIDPB3.48    
      REAL :: UTG3(MGx,NHEM,JGy,NL)                                        GRIDPB3.49    
      REAL :: VTG3(MGx,NHEM,JGy,NL)                                        GRIDPB3.50    
*IF DEF,ABOVE_V1                                                           GRIDPB3.51    
      REAL :: UTRAG3(MGx,NHEM,JGy,NL,NTRAC)                                GRIDPB3.52    
      REAL :: VTRAG3(MGx,NHEM,JGy,NL,NTRAC)                                GRIDPB3.53    
*ENDIF                                                                     GRIDPB3.54    
      REAL :: CHIG3(MGx,NHEM,JGy,NL)                                       GRIDPB3.55    
      REAL :: SFG3(MGx,NHEM,JGy,NL)                                        GRIDPB3.56    
*ENDIF                                                                     GRIDPB3.57    
*COMDECK GRIDPC                                                            GRIDPC.1     
*IF DEF,ABOVE_V1                                                           GRIDPC.2     
!-----------------------------------------------------                     GRIDPC.3     
! Grid variables for DGRMLT loop                                           GRIDPC.4     
!-----------------------------------------------------                     GRIDPC.5     
      COMMON/GRIDPC/ASSBL,ASHBL,ASLBL,ARRCR,ARRLR                          GRIDPC.6     
     &     ,TTVD,QTVD,TYBL,TXBL,TTRD,TTLR,TTCR,UTVD,VTVD                   GRIDPC.7     
     &     ,QTLR,QTCR,SSBL,SHBL,SLBL,RRCR,RRLR                             GRIDPC.8     
*IF DEF,ONLY_V3                                                            GRIDPC.9     
     &     ,ARFLUX,ASFLD,ACLD,RFLUX,SFLD,CLD                               GRIDPC.10    
*ENDIF                                                                     GRIDPC.11    
      REAL :: ASSBL(MGx,NHEM,JGy)                                          GRIDPC.12    
      REAL :: ASHBL(MGx,NHEM,JGy)                                          GRIDPC.13    
      REAL :: ASLBL(MGx,NHEM,JGy)                                          GRIDPC.14    
      REAL :: ARRCR(MGx,NHEM,JGy)                                          GRIDPC.15    
      REAL :: ARRLR(MGx,NHEM,JGy)                                          GRIDPC.16    
      REAL :: TTVD(MGx,NHEM,NL)                                            GRIDPC.17    
      REAL :: QTVD(MGx,NHEM,NL)                                            GRIDPC.18    
      REAL :: TYBL(MGx,NHEM)                                               GRIDPC.19    
      REAL :: TXBL(MGx,NHEM)                                               GRIDPC.20    
      REAL :: TTRD(MGx,NHEM,NL)                                            GRIDPC.21    
      REAL :: TTLR(MGx,NHEM,NL)                                            GRIDPC.22    
      REAL :: TTCR(MGx,NHEM,NL)                                            GRIDPC.23    
      REAL :: UTVD(MGx,NHEM,NL)                                            GRIDPC.24    
      REAL :: VTVD(MGx,NHEM,NL)                                            GRIDPC.25    
      REAL :: QTLR(MGx,NHEM,NL)                                            GRIDPC.26    
      REAL :: QTCR(MGx,NHEM,NL)                                            GRIDPC.27    
      REAL :: SSBL(MGx,NHEM,JGy)                                           GRIDPC.28    
      REAL :: SHBL(MGx,NHEM,JGy)                                           GRIDPC.29    
      REAL :: SLBL(MGx,NHEM,JGy)                                           GRIDPC.30    
      REAL :: RRCR(MGx,NHEM,JGy)                                           GRIDPC.31    
      REAL :: RRLR(MGx,NHEM,JGy)                                           GRIDPC.32    
*IF DEF,ONLY_V3                                                            GRIDPC.33    
      REAL :: arflux(MGx,NHEM,JGy,6)                                       GRIDPC.34    
      REAL :: asfld(MGx,NHEM,JGy,6)                                        GRIDPC.35    
      REAL :: acld(MGx,NHEM,JGy,4)                                         GRIDPC.36    
      REAL :: rflux(MGx,NHEM,JGy,6)                                        GRIDPC.37    
      REAL :: sfld(MGx,NHEM,JGy,6)                                         GRIDPC.38    
      REAL :: cld(MGx,NHEM,JGy,4)                                          GRIDPC.39    
*ENDIF                                                                     GRIDPC.40    
*ENDIF                                                                     GRIDPC.41    
*COMDECK SPECTR                                                            SPECTR.1     
!-----------------------------------------------------                     SPECTR.2     
! Spectral coefficients. The meridional wavenumbers are divided            SPECTR.3     
! across the columns of PEs; the zonal wavenumbers are divided             SPECTR.4     
! across the row of PEs; the levels are complete.                          SPECTR.5     
!-----------------------------------------------------                     SPECTR.6     
      COMMON/SPECTR/Z,D,T,SP,GS,SPA,VP,DTE,TT                              SPECTR.7     
     &     ,DT,ZT                                                          SPECTR.8     
*IF DEF,ABOVE_V1                                                           SPECTR.9     
     &     ,TRA,TRAT                                                       SPECTR.10    
*ENDIF                                                                     SPECTR.11    
     &     ,ZMI,DMI,TMI,SPMI                                               SPECTR.12    
*IF DEF,ABOVE_V1                                                           SPECTR.13    
     &     ,TRAMI                                                          SPECTR.14    
*ENDIF                                                                     SPECTR.15    
! Vorticity coefficient                                                    SPECTR.16    
      COMPLEX :: Z(NNTx,MMTy,NHEM,NL)                                      SPECTR.17    
! Divergence coefficient                                                   SPECTR.18    
      COMPLEX :: D(NNTx,MMTy,NHEM,NL)                                      SPECTR.19    
! Temperature coefficient                                                  SPECTR.20    
      COMPLEX :: T(NNTx,MMTy,NHEM,NL)                                      SPECTR.21    
! Coeffecient for the log of surface pressure                              SPECTR.22    
      COMPLEX :: SP(NNTx,MMTy,NHEM)                                        SPECTR.23    
! Coefficient for geopotential                                             SPECTR.24    
      COMPLEX :: GS(NNTx,MMTy,NHEM)                                        SPECTR.25    
! Coefficient for surface pressure                                         SPECTR.26    
      COMPLEX :: SPA(NNTx,MMTy,NHEM)                                       SPECTR.27    
! Non-linear source term for log of surface pressure equation              SPECTR.28    
      COMPLEX :: VP(NNTx,MMTy,NHEM)                                        SPECTR.29    
! Energy term                                                              SPECTR.30    
      COMPLEX :: DTE(NNTx,MMTy,NHEM,NL)                                    SPECTR.31    
! Coefficient of source term for temperature equation                      SPECTR.32    
      COMPLEX :: TT(NNTx,MMTy,NHEM,NL)                                     SPECTR.33    
! Coefficient of source term for divergence equation                       SPECTR.34    
      COMPLEX :: DT(NNTx,MMTy,NHEM,NL)                                     SPECTR.35    
! Coefficient of source term for vorticity equation                        SPECTR.36    
      COMPLEX :: ZT(NNTx,MMTy,NHEM,NL)                                     SPECTR.37    
*IF DEF,ABOVE_V1                                                           SPECTR.38    
! Tracer coefficient                                                       SPECTR.39    
      COMPLEX :: TRA(NNTx,MMTy,NHEM,NL,NTRAC)                              SPECTR.40    
! Coefficient of source term for tracers                                   SPECTR.41    
      COMPLEX :: TRAT(NNTx,MMTy,NHEM,NL,NTRAC)                             SPECTR.42    
*ENDIF                                                                     SPECTR.43    
! Vorticity coefficient at previous timestep                               SPECTR.44    
      COMPLEX :: ZMI(NNTx,MMTy,NHEM,NL)                                    SPECTR.45    
! Divergence coefficient at previous timestep                              SPECTR.46    
      COMPLEX :: DMI(NNTx,MMTy,NHEM,NL)                                    SPECTR.47    
! Temperature coefficient at previous timestep                             SPECTR.48    
      COMPLEX :: TMI(NNTx,MMTy,NHEM,NL)                                    SPECTR.49    
! Coeffecient for the log of surface pressure at prev' timestep            SPECTR.50    
      COMPLEX :: SPMI(NNTx,MMTy,NHEM)                                      SPECTR.51    
*IF DEF,ABOVE_V1                                                           SPECTR.52    
! Tracer coefficient at previous timestep                                  SPECTR.53    
      COMPLEX :: TRAMI(NNTx,MMTy,NHEM,NL,NTRAC)                            SPECTR.54    
*ENDIF                                                                     SPECTR.55    
*COMDECK SPECTR2                                                           SPECTR2.1     
!-----------------------------------------------------                     SPECTR2.2     
! Like the variables in SPECTR but the meridional wavenumbers              SPECTR2.3     
! are complete instead of the levels.                                      SPECTR2.4     
!-----------------------------------------------------                     SPECTR2.5     
*IF DEF,NOMPI                                                              SPECTR2.6     
      COMMON/SPECTR/Z2,D2,T2,SP2,GS2,SPA2,VP2,DTE2,TT2,DT2,ZT2             SPECTR2.7     
*ELSE                                                                      SPECTR2.8     
      COMMON/SPECTR2/Z2,D2,T2,SP2,SPA2,VP2,DTE2,TT2,DT2,ZT2                SPECTR2.9     
*ENDIF                                                                     SPECTR2.10    
*IF DEF,ABOVE_V1                                                           SPECTR2.11    
     &     ,TRA2,TRAT2                                                     SPECTR2.12    
*ENDIF                                                                     SPECTR2.13    
! Vorticity coefficient                                                    SPECTR2.14    
      COMPLEX :: Z2(NNT,MMTy,NHEM,NLx)                                     SPECTR2.15    
! Divergence coefficient                                                   SPECTR2.16    
      COMPLEX :: D2(NNT,MMTy,NHEM,NLx)                                     SPECTR2.17    
! Temperature coefficient                                                  SPECTR2.18    
      COMPLEX :: T2(NNT,MMTy,NHEM,NLx)                                     SPECTR2.19    
! Coeffecient for the log of surface pressure                              SPECTR2.20    
      COMPLEX :: SP2(NNT,MMTy,NHEM)                                        SPECTR2.21    
*IF DEF,NOMPI                                                              SPECTR2.22    
      COMPLEX :: GS2(NNT,MMTy,NHEM)                                        SPECTR2.23    
*ENDIF                                                                     SPECTR2.24    
! Coefficient for surface pressure                                         SPECTR2.25    
      COMPLEX :: SPA2(NNT,MMTy,NHEM)                                       SPECTR2.26    
! Non-linear source term for log of surface pressure equation              SPECTR2.27    
      COMPLEX :: VP2(NNT,MMTy,NHEM)                                        SPECTR2.28    
! Energy term                                                              SPECTR2.29    
      COMPLEX :: DTE2(NNT,MMTy,NHEM,NLx)                                   SPECTR2.30    
! Coefficient of source term for temperature equation                      SPECTR2.31    
      COMPLEX :: TT2(NNT,MMTy,NHEM,NLx)                                    SPECTR2.32    
! Coefficient of source term for divergence equation                       SPECTR2.33    
      COMPLEX :: DT2(NNT,MMTy,NHEM,NLx)                                    SPECTR2.34    
! Coefficient of source term for vorticity equation                        SPECTR2.35    
      COMPLEX :: ZT2(NNT,MMTy,NHEM,NLx)                                    SPECTR2.36    
*IF DEF,ABOVE_V1                                                           SPECTR2.37    
! Tracer coefficient                                                       SPECTR2.38    
      COMPLEX :: TRA2(NNT,MMTy,NHEM,NLx,NTRAC)                             SPECTR2.39    
! Coefficient of source term for tracers                                   SPECTR2.40    
      COMPLEX :: TRAT2(NNT,MMTy,NHEM,NLx,NTRAC)                            SPECTR2.41    
*ENDIF                                                                     SPECTR2.42    
*COMDECK COMGRM                                                            COMGRM.1     
*IF DEF,ABOVE_V1                                                           COMGRM.2     
!-----------------------------------------------------                     COMGRM.3     
! Vertical derivative arrays for interpolation                             COMGRM.4     
!-----------------------------------------------------                     COMGRM.5     
      COMMON/COMGRM/DUDLSG,DVDLSG,DTDLSG                                   COMGRM.6     
*IF DEF,NOMPI                                                              COMGRM.7     
      REAL :: DUDLSG(MGPP,NHEM,NL)                                         COMGRM.8     
      REAL :: DVDLSG(MGPP,NHEM,NL)                                         COMGRM.9     
      REAL :: DTDLSG(MGPP,NHEM,NL)                                         COMGRM.10    
*ELSE                                                                      COMGRM.11    
      REAL :: DUDLSG(MGx,NHEM,NL)                                          COMGRM.12    
      REAL :: DVDLSG(MGx,NHEM,NL)                                          COMGRM.13    
      REAL :: DTDLSG(MGx,NHEM,NL)                                          COMGRM.14    
*ENDIF                                                                     COMGRM.15    
*ENDIF                                                                     COMGRM.16    
*COMDECK PHYSCA                                                            PHYSCA.1     
*IF DEF,ABOVE_V1                                                           PHYSCA.2     
!-----------------------------------------------------                     PHYSCA.3     
! Variables/arrays for the parametrizations                                PHYSCA.4     
!-----------------------------------------------------                     PHYSCA.5     
       COMMON/PHYS/LBL,LVD,LCR,LLR,LRD,LCUBM,LCBADJ                        PHYSCA.6     
     &     ,CD,DRAG,BLVAD,BLA,BLRH,BLVB                                    PHYSCA.7     
     &     ,AKVV,AKTV,AKQV,ESCONA,ESCONB,EPSIQ,CTQ,CCC                     PHYSCA.8     
     &     ,CCR,RCON,DTBUOY,TSLA,TSLB,TSLC,TSLD,CUT1,CUT2                  PHYSCA.9     
     &     ,NLCR,NCUTOP,CURHM,AKTC,AKQC,CUBMT,CBADJT,CBADJP                PHYSCA.10    
     &     ,NAVRD,NAVWT,DELT2C                                             PHYSCA.11    
     &     ,FRAD,SKAP,SK,FWS,CLR,FB                                        PHYSCA.12    
     &     ,TSTAR,QSTAR                                                    PHYSCA.13    
     &     ,TTDC,QTDC,TTMC,QTMC,TC,QC                                      PHYSCA.14    
     &     ,CTCR,CTLR                                                      PHYSCA.15    
*IF DEF,ONLY_V3                                                            PHYSCA.16    
     &     ,LSL,LOC,LNOICE,LOLDBL,LCOND,LNNSK                              PHYSCA.17    
     &     ,ctqi,sdsn,shcs,shcsp,shcsn,skse,sksn,slhf,sd1,sd2,sdw          PHYSCA.18    
     &     ,ssmc,sdsnd,sasnow,saice,shsstar,shsmax                         PHYSCA.19    
     &     ,SHCO,SHCI,ITSLL,ITSLO                                          PHYSCA.20    
     &     ,TSTARO,TDEEPO,smstar                                           PHYSCA.21    
     &     ,tdeep,hsnow,sqstar                                             PHYSCA.22    
     &     ,SALB,SBAL,BLCD,SVEGE                                           PHYSCA.23    
     &      ,GWK,GWNO                                                      GRAVDMOD.18    
      REAL :: GWK,GWNO                                                     GRAVDMOD.19    
*ENDIF                                                                     PHYSCA.24    
      LOGICAL :: LBL,LVD,LCR,LLR,LRD,LCUBM,LCBADJ                          PHYSCA.25    
      REAL :: CD,DRAG,BLVAD,BLA,BLRH                                       PHYSCA.26    
      REAL :: BLVB(MGx,NHEM)                                               PHYSCA.27    
      REAL :: AKVV,AKTV,AKQV,ESCONA,ESCONB,EPSIQ,CTQ,CCC                   PHYSCA.28    
      REAL :: CCR,RCON,DTBUOY,TSLA,TSLB,TSLC,TSLD,CUT1,CUT2                PHYSCA.29    
      INTEGER :: NLCR,NCUTOP                                               PHYSCA.30    
      REAL :: CURHM,AKTC,AKQC,CUBMT,CBADJT,CBADJP                          PHYSCA.31    
      INTEGER :: NAVRD,NAVWT                                               PHYSCA.32    
      REAL :: DELT2C                                                       PHYSCA.33    
*IF DEF,ONLY_V2                                                            PHYSCA.34    
      REAL :: TSTAR(JGy,NHEM)                                              PHYSCA.35    
      REAL :: QSTAR(JGy,NHEM)                                              PHYSCA.36    
*ELSE                                                                      PHYSCA.37    
      REAL :: TSTAR(MGx,NHEM,JGy)                                          PHYSCA.38    
      REAL :: QSTAR(MGx,NHEM,JGy)                                          PHYSCA.39    
*ENDIF                                                                     PHYSCA.40    
      REAL :: FRAD(JGy,NHEM)                                               PHYSCA.41    
      REAL :: SKAP(NL)                                                     PHYSCA.42    
      REAL :: SK(NL-1),FWS(NL),CLR(NL),FB(NL-1)                            PHYSCA.43    
      REAL :: TTDC(NL),QTDC(NL),TTMC(NL),QTMC(NL),TC(NL),QC(NL)            PHYSCA.44    
      REAL :: CTCR(NL,NHEM),CTLR(NL,NHEM)                                  PHYSCA.45    
*IF DEF,ONLY_V3                                                            PHYSCA.46    
      LOGICAL :: LSL,LOC, LNOICE,LOLDBL,LCOND,LNNSK                        PHYSCA.47    
      REAL :: ctqi,sdsn,shcs,shcsp,shcsn,skse,sksn,slhf,sd1,sd2,sdw        PHYSCA.48    
      REAL :: ssmc,sdsnd,sasnow,saice,shsstar,shsmax                       PHYSCA.49    
      REAL :: SHCO,SHCI                                                    PHYSCA.50    
      INTEGER :: ITSLL,ITSLO                                               PHYSCA.51    
      REAL :: TSTARO(MGx,NHEM,JGy)                                         PHYSCA.52    
      REAL :: TDEEPO(MGx,NHEM,JGy)                                         PHYSCA.53    
      REAL :: smstar(MGx,NHEM,JGy)                                         PHYSCA.54    
      REAL :: tdeep(MGx,NHEM,JGy)                                          PHYSCA.55    
      REAL :: hsnow(MGx,NHEM,JGy)                                          PHYSCA.56    
      REAL :: sqstar(MGx,NHEM,JGy)                                         PHYSCA.57    
      REAL :: SALB(MGx,NHEM,JGy)                                           PHYSCA.58    
      REAL :: SBAL(MGx,NHEM,JGy)                                           PHYSCA.59    
      REAL :: BLCD(MGx,NHEM)                                               PHYSCA.60    
      REAL :: SVEGE(MGx,NHEM,JGy)                                          PHYSCA.61    
*ENDIF                                                                     PHYSCA.62    
*ENDIF                                                                     PHYSCA.63    
*COMDECK PTENDZ                                                            PTENDZ.1     
*IF DEF,ABOVE_V1                                                           PTENDZ.2     
!-----------------------------------------------------                     PTENDZ.3     
! Stores diagnostic data                                                   PTENDZ.4     
!-----------------------------------------------------                     PTENDZ.5     
      COMMON/PTENDZ/UTVDZ,VTVDZ,TTVDZ,QTVDZ,TTCRZ,QTCRZ                    PTENDZ.6     
     &     ,TTLRZ,QTLRZ,TTRDZ,CTCRZ,CTLRZ                                  PTENDZ.7     
     &     ,UTBLZ,VTBLZ,TTBLZ,QTBLZ                                        PTENDZ.8     
     &     ,AUTVDZ,AVTVDZ,ATTVDZ,AQTVDZ,ATTCRZ,AQTCRZ                      PTENDZ.9     
     &     ,ATTLRZ,AQTLRZ,ATTRDZ,ACTCRZ,ACTLRZ                             PTENDZ.10    
     &     ,AUTBLZ,AVTBLZ,ATTBLZ,AQTBLZ                                    PTENDZ.11    
      REAL :: UTVDZ(JGy,NHEM,NL)                                           PTENDZ.12    
      REAL :: VTVDZ(JGy,NHEM,NL)                                           PTENDZ.13    
      REAL :: TTVDZ(JGy,NHEM,NL)                                           PTENDZ.14    
      REAL :: QTVDZ(JGy,NHEM,NL)                                           PTENDZ.15    
      REAL :: TTCRZ(JGy,NHEM,NL)                                           PTENDZ.16    
      REAL :: QTCRZ(JGy,NHEM,NL)                                           PTENDZ.17    
      REAL :: TTLRZ(JGy,NHEM,NL)                                           PTENDZ.18    
      REAL :: QTLRZ(JGy,NHEM,NL)                                           PTENDZ.19    
      REAL :: TTRDZ(JGy,NHEM,NL)                                           PTENDZ.20    
      REAL :: CTCRZ(JGy,NHEM,NL)                                           PTENDZ.21    
      REAL :: CTLRZ(JGy,NHEM,NL)                                           PTENDZ.22    
      REAL :: UTBLZ(JGy,NHEM)                                              PTENDZ.23    
      REAL :: VTBLZ(JGy,NHEM)                                              PTENDZ.24    
      REAL :: TTBLZ(JGy,NHEM)                                              PTENDZ.25    
      REAL :: QTBLZ(JGy,NHEM)                                              PTENDZ.26    
! Variables below are for storing averages of the variables above          PTENDZ.27    
      REAL :: AUTVDZ(JGy,NHEM,NL)                                          PTENDZ.28    
      REAL :: AVTVDZ(JGy,NHEM,NL)                                          PTENDZ.29    
      REAL :: ATTVDZ(JGy,NHEM,NL)                                          PTENDZ.30    
      REAL :: AQTVDZ(JGy,NHEM,NL)                                          PTENDZ.31    
      REAL :: ATTCRZ(JGy,NHEM,NL)                                          PTENDZ.32    
      REAL :: AQTCRZ(JGy,NHEM,NL)                                          PTENDZ.33    
      REAL :: ATTLRZ(JGy,NHEM,NL)                                          PTENDZ.34    
      REAL :: AQTLRZ(JGy,NHEM,NL)                                          PTENDZ.35    
      REAL :: ATTRDZ(JGy,NHEM,NL)                                          PTENDZ.36    
      REAL :: ACTCRZ(JGy,NHEM,NL)                                          PTENDZ.37    
      REAL :: ACTLRZ(JGy,NHEM,NL)                                          PTENDZ.38    
      REAL :: AUTBLZ(JGy,NHEM)                                             PTENDZ.39    
      REAL :: AVTBLZ(JGy,NHEM)                                             PTENDZ.40    
      REAL :: ATTBLZ(JGy,NHEM)                                             PTENDZ.41    
      REAL :: AQTBLZ(JGy,NHEM)                                             PTENDZ.42    
*ENDIF                                                                     PTENDZ.43    
*COMDECK CPIERS                                                            CPIERS.1     
*IF DEF,ONLY_V3                                                            CPIERS.2     
!-----------------------------------------------------                     CPIERS.3     
! Radiation variables                                                      CPIERS.4     
!-----------------------------------------------------                     CPIERS.5     
      COMMON/CPIERS/ICFLAG,CFRAC,PNET,SNET,RRFLUX,TTSW,TTLW                CPIERS.6     
      INTEGER :: ICFLAG(MGx,NHEM,5,2)                                      CPIERS.7     
      REAL :: CFRAC(MGx,NHEM,5)                                            CPIERS.8     
      REAL :: PNET(MGx,NHEM,JGy)                                           CPIERS.9     
      REAL :: SNET(MGx,NHEM,JGy)                                           CPIERS.10    
      REAL :: RRFLUX(MGx,NHEM,JGy,6)                                       CPIERS.11    
      REAL :: TTSW(MGx,NHEM,NL)                                            CPIERS.12    
      REAL :: TTLW(MGx,NHEM,NL)                                            CPIERS.13    
*ENDIF                                                                     CPIERS.14    
*COMDECK OROG_G                                                            OROG_G.1     
*IF DEF,ONLY_V3                                                            OROG_G.2     
!-----------------------------------------------------                     OROG_G.3     
! Orogrophy                                                                OROG_G.4     
!-----------------------------------------------------                     OROG_G.5     
      COMMON/GSG/GSG,TOPVAR,RLEVBZMO,FXZMO,ofrac,runoff,iareanum           OAS_COMTILE.109   
! Topog variance, GW diags for Orog, Non orog waves                        OAS_COMTILE.110   
      REAL :: TOPVAR(MGx,NHEM,JGy)                                         OAS_COMTILE.111   
      REAL :: RLEVBZMO(JGy,NHEM,NL)                                        OAS_COMTILE.112   
      REAL :: FXZMO(JGy,NHEM,NL)                                           OAS_COMTILE.113   
         REAL :: GSG(MGx,NHEM,JGy)                                         OAS_COMTILE.114   
         REAL :: ofrac(MGx,NHEM,JGy)                                       OAS_COMTILE.115   
         INTEGER :: runoff(50,2,33)                                        OAS_COMTILE.116   
         INTEGER :: iareanum                                               OAS_COMTILE.117   
*ENDIF                                                                     OROG_G.8     
*COMDECK QSTABS                                                            QSTABS.1     
*IF DEF,ONLY_V3                                                            QSTABS.2     
!-----------------------------------------------------                     QSTABS.3     
! Used for PQSAT function                                                  QSTABS.4     
!-----------------------------------------------------                     QSTABS.5     
      INTEGER, PARAMETER :: NQSTAB=50000                                   QSTABS.6     
      COMMON /QSTABS/ PQSVAL                                               QSTABS.7     
      REAL :: PQSVAL(NQSTAB)                                               QSTABS.8     
*ENDIF                                                                     QSTABS.9     
*COMDECK RADHT                                                             RADHT.1     
*IF DEF,ONLY_V3                                                            RADHT.2     
!-----------------------------------------------------                     RADHT.3     
! Radiation variables                                                      RADHT.4     
!-----------------------------------------------------                     RADHT.5     
      COMMON /RADHT/HTNET,TAVE                                             RADHT.6     
      REAL :: HTNET(NHEM,JGy,MGx,NL)                                       RADHT.7     
      COMPLEX :: TAVE(NNTx,MMTy,NHEM,NL)                                   RADHT.8     
*ENDIF                                                                     RADHT.9     
*COMDECK PARRAY                                                            PARRAY.1     
*IF DEF,ONLY_V3                                                            PARRAY.2     
!-----------------------------------------------------                     PARRAY.3     
! In this part of the code the user can set the dimensions of arrays       PARRAY.4     
! used for the calculations, by setting the values in the paramter         PARRAY.5     
! statements                                                               PARRAY.6     
!-----------------------------------------------------                     PARRAY.7     
! Maximum number of levels in the atmosphere (not including                PARRAY.10    
! the surface)                                                             PARRAY.11    
      INTEGER, PARAMETER :: MXLEV=22                                       PARRAY.12    
! Maximum number of spectral bands (not including the whole                PARRAY.13    
! spectrum, 0-3000cm-1)                                                    PARRAY.14    
      INTEGER, PARAMETER :: MXBAND=9                                       PARRAY.15    
! Maximum number of cloud types                                            PARRAY.16    
      INTEGER, PARAMETER :: MXCL=3                                         PARRAY.17    
*ENDIF                                                                     PARRAY.18    
*COMDECK STATS                                                             STATS.1     
*IF DEF,ABOVE_V1                                                           STATS.2     
!-----------------------------------------------------                     STATS.3     
!                                                                          STATS.4     
!-----------------------------------------------------                     STATS.5     
      COMMON/STATS/GMSP0,GMSPMI,LMASCOR,LMASOLD,LMASPRT                    STATS.6     
      LOGICAL :: LMASCOR,LMASOLD,LMASPRT                                   STATS.7     
      REAL :: GMSP0,GMSPMI                                                 STATS.8     
*ENDIF                                                                     STATS.9     
*COMDECK MPIDECK                                                           MPIDECK.1     
*IF DEF,NOMPI                                                              MPIDECK.2     
!-----------------------------------------------------                     MPIDECK.3     
! No mpi, single processor run. Define some variables, so code             MPIDECK.4     
! will compile                                                             MPIDECK.5     
!-----------------------------------------------------                     MPIDECK.6     
      INTEGER :: MPI_COMM_WORLD                                            MPIDECK.7     
      INTEGER, PARAMETER :: MPI_REAL8=-999                                 MPIDECK.8     
      INTEGER, PARAMETER :: MPI_REAL4=-999                                 MPIDECK.9     
      INTEGER, PARAMETER :: MPI_INTEGER8=-999                              MPIDECK.10    
      INTEGER, PARAMETER :: MPI_INTEGER4=-999                              MPIDECK.11    
      INTEGER, PARAMETER :: MPI_COMPLEX16=-999                             MPIDECK.12    
      INTEGER, PARAMETER :: MPI_LOGICAL=-999                               MPIDECK.13    
      INTEGER, PARAMETER :: MPI_SUM=-999                                   MPIDECK.14    
      INTEGER, PARAMETER :: MPI_MAX=-999                                   MPIDECK.15    
      INTEGER, PARAMETER :: MPI_MIN=-999                                   MPIDECK.16    
      INTEGER, PARAMETER :: MPI_BSEND_OVERHEAD=-999                        MPIDECK.17    
      INTEGER, PARAMETER :: MPI_STATUS_SIZE=1                              MPIDECK.18    
*ELSE                                                                      MPIDECK.19    
!-----------------------------------------------------                     MPIDECK.20    
! Include the mpi header file                                              MPIDECK.21    
!-----------------------------------------------------                     MPIDECK.22    
       INCLUDE 'mpif.h'                                                    MISC_COMMON.7     
*ENDIF                                                                     MPIDECK.24    
!-----------------------------------------------------                     MPIDECK.25    
! Data types to be sent through MPI routines                               MPIDECK.26    
!-----------------------------------------------------                     MPIDECK.27    
! MPI variables must be double precision                                   MPIDECK.28    
!      INTEGER, PARAMETER :: Type = SELECTED_REAL_KIND(15, 307)            MISC_COMMON.8     
      INTEGER, PARAMETER :: Type = SELECTED_REAL_KIND(6, 30)               MISC_COMMON.9     
! MPI type for the real numbers in this program                            MPIDECK.30    
      INTEGER(KIND=Type), PARAMETER :: ParaReal=MPI_REAL8                  MPIDECK.31    
! MPI type for the integer numbers in this program                         MPIDECK.32    
!      INTEGER(KIND=Type), PARAMETER :: ParaInt=MPI_INTEGER8               MISC_COMMON.10    
      INTEGER(KIND=Type), PARAMETER :: ParaInt=MPI_INTEGER                 MISC_COMMON.11    
! MPI type for the integer numbers in this program                         MPIDECK.34    
!      INTEGER(KIND=Type), PARAMETER :: ParaCom=MPI_COMPLEX16              MISC_COMMON.12    
      INTEGER(KIND=Type), PARAMETER :: ParaCom=MPI_DOUBLE_COMPLEX          MISC_COMMON.13    
! MPI type for the logical numbers in this program                         MPIDECK.36    
!      INTEGER(KIND=Type), PARAMETER :: ParaLog=MPI_INTEGER8               MISC_COMMON.14    
      INTEGER(KIND=Type), PARAMETER :: ParaLog=MPI_LOGICAL                 MISC_COMMON.15    
! MPI type for summing over all PEs                                        MPIDECK.38    
      INTEGER(KIND=Type), PARAMETER :: ParaSum=MPI_SUM                     MPIDECK.39    
! MPI type for taking the maximum value over all PEs                       MPIDECK.40    
      INTEGER(KIND=Type), PARAMETER :: ParaMax=MPI_MAX                     MPIDECK.41    
! MPI type for taking the minimum value over all PEs                       MPIDECK.42    
      INTEGER(KIND=Type), PARAMETER :: ParaMin=MPI_MIN                     MPIDECK.43    
!-----------------------------------------------------                     MPIDECK.44    
! Variables used in MPI routines                                           MPIDECK.45    
!-----------------------------------------------------                     MPIDECK.46    
! Size of buffer                                                           MPIDECK.47    
      INTEGER(KIND=Type) :: nBuffSize                                      MPIDECK.48    
! PE which sent the information                                            MPIDECK.49    
      INTEGER(KIND=Type) :: iSend                                          MPIDECK.50    
! PE which will want the information                                       MPIDECK.51    
      INTEGER(KIND=Type) :: iRecv                                          MPIDECK.52    
! Tag for sending messages                                                 MPIDECK.53    
      INTEGER(KIND=Type) :: iTag                                           MPIDECK.54    
! Record errors                                                            MPIDECK.55    
      INTEGER(KIND=Type) :: ierr                                           MPIDECK.56    
      INTEGER(KIND=Type) :: istat(MPI_STATUS_SIZE)                         MPIDECK.57    
!-----------------------------------------------------                     MPIDECK.58    
! The actual size of these variables on this PE                            MPIDECK.59    
!-----------------------------------------------------                     MPIDECK.60    
      COMMON/MPIVARS/MyPe,iCol,iRow,GRID,PeGrid,                           MPIDECK.61    
     &     MMTyy,NNTxx,NLxx,MGxx,JGyy,                                     MPIDECK.62    
     &     II1,JJ1,KK1,MMT1,NNT1,                                          MPIDECK.63    
     &     mTwin1,mTwin2,mWave,nWave,CoefConv                              MPIDECK.64    
! Processor element (PE) number                                            MPIDECK.65    
      INTEGER :: MyPe                                                      MPIDECK.66    
! Identifies the column this PE is on                                      MPIDECK.67    
      INTEGER :: iCol                                                      MPIDECK.68    
! Identifies the row this PE is on                                         MPIDECK.69    
      INTEGER :: iRow                                                      MPIDECK.70    
! Store column and row for each PE                                         MPIDECK.71    
      INTEGER :: GRID(2,0:NPE-1)                                           MPIDECK.72    
! Provies the PE for given column and row                                  MPIDECK.73    
      INTEGER :: PeGrid(Px,Py)                                             MPIDECK.74    
! The number of twinned zonal wavenumbers per row of PEs                   MPIDECK.75    
      INTEGER :: MMTyy(Py)                                                 MPIDECK.76    
! The number of meridional wavenumbers per column of PEs                   MPIDECK.77    
      INTEGER :: NNTxx(Px)                                                 MPIDECK.78    
! The number of levels per column of PEs                                   MPIDECK.79    
      INTEGER :: NLxx(Px)                                                  MPIDECK.80    
! The number of longitude per column of PEs                                MPIDECK.81    
      INTEGER :: MGxx(Px)                                                  MPIDECK.82    
! The number of latitude per row of PEs                                    MPIDECK.83    
      INTEGER :: JGyy(Py)                                                  MPIDECK.84    
! Starting position for longitude for each column of PEs                   MPIDECK.85    
      INTEGER :: II1(Px)                                                   MPIDECK.86    
! Starting position for latitude for each row of PEs                       MPIDECK.87    
      INTEGER :: JJ1(Py)                                                   MPIDECK.88    
! Starting position for levels for each column of PEs                      MPIDECK.89    
      INTEGER :: KK1(Px)                                                   MPIDECK.90    
! Starting position for twinned zonal wavenumbers for each row of PEs      MPIDECK.91    
      INTEGER :: MMT1(Py)                                                  MPIDECK.92    
! Starting position for meridional wavenumber of each column of PEs        MPIDECK.93    
      INTEGER :: NNT1(Px)                                                  MPIDECK.94    
! mTwin1(0,:) = 2 (pair) or =1 (single); mTwin1(1,:) starting position     MPIDECK.95    
! - of 1st zonal wavenumber in pair; mTwin1(2,:) end position of 1st       MPIDECK.96    
! zonal wavenumber and mTwin(3,:) end position of 2nd zonal wavenumber     MPIDECK.97    
      INTEGER :: mTwin1(0:3,MMTy)                                          MPIDECK.98    
! mTwin2 is the same as mTwin1 except the twinned zonal wavenumbers are    MPIDECK.99    
! not split across PEs                                                     MPIDECK.100   
      INTEGER :: mTwin2(0:3,MMTy)                                          MPIDECK.101   
! The zonal wavenumber values                                              MPIDECK.102   
      INTEGER :: mWave(2,MMTy)                                             MPIDECK.103   
! The meridional wavenumber values                                         MPIDECK.104   
      INTEGER :: nWave(NNTx,MMTy,Px)                                       MPIDECK.105   
! Used to convert between the format for reading and writing               MPIDECK.106   
! coefficients and that for storage while running the code                 MPIDECK.107   
      INTEGER :: CoefConv(NNTx,MMTy,0:NPE-1)                               MPIDECK.108   
*COMDECK NOMPIVAR                                                          NOMPIVAR.1     
*IF DEF,NOMPI                                                              NOMPIVAR.2     
!-----------------------------------------------------                     NOMPIVAR.3     
! Define some variable to keep the compiler happy                          NOMPIVAR.4     
!-----------------------------------------------------                     NOMPIVAR.5     
! MPI variables must be single precision                                   NOMPIVAR.6     
      INTEGER, PARAMETER :: Type = SELECTED_REAL_KIND(6, 37)               NOMPIVAR.7     
! Size of buffer                                                           NOMPIVAR.8     
      INTEGER(KIND=Type) :: nBuffSize                                      NOMPIVAR.9     
! PE which sent the information                                            NOMPIVAR.10    
      INTEGER(KIND=Type) :: iSend                                          NOMPIVAR.11    
! PE which will want the information                                       NOMPIVAR.12    
      INTEGER(KIND=Type) :: iRecv                                          NOMPIVAR.13    
! Tag for sending messages                                                 NOMPIVAR.14    
      INTEGER(KIND=Type) :: iTag                                           NOMPIVAR.15    
! Record errors                                                            NOMPIVAR.16    
      INTEGER(KIND=Type) :: ierr                                           NOMPIVAR.17    
      INTEGER(KIND=Type) :: istat                                          NOMPIVAR.18    
      INTEGER(KIND=Type) :: ParaType                                       NOMPIVAR.19    
*ENDIF                                                                     NOMPIVAR.20    
*COMDECK ZPARB                                                             ZPARB.1     
C       ----------------------------------------------------------------   ZPARB.2     
C                                                                          ZPARB.3     
C*    COMMON *COMRSW* SWITCHES RELATED TO THE RADIATION SCHEME.            ZPARB.4     
C                                                                          ZPARB.5     
C       ----------------------------------------------------------------   ZPARB.6     
C                                                                          ZPARB.7     
      IMPLICIT REAL (A-H,O-Z)                                              ZPARB.8     
C      IMPLICIT UNDEFINED (Z)                                              ZPARB.9     
C      IMPLICIT LOGICAL (L)                                                ZPARB.10    
C      IMPLICIT UNDEFINED (L)                                              ZPARB.11    
      IMPLICIT INTEGER (I-K,M-N)                                           ZPARB.12    
C      IMPLICIT UNDEFINED (I-K,M-N)                                        ZPARB.13    
C      IMPLICIT REAL (P)                                                   ZPARB.14    
C      IMPLICIT UNDEFINED (A-H,O,Q-Y)                                      ZPARB.15    
C                                                                          ZPARB.16    
C everything except the parameters is defined                              ZPARB.17    
C in the common blocks                                                     ZPARB.18    
C                                                                          ZPARB.19    
      COMMON/COM1/                                                         ZPARB.20    
C     I NRADFR, NRPART, NRINT, NRADPFR, NRADPLA,                           ZPARB.21    
C     I NRLSTI,                                                            ZPARB.22    
     R XLAT,                                                               ZPARB.23    
     R RDCPD, CCCC, CFCT, CRHH, CRHM, CRHL, CCLWMR, ZCCO2,                 ZPARB.24    
C     R PSIG, PSCT, PCCO2, PCARDI, PTIM1, PTIM2, PTIM3,                    ZPARB.25    
     L LOH, LOM, LOL, LORAD                                                ZPARB.26    
      COMMON/COM2/                                                         ZPARB.27    
     I ISHIFT, JK, JKK, JL, JMM, IMM, IMNC, IMNS, JNN,                     ZPARB.28    
     I         JLOOP, KRLEV,                                               ZPARB.29    
     I        NLEV2, NSTEP, NSTART, NLEVM1, NLEV2P1, JB, IBC,              ZPARB.30    
     I        ITH, ITM, ITL,                                               ZPARB.31    
     I        IMAXC, JK1, KRLEV2, JK2, IMX1, IMX2, JKJ, JKJR,              ZPARB.32    
     I        JKJP, IG1, JK3, IXTX, MXIXT, JKIP1,                          ZPARB.33    
     I        JKI, JKP1, JKL, JKJPN, JI, JJ, JAE3, JJPN, IAE,              ZPARB.34    
     I        JAE1, JAE2, JC, JCP1, JNU, JA, IND1, IND2, IND3              ZPARB.35    
      COMMON/COM3/                                                         ZPARB.36    
     I IND4, KM12, KXD, KXU, IG, KBS, KDD,                                 ZPARB.37    
     I        NUAER, KMU, KN, KD1, NTRAER, KJP1, KD2, KM1,                 ZPARB.38    
     I        KJ, KU1, JLK, KU2, KTOPM, IMP, NOUT, IMXP1, IMXM1,           ZPARB.39    
     I        JKC, JCLOUD, JKCP1, JKM1, JKJ1, JKJ2, JK2M1, JKIJ,           ZPARB.40    
     I        JG, IABS, IAER, JKLP1, JAE, INU, JAJ, IWHERE, JABS,          ZPARB.41    
     I        JN, KREF, JAJP, JKKI, JN2J, JKKP4, JMN                       ZPARB.42    
      COMMON/COM4/                                                         ZPARB.43    
     R           COZQC,COZQS,COZHC,COZHS,                                  ZPARB.44    
     R CSUPSAT,                                                            ZPARB.45    
     R API,      A,        OMEGA,    G,                                    ZPARB.46    
     R CPD,      CPV,      RD,       RV,                                   ZPARB.47    
     R RCPD,     VTMPC1,   VTMPC2,                                         ZPARB.48    
     R RHOH2O,   ALV,      ALS,      ALF,      CLW,      TMELT,            ZPARB.49    
     R SOLC,     STBO,     DAYL,     YEARL,                                ZPARB.50    
     R C1ES,     C2ES,     C3LES,    C3IES,    C4LES,    C4IES,            ZPARB.51    
     R C5LES,   C5IES                                                      ZPARB.52    
      COMMON/COM5/                                                         ZPARB.53    
     I NM,       NN,       NK,       NGL,                                  ZPARB.54    
     I NTEMP2,   NMP1,     NNP1,     NKP1,     N2MP1,    N4MP1,            ZPARB.55    
     I NUMVC,                                                              ZPARB.56    
     I NED,      NOD,      NSP,      N2SP,     NHGL,                       ZPARB.57    
     I NSCAN,    NRESUM,                                                   ZPARB.58    
     I NFFT,     NFFTW,                                                    ZPARB.59    
     I NSPACE1,  NSPACE2,                                                  ZPARB.60    
     I NCBASE,   NTBASE,   NTIMST,                                         ZPARB.61    
     I NWRITE,   NWPTR,                                                    ZPARB.62    
     I NWLAG,                                                              ZPARB.63    
     I NPP,      NPPTR,                                                    ZPARB.64    
     I NPLAG,    NPPDATA,                                                  ZPARB.65    
     I NFRECS,   NGRECS,   NDRECS,                                         ZPARB.66    
     I NSTOP,    MAXROW                                                    ZPARB.67    
      COMMON/COM6/                                                         ZPARB.68    
     L LHIGCM,   LSCYCL,   LHFCLR,   LHFSAV,                               ZPARB.69    
     L LEND,     LDIFF1,   LINITER,  LDIFFRQ,  LWUNIN,   LWINIT,           ZPARB.70    
     L LDEBUG,   LSVPCTL,  LSSDFF,   LSSDGF,   LSSDIF,   LRESETP,          ZPARB.71    
     L LINTPP,   L2BUF,    LOWTIME,  LOPTIME,  LTSTATS,  LOCKLTD,          ZPARB.72    
     R DTIME,    TWODT,    EPS,                                            ZPARB.73    
     R SINLON,     COSLON,                                                 ZPARB.74    
     I NFFTD1,   NRFFTD1,  NFFTD2,   NRFFTD2,  NFFTD3,   NRFFTD3,          ZPARB.75    
     I NFFTD4,   NRFFTD4,                                                  ZPARB.76    
     I NFFTI1,   NRFFTI1,  NFFTI2,    NRFFTI2,                             ZPARB.77    
     I NFAX,                                                               ZPARB.78    
     R CRAE,                                                               ZPARB.79    
     R CDISSEM                                                             ZPARB.80    
      COMMON/COM7/                                                         ZPARB.81    
     R     CCRH,                                                           ZPARB.82    
     L LO,LO1,LO2,LODIA,LODIAP,                                            ZPARB.83    
     R TAUA, PIZA, CGA, CAER, CAEROS                                       ZPARB.84    
      COMMON/COM7A/                                                        ZPARB.85    
     R  RT1,WG1,AT,BT,CNTNU,O1H,O2H,PIALF0                                 ZPARB.86    
     S ,OCT,TREF,XP,TSTAND,GA,GB,CE,ETY,PTY                                ZPARB.87    
      COMMON/COM7B/                                                        ZPARB.88    
     S TINTP,TSTP,                                                         ZPARB.89    
     S  TBO3,AO3,BO3,TB,ALP,BET,ULG,ULGO,PLG,AP,BP,TO3B,O3A,O3B,           ZPARB.90    
     R          CDAY,CCO2,CH2O,DIFF,X10E                                   ZPARB.91    
       COMMON/COM7C/                                                       ZPARB.92    
     S  ZEELOG,ZEPSC,ZEPSCO,ZEPSCQ,ZEPSCT,ZEPSCW,                          ZPARB.93    
     R  APAD,BPAD,D,CRAY,SUN,                                              ZPARB.94    
     R   TTT,                                                              ZPARB.95    
     R   TM1                                                               ZPARB.96    
      COMMON/COM8/                                                         ZPARB.97    
     R       TSM1M,                                                        ZPARB.98    
     R       QM1,                                                          ZPARB.99    
     R       SNM1M,                                                        ZPARB.100   
     R       ALBM,                                                         ZPARB.101   
     R       AVVELM,                                                       ZPARB.102   
     R   SLMM,                                                             ZPARB.103   
     R       APHM1,                                                        ZPARB.104   
     R       APM1                                                          ZPARB.105   
      COMMON/COM9/                                                         ZPARB.106   
     L LOLAND,                                                             ZPARB.107   
     R   ZTI,                                                              ZPARB.108   
     *       ZCTI,                                                         ZPARB.109   
     *       ZCPH,                                                         ZPARB.110   
     *       ZWV,                                                          ZPARB.111   
     *       ZSW,                                                          ZPARB.112   
     *       ZALTE,                                                        ZPARB.113   
     *       ZCALTE,                                                       ZPARB.114   
     *       ZALSO                                                         ZPARB.115   
      COMMON/COM10/                                                        ZPARB.116   
     *       ZCALSO,                                                       ZPARB.117   
     R   ZOZQ,                                                             ZPARB.118   
     *       ZOZH,                                                         ZPARB.119   
     R   ZTRSOL,                                                           ZPARB.120   
     *       ZEMTER,                                                       ZPARB.121   
     R   TRSOLM,                                                           ZPARB.122   
     *       EMTERM,                                                       ZPARB.123   
     R   AMU0,                                                             ZPARB.124   
     *       RDAYL                                                         ZPARB.125   
      COMMON/COM11/                                                        ZPARB.126   
     R   CLC,                                                              ZPARB.127   
     *       TI,                                                           ZPARB.128   
     *       DP,                                                           ZPARB.129   
     *       AADS,                                                         ZPARB.130   
     *       AEQ1,                                                         ZPARB.131   
     *       AEQ2,                                                         ZPARB.132   
     *       AEQ3,                                                         ZPARB.133   
     *       AEQ4,                                                         ZPARB.134   
     *       AEQ5,                                                         ZPARB.135   
     *       SSW                                                           ZPARB.136   
      COMMON/COM12/                                                        ZPARB.137   
     *       WV,                                                           ZPARB.138   
     *       QOF,                                                          ZPARB.139   
     *       QCF,                                                          ZPARB.140   
     *       CLWA,                                                         ZPARB.141   
     *       APRE,                                                         ZPARB.142   
     *       SMU0,                                                         ZPARB.143   
     *       ALTE,                                                         ZPARB.144   
     *       ALSO                                                          ZPARB.145   
      COMMON/COM13/                                                        ZPARB.146   
     R   ZDPO,                                                             ZPARB.147   
     *       ZQCFO,                                                        ZPARB.148   
     *       ZAEQSO,                                                       ZPARB.149   
     *       ZQOFO,                                                        ZPARB.150   
     *       ZDPN,                                                         ZPARB.151   
     *       ZQCFN,                                                        ZPARB.152   
     *       ZAEQSN,                                                       ZPARB.153   
     *       ZQOFN                                                         ZPARB.154   
      COMMON/COM14/                                                        ZPARB.155   
     R   FLT,                                                              ZPARB.156   
     *       FLS,                                                          ZPARB.157   
     R   DIAG,                                                             ZPARB.158   
     *       DIA1,                                                         ZPARB.159   
     *       ZDIAG,                                                        ZPARB.160   
     *       ZDIA1,                                                        ZPARB.161   
     *       ZDIA,                                                         ZPARB.162   
     *       ZDIAF,                                                        ZPARB.163   
     *       ZDIAT,                                                        ZPARB.164   
     R PGG                                                                 ZPARB.165   
      COMMON/COM15/                                                        ZPARB.166   
     #     PREF,                                                           ZPARB.167   
     #     PRE1,                                                           ZPARB.168   
     #     PRE2,                                                           ZPARB.169   
     #     PRMUZ,                                                          ZPARB.170   
     #     PTO1,                                                           ZPARB.171   
     #     PTR1,                                                           ZPARB.172   
     #     PTR2,                                                           ZPARB.173   
     #     PW,                                                             ZPARB.174   
     R     PALBSN                                                          ZPARB.175   
      COMMON/COM16/                                                        ZPARB.176   
     R ZABSCU,                                                             ZPARB.177   
     S     ZABSLY,                                                         ZPARB.178   
     S     ZADJD ,                                                         ZPARB.179   
     S     ZADJU ,                                                         ZPARB.180   
     S     ZBGND ,                                                         ZPARB.181   
     S     ZBINT ,                                                         ZPARB.182   
     S     ZBSUR ,                                                         ZPARB.183   
     S     ZBSUIN,                                                         ZPARB.184   
     S     ZBTOP ,                                                         ZPARB.185   
     S     PCLDLW,                                                         ZPARB.186   
     S     ZCLOUD,                                                         ZPARB.187   
     S     ZCNTRB,                                                         ZPARB.188   
     S     ZCUMP ,                                                         ZPARB.189   
     S     ZCUMPT,                                                         ZPARB.190   
     S     ZDBDT                                                           ZPARB.191   
      COMMON/COM17/                                                        ZPARB.192   
     S     ZDBSL ,                                                         ZPARB.193   
     S     ZDISTD,                                                         ZPARB.194   
     S     ZDISTU,                                                         ZPARB.195   
     S     ZDNF  ,                                                         ZPARB.196   
     S     PDT0  ,                                                         ZPARB.197   
     S     ZDUC                                                            ZPARB.198   
      COMMON/COM18/                                                        ZPARB.199   
     S     ZEFFT ,                                                         ZPARB.200   
     S     ZEMU  ,                                                         ZPARB.201   
     S     ZEPHIO,                                                         ZPARB.202   
     S     ZEPSC2,                                                         ZPARB.203   
     S     ZEPSC3,                                                         ZPARB.204   
     S     ZEPSH1,                                                         ZPARB.205   
     S     ZEPSH2,                                                         ZPARB.206   
     S     ZEPSH3                                                          ZPARB.207   
      COMMON/COM19/                                                        ZPARB.208   
     S     ZEPSH4,                                                         ZPARB.209   
     S     ZEPSH5,                                                         ZPARB.210   
     S     ZEPSH6,                                                         ZPARB.211   
     S     ZEPSIO,                                                         ZPARB.212   
     S     ZFACTC,                                                         ZPARB.213   
     S     ZZFD  ,                                                         ZPARB.214   
     S     ZFDD  ,                                                         ZPARB.215   
     S     ZFDN                                                            ZPARB.216   
      COMMON/COM20/                                                        ZPARB.217   
     S     PFLUX , PFLUC,                                                  ZPARB.218   
     S     ZFLWP , PCTS                                                    ZPARB.219   
     S     ZZFU  ,                                                         ZPARB.220   
     S     ZFUP  ,                                                         ZPARB.221   
     S     ZGLAYD,                                                         ZPARB.222   
     S     ZGLAYU,                                                         ZPARB.223   
     S     ZOMEGA,                                                         ZPARB.224   
     S     ITX   ,                                                         ZPARB.225   
     S     IXDIA ,                                                         ZPARB.226   
     S     IXT   ,                                                         ZPARB.227   
     S     IXTSU ,                                                         ZPARB.228   
     S     IXTTP ,                                                         ZPARB.229   
     S     IMX   ,                                                         ZPARB.230   
     S     IMXP                                                            ZPARB.231   
      COMMON/COM21/                                                        ZPARB.232   
     R ZOZ   ,                                                             ZPARB.233   
     S     PPMB  ,                                                         ZPARB.234   
     S     ZRES  , PB                                                      ZPARB.235   
     S     ZSSIG ,                                                         ZPARB.236   
     S     PTAU  ,                                                         ZPARB.237   
     S     PTAVE ,                                                         ZPARB.238   
     S     ZTAVIC,                                                         ZPARB.239   
     S     ZTI1  ,                                                         ZPARB.240   
     S     PTL                                                             ZPARB.241   
      COMMON/COM22/                                                        ZPARB.242   
     S     ZTT   ,                                                         ZPARB.243   
     S     ZTT1  ,                                                         ZPARB.244   
     S     ZTT2  ,                                                         ZPARB.245   
     S     ZUAER ,                                                         ZPARB.246   
     S     ZUPF  ,                                                         ZPARB.247   
     S     ZUU   ,                                                         ZPARB.248   
     S     ZXD                                                             ZPARB.249   
      COMMON/COM23/                                                        ZPARB.250   
     S     ZXN   ,                                                         ZPARB.251   
     S     ZXOZ  ,                                                         ZPARB.252   
     S     ZXWV  ,                                                         ZPARB.253   
     S     ZZZ   ,                                                         ZPARB.254   
     S     ZRES2 ,                                                         ZPARB.255   
     S     ZTI2  ,                                                         ZPARB.256   
     S     ZBLAY ,                                                         ZPARB.257   
     S     ZBLEV ,                                                         ZPARB.258   
     S     ZCTS  ,                                                         ZPARB.259   
     S     ZHFG                                                            ZPARB.260   
      COMMON/COM24/                                                        ZPARB.261   
     I KT,                                                                 ZPARB.262   
     R    PUU   ,                                                          ZPARB.263   
     S        PTT   ,                                                      ZPARB.264   
     S        ZZ                                                           ZPARB.265   
     R  PCLFR  ,                                                           ZPARB.266   
     S      PT     ,                                                       ZPARB.267   
     S      PQOF   ,                                                       ZPARB.268   
     S      PQLWP  ,                                                       ZPARB.269   
     S      PEMIS  ,                                                       ZPARB.270   
     S      PFLT                                                           ZPARB.271   
      COMMON/COM25/                                                        ZPARB.272   
     R  ZALBSU,                                                            ZPARB.273   
     S      ZCG   ,                                                        ZPARB.274   
     S      ZCLDLW,                                                        ZPARB.275   
     S      ZCLDSW,                                                        ZPARB.276   
     S      ZCOOLR,                                                        ZPARB.277   
     S      ZDT0  ,                                                        ZPARB.278   
     S      ZEMD  ,                                                        ZPARB.279   
     S      ZFLUX ,                                                        ZPARB.280   
     S      ZPMB  ,                                                        ZPARB.281   
     S      ZTAU  ,                                                        ZPARB.282   
     S      ZTAVE ,                                                        ZPARB.283   
     S      ZTL   ,                                                        ZPARB.284   
     S      ZFSDWN                                                         ZPARB.285   
      COMMON/COM26/                                                        ZPARB.286   
     S      ZFSUP ,                                                        ZPARB.287   
     S      ZHEATR,                                                        ZPARB.288   
     R   PDP   ,                                                           ZPARB.289   
     S       PWV   ,                                                       ZPARB.290   
     S       PFLS  ,                                                       ZPARB.291   
     S       PPSOL ,                                                       ZPARB.292   
     S       PRMU0 ,                                                       ZPARB.293   
     S       PAER  ,                                                       ZPARB.294   
     S       PALBS ,                                                       ZPARB.295   
     S       PCG   ,                                                       ZPARB.296   
     S       PCLDSW,                                                       ZPARB.297   
     S       POMEGA,                                                       ZPARB.298   
     S       POZ                                                           ZPARB.299   
      COMMON/COM27/                                                        ZPARB.300   
     R   PFDOWN,                                                           ZPARB.301   
     S       PFUP  ,                                                       ZPARB.302   
     R   ZAKI  ,                                                           ZPARB.303   
     S       ZCGAZ ,                                                       ZPARB.304   
     S       ZCNEB ,                                                       ZPARB.305   
     S       ZC1I  ,                                                       ZPARB.306   
     S       ZDSC  ,                                                       ZPARB.307   
     S       ZDSH                                                          ZPARB.308   
      COMMON/COM28/                                                        ZPARB.309   
     S       ZDSIG ,                                                       ZPARB.310   
     S       ZFACT ,                                                       ZPARB.311   
     S       ZFACT1 ,                                                      ZPARB.312   
     S       ZFACT2 ,                                                      ZPARB.313   
     S       ZFACT3 ,                                                      ZPARB.314   
     S       ZFACT4 ,                                                      ZPARB.315   
     S       ZFACT5 ,                                                      ZPARB.316   
     S       ZFACT6 ,                                                      ZPARB.317   
     S       ZFD   ,                                                       ZPARB.318   
     S       ZFRAC ,                                                       ZPARB.319   
     S       ZFU   ,                                                       ZPARB.320   
     S       ZG    ,                                                       ZPARB.321   
     S       ZGG   ,                                                       ZPARB.322   
     S       ZPIZAZ                                                        ZPARB.323   
      COMMON/COM29/                                                        ZPARB.324   
     S       ZRAYL ,                                                       ZPARB.325   
     S       ZRAY1 ,                                                       ZPARB.326   
     S       ZRAY2 ,                                                       ZPARB.327   
     S       ZREF  ,                                                       ZPARB.328   
     S       ZREFZ ,                                                       ZPARB.329   
     S       ZRE1  ,                                                       ZPARB.330   
     S       ZRE2  ,                                                       ZPARB.331   
     S       ZRJ   ,                                                       ZPARB.332   
     S       ZRK   ,                                                       ZPARB.333   
     S       ZRL   ,                                                       ZPARB.334   
     S       ZRMU  ,                                                       ZPARB.335   
     S       ZRMUE ,                                                       ZPARB.336   
     S       ZRMUZ                                                         ZPARB.337   
      COMMON/COM30/                                                        ZPARB.338   
     S       ZRNEB ,                                                       ZPARB.339   
     S       ZRUEF ,                                                       ZPARB.340   
     S       ZR1   ,                                                       ZPARB.341   
     S       ZR2   ,                                                       ZPARB.342   
     S       ZR21  ,                                                       ZPARB.343   
     S       ZR22  ,                                                       ZPARB.344   
     S       ZR23  ,                                                       ZPARB.345   
     S       ZS    ,                                                       ZPARB.346   
     S       ZSEC  ,                                                       ZPARB.347   
     S       ZSS1  ,                                                       ZPARB.348   
     S       ZTAUAZ                                                        ZPARB.349   
      COMMON/COM31/                                                        ZPARB.350   
     S       ZTOT  ,                                                       ZPARB.351   
     S       ZTO1  ,                                                       ZPARB.352   
     S       ZTR   ,                                                       ZPARB.353   
     S       ZTRA1 ,                                                       ZPARB.354   
     S       ZTRA2 ,                                                       ZPARB.355   
     S       ZTR1                                                          ZPARB.356   
      COMMON/COM32/                                                        ZPARB.357   
     S       ZTR2  ,                                                       ZPARB.358   
     S       ZUD   ,                                                       ZPARB.359   
     S       ZUM   ,                                                       ZPARB.360   
     S       ZU1D  ,                                                       ZPARB.361   
     S       ZU2D  ,                                                       ZPARB.362   
     S       ZW    ,                                                       ZPARB.363   
     S       ZN175 ,                                                       ZPARB.364   
     S       ZN190 ,                                                       ZPARB.365   
     S       ZO175 ,                                                       ZPARB.366   
     S       ZO190 ,                                                       ZPARB.367   
     S       ZP75  ,                                                       ZPARB.368   
     S       ZP90  ,                                                       ZPARB.369   
     S       ZSIGN ,                                                       ZPARB.370   
     S       ZSIGO                                                         ZPARB.371   
      COMMON/COM33/                                                        ZPARB.372   
     R   PTR,                                                              ZPARB.373   
     S       PU,                                                           ZPARB.374   
     R   ZRH,                                                              ZPARB.375   
     *       ZCH,                                                          ZPARB.376   
     *       ZCM,                                                          ZPARB.377   
     *       ZCL,                                                          ZPARB.378   
     *       ZCT,                                                          ZPARB.379   
     *       ZCC,                                                          ZPARB.380   
     I NTOPCM                                                              ZPARB.381   
      COMMON/COM34/                                                        ZPARB.382   
     *        NBASECM,                                                     ZPARB.383   
     R   ARPRCM,                                                           ZPARB.384   
     I ITOPH,                                                              ZPARB.385   
     *        ITOPM,                                                       ZPARB.386   
     *        ITOPL,                                                       ZPARB.387   
     L LOC,                                                                ZPARB.388   
     R   ZQS,                                                              ZPARB.389   
     *       ZCLC,                                                         ZPARB.390   
     *       ZQLWP                                                         ZPARB.391   
      COMMON/COM35/                                                        ZPARB.392   
     R   VERVEL,                                                           ZPARB.393   
     *       ZTHETA,                                                       ZPARB.394   
     *       ZETA,                                                         ZPARB.395   
     *       ZDTHMIN,                                                      ZPARB.396   
     I INVB,                                                               ZPARB.397   
     R   ZCTLWP,                                                           ZPARB.398   
     *       ZQLOC,                                                        ZPARB.399   
     *       ZQMEC,                                                        ZPARB.400   
     *       ZQHIC,                                                        ZPARB.401   
     R   ZFSOT,                                                            ZPARB.402   
     #       ZFTET,                                                        ZPARB.403   
     #       ZFLT                                                          ZPARB.404   
      COMMON/COM36/                                                        ZPARB.405   
     #       ZFSO ,                                                        ZPARB.406   
     #       ZFTE ,                                                        ZPARB.407   
     #       ZFLB ,                                                        ZPARB.408   
     #       ZDTDT,                                                        ZPARB.409   
     #       HEATO,                                                        ZPARB.410   
     #       HEATE,                                                        ZPARB.411   
     #       HEATR,                                                        ZPARB.412   
     #       ZI0                                                           ZPARB.413   
C                                                                          ZPARB.414   
      INTEGER                                                              ZPARB.415   
C     I NRADFR,   NRPART,   NRINT,    NRLSTI,  NRADPFR,  NRADPLA,          ZPARB.416   
     I NRLST,    NRLEV,    NRLEVP1, NLEV, NLP2, NLEVP1,                    ZPARB.417   
     I NLON, IRLEV, NTRA, NLAT, ITIM, NUA, NINT, NRPARTI                   ZPARB.418   
C                                                                          ZPARB.419   
C   NRLEV .... number of vertical levels                                   ZPARB.420   
C   NRLST .... number of points on a latitude line                         ZPARB.421   
C   NUA   .... number of absorber amount                                   ZPARB.422   
C   NINT  .... number of spectral intervals                                ZPARB.423   
C   NTRA  .... number of transmission functions                            ZPARB.424   
C   NLAT  .... number of latitude points                                   ZPARB.425   
C   ITIM  .... number of month under consideration                         ZPARB.426   
C                                                                          ZPARB.427   
C      PARAMETER (NRLEV=122,NUA=34,NINT=6,NTRA=34, NLAT=1,                 ZPARB.428   
      PARAMETER (NRLEV=36,NUA=34,NINT=6,NTRA=34, NLAT=1,                   MISC_COMMON.4     
cccm      PARAMETER (NRLEV=37,NUA=18,NINT=6,NTRA=19, NLAT=1,               ZPARB.430   
cccm     #           NRLEVP1=NRLEV+1,NRLST=1,ITIM=10,NLEV=NRLEV,           ZPARB.431   
     #           NRLEVP1=NRLEV+1,NRLST=1,ITIM=7,NLEV=NRLEV,                ZPARB.432   
     #           NLP2=NRLST, NLEVP1=NRLEVP1, NLON=NRLST,                   ZPARB.433   
     #           NRPARTI=1)                                                ZPARB.434   
C                                                                          ZPARB.435   
      REAL YCLOCK, XLAT(NLAT), Z0, DZ, ALBMPAR, SNPAR,                     ZPARB.436   
     #     TSUPAR, CTFREEZ, DELTAC, DELTAO, DELTAH                         ZPARB.437   
C                                                                          ZPARB.438   
C   YTIME  .... time of the year in radians                                ZPARB.439   
C   YCLOCK .... time of the day in radians                                 ZPARB.440   
C   XLAT   .... latitudes in radians                                       ZPARB.441   
C   Z0     .... zero point of height grid                                  ZPARB.442   
C   DZ     .... Interval between height levels                             ZPARB.443   
C   ALBMPAR.... sw surface albedo as function of longitude:                ZPARB.444   
C           yearly averaged sea-ice: 0.55                                  ZPARB.445   
C                           water  : 0.07                                  ZPARB.446   
C                           land   : 0.07.lt.ALBM.lt.0.80                  ZPARB.447   
C                                    depending on snow                     ZPARB.448   
C   SNPAR  .... snow depth in meter                                        ZPARB.449   
C   TSUPAR .... surface temperature (Kelvin)                               ZPARB.450   
C   CTFREEZ.... freezing temperature of sea-water (Kelvin)                 ZPARB.451   
C   DELTAC .... Doppler parameter for line shapes of CO2                   ZPARB.452   
C   DELTAO .... Doppler parameter for line shapes of O3                    ZPARB.453   
C                                                                          ZPARB.454   
      PARAMETER (Z0=0., CTFREEZ=271.26,                                    ZPARB.455   
C     PARAMETER (YCLOCK=3.14159, Z0=0., TSUPAR=293.5, CTFREEZ=271.26,      ZPARB.456   
     #           DZ=0.289, ALBMPAR=0.2, SNPAR=0.,                          ZPARB.457   
cccm  PARAMETER (YCLOCK=3.14159, Z0=0., TSUPAR=293.5, CTFREEZ=271.26,      ZPARB.458   
cccm     #           DZ=0.15, ALBMPAR=0.3, SNPAR=0.,                       ZPARB.459   
CZ     #           DELTAC=0., DELTAO=0.)                                   ZPARB.460   
     #           DELTAC=6.0E-04, DELTAO=1.E-02, DELTAH=5.0E-04)            ZPARB.461   
C      PARAMETER (YCLOCK=0., Z0=0., TSUPAR=273., CTFREEZ=271.26,           ZPARB.462   
C     #           DZ=0.46875, ALBMPAR=0.07, SNPAR=0.)                      ZPARB.463   
C      PARAMETER (YCLOCK=0., Z0=2.608, TSUPAR=273., CTFREEZ=271.26,        ZPARB.464   
C     #           DZ=0.2878, ALBMPAR=0.07, SNPAR=0.)                       ZPARB.465   
C                                                                          ZPARB.466   
      LOGICAL LDIUR, LOLPAR                                                ZPARB.467   
C                                                                          ZPARB.468   
C   LDIUR .... true: sun at time, false: diurnally averaged                ZPARB.469   
C   LOLPAR.... true: land surface, false: else                             ZPARB.470   
C                                                                          ZPARB.471   
C      PARAMETER (LDIUR=.TRUE., LOLPAR=.TRUE.)                             ZPARB.472   
       PARAMETER (LOLPAR=.TRUE.)                                           ZPARB.473   
C                                                                          ZPARB.474   
      INTEGER  C2TEMP                                                      ZPARB.475   
      CHARACTER*64  MIDTMP                                                 ZPARB.476   
cccm      PARAMETER (C2TEMP=10,                                            ZPARB.477   
cccm     #    MIDTMP='/home/atm/ugamp/midrad/radfildat.dir/MIDTMP.DAT')    ZPARB.478   
ccc1      PARAMETER (C2TEMP=10, MIDTMP='tprfil2.dat')                      ZPARB.479   
C                                                                          ZPARB.480   
      INTEGER  IRLONI, IRLST, IRLVP1, JPNLEV, JPNLVP1                      ZPARB.481   
C                                                                          ZPARB.482   
      PARAMETER (IRLONI=NRLST, IRLST=NRLST,                                ZPARB.483   
     #           IRLVP1=NRLEVP1, JPNLEV=NRLEV,                             ZPARB.484   
     #           JPNLVP1=NRLEVP1, IRLEV=NRLEV)                             ZPARB.485   
C                                                                          ZPARB.486   
      INTEGER NIPD, NIPD2, NTR, NG1, NG1P1                                 ZPARB.487   
      PARAMETER(NIPD=8,NIPD2=16,NTR=11,NG1=2,NG1P1=3)                      ZPARB.488   
C                                                                          ZPARB.489   
C    definition of the functions                                           ZPARB.490   
C                                                                          ZPARB.491   
      REAL       CVMGT, SIGMA2                                             ZPARB.492   
      INTEGER    CVMGI                                                     ZPARB.493   
C                                                                          ZPARB.494   
C    definitons of the subroutine cloud                                    ZPARB.495   
C                                                                          ZPARB.496   
      REAL RDCPD, CCCC, CFCT, CRHH, CRHM, CRHL, CCLWMR                     ZPARB.497   
C                                                                          ZPARB.498   
C    missing definitions in morcrette                                      ZPARB.499   
C                                                                          ZPARB.500   
C      REAL   PSIG, PSCT, PCCO2, PCARDI, PTIM1, PTIM2, PTIM3               ZPARB.501   
      REAL ZCCO2                                                           ZPARB.502   
                                                                           ZPARB.503   
      LOGICAL LOH, LOM, LOL, LORAD                                         ZPARB.504   
C                                                                          ZPARB.505   
      INTEGER ISHIFT, JK, JKK, JL, JMM, IMM, IMNC, IMNS, JNN,              ZPARB.506   
     #        IZQS, IZCLC, IZQLWP, JLOOP, KRLEV,                           ZPARB.507   
     #        NLEV2, NSTEP, NSTART, NLEVM1, NLEV2P1, JB, IBC,              ZPARB.508   
     #        ITH, ITM, ITL,                                               ZPARB.509   
     #        IMAXC, JK1, KRLEV2, JK2, IMX1, IMX2, JKJ, JKJR,              ZPARB.510   
     #        JKJP, IG1, JK3, IXTX, MXIXT, JKIP1,                          ZPARB.511   
     #        JKI, JKP1, JKL, JKJPN, JI, JJ, JAE3, JJPN, IAE,              ZPARB.512   
     #        JAE1, JAE2, JC, JCP1, JNU, JA, IND1, IND2, IND3              ZPARB.513   
      INTEGER IND4, KM12, KXD, KXU, IG, KBS, KDD,                          ZPARB.514   
     #        NUAER, KMU, KN, KD1, NTRAER, KJP1, KD2, KM1,                 ZPARB.515   
     #        KJ, KU1, JLK, KU2, KTOPM, IMP, NOUT, IMXP1, IMXM1,           ZPARB.516   
     #        JKC, JCLOUD, JKCP1, JKM1, JKJ1, JKJ2, JK2M1, JKIJ,           ZPARB.517   
     #        JG, IABS, IAER, JKLP1, JAE, INU, JAJ, IWHERE, JABS,          ZPARB.518   
     #        JN, KREF, JAJP, JKKI, JN2J, JKKP4, JMN                       ZPARB.519   
C                                                                          ZPARB.520   
C       ----------------------------------------------------------------   ZPARB.521   
C                                                                          ZPARB.522   
C*    COMMON *COMRAD1* SPECTRAL DISTRIBUTION OF AEROSOLS AND OZONE.        ZPARB.523   
C                     (TRIANGULAR *T10* TRUNCATIONFOR AEROSOLS).           ZPARB.524   
C                     (TRIANGULAR *T5* TRUNCATIONFOR OZONE).               ZPARB.525   
C                                                                          ZPARB.526   
C       ----------------------------------------------------------------   ZPARB.527   
C                                                                          ZPARB.528   
      REAL                                                                 ZPARB.529   
     R           COZQC(21),COZQS(15),COZHC(21),COZHS(15)                   ZPARB.530   
C                                                                          ZPARB.531   
C                                                                          ZPARB.532   
C       ----------------------------------------------------------------   ZPARB.533   
C                                                                          ZPARB.534   
C*    COMMON *COMRAD2* CONSTANTS INTERNAL TO THE RADIATION SUBROUTINES.    ZPARB.535   
C                                                                          ZPARB.536   
C       ----------------------------------------------------------------   ZPARB.537   
C                                                                          ZPARB.538   
      REAL                                                                 ZPARB.539   
     R CSUPSAT                                                             ZPARB.540   
C                                                                          ZPARB.541   
C       ----------------------------------------------------------------   ZPARB.542   
C                                                                          ZPARB.543   
C*    COMMON *COMCON* BASIC UNIVERSAL CONSTANTS AND DERIVED CONSTANTS.     ZPARB.544   
C                                                                          ZPARB.545   
C       ----------------------------------------------------------------   ZPARB.546   
C                                                                          ZPARB.547   
      REAL                                                                 ZPARB.548   
     R API,      A,        OMEGA,    G,                                    ZPARB.549   
     R CPD,      CPV,      RD,       RV,                                   ZPARB.550   
     R RCPD,     VTMPC1,   VTMPC2,                                         ZPARB.551   
     R RHOH2O,   ALV,      ALS,      ALF,      CLW,      TMELT,            ZPARB.552   
     R SOLC,     STBO,     DAYL,     YEARL,                                ZPARB.553   
     R C1ES,     C2ES,     C3LES,    C3IES,    C4LES,    C4IES,            ZPARB.554   
     R C5LES,   C5IES                                                      ZPARB.555   
C                                                                          ZPARB.556   
C                                                                          ZPARB.557   
C       ---------------------------------------------------------------    ZPARB.558   
C      PARAMETER(                                                          ZPARB.559   
C     I JPM=106,JPN=106,JPK=106,JPGL=160,JPNLON=320,                       ZPARB.560   
C     I JPT1MAX=400,          JPT2MAX=50,                                  ZPARB.561   
C     I JPT3MAX=300,          JPT4MAX=50,                                  ZPARB.562   
C     I JPHASH=2048,          JPNTRCRS=20,                                 ZPARB.563   
C     I JPTASKS=4,     JPLOCKS=50,    JPEVENT=4,                           ZPARB.564   
C     I JPLTMT=JPTASKS,                                                    ZPARB.565   
C     I JPNUMW=352,            JPNUMP=352,                                 ZPARB.566   
C     I JPTABLE=1024,                                                      ZPARB.567   
C     I JPMAXB =60,                                                        ZPARB.568   
C     I JPMAXPB=32,                                                        ZPARB.569   
C     I JPG3FLD=43,         JPG3XF=99,         JPG3CMP=17,                 ZPARB.570   
C     I JPMP1=JPM+1,        JPNP1=JPN+1,       JPKP1=JPK+1,                ZPARB.571   
C     I JP2MP1=JPMP1*2,     JP4MP1=JPMP1*4,                                ZPARB.572   
C     I JPED=JPN/2+1,       JPOD=JPNP1/2,                                  ZPARB.573   
C     I IPSP0=JPM+JPN-JPK,  IPSP1=JPNP1*JPMP1, IPSP2=IPSP0*(IPSP0+1)/2,    ZPARB.574   
C     I JPSP=IPSP1-IPSP2,   JP2SP=2*JPSP,                                  ZPARB.575   
C     I JPHGL=JPGL/2,       JPNLP2=JPNLON+2,                               ZPARB.576   
C     I                     JPNVCLV=4*JPNLVP1)                             ZPARB.577   
C                                                                          ZPARB.578   
C*    *COMMON* *COMCTL* - CONTROL VARIABLES FOR MODEL HOUSEKEEPING.        ZPARB.579   
C                                                                          ZPARB.580   
C     J. K. GIBSON     E.C.M.W.F.     22/01/82.                            ZPARB.581   
C     MODIFIED M.J     E.C.M.W.F.     13/12/82.                            ZPARB.582   
C                                                                          ZPARB.583   
      INTEGER                                                              ZPARB.584   
     I NM,       NN,       NK,       NGL,                                  ZPARB.585   
     I NTEMP2,   NMP1,     NNP1,     NKP1,     N2MP1,    N4MP1,            ZPARB.586   
     I NED,      NOD,      NSP,      N2SP,     NHGL,                       ZPARB.587   
     I NSCAN,    NRESUM,                                                   ZPARB.588   
     I NFFT,     NFFTW,                                                    ZPARB.589   
     I NSPACE1,  NSPACE2,                                                  ZPARB.590   
     I NCBASE,   NTBASE,   NTIMST,                                         ZPARB.591   
     I NWRITE,   NWPTR,                                                    ZPARB.592   
     I NWLAG,                                                              ZPARB.593   
     I NPP,      NPPTR,                                                    ZPARB.594   
     I NPLAG,    NPPDATA,                                                  ZPARB.595   
     I NFRECS,   NGRECS,   NDRECS,                                         ZPARB.596   
     I NSTOP,    MAXROW                                                    ZPARB.597   
      LOGICAL                                                              ZPARB.598   
     L LHIGCM,   LSCYCL,   LHFCLR,   LHFSAV,                               ZPARB.599   
     L LEND,     LDIFF1,   LINITER,  LDIFFRQ,  LWUNIN,   LWINIT,           ZPARB.600   
     L LDEBUG,   LSVPCTL,  LSSDFF,   LSSDGF,   LSSDIF,   LRESETP,          ZPARB.601   
     L LINTPP,   L2BUF,    LOWTIME,  LOPTIME,  LTSTATS,  LOCKLTD           ZPARB.602   
      REAL                                                                 ZPARB.603   
     R DTIME,    TWODT,    EPS                                             ZPARB.604   
C                                                                          ZPARB.605   
C      INTEGER                                                             ZPARB.606   
C     I NWTIME(JPNUMW),     NROW(JPTASKS),                                 ZPARB.607   
C     I NPTIME(JPNUMP)                                                     ZPARB.608   
C                                                                          ZPARB.609   
C     ------------------------------------------------------------------   ZPARB.610   
C                                                                          ZPARB.611   
C*    *COMMON* *COMGAU* - QUANTITIES RELATED TO THE GAUSSIAN GRID.         ZPARB.612   
C                                                                          ZPARB.613   
      REAL                                                                 ZPARB.614   
     R SINLON(NLP2),     COSLON(NLP2)                                      ZPARB.615   
C                                                                          ZPARB.616   
C     ---------------------------------------------------------------      ZPARB.617   
C                                                                          ZPARB.618   
C*    *COMMON* *COMTRU* -QUANTITIES RELATED TO THE SPECTRAL TRUNCATION.    ZPARB.619   
C                                                                          ZPARB.620   
C     ---------------------------------------------------------------      ZPARB.621   
C                                                                          ZPARB.622   
C*    *COMMON* *COMSIM* - QUANTITIES NEEDED FOR THE SEMI-IMPLICIT SCHEME   ZPARB.623   
C                                                                          ZPARB.624   
C     ---------------------------------------------------------------      ZPARB.625   
C                                                                          ZPARB.626   
C*    *COMMON* *COMHDI* - COEFFICIENTS FOR HORIZONTAL DIFFUSION.           ZPARB.627   
C                                                                          ZPARB.628   
C     ---------------------------------------------------------------      ZPARB.629   
C                                                                          ZPARB.630   
C*    *COMMON* *COMFFT* - QUANTITIES NEEDED FOR THE FAST *FOURIER          ZPARB.631   
C                         TRANSFORMS.                                      ZPARB.632   
C                                                                          ZPARB.633   
      INTEGER                                                              ZPARB.634   
     I NFFTD1,   NRFFTD1,  NFFTD2,   NRFFTD2,  NFFTD3,   NRFFTD3,          ZPARB.635   
     I NFFTD4,   NRFFTD4,                                                  ZPARB.636   
     I NFFTI1,   NRFFTI1,  NFFTI2,    NRFFTI2                              ZPARB.637   
C      REAL                                                                ZPARB.638   
C     R TRIG(JPNLON)                                                       ZPARB.639   
      INTEGER                                                              ZPARB.640   
     I NFAX(10)                                                            ZPARB.641   
C                                                                          ZPARB.642   
C     ---------------------------------------------------------------      ZPARB.643   
C                                                                          ZPARB.644   
C*    *COMMON* *COMSTA* - ARRAYS AND PARAMETERS FOR STATISTICS.            ZPARB.645   
C                                                                          ZPARB.646   
C     ---------------------------------------------------------------      ZPARB.647   
C                                                                          ZPARB.648   
C                                                                          ZPARB.649   
C     ------------------------------------------------------------------   ZPARB.650   
C                                                                          ZPARB.651   
C*    *COMMON* *COMDIA* - QUANTITIES RELATED TO GLOBAL PHYSICAL            ZPARB.652   
C                         DIAGNOSTICS.                                     ZPARB.653   
C                                                                          ZPARB.654   
C       ----------------------------------------------------------------   ZPARB.655   
C                                                                          ZPARB.656   
C*    COMMON *COMPSW* SWITCHES RELATED TO THE PARAMETERISATIONS OF         ZPARB.657   
C                     DIABATIC PROCESSES.                                  ZPARB.658   
C                                                                          ZPARB.659   
C       ----------------------------------------------------------------   ZPARB.660   
C                                                                          ZPARB.661   
C                                                                          ZPARB.662   
C       ----------------------------------------------------------------   ZPARB.663   
C                                                                          ZPARB.664   
C*    COMMON *COMDSW* SWITCHES RELATED TO THE DYNAMICS                     ZPARB.665   
C                     AND THE GENERAL CONTROL OF THE FORECAST.             ZPARB.666   
C                                                                          ZPARB.667   
C       ----------------------------------------------------------------   ZPARB.668   
C                                                                          ZPARB.669   
C                                                                          ZPARB.670   
C       ----------------------------------------------------------------   ZPARB.671   
C                                                                          ZPARB.672   
C*    COMMON *COMPH1* CONSTANTS TO COMMUNICATE BETWEEN THE MAIN PROGRAM    ZPARB.673   
C                     AND THE RADIATION SUBROUTINES.                       ZPARB.674   
C                                                                          ZPARB.675   
C       ----------------------------------------------------------------   ZPARB.676   
C                                                                          ZPARB.677   
      REAL                                                                 ZPARB.678   
     R CRAE,                                                               ZPARB.679   
     R CDISSEM                                                             ZPARB.680   
C                                                                          ZPARB.681   
C      REAL       COSRAD(128),        SINRAD(128)                          ZPARB.682   
C                                                                          ZPARB.683   
C                                                                          ZPARB.684   
C       ----------------------------------------------------------------   ZPARB.685   
C                                                                          ZPARB.686   
C*    COMMON *COMPH2* CONSTANTS TO COMMUNICATE BETWEEN THE MAIN PROGRAM    ZPARB.687   
C                     AND THE PHYSICAL SUBROUTINES (EXCEPT RADIATION       ZPARB.688   
C                     ONES).                                               ZPARB.689   
C                                                                          ZPARB.690   
C       ----------------------------------------------------------------   ZPARB.691   
C                                                                          ZPARB.692   
      REAL       CCRH(JPNLEV)                                              ZPARB.693   
C                                                                          ZPARB.694   
C                                                                          ZPARB.695   
C ----------------------------------------------------------------------   ZPARB.696   
C                                                                          ZPARB.697   
C*  *COMMON* *COMDIZ* VARIABLES AND POINTERS FOR ZONAL MEAN DIAGNOSTICS    ZPARB.698   
C                                                                          ZPARB.699   
C ----------------------------------------------------------------------   ZPARB.700   
C                                                                          ZPARB.701   
C*  *COMMON* *COMMSK* VARIABLES AND POINTERS FOR AREA MEAN DIAGNOSTICS.    ZPARB.702   
C                                                                          ZPARB.703   
C ----------------------------------------------------------------------   ZPARB.704   
C                                                                          ZPARB.705   
C*    *COMMON* *COMSDS* - START/RESTART BLOCK.                             ZPARB.706   
C                                                                          ZPARB.707   
C ----------------------------------------------------------------------   ZPARB.708   
C                                                                          ZPARB.709   
C*    *COMMON* *COMTASK* - TASK RELATED VARIABLES.                         ZPARB.710   
C                                                                          ZPARB.711   
C ----------------------------------------------------------------------   ZPARB.712   
C                                                                          ZPARB.713   
C*         *COMRAD* - RADIATION POINTERS.                                  ZPARB.714   
C                                                                          ZPARB.715   
      LOGICAL LO,LO1,LO2,LODIA,LODIAP                                      ZPARB.716   
C---------------------------------------------------------------------     ZPARB.717   
C                                                                          ZPARB.718   
C*    *COMMON* *COMCTL* - CONTROL VARIABLES FOR MODEL HOUSEKEEPING.        ZPARB.719   
C                                                                          ZPARB.720   
C---------------------------------------------------------------------     ZPARB.721   
C                                                                          ZPARB.722   
C     COMMON *YOMAER* RADIATIVE CHARACTERISTICS OF THE AEROSOLS            ZPARB.723   
C                                                                          ZPARB.724   
C     -----------------------------------------------------------------    ZPARB.725   
C                                                                          ZPARB.726   
      REAL TAUA(2,5), PIZA(2,5), CGA(2,5), CAER(5,5), CAEROS               ZPARB.727   
C                                                                          ZPARB.728   
C     -----------------------------------------------------------------    ZPARB.729   
C                                                                          ZPARB.730   
C     COMMON *YOMLW*                                                       ZPARB.731   
C                                                                          ZPARB.732   
C*    COEFFICIENTS FOR THE LONGWAVE RADIATION SUBROUTINES                  ZPARB.733   
C                                                                          ZPARB.734   
C NINT  :  NUMBER OF SPECTRAL INTERVALS                                    ZPARB.735   
C NIPD  :  NUMBER OF BANDS DESCRIBED BY PADE APPROXIMANTS                  ZPARB.736   
C NTR   :  NUMBER OF REFERENCE TEMPERATURES                                ZPARB.737   
C NTRA  :  NUMBER OF TRANSMISSION FUNCTIONS                                ZPARB.738   
C NUA   :  NUMBER OF ABSORBER AMOUNTS                                      ZPARB.739   
C NG1   :  ORDER OF THE GAUSSIAN QUADRATURE                                ZPARB.740   
C                                                                          ZPARB.741   
C RT1   :  ROOTS OF THE GAUSSIAN POLYNOMIAL                                ZPARB.742   
C WG1   :  WEIGHTS OF THE GAUSSIAN POLYNOMIAL                              ZPARB.743   
C AT, BT:  COEFFICIENTS OF THE TEMPERATURE DEPENDENCE                      ZPARB.744   
C CNTNU :  H2O CONTINUUM ABSORPTION COEFFICIENTS                           ZPARB.745   
C O1H,O2H,PIALF0,OCT: OZONE LONGWAVE ABSORPTION COEFFICIENTS               ZPARB.746   
C TREF, TSTAND      : REFERENCE TEMPERATURES                               ZPARB.747   
C XP    :  COEFFICIENTS OF POLYNOMIAL DEVELOPMENTS OF PLANCK FUNCTION      ZPARB.748   
C GA,GB :  PADE APPROXIMANTS OF H2O, CO2 TRANSMISSION FUNCTIONS            ZPARB.749   
C ETY,PTY :  PARAMETERS OF H2O CONTINUUM                                   ZPARB.750   
C TINTP :  REFERENCE TEMPERATURES OF PRE-COMPUTED TRANSMISSIVITIES         ZPARB.751   
C CE    :  EMS COEFFS OF H2O TRANSMISSION FUNCTIONS                        ZPARB.752   
C                                                                          ZPARB.753   
      REAL  RT1(2),WG1(2),AT(12,3),BT(12,3),CNTNU(4),O1H                   ZPARB.754   
     S ,OCT(4),TREF,XP(6,6),TSTAND,GA(11,24,3),GB(11,24,3)                 ZPARB.755   
     S ,PTY(11,20),ETY(11,20),TINTP(11),TSTP,O2H,PIALF0                    ZPARB.756   
C                                                                          ZPARB.757   
      REAL  TB(40,31,2),ALP(40,31,2),BET(40,31,2),                         ZPARB.758   
     S ULG(40),PLG(31),AP(40,31,2),BP(40,31,2),TBO3(38,31),TO3B(38,31)     ZPARB.759   
     S,ULGO(38),AO3(38,31),BO3(38,31),O3A(38,31),O3B(38,31)                ZPARB.760   
C     -----------------------------------------------------------------    ZPARB.761   
C*COMDECK YOMRDU                                                           ZPARB.762   
C     -----------------------------------------------------------------    ZPARB.763   
C                                                                          ZPARB.764   
C*    CONTROL VARIABLES FOR RADIATION: INTERNAL SWITCH AND INDICES         ZPARB.765   
C                                                                          ZPARB.766   
C ZEELOG:  SECURITY THRESHOLD FOR ABSORBER AMOUNT IN LAPLACE TRANSFORM     ZPARB.767   
C ZEPSC :  SECURITY THRESHOLD FOR CLOUD COVER                              ZPARB.768   
C ZEPSCO:  SECURITY THRESHOLD FOR OZONE AMOUNT                             ZPARB.769   
C ZEPSCQ:  SECURITY THRESHOLD FOR WATER VAPOR                              ZPARB.770   
C ZEPSCT:  SECURITY THRESHOLD FOR SHORTWAVE OPTICAL THICKNESS              ZPARB.771   
C ZEPSCW:  SECURITY THRESHOLD FOR CLOUD LIQUID WATER PATH                  ZPARB.772   
C                                                                          ZPARB.773   
      REAL          CDAY,CCO2,CH2O,DIFF,X10E                               ZPARB.774   
     S             ,ZEELOG,ZEPSC,ZEPSCO,ZEPSCQ,ZEPSCT,ZEPSCW               ZPARB.775   
C     -----------------------------------------------------------------    ZPARB.776   
C*COMDECK YOMSW                                                            ZPARB.777   
C     -----------------------------------------------------------------    ZPARB.778   
C                                                                          ZPARB.779   
C*    COEFFICIENTS FOR THE SHORTWAVE RADIATION SUBROUTINES                 ZPARB.780   
C                                                                          ZPARB.781   
C APAD  :  PADE APPROXIMANTS NUMERATOR                                     ZPARB.782   
C BPAD  :  PADE APPROXIMANTS DENOMINATOR                                   ZPARB.783   
C D     :  TRANSMISSION LIMIT FOR INFINITE ABSORBER AMOUNT                 ZPARB.784   
C CRAY  :  RAYLEIGH SCATTERING COEFFICIENTS                                ZPARB.785   
C SUN   :  SOLAR FRACTION IN SPECTRAL INTERVALS                            ZPARB.786   
C                                                                          ZPARB.787   
      REAL  APAD(2,3,7),BPAD(2,3,7),D(2,3),CRAY(2,6),SUN(2)                ZPARB.788   
C     -----------------------------------------------------------------    ZPARB.789   
                                                                           ZPARB.790   
C                                                                          ZPARB.791   
C  --------------------------------------------------------------------    ZPARB.792   
C                                                                          ZPARB.793   
      REAL   TTT(1,NLAT,NRLEV,12)                                          ZPARB.794   
C                                                                          ZPARB.795   
C        0.1  "RADINT POINTERS"                                            ZPARB.796   
C             -----------------                                            ZPARB.797   
C                                                                          ZPARB.798   
      REAL   TM1(NLP2,NLEV),                                               ZPARB.799   
     *       TSM1M(NLP2),                                                  ZPARB.800   
     *       QM1(NLP2,NLEV),                                               ZPARB.801   
     *       SNM1M(NLP2),                                                  ZPARB.802   
     *       ALBM(NLP2),                                                   ZPARB.803   
     *       AVVELM(NLP2)                                                  ZPARB.804   
      REAL   SLMM(NLP2),                                                   ZPARB.805   
     *       APHM1(NLP2,NLEVP1),                                           ZPARB.806   
     *       APM1(NLP2,NLEV)                                               ZPARB.807   
C                                                                          ZPARB.808   
      LOGICAL LOLAND(NLP2)                                                 ZPARB.809   
C                                                                          ZPARB.810   
C     VARIABLES FOR FULL GRID AND TRANSFORMS.                              ZPARB.811   
C                                                                          ZPARB.812   
      REAL   ZTI(NLP2,NRLEVP1),                                            ZPARB.813   
     *       ZCTI(NLP2,NRLEVP1),                                           ZPARB.814   
     *       ZCPH(NLP2,NRLEVP1),                                           ZPARB.815   
     *       ZWV(NLP2,NRLEV),                                              ZPARB.816   
     *       ZSW(NLP2,NRLEV),                                              ZPARB.817   
     *       ZALTE(NLP2),                                                  ZPARB.818   
     *       ZCALTE(NLP2),                                                 ZPARB.819   
     *       ZALSO(NLP2),                                                  ZPARB.820   
     *       ZCALSO(NLP2)                                                  ZPARB.821   
C                                                                          ZPARB.822   
      REAL   ZOZQ(NLP2),                                                   ZPARB.823   
     #       ZOZH(NLP2)                                                    ZPARB.824   
C                                                                          ZPARB.825   
      REAL   ZTRSOL(NLP2,NLEVP1),                                          ZPARB.826   
     *       ZEMTER(NLP2,NLEVP1)                                           ZPARB.827   
C                                                                          ZPARB.828   
C     FINAL RESULTS ARE STORED ON:                                         ZPARB.829   
C                                                                          ZPARB.830   
      REAL   TRSOLM(NLP2,NLEVP1),                                          ZPARB.831   
     *       EMTERM(NLP2,NLEVP1)                                           ZPARB.832   
C                                                                          ZPARB.833   
      REAL   AMU0(NLP2),                                                   ZPARB.834   
     *       RDAYL(NLP2)                                                   ZPARB.835   
C                                                                          ZPARB.836   
C     VARIABLES WITHIN THE SPLITTED LATITUDE LOOP.                         ZPARB.837   
C                                                                          ZPARB.838   
      REAL   CLC(NRLST,NRLEV),                                             ZPARB.839   
     *       TI(NRLST,NRLEVP1),                                            ZPARB.840   
     *       DP(NRLST,NRLEV),                                              ZPARB.841   
     *       AADS(NRLST,NRLEV),                                            ZPARB.842   
     *       AEQ1(NRLST,NRLEV),                                            ZPARB.843   
     *       AEQ2(NRLST,NRLEV),                                            ZPARB.844   
     *       AEQ3(NRLST,NRLEV),                                            ZPARB.845   
     *       AEQ4(NRLST,NRLEV),                                            ZPARB.846   
     *       AEQ5(NRLST,NRLEV),                                            ZPARB.847   
     *       SSW(NRLST,NRLEV),                                             ZPARB.848   
     *       WV(NRLST,NRLEV),                                              ZPARB.849   
     *       QOF(NRLST,NRLEV),                                             ZPARB.850   
     *       QCF(NRLST,NRLEV),                                             ZPARB.851   
     *       CLWA(NRLST,NRLEV),                                            ZPARB.852   
     *       APRE(NRLST),                                                  ZPARB.853   
     *       SMU0(NRLST),                                                  ZPARB.854   
     *       ALTE(NRLST),                                                  ZPARB.855   
     *       ALSO(NRLST)                                                   ZPARB.856   
      REAL   ZDPO(NRLST),                                                  ZPARB.857   
     *       ZQCFO(NRLST),                                                 ZPARB.858   
     *       ZAEQSO(NRLST),                                                ZPARB.859   
     *       ZQOFO(NRLST),                                                 ZPARB.860   
     *       ZDPN(NRLST),                                                  ZPARB.861   
     *       ZQCFN(NRLST),                                                 ZPARB.862   
     *       ZAEQSN(NRLST),                                                ZPARB.863   
     *       ZQOFN(NRLST)                                                  ZPARB.864   
      REAL   FLT(NRLST,NRLEVP1),                                           ZPARB.865   
     *       FLS(NRLST,NRLEVP1)                                            ZPARB.866   
C                                                                          ZPARB.867   
C     DIAGNOSTIC VARIABLES.                                                ZPARB.868   
C                                                                          ZPARB.869   
      REAL   DIAG(NLEVP1,4),                                               ZPARB.870   
     *       DIA1(7),                                                      ZPARB.871   
     *       ZDIAG(NLEVP1,10),                                             ZPARB.872   
     *       ZDIA1(21),                                                    ZPARB.873   
     *       ZDIA(NLON),                                                   ZPARB.874   
     *       ZDIAF(NLON,7),                                                ZPARB.875   
     *       ZDIAT(NLEVP1)                                                 ZPARB.876   
C                                                                          ZPARB.877   
C                                                                          ZPARB.878   
C                                                                          ZPARB.879   
      REAL PGG(IRLST),                                                     ZPARB.880   
     #     PREF(IRLST),                                                    ZPARB.881   
     #     PRE1(IRLST),                                                    ZPARB.882   
     #     PRE2(IRLST),                                                    ZPARB.883   
     #     PRMUZ(IRLST),                                                   ZPARB.884   
     #     PTO1(IRLST),                                                    ZPARB.885   
     #     PTR1(IRLST),                                                    ZPARB.886   
     #     PTR2(IRLST),                                                    ZPARB.887   
     #     PW(IRLST)                                                       ZPARB.888   
C                                                                          ZPARB.889   
C                                                                          ZPARB.890   
C  what about the 1-dimensional PALBS???                                   ZPARB.891   
C                                                                          ZPARB.892   
      REAL     PALBSN  (IRLST)                                             ZPARB.893   
C                                                                          ZPARB.894   
C*       0.2   "LOCAL" ARRAYS                                              ZPARB.895   
C              --------------                                              ZPARB.896   
      REAL ZABSCU(IRLST ,NUA, 3*NRLEV+1),                                  ZPARB.897   
     S     ZABSLY(IRLST ,NUA, 3*NRLEV+1) ,                                 ZPARB.898   
     S     ZADJD (IRLST , IRLVP1)      ,                                   ZPARB.899   
     S     ZADJU (IRLST , IRLVP1)       ,                                  ZPARB.900   
     S     ZBGND (IRLST)                ,                                  ZPARB.901   
     S     ZBINT (IRLST , IRLVP1)       ,                                  ZPARB.902   
     S     ZBSUR (IRLST , NINT)         ,                                  ZPARB.903   
     S     ZBSUIN(IRLST)                ,                                  ZPARB.904   
     S     ZBTOP (IRLST , NINT)         ,                                  ZPARB.905   
     S     PCLDLW(IRLST , IRLEV)        ,                                  ZPARB.906   
     S     ZCLOUD(IRLST)                ,                                  ZPARB.907   
     S     ZCNTRB(IRLST , IRLVP1,IRLVP1),                                  ZPARB.908   
     S     ZCUMP (IRLST)                ,                                  ZPARB.909   
     S     ZCUMPT(IRLST)                ,                                  ZPARB.910   
     S     ZDBDT (IRLST , NINT , IRLEV) ,                                  ZPARB.911   
     S     ZDBSL (IRLST , NINT , 2*NRLEV),                                 ZPARB.912   
     S     ZDISTD(IRLST , IRLVP1)       ,                                  ZPARB.913   
     S     ZDISTU(IRLST , IRLVP1)                                          ZPARB.914   
      REAL                                                                 ZPARB.915   
     S     ZDNF  (IRLST , IRLVP1,IRLVP1),                                  ZPARB.916   
     S     PDT0  (IRLST)                                                   ZPARB.917   
      REAL                                                                 ZPARB.918   
     S     ZDUC  (IRLST , 3*NRLEV+1)       ,                               ZPARB.919   
     S     ZEFFT (IRLST)                ,                                  ZPARB.920   
     S     ZEMD  (IRLST , IRLEV), ZEMU  (IRLST , IRLEV),                   ZPARB.921   
     S     ZEPSC2(IRLST),  ZEPSC3(IRLST),                                  ZPARB.922   
     S     ZEPSH1(IRLST),  ZEPSH2(IRLST),                                  ZPARB.923   
     S     ZEPSH3(IRLST),  ZEPSH4(IRLST),                                  ZPARB.924   
     S     ZEPSH5(IRLST),  ZEPSH6(IRLST),                                  ZPARB.925   
     S     ZEPHIO(IRLST),  ZFACTC(IRLST),                                  ZPARB.926   
     S     ZZFD(IRLST), ZFDD(IRLST), ZFDN(IRLST , IRLVP1)                  ZPARB.927   
      REAL                                                                 ZPARB.928   
     S     PFLUX (IRLST , 2 , IRLVP1)   ,                                  ZPARB.929   
     S     PFLUC (IRLST , 2 , IRLVP1)   ,                                  ZPARB.930   
     S     ZFLWP (IRLST)                ,                                  ZPARB.931   
     S     PCTS  (IRLST , IRLEV)        ,                                  ZPARB.932   
     S     ZZFU   (IRLST)               ,                                  ZPARB.933   
     S     ZFUP  (IRLST , IRLVP1)       ,                                  ZPARB.934   
     S     ZGLAYD(IRLST)                ,                                  ZPARB.935   
     S     ZGLAYU(IRLST)                ,                                  ZPARB.936   
     S     ZOMEGA(IRLST , 2 , IRLEV)                                       ZPARB.937   
C                                                                          ZPARB.938   
      INTEGER                                                              ZPARB.939   
     S     ITX   (IRLST)                ,                                  ZPARB.940   
     S     IXDIA (IRLST , IRLVP1)       ,                                  ZPARB.941   
     S     IXT   (IRLST , IRLVP1,IRLVP1),                                  ZPARB.942   
     S     IXTSU (IRLST , IRLVP1)       ,                                  ZPARB.943   
     S     IXTTP (IRLST , IRLVP1)       ,                                  ZPARB.944   
     S     IMX   (IRLST)                ,                                  ZPARB.945   
     S     IMXP  (IRLST)                                                   ZPARB.946   
C                                                                          ZPARB.947   
      REAL ZOZ   (IRLST , IRLEV)        ,                                  ZPARB.948   
     S     PPMB  (IRLST , IRLVP1)       ,                                  ZPARB.949   
     S     ZRES  (IRLST)                ,                                  ZPARB.950   
     S     PB    (IRLST, 6 , IRLVP1)    ,                                  ZPARB.951   
     S     ZSSIG (IRLST , 3*NRLEV+1)    ,                                  ZPARB.952   
     S     PTAU  (IRLST , 2 , IRLEV)    ,                                  ZPARB.953   
     S     PTAVE (IRLST , IRLEV)        ,                                  ZPARB.954   
     S     ZTAVIC(IRLST)                ,                                  ZPARB.955   
     S     ZTI1  (IRLST)                ,                                  ZPARB.956   
     S     PTL   (IRLST , IRLVP1)       ,                                  ZPARB.957   
     S     ZTT   (IRLST , NTRA)         ,                                  ZPARB.958   
     S     ZTT1  (IRLST , NTRA)         ,                                  ZPARB.959   
     S     ZTT2  (IRLST , NTRA)         ,                                  ZPARB.960   
     S     ZUAER (IRLST , NINT)         ,                                  ZPARB.961   
     S     ZUPF  (IRLST , IRLVP1,IRLVP1),                                  ZPARB.962   
     S     ZUU   (IRLST , NUA)          ,                                  ZPARB.963   
     S     ZXD   (IRLST)                                                   ZPARB.964   
      REAL                                                                 ZPARB.965   
     S     ZXN   (IRLST)                ,                                  ZPARB.966   
     S     ZXOZ  (IRLST)                ,                                  ZPARB.967   
     S     ZXWV  (IRLST)                ,                                  ZPARB.968   
     S     ZZZ   (IRLST)                ,                                  ZPARB.969   
     S     ZRES2 (IRLST)                ,                                  ZPARB.970   
     S     ZTI2  (IRLST)                ,                                  ZPARB.971   
     S     ZBLAY (IRLST,IRLEV)          ,                                  ZPARB.972   
     S     ZBLEV (IRLST,IRLVP1)         ,                                  ZPARB.973   
     S     ZCTS  (IRLST)                ,                                  ZPARB.974   
     S     ZHFG  (IRLST)                                                   ZPARB.975   
C                                                                          ZPARB.976   
C     ------------------------------------------------------------------   ZPARB.977   
C                                                                          ZPARB.978   
C                                                                          ZPARB.979   
      INTEGER KT    (IRLST)                                                ZPARB.980   
      REAL    PUU   (IRLST , NUA  )     ,                                  ZPARB.981   
     S        PTT   (IRLST , NTRA )     ,                                  ZPARB.982   
     S        ZZ    (IRLST)                                                ZPARB.983   
C                                                                          ZPARB.984   
C     -------------------------------------------------------- ---------   ZPARB.985   
C                                                                          ZPARB.986   
      REAL  PCLFR  (IRLST , IRLEV)       ,                                 ZPARB.987   
     S      PT     (IRLST , IRLVP1)       ,                                ZPARB.988   
     S      PQOF   (IRLST , IRLEV)          ,                              ZPARB.989   
     S      PQLWP  (IRLST , IRLEV)          ,                              ZPARB.990   
     S      PEMIS  (IRLST)                                                 ZPARB.991   
      REAL                                                                 ZPARB.992   
     S      PFLT   (IRLST , IRLVP1)                                        ZPARB.993   
C                                                                          ZPARB.994   
      REAL  ZALBSU(IRLST , 2 )           ,                                 ZPARB.995   
     S      ZCG   (IRLST , 2 , IRLEV)    ,                                 ZPARB.996   
     S      ZCLDLW(IRLST , IRLEV)        ,                                 ZPARB.997   
     S      ZCLDSW(IRLST , IRLEV)        ,                                 ZPARB.998   
     S      ZCOOLR(IRLST , IRLEV)        ,                                 ZPARB.999   
     S      ZDT0  (IRLST)                ,                                 ZPARB.1000  
     S      ZFLUX (IRLST , 2 , IRLVP1)   ,                                 ZPARB.1001  
     S      ZPMB  (IRLST , IRLVP1)       ,                                 ZPARB.1002  
     S      ZTAU  (IRLST , 2 , IRLEV)    ,                                 ZPARB.1003  
     S      ZTAVE (IRLST , IRLEV)        ,                                 ZPARB.1004  
     S      ZTL   (IRLST , IRLVP1)       ,                                 ZPARB.1005  
     S      ZFSDWN(IRLST , IRLVP1)       ,                                 ZPARB.1006  
     S      ZFSUP (IRLST , IRLVP1)       ,                                 ZPARB.1007  
     S      ZHEATR(IRLST , IRLEV )                                         ZPARB.1008  
C                                                                          ZPARB.1009  
C     -----------------------------------------------------------------    ZPARB.1010  
C                                                                          ZPARB.1011  
C                                                                          ZPARB.1012  
      REAL   PDP   (IRLST , IRLEV)     ,                                   ZPARB.1013  
     S       PWV   (IRLST , IRLEV)     ,                                   ZPARB.1014  
     S       PFLS  (IRLST , IRLVP1)    ,                                   ZPARB.1015  
     S       PPSOL (IRLST        )     ,                                   ZPARB.1016  
     S       PRMU0 (IRLST        )     ,                                   ZPARB.1017  
     S       PAER  (IRLST,IRLEV,5)     ,                                   ZPARB.1018  
     S       PALBS (IRLST , 2 )        ,                                   ZPARB.1019  
     S       PCG   (IRLST , 2 , IRLEV) ,                                   ZPARB.1020  
     S       PCLDSW(IRLST , IRLEV)     ,                                   ZPARB.1021  
     S       POMEGA(IRLST , 2 , IRLEV) ,                                   ZPARB.1022  
     S       POZ   (IRLST , IRLEV)                                         ZPARB.1023  
C                                                                          ZPARB.1024  
      REAL   PFDOWN(IRLST , IRLVP1)    ,                                   ZPARB.1025  
     S       PFUP  (IRLST , IRLVP1)                                        ZPARB.1026  
C                                                                          ZPARB.1027  
      REAL   ZAKI  (IRLST , 2 )        ,                                   ZPARB.1028  
     S       ZCGAZ (IRLST , IRLEV)     ,                                   ZPARB.1029  
     S       ZCNEB (IRLST , IRLEV)     ,                                   ZPARB.1030  
     S       ZC1I  (IRLST , IRLVP1)    ,                                   ZPARB.1031  
     S       ZDSC  (IRLST , IRLEV)     ,                                   ZPARB.1032  
     S       ZDSH  (IRLST , IRLEV)     ,                                   ZPARB.1033  
     S       ZDSIG (IRLST , IRLEV)     ,                                   ZPARB.1034  
     S       ZFACT (IRLST)             ,                                   ZPARB.1035  
     S       ZFACT1 (IRLST), ZFACT2 (IRLST),                               ZPARB.1036  
     S       ZFACT3 (IRLST), ZFACT4 (IRLST),                               ZPARB.1037  
     S       ZFACT5 (IRLST), ZFACT6 (IRLST),                               ZPARB.1038  
     S       ZFD   (IRLST , IRLVP1)    ,                                   ZPARB.1039  
     S       ZFRAC (IRLST)             ,                                   ZPARB.1040  
     S       ZFU   (IRLST , IRLVP1)    ,                                   ZPARB.1041  
     S       ZG    (IRLST)             ,                                   ZPARB.1042  
     S       ZGG   (IRLST)             ,                                   ZPARB.1043  
     S       ZPIZAZ(IRLST , IRLEV)     ,                                   ZPARB.1044  
     S       ZRAYL (IRLST),  ZRAY1 (IRLST , IRLVP1)                        ZPARB.1045  
      REAL                                                                 ZPARB.1046  
     S       ZRAY2 (IRLST , IRLVP1)    ,                                   ZPARB.1047  
     S       ZREF  (IRLST)             ,                                   ZPARB.1048  
     S       ZREFZ (IRLST , 2 , IRLVP1),                                   ZPARB.1049  
     S       ZRE1  (IRLST)             ,                                   ZPARB.1050  
     S       ZRE2  (IRLST)             ,                                   ZPARB.1051  
     S       ZRJ   (IRLST , 6 , IRLVP1),                                   ZPARB.1052  
     S       ZRK   (IRLST , 6 , IRLVP1),                                   ZPARB.1053  
     S       ZRL   (IRLST , 8)         ,                                   ZPARB.1054  
     S       ZRMU  (IRLST)             ,                                   ZPARB.1055  
     S       ZRMUE (IRLST , IRLVP1)    ,                                   ZPARB.1056  
     S       ZRMUZ (IRLST)                                                 ZPARB.1057  
      REAL                                                                 ZPARB.1058  
     S       ZRNEB (IRLST)             ,                                   ZPARB.1059  
     S       ZRUEF (IRLST , 8)         ,                                   ZPARB.1060  
     S       ZR1   (IRLST)             ,                                   ZPARB.1061  
     S       ZR2   (IRLST)             ,                                   ZPARB.1062  
     S       ZR21  (IRLST)             ,                                   ZPARB.1063  
     S       ZR22  (IRLST)             ,                                   ZPARB.1064  
     S       ZR23  (IRLST)             ,                                   ZPARB.1065  
     S       ZS    (IRLST)             ,                                   ZPARB.1066  
     S       ZSEC  (IRLST)             ,                                   ZPARB.1067  
     S       ZSS1  (IRLST)             ,                                   ZPARB.1068  
     S       ZTAUAZ(IRLST , IRLEV)     ,                                   ZPARB.1069  
     S       ZTOT  (IRLST , IRLVP1)    ,                                   ZPARB.1070  
     S       ZTO1  (IRLST)             ,                                   ZPARB.1071  
     S       ZTR   (IRLST , 2 , IRLVP1),                                   ZPARB.1072  
     S       ZTRA1 (IRLST , IRLVP1)    ,                                   ZPARB.1073  
     S       ZTRA2 (IRLST , IRLVP1)                                        ZPARB.1074  
      REAL                                                                 ZPARB.1075  
     S       ZTR1  (IRLST)             ,                                   ZPARB.1076  
     S       ZTR2  (IRLST)             ,                                   ZPARB.1077  
     S       ZUD   (IRLST , 3 , IRLVP1),                                   ZPARB.1078  
     S       ZUM   (IRLST , IRLVP1)    ,                                   ZPARB.1079  
     S       ZU1D  (IRLST)             ,                                   ZPARB.1080  
     S       ZU2D  (IRLST)             ,                                   ZPARB.1081  
     S       ZW    (IRLST)             ,                                   ZPARB.1082  
     S       ZN175 (IRLST)             ,                                   ZPARB.1083  
     S       ZN190 (IRLST)             ,                                   ZPARB.1084  
     S       ZO175 (IRLST)             ,                                   ZPARB.1085  
     S       ZO190 (IRLST)             ,                                   ZPARB.1086  
     S       ZP75  (IRLST)             ,                                   ZPARB.1087  
     S       ZP90  (IRLST)             ,                                   ZPARB.1088  
     S       ZSIGN (IRLST)             ,                                   ZPARB.1089  
     S       ZSIGO (IRLST)                                                 ZPARB.1090  
C                                                                          ZPARB.1091  
C-----------------------------------------------------------------------   ZPARB.1092  
C                                                                          ZPARB.1093  
      REAL   PTR    (IRLST)     ,                                          ZPARB.1094  
     S       PU     (IRLST)                                                ZPARB.1095  
C                                                                          ZPARB.1096  
C-----------------------------------------------------------------------   ZPARB.1097  
C                                                                          ZPARB.1098  
C   CLOUD-POINTERS                                                         ZPARB.1099  
C   --------------                                                         ZPARB.1100  
C                                                                          ZPARB.1101  
      REAL   ZRH(NLP2,NLEV),                                               ZPARB.1102  
     *       ZCH(NLP2),                                                    ZPARB.1103  
     *       ZCM(NLP2),                                                    ZPARB.1104  
     *       ZCL(NLP2),                                                    ZPARB.1105  
     *       ZCT(NLP2),                                                    ZPARB.1106  
     *       ZCC(NLP2)                                                     ZPARB.1107  
      INTEGER NTOPCM(NLP2),                                                ZPARB.1108  
     *        NBASECM(NLP2)                                                ZPARB.1109  
      REAL   ARPRCM(NLP2)                                                  ZPARB.1110  
      INTEGER ITOPH(NLP2),                                                 ZPARB.1111  
     *        ITOPM(NLP2),                                                 ZPARB.1112  
     *        ITOPL(NLP2)                                                  ZPARB.1113  
      LOGICAL LOC(NLP2)                                                    ZPARB.1114  
      REAL   ZQS(NLP2,NLEV),                                               ZPARB.1115  
     *       ZCLC(NLP2,NLEV),                                              ZPARB.1116  
     *       ZQLWP(NLP2,NLEV)                                              ZPARB.1117  
C                                                                          ZPARB.1118  
      REAL   VERVEL(NLP2,NLEV),                                            ZPARB.1119  
     *       ZTHETA(NLP2,NLEV),                                            ZPARB.1120  
     *       ZETA(NLP2,NLEV),                                              ZPARB.1121  
     *       ZDTHMIN(NLP2)                                                 ZPARB.1122  
      INTEGER INVB(NLP2)                                                   ZPARB.1123  
      REAL   ZCTLWP(NLP2),                                                 ZPARB.1124  
     *       ZQLOC(NLP2),                                                  ZPARB.1125  
     *       ZQMEC(NLP2),                                                  ZPARB.1126  
     *       ZQHIC(NLP2)                                                   ZPARB.1127  
C                                                                          ZPARB.1128  
C  definitions of "radheat"                                                ZPARB.1129  
C                                                                          ZPARB.1130  
      REAL   ZFSOT(NLON),                                                  ZPARB.1131  
     #       ZFTET(NLON),                                                  ZPARB.1132  
     #       ZFLT (NLON),                                                  ZPARB.1133  
     #       ZFSO (NLON),                                                  ZPARB.1134  
     #       ZFTE (NLON),                                                  ZPARB.1135  
     #       ZFLB (NLON),                                                  ZPARB.1136  
     #       ZDTDT(NLON),                                                  ZPARB.1137  
     #       HEATO(NLON,NLEV),                                             ZPARB.1138  
     #       HEATE(NLON,NLEV),                                             ZPARB.1139  
     #       HEATR(NLON,NLEV),                                             ZPARB.1140  
     #       ZI0  (NLON)                                                   ZPARB.1141  
C                                                                          ZPARB.1142  
C PIERS 13-8-97                                                            ZPARB.1143  
C                                                                          ZPARB.1144  
         REAL PIERSLWP                                                     ZPARB.1145  
C                                                                          ZPARB.1146  
C Piece of code needed to replace the Nikos radiation scheme with          ZPARB.1147  
C the Morcrette radiation scheme in the igcm3.1.                           ZPARB.1148  
C See morcrette3_1_1.readme for details.                                   ZPARB.1149  
C                                                                          ZPARB.1150  
C                                                                          ZPARB.1151  
c      program lh                                                          ZPARB.1152  
c                                                                          ZPARB.1153  
c      parameter(NL=23)                                                    ZPARB.1154  
c      real P(NL),t(NL),h2o(NL),o3(NL),htlw(NL),htsw(NL)                   ZPARB.1155  
c      real swalb,doy                                                      ZPARB.1156  
c       REAL CF(4,2)     !cloud fractions,lwps                             ZPARB.1157  
c       INTEGER IC(4,2)   ! cloud positions                                ZPARB.1158  
c       REAL RFLUXES(2,2,2)                                                ZPARB.1159  
c      open(11,file='mls23.dat')                                           ZPARB.1160  
c      read(11,*) NLEV                                                     ZPARB.1161  
c      DOY=80                                                              ZPARB.1162  
c      swalb=0.07                                                          ZPARB.1163  
c      alat=40.0                                                           ZPARB.1164  
c       doy=float(i)                                                       ZPARB.1165  
c      do i=nlev,1,-1                                                      ZPARB.1166  
c         read(11,*) P(i),t(i),h2o(i),adum,o3(i)                           ZPARB.1167  
c         print *,i,p(i),t(i),h2o(i),o3(i)                                 ZPARB.1168  
c      enddo                                                               ZPARB.1169  
c                                                                          ZPARB.1170  
c       ic(1,1)=3                                                          ZPARB.1171  
c      ic(1,2)=17                                                          ZPARB.1172  
c       ic(3,1)=6                                                          ZPARB.1173  
c       ic(2,2)=6                                                          ZPARB.1174  
c       cf(1,1)=0.3                                                        ZPARB.1175  
c       cf(1,2)=45.0                                                       ZPARB.1176  
c        cf(3,1)=0.8                                                       ZPARB.1177  
c       cf(4,2)=20.0                                                       ZPARB.1178  
c      alon=0.0                                                            ZPARB.1179  
c      call morcigcm(p,t,h2o,o3,alat,htlw,htsw,doy,cf,ic,                  ZPARB.1180  
c     $     rfluxes,swalb,alon)                                            ZPARB.1181  
c      enddo                                                               ZPARB.1182  
c      do i=nl,1,-1                                                        ZPARB.1183  
c         print '(i6,4F14.4)',i,p(i),t(i),htsw(i),htlw(i)                  ZPARB.1184  
c      enddo                                                               ZPARB.1185  
c      print *,RFLUXES(1,1,1), RFLUXES(1,1,2), RFLUXES(1,2,1),             ZPARB.1186  
c     $     RFLUXES(1,2,2)                                                 ZPARB.1187  
c      print *,RFLUXES(2,1,1), RFLUXES(2,1,2), RFLUXES(2,2,1),             ZPARB.1188  
c     $     RFLUXES(2,2,2)                                                 ZPARB.1189  
c                                                                          ZPARB.1190  
c                                                                          ZPARB.1191  
c      end                                                                 ZPARB.1192  
*COMDECK MORCGAS                                                           MORCGAS.1     
!-----------------------------------------------------                     MORCGAS.2     
! Common block for gas abundances                                          MORCGAS.3     
!-----------------------------------------------------                     MORCGAS.4     
      COMMON/MORCGAS/VMRCO2,ZCARDI,VMRCH4,RCH4,VMRN2O,RN2O,                MORCGAS.5     
     &               VMRCFC11,RCFC11,VMRCFC12,RCFC12,                      MORCGAS.6     
     &               VMRH2OS,RH2OS,NEXOTIC                                 MORCGAS.7     
      LOGICAL :: NEXOTIC                                                   MORCGAS.8     
      REAL :: ZCARDI,RCH4,RN2O,RCFC11,RCFC12,RH2OS                         MORCGAS.9     
      REAL :: VMRCO2,VMRCH4,VMRN2O,VMRCFC11,VMRCFC12,VMRH2OS               MORCGAS.10    
*COMDECK PARAMH                                                            PARAMH.1     
C OASIS size parameters                                                    PARAMH.2     
      INTEGER, PARAMETER :: IMB = 128                                      PARAMH.3     
      INTEGER, PARAMETER :: JM = 64                                        PARAMH.4     
      INTEGER, PARAMETER :: IMJM = IMB*JM                                  PARAMH.5     
*COMDECK OAfields                                                          OAfields.1     
      common/oasiso2a/zsst(imjm),zscur(imjm),mscur(imjm)                   OAfields.2     
     $   ,zsst_2d(MGx,NHEM,JGy)                                            OAfields.3     
     $   ,zscur_2d(MGx,NHEM,JGy),mscur_2d(MGx,NHEM,JGy)                    OAfields.4     
      real zsst,zsst_2d,zscur,zscur_2d,mscur,mscur_2d                      OAfields.5     
*COMDECK AOfields                                                          AOfields.1     
      common/oasisa2o/swlw(imjm),heatlat(imjm),water(imjm)                 AOfields.2     
     $   ,sensible(imjm),taux(imjm),tauy(imjm),exwater(imjm)               AOfields.3     
     $   ,exwat(MGx,NHEM,JGy),sensible2(imjm),sensible3(imjm)              AOfields.4     
     $   ,oceaniceflux(MGx,NHEM),exiwat(MGx,NHEM,JGy),exiwater(imjm)       AOfields.5     
     $   ,exiwatn(MGx,NHEM,JGy),exiwatern(imjm)                            AOfields.6     
     $   ,tstaroo(MGx,NHEM,JGy),tstarf(MGx,NHEM,JGy)                       AOfields.7     
     $   ,qstarf(MGx,NHEM,JGy),sqstarf(MGx,NHEM,JGy)                       AOfields.8     
     $   ,swlw2d(MGx,NHEM,JGy),heatlat2d(MGx,NHEM,JGy)                     AOfields.9     
     $   ,water2d(MGx,NHEM,JGy)                                            AOfields.10    
     $   ,sensible2d(MGx,NHEM,JGy),taux2d(MGx,NHEM,JGy)                    AOfields.11    
     $   ,tauy2d(MGx,NHEM,JGy)                                             AOfields.12    
     $   ,SHBLC(MGx,NHEM,JGy),SLBLC(MGx,NHEM,JGy)                          AOfields.13    
     $   ,exwater2d(MGx,NHEM,JGy),sensible2_2d(MGx,NHEM,JGy)               AOfields.14    
     $   ,sensible3_2d(MGx,NHEM,JGy)                                       AOfields.15    
     $   ,exiwater2d(MGx,NHEM,JGy),exiwatern2d(MGx,NHEM,JGy)               AOfields.16    
      real swlw,heatlat,water,sensible,taux,tauy,shblc,slblc,exwater       AOfields.17    
     $,exwat,sensible2,sensible3,oceaniceflux,exiwat,exiwater              AOfields.18    
     $,exiwatn,exiwatern,tstaroo,tstarf,qstarf,sqstarf                     AOfields.19    
     $,swlw2d,heatlat2d,water2d,sensible2d,taux2d,tauy2d                   AOfields.20    
     $,exwater2d,sensible2_2d,sensible3_2d,exiwater2d,exiwatern2d          AOfields.21    
                                                                           AOfields.22    
      common/wat/water2(imjm), water2_2d(MGx,NHEM,JGy)                     AOfields.23    
C Arrays wathbl, watlsl, watsbl are used for balancing water in IGCM4      AOfields.24    
C ashbl, aslbl, assbl were used in IGCM3 FORTE but these are already       AOfields.25    
C in use in elsewhere in IGCM4 for surface flux diagnostics                AOfields.26    
     $   ,wathbl(MGx,NHEM,JGy),watlbl(MGx,NHEM,JGy),watsbl(MGx,NHEM,JGy)   AOfields.27    
     $   ,sicecov(MGx,NHEM,JGy)                                            AOfields.28    
      real water2,water2_2d,wathbl,watlbl,watsbl,sicecov                   AOfields.29    
                                                                           AOfields.30    
*COMDECK clear-array                                                       clear-array.1     
      IF(MYPE.EQ.0)THEN                                                    clear-array.2     
C     write(6,*)'clearing exchange arrays'                                 clear-array.3     
      DO i = 1, imjm                                                       clear-array.4     
        swlw(i) = 0.                                                       clear-array.5     
        heatlat(i) = 0.                                                    clear-array.6     
        water(i) = 0.                                                      clear-array.7     
        water2(i) = 0.                                                     clear-array.8     
        sensible(i) = 0.                                                   clear-array.9     
        taux(i) = 0.                                                       clear-array.10    
        tauy(i) = 0.                                                       clear-array.11    
        exwater(i) = 0.                                                    clear-array.12    
        exiwater(i) = 0.                                                   clear-array.13    
        exiwatern(i) = 0.                                                  clear-array.14    
      ENDDO                                                                clear-array.15    
      ENDIF   ! End MYPE if                                                clear-array.16    
                                                                           clear-array.17    
      do j=1,JGyy(iRow)                                                    clear-array.18    
      do ihem=1,nhem                                                       clear-array.19    
      do i=1,MGxx(iCol)                                                    clear-array.20    
        swlw2d(i,ihem,j) = 0.                                              clear-array.21    
        heatlat2d(i,ihem,j) = 0.                                           clear-array.22    
        water2d(i,ihem,j) = 0.                                             clear-array.23    
        water2_2d(i,ihem,j) = 0.                                           clear-array.24    
        sensible2d(i,ihem,j) = 0.                                          clear-array.25    
        taux2d(i,ihem,j) = 0.                                              clear-array.26    
        tauy2d(i,ihem,j) = 0.                                              clear-array.27    
        exwater2d(i,ihem,j) = 0.                                           clear-array.28    
        exiwater2d(i,ihem,j) = 0.                                          clear-array.29    
        exiwatern2d(i,ihem,j) = 0.                                         clear-array.30    
      end do                                                               clear-array.31    
      end do                                                               clear-array.32    
      end do                                                               clear-array.33    
                                                                           clear-array.34    
C                                                                          clear-array.35    
                                                                           clear-array.36    
*COMDECK PARAMCOUH                                                         PARAMCOUH.1     
C                                                                          PARAMCOUH.2     
C -- param_cou.h                                                           PARAMCOUH.3     
C                                                                          PARAMCOUH.4     
      INTEGER jpmaxfld                                                     PARAMCOUH.5     
      PARAMETER(jpmaxfld = 20)                                             PARAMCOUH.6     
      INTEGER jpflda2o1                                                    PARAMCOUH.7     
      PARAMETER(jpflda2o1 = 4)                                             PARAMCOUH.8     
      INTEGER jpflda2o2                                                    PARAMCOUH.9     
      PARAMETER(jpflda2o2 = 4)                                             PARAMCOUH.10    
C                                                                          PARAMCOUH.11    
      INTEGER jpfldo2a                                                     PARAMCOUH.12    
      PARAMETER(jpfldo2a = 3)                                              PARAMCOUH.13    
C                                                                          PARAMCOUH.14    
*COMDECK OASISH                                                            OASISH.1     
C                                                                          OASISH.2     
C -- oasis.h                                                               OASISH.3     
C    ******                                                                OASISH.4     
C@                                                                         OASISH.5     
C@  Contents : choice for the OASIS version: clim or pipe                  OASISH.6     
C@  --------                                                               OASISH.7     
      CHARACTER*8 cchan                                                    OASISH.8     
      PARAMETER ( cchan='CLIM' )                                           OASISH.9     
C                                                                          OASISH.10    
C     --- end of oasis.h                                                   OASISH.11    
*COMDECK INCCPLH                                                           INCCPLH.1     
C                                                                          INCCPLH.2     
C -- inc_cpl.h                                                             INCCPLH.3     
C    **********                                                            INCCPLH.4     
C@                                                                         INCCPLH.5     
C@  Contents : variables describing field restart file names               INCCPLH.6     
C@  --------                                                               INCCPLH.7     
C@                                                                         INCCPLH.8     
C@ -- cl_write/cl_read  : for fields to write/READ                         INCCPLH.9     
C@ -- cl_f_write/cl_f_read  : for fields to write/read                     INCCPLH.10    
C@                                                                         INCCPLH.11    
C     -----------------------------------------------------------------    INCCPLH.12    
C                                                                          INCCPLH.13    
      CHARACTER*8 cl_writ(jpmaxfld), cl_read(jpmaxfld)                     INCCPLH.14    
      CHARACTER*8 cl_f_writ(jpmaxfld), cl_f_read(jpmaxfld)                 INCCPLH.15    
      COMMON / comcpl / cl_writ, cl_read, cl_f_writ, cl_f_read             INCCPLH.16    
C     -----------------------------------------------------------------    INCCPLH.17    
*COMDECK CLIMH                                                             CLIMH.1     
C                                                                          CLIMH.2     
C     - - - - - - - - - - - - - - - - - - - - - - - - -                    CLIMH.3     
C                                                                          CLIMH.4     
C*    =clim.h=  CLIM 1.1 include file                                      CLIMH.5     
C	        Coupling Library for Interfacing Models                          CLIMH.6     
C                                                                          CLIMH.7     
C     - - - - - - - - - - - - - - - - - - - - - - - - -                    CLIMH.8     
C                                                                          CLIMH.9     
      INTEGER*4 CLIM_Void                                                  CLIMH.10    
C                                                                          CLIMH.11    
      INTEGER*4	CLIM_MaxMod,                                               CLIMH.12    
     *          CLIM_MaxPort,                                              CLIMH.13    
     *          CLIM_MaxSegments,                                          CLIMH.14    
     *          CLIM_MaxTag,                                               CLIMH.15    
     *          CLIM_MaxLink,                                              CLIMH.16    
     *          CLIM_ParSize,                                              CLIMH.17    
     *          CLIM_Clength                                               CLIMH.18    
C                                                                          CLIMH.19    
      INTEGER*4 CLIM_In,        CLIM_Out,       CLIM_InOut                 CLIMH.20    
C                                                                          CLIMH.21    
      INTEGER*4 CLIM_Strategy,  CLIM_Serial,                               CLIMH.22    
     *          CLIM_Apple,     CLIM_Orange,    CLIM_Box,                  CLIMH.23    
     *          CLIM_Segments,  CLIM_Length,    CLIM_Offset,               CLIMH.24    
     *          CLIM_SizeX,     CLIM_SizeY,     CLIM_LdX                   CLIMH.25    
C                                                                          CLIMH.26    
      INTEGER*4 CLIM_Integer,   CLIM_Real,      CLIM_Double                CLIMH.27    
C                                                                          CLIMH.28    
      INTEGER*4 CLIM_StopPvm,   CLIM_ContPvm                               CLIMH.29    
C                                                                          CLIMH.30    
      INTEGER*4	CLIM_MaxCodes,  CLIM_Ok,                                   CLIMH.31    
     *          CLIM_FastExit,  CLIM_BadName,   CLIM_BadPort,              CLIMH.32    
     *          CLIM_BadType,   CLIM_DoubleDef, CLIM_NotStep,              CLIMH.33    
     *          CLIM_IncStep,   CLIM_IncSize,   CLIM_NotClim,              CLIMH.34    
     *          CLIM_TimeOut,                                              CLIMH.35    
     *          CLIM_Pvm,       CLIM_FirstCall, CLIM_PbRoute,              CLIMH.36    
     *          CLIM_Group,     CLIM_BadTaskId, CLIM_NoTask,               CLIMH.37    
     *          CLIM_InitBuff,  CLIM_Pack,      CLIM_Unpack,               CLIMH.38    
     *          CLIM_Down,      CLIM_PvmExit                               CLIMH.39    
C                                                                          CLIMH.40    
C-----Parameter sizes                                                      CLIMH.41    
C                                                                          CLIMH.42    
      PARAMETER ( CLIM_Void    = 0  )                                      CLIMH.43    
      PARAMETER ( CLIM_MaxMod  = 8 )                                       CLIMH.44    
      PARAMETER ( CLIM_MaxPort = 40 )                                      CLIMH.45    
      PARAMETER ( CLIM_MaxSegments = 160 )                                 CLIMH.46    
      PARAMETER ( CLIM_MaxLink = CLIM_MaxMod * CLIM_MaxPort )              CLIMH.47    
      PARAMETER ( CLIM_ParSize = 2 * CLIM_MaxSegments + 2 )                CLIMH.48    
      PARAMETER ( CLIM_MaxTag  = 16777215 )                                CLIMH.49    
      PARAMETER ( CLIM_Clength = 32 )                                      CLIMH.50    
C                                                                          CLIMH.51    
C-----Ports status                                                         CLIMH.52    
C                                                                          CLIMH.53    
      PARAMETER ( CLIM_In      = 1 )                                       CLIMH.54    
      PARAMETER ( CLIM_Out     = 0 )                                       CLIMH.55    
      PARAMETER ( CLIM_InOut   = 2 )                                       CLIMH.56    
C                                                                          CLIMH.57    
C-----Parallel distribution                                                CLIMH.58    
C                                                                          CLIMH.59    
      PARAMETER ( CLIM_Strategy = 1 )                                      CLIMH.60    
      PARAMETER ( CLIM_Segments = 2 )                                      CLIMH.61    
      PARAMETER ( CLIM_Serial   = 0 )                                      CLIMH.62    
      PARAMETER ( CLIM_Apple    = 1 )                                      CLIMH.63    
      PARAMETER ( CLIM_Box      = 2 )                                      CLIMH.64    
      PARAMETER ( CLIM_Orange   = 3 )                                      CLIMH.65    
      PARAMETER ( CLIM_Offset   = 2 )                                      CLIMH.66    
      PARAMETER ( CLIM_Length   = 3 )                                      CLIMH.67    
      PARAMETER ( CLIM_SizeX    = 3 )                                      CLIMH.68    
      PARAMETER ( CLIM_SizeY    = 4 )                                      CLIMH.69    
      PARAMETER ( CLIM_LdX      = 5 )                                      CLIMH.70    
C                                                                          CLIMH.71    
C-----Datatypes                                                            CLIMH.72    
C                                                                          CLIMH.73    
      PARAMETER ( CLIM_Integer = 1 )                                       CLIMH.74    
      PARAMETER ( CLIM_Real    = 4 )                                       CLIMH.75    
      PARAMETER ( CLIM_Double  = 8 )                                       CLIMH.76    
C                                                                          CLIMH.77    
C-----Quit parameters                                                      CLIMH.78    
C                                                                          CLIMH.79    
      PARAMETER ( CLIM_ContPvm = 0 )                                       CLIMH.80    
      PARAMETER ( CLIM_StopPvm = 1 )                                       CLIMH.81    
C                                                                          CLIMH.82    
C-----Error Codes                                                          CLIMH.83    
C                                                                          CLIMH.84    
      PARAMETER ( CLIM_MaxCodes  = -21 )                                   CLIMH.85    
C                                                                          CLIMH.86    
      PARAMETER ( CLIM_Ok        = 0 )                                     CLIMH.87    
      PARAMETER ( CLIM_FastExit  = -1 )                                    CLIMH.88    
      PARAMETER ( CLIM_BadName   = -2 )                                    CLIMH.89    
      PARAMETER ( CLIM_BadPort   = -3 )                                    CLIMH.90    
      PARAMETER ( CLIM_BadType   = -4 )                                    CLIMH.91    
      PARAMETER ( CLIM_DoubleDef = -5 )                                    CLIMH.92    
      PARAMETER ( CLIM_NotStep   = -6 )                                    CLIMH.93    
      PARAMETER ( CLIM_IncStep   = -7 )                                    CLIMH.94    
      PARAMETER ( CLIM_IncSize   = -8 )                                    CLIMH.95    
      PARAMETER ( CLIM_NotClim   = -9 )                                    CLIMH.96    
      PARAMETER ( CLIM_TimeOut   = -10 )                                   CLIMH.97    
      PARAMETER ( CLIM_Pvm       = -11 )                                   CLIMH.98    
      PARAMETER ( CLIM_FirstCall = -12 )                                   CLIMH.99    
      PARAMETER ( CLIM_PbRoute   = -13 )                                   CLIMH.100   
      PARAMETER ( CLIM_Group     = -14 )                                   CLIMH.101   
      PARAMETER ( CLIM_BadTaskId = -15 )                                   CLIMH.102   
      PARAMETER ( CLIM_NoTask    = -16 )                                   CLIMH.103   
      PARAMETER ( CLIM_InitBuff  = -17 )                                   CLIMH.104   
      PARAMETER ( CLIM_Pack      = -18 )                                   CLIMH.105   
      PARAMETER ( CLIM_Unpack    = -19 )                                   CLIMH.106   
      PARAMETER ( CLIM_Down      = -20 )                                   CLIMH.107   
      PARAMETER ( CLIM_PvmExit   = -21 )                                   CLIMH.108   
C                                                                          CLIMH.109   
C-----End of clim.h                                                        CLIMH.110   
*DECK MLTRI                                                                MLTRI.1     
*IF DEF,ABOVE_V1                                                           MLTRI.2     
*IF DEF,ONLY_V3                                                            MLTRI.3     
!=====================================================                     MLTRI.4     
! IGCM3_1: FULL PHYSICS + MIXED LAYER OCEAN (Parallel)                     MLTRI.5     
!                                                                          MLTRI.6     
! DEPARTMENT OF METEOROLOGY, UNIVERSITY OF READING                         MLTRI.7     
!=====================================================                     MLTRI.8     
        PROGRAM IGCM3                                                      MLTRI.9     
*ELSE                                                                      MLTRI.10    
!=====================================================                     MLTRI.11    
! IGCM2_2 (Parallel)                                                       MLTRI.12    
!                                                                          MLTRI.13    
! DEPARTMENT OF METEOROLOGY, UNIVERSITY OF READING                         MLTRI.14    
!=====================================================                     MLTRI.15    
        PROGRAM IGCM2                                                      MLTRI.16    
*ENDIF                                                                     MLTRI.17    
*ELSE                                                                      MLTRI.18    
!=====================================================                     MLTRI.19    
! IGCM1 (Parallel)                                                         MLTRI.20    
!                                                                          MLTRI.21    
! DEPARTMENT OF METEOROLOGY, UNIVERSITY OF READING                         MLTRI.22    
!=====================================================                     MLTRI.23    
        PROGRAM IGCM1                                                      MLTRI.24    
*ENDIF                                                                     MLTRI.25    
        IMPLICIT NONE                                                      MLTRI.26    
*CALL DOC                                                                  MLTRI.27    
*CALL PARAM1                                                               MLTRI.28    
*CALL PARAM2                                                               MLTRI.29    
*CALL PARAM3                                                               MLTRI.30    
*CALL BALAN                                                                MLTRI.31    
*CALL BATS                                                                 MLTRI.32    
*CALL BLANK                                                                MLTRI.33    
*CALL COMFFT                                                               MLTRI.34    
*CALL OUTCON                                                               MLTRI.35    
*CALL PHYSCA                                                               MLTRI.36    
*CALL PTENDZ                                                               MLTRI.37    
*CALL RESTIJ                                                               MLTRI.38    
*CALL RESTOR                                                               MLTRI.39    
*CALL CPIERS                                                               MLTRI.40    
*CALL STATS                                                                MLTRI.41    
*CALL SPECTR                                                               MLTRI.42    
*CALL GRIDPA                                                               MLTRI.43    
*CALL GRIDPB                                                               MLTRI.44    
*IF DEF,NOMPI                                                              MLTRI.45    
*ELSE                                                                      MLTRI.46    
*CALL SPECTR2                                                              MLTRI.47    
*CALL GRIDPA2                                                              MLTRI.48    
*CALL GRIDPB2                                                              MLTRI.49    
*ENDIF                                                                     MLTRI.50    
*CALL MPIDECK                                                              MLTRI.51    
*IF DEF,ONLY_V3                                                            MLTRI.52    
*CALL RADHT                                                                MLTRI.53    
*ENDIF                                                                     MLTRI.54    
*CALL OROG_G                                                               OAS_COMTILE.101   
*CALL PARAMH                                                               OAS_COMTILE.102   
*CALL OAfields                                                             OAS_COMTILE.103   
*CALL AOfields                                                             OAS_COMTILE.104   
                                                                           OAS_COMTILE.105   
!-----------------------------------------------------                     MLTRI.55    
! Local variables                                                          MLTRI.56    
!-----------------------------------------------------                     MLTRI.57    
! RKOUNT is an integer, but output expects a REAL                          MLTRI.58    
      REAL :: RKOUNT                                                       MLTRI.59    
! Array needed by SPDEL2                                                   MLTRI.60    
      REAL :: FILT(0:NN)                                                   MLTRI.61    
      INTEGER :: KKOUT                                                     MLTRI.62    
      INTEGER :: KountStart                                                MLTRI.63    
*IF DEF,ABOVE_V1                                                           MLTRI.64    
      REAL :: RKP                                                          MLTRI.65    
      REAL :: RREC                                                         MLTRI.66    
*ENDIF                                                                     MLTRI.67    
      REAL :: GSFAC                                                        SURF_TYPE_BL.170   
! Loop variables                                                           MLTRI.68    
      INTEGER :: I, IHEM, IM, IN, J, L, KOUNT2                             MLTRI.69    
      INTEGER npas      ! number of timesteps for the simulation           OAS_TEST.1     
      INTEGER nexca     ! coupling interval (in timesteps).                OAS_TEST.2     
      INTEGER itimestep ! timestep in seconds                              OAS_TEST.3     
      INTEGER itap, ji, jf, jpos                                           OAS_TEST.4     
      INTEGER counter,ifirstday,start,bs_av1,bs_av2,ibabs                  OAS_TEST.5     
      LOGICAL last,archts                                                  OAS_TEST.6     
                                                                           OAS_TEST.7     
      real gcouple,restorice,tspd                                          OAS_TEST.8     
                                                                           OAS_TEST.9     
c                                                                          OAS_TEST.10    
      EXTERNAL inicma           ! initialize the coupling channels         OAS_TEST.11    
      EXTERNAL intocpl          ! sends the fields to Oasis                OAS_TEST.12    
      EXTERNAL fromcpl          ! receives the fields from Oasis           OAS_TEST.13    
                                                                           OAS_TEST.14    
! Full 2D variables for OASIS collected from and sent to PEs               OAS_TEST.15    
                                                                           OAS_TEST.16    
      REAL, ALLOCATABLE :: SWLW2DFULL(:,:,:)                               OAS_TEST.17    
      REAL, ALLOCATABLE :: HEATLAT2DFULL(:,:,:)                            OAS_TEST.18    
      REAL, ALLOCATABLE :: WATER2DFULL(:,:,:)                              OAS_TEST.19    
      REAL, ALLOCATABLE :: SENSIBLE2DFULL(:,:,:)                           OAS_TEST.20    
      REAL, ALLOCATABLE :: TAUX2DFULL(:,:,:)                               OAS_TEST.21    
      REAL, ALLOCATABLE :: TAUY2DFULL(:,:,:)                               OAS_TEST.22    
      REAL, ALLOCATABLE :: ZSST_2DFULL(:,:,:)                              OAS_TEST.23    
      REAL, ALLOCATABLE :: ZSCUR_2DFULL(:,:,:)                             OAS_TEST.24    
      REAL, ALLOCATABLE :: MSCUR_2DFULL(:,:,:)                             OAS_TEST.25    
C Water2dfull allocated in OAS_TEST update                                 OAS_RUNOFF.79    
      REAL, ALLOCATABLE :: exwater2dfull(:,:,:)                            OAS_RUNOFF.80    
      REAL, ALLOCATABLE :: exiwater2dfull(:,:,:)                           OAS_RUNOFF.81    
      REAL, ALLOCATABLE :: exiwatern2dfull(:,:,:)                          OAS_RUNOFF.82    
      REAL, ALLOCATABLE :: water2_2dfull(:,:,:)                            OAS_RUNOFF.83    
!-----------------------------------------------------                     MLTRI.70    
! Format statements                                                        MLTRI.71    
!-----------------------------------------------------                     MLTRI.72    
*IF DEF,ONLY_V3                                                            MLTRI.73    
 2000 FORMAT(/' RESTART RECORD WRITTEN TO CHANNEL ',I3,/                   MLTRI.74    
     &        ' RKOUNT  RNTAPE  DAY  DOY  =',4F12.3)                       MLTRI.75    
 2010 FORMAT(/' HISTORY RECORD WRITTEN TO CHANNEL ',I3,/                   MLTRI.76    
     &        ' RKOUNT  RNTAPE  DAY  DOY  =',4F12.3)                       MLTRI.77    
 2020 FORMAT(/' RESTORATION RECORD WRITTEN TO CHANNEL ',I3,/               MLTRI.78    
     &        ' RKOUNT  RNTAPE  DAY  DOY  =',4F12.3)                       MLTRI.79    
*ELSE                                                                      MLTRI.80    
 2000 FORMAT(/' RESTART RECORD WRITTEN TO CHANNEL ',I3,/                   MLTRI.81    
     &        ' RKOUNT  RNTAPE  DAY  =',3F12.3)                            MLTRI.82    
 2010 FORMAT(/' HISTORY RECORD WRITTEN TO CHANNEL ',I3,/                   MLTRI.83    
     &        ' RKOUNT  RNTAPE  DAY  =',3F12.3)                            MLTRI.84    
 2020 FORMAT(/' RESTORATION RECORD WRITTEN TO CHANNEL ',I3,/               MLTRI.85    
     &        ' RKOUNT  RNTAPE  DAY  =',3F12.3)                            MLTRI.86    
*ENDIF                                                                     MLTRI.87    
!-----------------------------------------------------                     MLTRI.88    
! Initialize variables and physical state                                  MLTRI.89    
!-----------------------------------------------------                     MLTRI.90    
      CALL INITAL                                                          MLTRI.91    
c                                                                          OAS_TEST.26    
      counter=1                                                            OAS_TEST.27    
      gcouple=2                                                            OAS_TEST.28    
                                                                           OAS_TEST.29    
      if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                   OAS_TEST.30    
      IF(MYPE.EQ.0)THEN                                                    OAS_TEST.31    
                                                                           OAS_TEST.32    
        nexca=1                                                            OAS_TEST.33    
        npas=KRUN/ITSPD                                                    OAS_TEST.34    
        itimestep=1                                                        OAS_TEST.35    
        ifirstday=day                                                      OAS_TEST.36    
        start=start+ifirstday                                              OAS_TEST.37    
                                                                           OAS_TEST.38    
        PRINT * , 'Toyclim: the atmospheric grid is  imb  = ', imb         OAS_TEST.39    
        PRINT * , '                               *  jm  = ', jm           OAS_TEST.40    
        PRINT * ,'                            so  imjm  = ', imjm          OAS_TEST.41    
        PRINT *                                                            OAS_TEST.42    
        PRINT * ,'npas, nexca, itimestep=', npas, nexca, itimestep         OAS_TEST.43    
                                                                           OAS_TEST.44    
c Initialize coupling                                                      OAS_TEST.45    
        CALL inicma(npas, nexca, itimestep)                                OAS_TEST.46    
      ENDIF   ! End MYPE if                                                OAS_TEST.47    
      if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                   OAS_TEST.48    
                                                                           OAS_TEST.49    
c Set oasis exchange arrays to zero only at start of run                   OAS_ACCUM_TILE.142   
C      IF (mod(kount,ITSPD).eq.0) then                                     OAS_ACCUM_TILE.143   
      IF (kount.eq.0) then                                                 OAS_ACCUM_TILE.144   
                                                                           OAS_ACCUM_TILE.145   
*CALL clear-array                                                          OAS_ACCUM_TILE.146   
      ENDIF                                                                OAS_ACCUM_TILE.147   
      if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                   OAS_ACCUM_TILE.148   
C                                                                          OAS_ACCUM_TILE.149   
!-----------------------------------------------------                     MLTRI.92    
! Loop across timesteps                                                    MLTRI.93    
!-----------------------------------------------------                     MLTRI.94    
      KountStart=KOUNT                                                     MLTRI.95    
      DO KOUNT2=KountStart,KTOTAL                                          MLTRI.96    
c IF coupling timestep, get oceanic fields from Oasis                      OAS_TEST.50    
C At timesteps 0,1,2,3*ITSPD + 1 etc collect SST from MOMA via OASIS       OAS_TEST.51    
C This happens in the timestep after calling ALTERWATER and INTOCPL        OAS_TEST.52    
                                                                           OAS_TEST.53    
      IF (MOD( (KOUNT-1),ITSPD).eq.0) THEN                                 OAS_TEST.54    
        if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                 OAS_TEST.55    
        IF(MYPE.EQ.0)THEN                                                  OAS_TEST.56    
                                                                           OAS_TEST.57    
          CALL fromcpl(nint(DAY-ifirstday)*nexca, imjm, zsst,              OAS_TEST.58    
     $                 zscur,mscur)                                        OAS_TEST.59    
                                                                           OAS_TEST.60    
          ALLOCATE(zsst_2dfull(MG,NHEM,JG))                                OAS_TEST.61    
          ALLOCATE(zscur_2dfull(MG,NHEM,JG))                               OAS_TEST.62    
          ALLOCATE(mscur_2dfull(MG,NHEM,JG))                               OAS_TEST.63    
                                                                           OAS_TEST.64    
          do j=1,jg                                                        OAS_TEST.65    
            do i=1,mg                                                      OAS_TEST.66    
              zsst_2dfull(i,1,j)=zsst((j-1)*imb+i)                         OAS_TEST.67    
              zsst_2dfull(i,2,jg-j+1)=zsst((jg+j-1)*imb+i)                 OAS_TEST.68    
              zscur_2dfull(i,1,j)=zscur((j-1)*imb+i)                       OAS_TEST.69    
              zscur_2dfull(i,2,jg-j+1)=zscur((jg+j-1)*imb+i)               OAS_TEST.70    
              mscur_2dfull(i,1,j)=mscur((j-1)*imb+i)                       OAS_TEST.71    
              mscur_2dfull(i,2,jg-j+1)=mscur((jg+j-1)*imb+i)               OAS_TEST.72    
            end do                                                         OAS_TEST.73    
          end do                                                           OAS_TEST.74    
                                                                           OAS_TEST.75    
        endif ! End MYPE if                                                OAS_TEST.76    
        if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                 OAS_TEST.77    
                                                                           OAS_TEST.78    
C     Send ZSST from full arrays to PEs                                    OAS_TEST.79    
        CALL SHAREGRID(.TRUE.,MG,1,zsst_2dfull,zsst_2d)                    OAS_TEST.80    
        CALL SHAREGRID(.TRUE.,MG,1,zscur_2dfull,zscur_2d)                  OAS_TEST.81    
        CALL SHAREGRID(.TRUE.,MG,1,mscur_2dfull,mscur_2d)                  OAS_TEST.82    
                                                                           OAS_TEST.83    
        IF(MYPE.EQ.0)DEALLOCATE(zsst_2dfull)                               OAS_TEST.84    
        IF(MYPE.EQ.0)DEALLOCATE(zscur_2dfull)                              OAS_TEST.85    
        IF(MYPE.EQ.0)DEALLOCATE(mscur_2dfull)                              OAS_TEST.86    
        if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                 OAS_TEST.87    
                                                                           OAS_TEST.88    
      ENDIF    ! End MOD(KOUNT-1,ITSPD) if                                 OAS_TEST.89    
*IF DEF,ONLY_V2                                                            MLTRI.97    
         !-----------------------------------------------------            MLTRI.98    
         ! Write history and restart records if required at                MLTRI.99    
         ! this timestep.                                                  MLTRI.100   
         !-----------------------------------------------------            MLTRI.101   
         RKOUNT=KOUNT                                                      MLTRI.102   
         !-----------------------------------------------------            MLTRI.103   
         ! Write a restoration record                                      MLTRI.104   
         !-----------------------------------------------------            MLTRI.105   
         IF (LRESTIJ) THEN                                                 MLTRI.106   
            IF (KOUTH.EQ.KOUNTH.OR.KOUTR.EQ.KOUNTR) THEN                   MLTRI.107   
               !---------------------------------------------------        MLTRI.108   
               ! Write TTRES to file                                       MLTRI.109   
               !---------------------------------------------------        MLTRI.110   
               CALL WRITECOEF(13, 4, RKOUNT, RNTAPE, DAY)                  MLTRI.111   
               IF (MYPE.EQ.0) WRITE(2,2020)13,RKOUNT,RNTAPE,DAY            MLTRI.112   
            ENDIF                                                          MLTRI.113   
         ENDIF                                                             MLTRI.114   
         !-----------------------------------------------------            MLTRI.115   
         ! Write a history record                                          MLTRI.116   
         !-----------------------------------------------------            MLTRI.117   
         IF (KOUNT.EQ.0.OR.KOUTH.EQ.KOUNTH) THEN                           MLTRI.118   
            !-----------------------------------------------------         MLTRI.119   
            ! Write Z, D, T (and TRA for version 2.2) and SP to file       MLTRI.120   
            !-----------------------------------------------------         MLTRI.121   
            CALL WRITECOEF(9, 1, RKOUNT, RNTAPE, DAY)                      MLTRI.122   
            IF (MYPE.EQ.0) WRITE(2,2010)9,RKOUNT,RNTAPE,DAY                MLTRI.123   
            IF (KOUNT.NE.0) KOUTH=0                                        MLTRI.124   
         ENDIF                                                             MLTRI.125   
         !-----------------------------------------------------            MLTRI.126   
         ! Write a restart record                                          MLTRI.127   
         !-----------------------------------------------------            MLTRI.128   
         IF (KOUTR.EQ.KOUNTR) THEN                                         MLTRI.129   
            !-----------------------------------------------------         MLTRI.130   
            ! Write Z, D, T, SP, ZMI, DMI, TMI and SPMI to file.           MLTRI.131   
            !-----------------------------------------------------         MLTRI.132   
            CALL WRITECOEF(11, 3, RKOUNT, RNTAPE, DAY)                     MLTRI.133   
            IF (MYPE.EQ.0) WRITE(2,2000)11,RKOUNT,RNTAPE,DAY               MLTRI.134   
            !-----------------------------------------------------         MLTRI.135   
            ! Write GMSP0 and GMSPMI to file                               MLTRI.136   
            !-----------------------------------------------------         MLTRI.137   
            IF ((LMASCOR).AND.(MyPe.EQ.0)) THEN                            MLTRI.138   
               RREC=2.0                                                    MLTRI.139   
               WRITE(11) RKOUNT,RNTAPE,DAY,RREC,GMSP0,GMSPMI,RNTAPE        MLTRI.140   
            ENDIF                                                          MLTRI.141   
            !-----------------------------------------------------         MLTRI.142   
            ! Write TRAGMI to file                                         MLTRI.143   
            !-----------------------------------------------------         MLTRI.144   
            IF (NTRVAD.GT.1.AND.NTRAC.GT.0) THEN                           MLTRI.145   
               CALL WRITEGRID(11, 16, RKOUNT, RNTAPE, DAY)                 MLTRI.146   
            ENDIF                                                          MLTRI.147   
            KOUTR=0                                                        MLTRI.148   
         ENDIF                                                             MLTRI.149   
*ENDIF                                                                     MLTRI.150   
                                                                           OAS_RUNOFF.84    
C At timesteps 0,1,2,3*ITSPD etc collect water & runoff quantities         OAS_RUNOFF.85    
C and call alterwater which alters WATER2D                                 OAS_RUNOFF.86    
                                                                           OAS_RUNOFF.87    
      IF (MOD(KOUNT,ITSPD).eq.0) THEN                                      OAS_RUNOFF.88    
                                                                           OAS_RUNOFF.89    
        IF(MYPE.EQ.0)THEN                                                  OAS_RUNOFF.90    
          ALLOCATE(water2dfull(MG,NHEM,JG))                                OAS_RUNOFF.91    
          ALLOCATE(exwater2dfull(MG,NHEM,JG))                              OAS_RUNOFF.92    
          ALLOCATE(exiwater2dfull(MG,NHEM,JG))                             OAS_RUNOFF.93    
          ALLOCATE(exiwatern2dfull(MG,NHEM,JG))                            OAS_RUNOFF.94    
          ALLOCATE(water2_2dfull(MG,NHEM,JG))                              OAS_RUNOFF.95    
        ENDIF                                                              OAS_RUNOFF.96    
                                                                           OAS_RUNOFF.97    
C collect variables from processes to arrays water2dfull,                  OAS_RUNOFF.98    
C exwater2dfull,exiwater2dfull,exiwater2dfull,water2_2dfull                OAS_RUNOFF.99    
C MPI NOTE: WATER2_2DFULL is not used in ALTERWATER so                     OAS_RUNOFF.100   
C use this array to pass the full OFRAC array to ALTERWATER.               OAS_RUNOFF.101   
C This is because ALTERWATER uses OFRAC annoyingly enough                  OAS_RUNOFF.102   
C which is split amongst the different processes.                          OAS_RUNOFF.103   
                                                                           OAS_RUNOFF.104   
        CALL SHAREGRID(.FALSE.,MG,1,water2dfull,water2d)                   OAS_RUNOFF.105   
        CALL SHAREGRID(.FALSE.,MG,1,exwater2dfull,exwater2d)               OAS_RUNOFF.106   
        CALL SHAREGRID(.FALSE.,MG,1,exiwater2dfull,exiwater2d)             OAS_RUNOFF.107   
        CALL SHAREGRID(.FALSE.,MG,1,exiwatern2dfull,exiwatern2d)           OAS_RUNOFF.108   
        CALL SHAREGRID(.FALSE.,MG,1,water2_2dfull,ofrac)                   OAS_RUNOFF.109   
                                                                           OAS_RUNOFF.110   
        if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                 OAS_RUNOFF.111   
        if(mype.eq.0)then                                                  OAS_RUNOFF.112   
          CALL alterwater(exwater2dfull,exiwater2dfull,                    OAS_RUNOFF.113   
     1    exiwatern2dfull,water2dfull,water2_2dfull)                       OAS_RUNOFF.114   
        endif   ! End MYPE if                                              OAS_RUNOFF.115   
        if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                 OAS_RUNOFF.116   
                                                                           OAS_RUNOFF.117   
C send variables from 'full' arrays back to different processors           OAS_RUNOFF.118   
C in analagous manner to GSGfull & GSG in INISTR                           OAS_RUNOFF.119   
                                                                           OAS_RUNOFF.120   
        CALL SHAREGRID(.TRUE.,MG,1,water2dfull,water2d)                    OAS_RUNOFF.121   
        CALL SHAREGRID(.TRUE.,MG,1,exwater2dfull,exwater2d)                OAS_RUNOFF.122   
        CALL SHAREGRID(.TRUE.,MG,1,exiwater2dfull,exiwater2d)              OAS_RUNOFF.123   
        CALL SHAREGRID(.TRUE.,MG,1,exiwatern2dfull,exiwatern2d)            OAS_RUNOFF.124   
                                                                           OAS_RUNOFF.125   
        IF(MYPE.EQ.0)THEN                                                  OAS_RUNOFF.126   
          DEALLOCATE(water2dfull)                                          OAS_RUNOFF.127   
          DEALLOCATE(exwater2dfull)                                        OAS_RUNOFF.128   
          DEALLOCATE(exiwater2dfull)                                       OAS_RUNOFF.129   
          DEALLOCATE(exiwatern2dfull)                                      OAS_RUNOFF.130   
          DEALLOCATE(water2_2dfull)                                        OAS_RUNOFF.131   
        endif   ! End MYPE if                                              OAS_RUNOFF.132   
                                                                           OAS_RUNOFF.133   
        if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                 OAS_RUNOFF.134   
                                                                           OAS_RUNOFF.135   
      ENDIF    ! End MOD(KOUNT,ITSPD) IF                                   OAS_RUNOFF.136   
C                                                                          OAS_RUNOFF.137   
         !-----------------------------------------------------            MLTRI.151   
                                                                           OAS_TEST.90    
C At timesteps 0,1,2,3*ITSPD etc collect coupling quantities               OAS_TEST.91    
C and call INTOCPL which sends variables to MOMA via OASIS                 OAS_TEST.92    
                                                                           OAS_TEST.93    
      IF (MOD(KOUNT,ITSPD).eq.0) THEN                                      OAS_TEST.94    
        if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                 OAS_TEST.95    
        IF(MYPE.EQ.0)THEN                                                  OAS_TEST.96    
                                                                           OAS_TEST.97    
c       For last time step, keep files just before coupling                OAS_TEST.98    
          last=.FALSE.                                                     OAS_TEST.99    
C          IF (nint(day-ifirstday).eq.npas) last=.TRUE.                    OAS_TEST.100   
          IF (KOUNT2.eq.KTOTAL) last=.TRUE.                                OAS_TEST.101   
          IF (koutr.eq.KOUNTR) archts=.TRUE.                               OAS_TEST.102   
                                                                           OAS_TEST.103   
          ALLOCATE(water2dfull(MG,NHEM,JG))                                OAS_TEST.104   
          ALLOCATE(swlw2dfull(MG,NHEM,JG))                                 OAS_TEST.105   
          ALLOCATE(heatlat2dfull(MG,NHEM,JG))                              OAS_TEST.106   
          ALLOCATE(sensible2dfull(MG,NHEM,JG))                             OAS_TEST.107   
          ALLOCATE(taux2dfull(MG,NHEM,JG))                                 OAS_TEST.108   
          ALLOCATE(tauy2dfull(MG,NHEM,JG))                                 OAS_TEST.109   
                                                                           OAS_TEST.110   
        ENDIF   ! End mype if                                              OAS_TEST.111   
                                                                           OAS_TEST.112   
C     Collect data from PEs and send to full arrays                        OAS_TEST.113   
        CALL SHAREGRID(.FALSE.,MG,1,water2dfull,water2d)                   OAS_TEST.114   
        CALL SHAREGRID(.FALSE.,MG,1,swlw2dfull,swlw2d)                     OAS_TEST.115   
        CALL SHAREGRID(.FALSE.,MG,1,heatlat2dfull,heatlat2d)               OAS_TEST.116   
        CALL SHAREGRID(.FALSE.,MG,1,sensible2dfull,sensible2d)             OAS_TEST.117   
        CALL SHAREGRID(.FALSE.,MG,1,taux2dfull,taux2d)                     OAS_TEST.118   
        CALL SHAREGRID(.FALSE.,MG,1,tauy2dfull,tauy2d)                     OAS_TEST.119   
c                                                                          OAS_TEST.120   
c       Give atmospheric fields to Oasis                                   OAS_TEST.121   
c                                                                          OAS_TEST.122   
        if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                 OAS_TEST.123   
        if(mype.eq.0)then                                                  OAS_TEST.124   
          do j=1,jg                                                        OAS_TEST.125   
          do i=1,mg                                                        OAS_TEST.126   
          swlw((j-1)*imb+i)=swlw2dfull(i,1,j)                              OAS_TEST.127   
          swlw((jg+j-1)*imb+i)=swlw2dfull(i,2,jg-j+1)                      OAS_TEST.128   
          heatlat((j-1)*imb+i)=heatlat2dfull(i,1,j)                        OAS_TEST.129   
          heatlat((jg+j-1)*imb+i)=heatlat2dfull(i,2,jg-j+1)                OAS_TEST.130   
          water((j-1)*imb+i)=water2dfull(i,1,j)                            OAS_TEST.131   
          water((jg+j-1)*imb+i)=water2dfull(i,2,jg-j+1)                    OAS_TEST.132   
          sensible((j-1)*imb+i)=sensible2dfull(i,1,j)                      OAS_TEST.133   
          sensible((jg+j-1)*imb+i)=sensible2dfull(i,2,jg-j+1)              OAS_TEST.134   
          taux((j-1)*imb+i)=taux2dfull(i,1,j)                              OAS_TEST.135   
          taux((jg+j-1)*imb+i)=taux2dfull(i,2,jg-j+1)                      OAS_TEST.136   
          tauy((j-1)*imb+i)=tauy2dfull(i,1,j)                              OAS_TEST.137   
          tauy((jg+j-1)*imb+i)=tauy2dfull(i,2,jg-j+1)                      OAS_TEST.138   
          end do                                                           OAS_TEST.139   
          end do                                                           OAS_TEST.140   
                                                                           OAS_TEST.141   
          DEALLOCATE(swlw2dfull)                                           OAS_TEST.142   
          DEALLOCATE(heatlat2dfull)                                        OAS_TEST.143   
          DEALLOCATE(sensible2dfull)                                       OAS_TEST.144   
          DEALLOCATE(water2dfull)                                          OAS_TEST.145   
          DEALLOCATE(taux2dfull)                                           OAS_TEST.146   
          DEALLOCATE(tauy2dfull)                                           OAS_TEST.147   
                                                                           OAS_TEST.148   
          CALL intocpl(nint(DAY-ifirstday)*nexca, imjm, swlw, heatlat      OAS_TEST.149   
     $              , water, sensible, taux, tauy, archts, last)           OAS_TEST.150   
          archts=.false.                                                   OAS_TEST.151   
        ENDIF    ! End MYPE if                                             OAS_TEST.152   
*CALL clear-array                                                          OAS_TEST.153   
        if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                 OAS_TEST.154   
      ENDIF  ! End MOD(KOUNT,ITPSD) if                                     OAS_TEST.155   
         ! Adiabatic part of timestep.                                     MLTRI.152   
         ! Preset tendencies to zero.                                      MLTRI.153   
         !-----------------------------------------------------            MLTRI.154   
*IF DEF,NOMPI                                                              MLTRI.155   
         VP(:,:,:) =0.0                                                    MLTRI.156   
         SPA(:,:,:)=0.0                                                    MLTRI.157   
         ZT(:,:,:,:)=0.0                                                   MLTRI.158   
         DT(:,:,:,:)=0.0                                                   MLTRI.159   
         TT(:,:,:,:)=0.0                                                   MLTRI.160   
         DTE(:,:,:,:)=0.0                                                  MLTRI.161   
*IF DEF,ABOVE_V1                                                           MLTRI.162   
         TRAT(:,:,:,:,:)=0.0                                               MLTRI.163   
*ENDIF                                                                     MLTRI.164   
*ELSE                                                                      MLTRI.165   
         VP2(:,:,:) =0.0                                                   MLTRI.166   
         SPA2(:,:,:)=0.0                                                   MLTRI.167   
         ZT2(:,:,:,:)=0.0                                                  MLTRI.168   
         DT2(:,:,:,:)=0.0                                                  MLTRI.169   
         TT2(:,:,:,:)=0.0                                                  MLTRI.170   
         DTE2(:,:,:,:)=0.0                                                 MLTRI.171   
*IF DEF,ABOVE_V1                                                           MLTRI.172   
         TRAT2(:,:,:,:,:)=0.0                                              MLTRI.173   
*ENDIF                                                                     MLTRI.174   
*ENDIF                                                                     MLTRI.175   
         !-----------------------------------------------------            MLTRI.176   
         ! Actions for initial timestep                                    MLTRI.177   
         !-----------------------------------------------------            MLTRI.178   
         IF (KOUNT.EQ.0) THEN                                              MLTRI.179   
*IF DEF,ABOVE_V1                                                           MLTRI.180   
            !-----------------------------------------------------         MLTRI.181   
            ! Initialise new tracer fields.                                MLTRI.182   
            !-----------------------------------------------------         MLTRI.183   
            IF (.NOT. LRSTRT) CALL ICTRAC                                  MLTRI.184   
*ENDIF                                                                     MLTRI.185   
            !-----------------------------------------------------         MLTRI.186   
            ! Add white noise perturbation                                 MLTRI.187   
            !-----------------------------------------------------         MLTRI.188   
            IF (LNOISE.AND..NOT.LRSTRT) CALL NOISE                         MLTRI.189   
            !-----------------------------------------------------         MLTRI.190   
            ! Calculate restoration arrays                                 MLTRI.191   
            !-----------------------------------------------------         MLTRI.192   
            IF (.NOT. LRESTIJ) CALL SETRES                                 MLTRI.193   
         ENDIF                                                             MLTRI.194   
*IF DEF,ONLY_V3                                                            MLTRI.195   
         !-----------------------------------------------------            MLTRI.196   
         ! Set surface pressure to 976mb                                   MLTRI.197   
         !-----------------------------------------------------            MLTRI.198   
         IF ( (MyPe.EQ.0).AND.(DAY.LT.0.1) ) THEN                          MLTRI.199   
            print *,' setting surface pressure to 976mb'                   MLTRI.200   
            SP(1,1,1)=CMPLX((sqr2*(0.976-1.0)),0.0)                        MLTRI.201   
         ENDIF                                                             MLTRI.202   
      IF (MyPe.EQ.0.and.mod(kount,960).EQ.0)print*,day,                    MISC_COMMON.17    
     :sp(1,1,1),sp(1,1,2),T(1,1,1,35),D(1,1,2,1)                           MISC_COMMON.18    
*ENDIF                                                                     MLTRI.203   
         KKOUT=KOUNT*(KOUNTP-KOUTP)                                        MLTRI.204   
*IF DEF,NOMPI                                                              MLTRI.205   
*ELSE                                                                      MLTRI.206   
            IF (LNOISE.AND..NOT.LRSTRT) CALL NOISEold                      MISC_COMMON.1     
         ! Transpose the arrays so that the meridional wavenumber          MLTRI.208   
         ! dimension is the only dimension that isn't decomposed           MLTRI.209   
         ! over PEs                                                        MLTRI.210   
         !-----------------------------------------------------            MLTRI.211   
         CALL TRANS1                                                       MLTRI.212   
*ENDIF                                                                     MLTRI.213   
         !-----------------------------------------------------            MLTRI.214   
         ! Convert the meridional wavenumber dimension to a                MLTRI.215   
         ! latitude dimension                                              MLTRI.216   
         !-----------------------------------------------------            MLTRI.217   
         CALL LTI                                                          MLTRI.218   
*IF DEF,NOMPI                                                              MLTRI.219   
         !-----------------------------------------------------            MLTRI.220   
         ! Convert zonal wavenumber dimension to longitude                 MLTRI.221   
         ! dimension.                                                      MLTRI.222   
         !-----------------------------------------------------            MLTRI.223   
         CALL FFT(1,NHEM*JG*NL,UG)                                         MLTRI.224   
         CALL FFT(1,NHEM*JG*NL,VG)                                         MLTRI.225   
         CALL FFT(1,NHEM*JG*NL,ZG)                                         MLTRI.226   
         CALL FFT(1,NHEM*JG*NL,DG)                                         MLTRI.227   
         CALL FFT(1,NHEM*JG*NL,TG)                                         MLTRI.228   
*IF DEF,ABOVE_V1                                                           MLTRI.229   
         CALL FFT(1,NHEM*JGy*NLx*NTRAC,TRAG)                               MLTRI.230   
*ENDIF                                                                     MLTRI.231   
         IF (iCol.EQ.1) THEN                                               MLTRI.232   
            CALL FFT(1,NHEM*JG,PLG)                                        MLTRI.233   
            CALL FFT(1,NHEM*JG,PJG)                                        MLTRI.234   
            CALL FFT(1,NHEM*JG,PMG)                                        MLTRI.235   
         ENDIF                                                             MLTRI.236   
*ELSE                                                                      MLTRI.237   
         !-----------------------------------------------------            MLTRI.238   
         ! Transpose the arrays so that the zonal wavenumber               MLTRI.239   
         ! dimension is the only dimension that isn't decomposed           MLTRI.240   
         ! over PEs                                                        MLTRI.241   
         !-----------------------------------------------------            MLTRI.242   
*IF DEF,ABOVE_V1                                                           MLTRI.243   
         CALL TRANS2(UG,VG,ZG,DG,TG,TRAG,PLG,PJG,PMG)                      MLTRI.244   
*ELSE                                                                      MLTRI.245   
         CALL TRANS2(UG,VG,ZG,DG,TG,PLG,PJG,PMG)                           MLTRI.246   
*ENDIF                                                                     MLTRI.247   
         !-----------------------------------------------------            MLTRI.248   
         ! Convert zonal wavenumber dimension to longitude                 MLTRI.249   
         ! dimension.                                                      MLTRI.250   
         !-----------------------------------------------------            MLTRI.251   
         CALL FFT(1,NHEM*JGy*NLx,UG2)                                      MLTRI.252   
         CALL FFT(1,NHEM*JGy*NLx,VG2)                                      MLTRI.253   
         CALL FFT(1,NHEM*JGy*NLx,ZG2)                                      MLTRI.254   
         CALL FFT(1,NHEM*JGy*NLx,DG2)                                      MLTRI.255   
         CALL FFT(1,NHEM*JGy*NLx,TG2)                                      MLTRI.256   
*IF DEF,ABOVE_V1                                                           MLTRI.257   
         CALL FFT(1,NHEM*JGy*NLx*NTRAC,TRAG2)                              MLTRI.258   
*ENDIF                                                                     MLTRI.259   
         IF (iCol.EQ.1) THEN                                               MLTRI.260   
            CALL FFT(1,NHEM*JGy,PLG2)                                      MLTRI.261   
            CALL FFT(1,NHEM*JGy,PJG2)                                      MLTRI.262   
            CALL FFT(1,NHEM*JGy,PMG2)                                      MLTRI.263   
         ENDIF                                                             MLTRI.264   
         !-----------------------------------------------------            MLTRI.265   
         ! Transpose the arrays so that layer dimension is the             MLTRI.266   
         ! only dimension that isn't decomposed over PEs                   MLTRI.267   
         !-----------------------------------------------------            MLTRI.268   
         CALL TRANS3                                                       MLTRI.269   
*ENDIF                                                                     MLTRI.270   
         !-----------------------------------------------------            MLTRI.271   
         ! Calculate nonlinear terms                                       MLTRI.272   
         !-----------------------------------------------------            MLTRI.273   
         CALL MGRMLT                                                       MLTRI.274   
*IF DEF,NOMPI                                                              MLTRI.275   
         !-----------------------------------------------------            MLTRI.276   
         ! Convert the longitude dimension to a zonal wavenumber           MLTRI.277   
         ! dimension                                                       MLTRI.278   
         !-----------------------------------------------------            MLTRI.279   
         IF (iCol.EQ.1) THEN                                               MLTRI.280   
            CALL FFT(-1,NHEM*JGy,SPG)                                      MLTRI.281   
            CALL FFT(-1,NHEM*JGy,VPG)                                      MLTRI.282   
         ENDIF                                                             MLTRI.283   
         CALL FFT(-1,NHEM*JGy*NLx,EG)                                      MLTRI.284   
         CALL FFT(-1,NHEM*JGy*NLx,TNLG)                                    MLTRI.285   
         CALL FFT(-1,NHEM*JGy*NLx,FUG)                                     MLTRI.286   
         CALL FFT(-1,NHEM*JGy*NLx,FVG)                                     MLTRI.287   
         CALL FFT(-1,NHEM*JGy*NLx,UTG)                                     MLTRI.288   
         CALL FFT(-1,NHEM*JGy*NLx,VTG)                                     MLTRI.289   
*IF DEF,ABOVE_V1                                                           MLTRI.290   
         CALL FFT(-1,NHEM*JGy*NLx*NTRAC,TRANLG)                            MLTRI.291   
         CALL FFT(-1,NHEM*JGy*NLx*NTRAC,UTRAG)                             MLTRI.292   
         CALL FFT(-1,NHEM*JGy*NLx*NTRAC,VTRAG)                             MLTRI.293   
*ENDIF                                                                     MLTRI.294   
*ELSE                                                                      MLTRI.295   
         !-----------------------------------------------------            MLTRI.296   
         ! Transpose the arrays so that longitude dimension is             MLTRI.297   
         ! the only dimension that isn't decomposed over PEs               MLTRI.298   
         !-----------------------------------------------------            MLTRI.299   
         CALL TRANS4                                                       MLTRI.300   
         !-----------------------------------------------------            MLTRI.301   
         ! Convert the longitude dimension to a zonal wavenumber           MLTRI.302   
         ! dimension                                                       MLTRI.303   
         !-----------------------------------------------------            MLTRI.304   
         IF (iCol.EQ.1) THEN                                               MLTRI.305   
            CALL FFT(-1,NHEM*JGy,SPG2)                                     MLTRI.306   
            CALL FFT(-1,NHEM*JGy,VPG2)                                     MLTRI.307   
         ENDIF                                                             MLTRI.308   
         CALL FFT(-1,NHEM*JGy*NLx,EG2)                                     MLTRI.309   
         CALL FFT(-1,NHEM*JGy*NLx,TNLG2)                                   MLTRI.310   
         CALL FFT(-1,NHEM*JGy*NLx,FUG2)                                    MLTRI.311   
         CALL FFT(-1,NHEM*JGy*NLx,FVG2)                                    MLTRI.312   
         CALL FFT(-1,NHEM*JGy*NLx,UTG2)                                    MLTRI.313   
         CALL FFT(-1,NHEM*JGy*NLx,VTG2)                                    MLTRI.314   
*IF DEF,ABOVE_V1                                                           MLTRI.315   
         CALL FFT(-1,NHEM*JGy*NLx*NTRAC,TRANLG2)                           MLTRI.316   
         CALL FFT(-1,NHEM*JGy*NLx*NTRAC,UTRAG2)                            MLTRI.317   
         CALL FFT(-1,NHEM*JGy*NLx*NTRAC,VTRAG2)                            MLTRI.318   
*ENDIF                                                                     MLTRI.319   
         !-----------------------------------------------------            MLTRI.320   
         ! Transpose the arrays so that latitude dimension is              MLTRI.321   
         ! the only dimension that isn't decomposed over PEs               MLTRI.322   
         !-----------------------------------------------------            MLTRI.323   
*IF DEF,ABOVE_V1                                                           MLTRI.324   
         CALL TRANS5(SPG,VPG,EG,TNLG,TRANLG,FUG,FVG,                       MLTRI.325   
     &        UTG,UTRAG,VTG,VTRAG)                                         MLTRI.326   
*ELSE                                                                      MLTRI.327   
         CALL TRANS5(SPG,VPG,EG,TNLG,FUG,FVG,UTG,VTG)                      MLTRI.328   
*ENDIF                                                                     MLTRI.329   
*ENDIF                                                                     MLTRI.330   
         !-----------------------------------------------------            MLTRI.331   
         ! Convert the zonal wavenumber dimension to a longitude           MLTRI.332   
         ! dimension                                                       MLTRI.333   
         !-----------------------------------------------------            MLTRI.334   
         CALL LTD                                                          MLTRI.335   
*IF DEF,NOMPI                                                              MLTRI.336   
*ELSE                                                                      MLTRI.337   
         !-----------------------------------------------------            MLTRI.338   
         ! Transpose the arrays so that the layer dimension is the         MLTRI.339   
         ! only dimension that isn't decomposed over PEs                   MLTRI.340   
         !-----------------------------------------------------            MLTRI.341   
         CALL TRANS6                                                       MLTRI.342   
*ENDIF                                                                     MLTRI.343   
         !-----------------------------------------------------            MLTRI.344   
         ! Take del**2 of the energy term and add to the                   MLTRI.345   
         ! divergence tendency.                                            MLTRI.346   
         !-----------------------------------------------------            MLTRI.347   
         CALL SPDEL2(DTE,FILT,MMTy,NNTx,NN,MM,NHEM,NL,0,2,                 MLTRI.348   
     &        MMTyy(iRow),NNTxx(iCol),nWave(1,1,iCol))                     MLTRI.349   
         DT(:,:,:,:)=DT(:,:,:,:)+DTE(:,:,:,:)                              MLTRI.350   
         !-----------------------------------------------------            MLTRI.351   
         ! See if balancing is required                                    MLTRI.352   
         !-----------------------------------------------------            MLTRI.353   
         IF ((LBALAN).AND.(KOUNT.LT.0)) THEN                               MLTRI.354   
            !-----------------------------------------------------         MLTRI.355   
            ! Balance spectral fields during initialisation.               MLTRI.356   
            !-----------------------------------------------------         MLTRI.357   
            KOUNT=KOUNT+1                                                  MLTRI.358   
            IF (.NOT.LTBAL) CALL BALANC                                    MLTRI.359   
            IF (     LTBAL) CALL TBAL                                      MLTRI.360   
*IF DEF,ONLY_V3                                                            MLTRI.361   
            IF (KOUTP.EQ.0) CALL ENERGY                                    MLTRI.362   
*ENDIF                                                                     MLTRI.363   
         ELSE                                                              MLTRI.364   
*IF DEF,ONLY_V2                                                            MLTRI.365   
            !-----------------------------------------------------         MLTRI.366   
            ! Global tracer budget: advection tendencies and output.       MLTRI.367   
            !-----------------------------------------------------         MLTRI.368   
            IF (LTRBUD) CALL TRBUD(1)                                      MLTRI.369   
            !-----------------------------------------------------         MLTRI.370   
            ! Output diagnostics.                                          MLTRI.371   
            !-----------------------------------------------------         MLTRI.372   
            IF (KKOUT.EQ.0) THEN                                           MLTRI.373   
               !-----------------------------------------------------      MLTRI.374   
               ! Write sigma-latitude x-sections                           MLTRI.375   
               !-----------------------------------------------------      MLTRI.376   
               CALL XSECT(INLAT)                                           MLTRI.377   
               !-----------------------------------------------------      MLTRI.378   
               ! Write out the spectral coefficients                       MLTRI.379   
               !-----------------------------------------------------      MLTRI.380   
               CALL SPOP                                                   MLTRI.381   
               IF (KOUNT.NE.0) KOUTP=0                                     MLTRI.382   
            ENDIF                                                          MLTRI.383   
            !-----------------------------------------------------         MLTRI.384   
            ! Work out RMS diagnostics in ENERGY routine                   MLTRI.385   
            !-----------------------------------------------------         MLTRI.386   
            IF (KOUNT.EQ.0.OR.KOUTE.EQ.KOUNTE) THEN                        MLTRI.387   
               CALL ENERGY                                                 MLTRI.388   
               IF (KOUNT.NE.0) KOUTE=0                                     MLTRI.389   
            ENDIF                                                          MLTRI.390   
*ELSE                                                                      MLTRI.391   
            !-----------------------------------------------------         MLTRI.392   
            ! First timestep - output history and diagnostics              MLTRI.393   
            !-----------------------------------------------------         MLTRI.394   
            IF (KOUNT.EQ.0) THEN                                           MLTRI.395   
               RKOUNT=KOUNT                                                MLTRI.396   
*IF DEF,ONLY_V3                                                            MLTRI.397   
               !-----------------------------------------------------      MLTRI.398   
               ! Write Z, D, T, TRA and SP to file                         MLTRI.399   
               !-----------------------------------------------------      MLTRI.400   
               CALL WRITECOEF(9, 1, RKOUNT, DOY)                           MLTRI.401   
               IF (MYPE.EQ.0) WRITE(2,2010)9,RKOUNT,RNTAPE,DAY,DOY         MLTRI.402   
*ELSE                                                                      MLTRI.403   
               !-----------------------------------------------------      MLTRI.404   
               ! Write Z, D, T and SP to file                              MLTRI.405   
               !-----------------------------------------------------      MLTRI.406   
               CALL WRITECOEF(9, 1, RKOUNT, RNTAPE, DAY)                   MLTRI.407   
               IF (MYPE.EQ.0) WRITE(2,2010)9,RKOUNT,RNTAPE,DAY             MLTRI.408   
*ENDIF                                                                     MLTRI.409   
               IF (LRESTIJ) THEN                                           MLTRI.410   
                  !---------------------------------------------------     MLTRI.411   
                  ! Write TTRES to file                                    MLTRI.412   
                  !---------------------------------------------------     MLTRI.413   
*IF DEF,ONLY_V3                                                            MLTRI.414   
                  CALL WRITECOEF(13, 4, RKOUNT, DOY)                       MLTRI.415   
                  IF (MYPE.EQ.0) WRITE(2,2020)13,RKOUNT,RNTAPE,DAY,DOY     MLTRI.416   
*ELSE                                                                      MLTRI.417   
                  CALL WRITECOEF(13, 4, RKOUNT, RNTAPE, DAY)               MLTRI.418   
                  IF (MYPE.EQ.0) WRITE(2,2020)13,RKOUNT,RNTAPE,DAY         MLTRI.419   
*ENDIF                                                                     MLTRI.420   
               ENDIF                                                       MLTRI.421   
               !-----------------------------------------------------      MLTRI.422   
               ! Write sigma-latitude x-sections                           MLTRI.423   
               !-----------------------------------------------------      MLTRI.424   
               CALL XSECT(INLAT)                                           MLTRI.425   
               !-----------------------------------------------------      MLTRI.426   
               ! Write out the spectral coefficients                       MLTRI.427   
               !-----------------------------------------------------      MLTRI.428   
               CALL SPOP                                                   MLTRI.429   
               !-----------------------------------------------------      MLTRI.430   
               ! Work out RMS diagnostics in ENERGY routine                MLTRI.431   
               !-----------------------------------------------------      MLTRI.432   
*IF DEF,ONLY_V3                                                            MLTRI.433   
               IF (KOUTP.EQ.0) CALL ENERGY                                 MLTRI.434   
*ELSE                                                                      MLTRI.435   
               CALL ENERGY                                                 MLTRI.436   
*ENDIF                                                                     MLTRI.437   
*IF DEF,ONLY_V3                                                            MLTRI.438   
            ELSE IF (KOUNT.EQ.KSTART) THEN                                 MLTRI.439   
               !-----------------------------------------------------      MLTRI.440   
               ! Work out RMS diagnostics in ENERGY routine                MLTRI.441   
               !-----------------------------------------------------      MLTRI.442   
               IF (KOUTP.EQ.0) CALL ENERGY                                 MLTRI.443   
*ENDIF                                                                     MLTRI.444   
            ENDIF                                                          MLTRI.445   
            IF (LRESTIJ) THEN                                              MLTRI.446   
               !-----------------------------------------------------      MLTRI.447   
               ! Write a restoration record                                MLTRI.448   
               !-----------------------------------------------------      MLTRI.449   
               IF (KOUTH.EQ.KOUNTH.OR.KOUTR.EQ.KOUNTR) THEN                MLTRI.450   
                  RKOUNT=KOUNT                                             MLTRI.451   
                  !---------------------------------------------------     MLTRI.452   
                  ! Write TTRES to file                                    MLTRI.453   
                  !---------------------------------------------------     MLTRI.454   
*IF DEF,ONLY_V3                                                            MLTRI.455   
                  CALL WRITECOEF(13, 4, RKOUNT, DOY)                       MLTRI.456   
                  IF (MYPE.EQ.0) WRITE(2,2020)13,RKOUNT,RNTAPE,DAY,DOY     MLTRI.457   
*ELSE                                                                      MLTRI.458   
                  CALL WRITECOEF(13, 4, RKOUNT, RNTAPE, DAY)               MLTRI.459   
                  IF (MYPE.EQ.0) WRITE(2,2020)13,RKOUNT,RNTAPE,DAY         MLTRI.460   
*ENDIF                                                                     MLTRI.461   
               ENDIF                                                       MLTRI.462   
            ENDIF                                                          MLTRI.463   
            !-----------------------------------------------------         MLTRI.464   
            ! Write a restart record                                       MLTRI.465   
            !-----------------------------------------------------         MLTRI.466   
            IF (KOUTR.EQ.KOUNTR) THEN                                      MLTRI.467   
               RKOUNT=KOUNT                                                MLTRI.468   
*IF DEF,ONLY_V3                                                            MLTRI.469   
               !-----------------------------------------------------      MLTRI.470   
               ! Write Z, D, T, TRA, SP, ZMI, DMI, TMI, TRAMI SPMI and     MLTRI.471   
               ! HTNET to file.                                            MLTRI.472   
               !-----------------------------------------------------      MLTRI.473   
               CALL WRITECOEF(11, 35, RKOUNT, DOY)                         MLTRI.474   
               IF ((LMASCOR).AND.(MyPe.EQ.0)) THEN                         MLTRI.475   
                  RREC=2.0                                                 MLTRI.476   
                  WRITE(11) RKOUNT,RNTAPE,DAY,RREC,GMSP0,GMSPMI,RNTAPE     MLTRI.477   
               ENDIF                                                       MLTRI.478   
               !-----------------------------------------------------      MLTRI.479   
               ! Write grid surface variables to file                      MLTRI.480   
               !-----------------------------------------------------      MLTRI.481   
               CALL WRITEGRID(19, 1, RKOUNT, RNTAPE, DAY, DOY)             MLTRI.482   
               IF (MYPE.EQ.0) WRITE(2,2000)11,RKOUNT,RNTAPE,DAY,DOY        MLTRI.483   
*ELSE                                                                      MLTRI.484   
               !-----------------------------------------------------      MLTRI.485   
               ! Write Z, D, T, SP, ZMI, DMI, TMI and SPMI to file.        MLTRI.486   
               !-----------------------------------------------------      MLTRI.487   
               CALL WRITECOEF(11, 3, RKOUNT, RNTAPE, DAY)                  MLTRI.488   
               IF (MYPE.EQ.0) WRITE(2,2000)11,RKOUNT,RNTAPE,DAY            MLTRI.489   
*ENDIF                                                                     MLTRI.490   
               KOUTR=0                                                     MLTRI.491   
         call flush(11)                                                    OAS_COMTILE.106   
         call flush(19)                                                    OAS_COMTILE.107   
                                                                           OAS_COMTILE.108   
            ENDIF                                                          MLTRI.492   
            !-----------------------------------------------------         MLTRI.493   
            ! Write a history record                                       MLTRI.494   
            !-----------------------------------------------------         MLTRI.495   
            IF (KOUTH.EQ.KOUNTH) THEN                                      MLTRI.496   
               RKOUNT=KOUNT                                                MLTRI.497   
*IF DEF,ONLY_V3                                                            MLTRI.498   
               IF (LMINIH) THEN                                            MLTRI.499   
                  !---------------------------------------------------     MLTRI.500   
                  ! Take average of temperatures                           MLTRI.501   
                  !---------------------------------------------------     MLTRI.502   
                  TAVE(:,:,:,:)=TAVE(:,:,:,:)/REAL(KOUNTH)                 MLTRI.503   
                  !---------------------------------------------------     MLTRI.504   
                  ! Write Z, D, TAVE, TRA and SP to file                   MLTRI.505   
                  !---------------------------------------------------     MLTRI.506   
                  CALL WRITECOEF(9, 9, RKOUNT, DOY)                        MLTRI.507   
                  !---------------------------------------------------     MLTRI.508   
                  ! Zero TAVE for next set of averaging                    MLTRI.509   
                  !---------------------------------------------------     MLTRI.510   
                  TAVE(:,:,:,:)=0.0                                        MLTRI.511   
               ELSE                                                        MLTRI.512   
                  !---------------------------------------------------     MLTRI.513   
                  ! Write Z, D, T, TRA and SP to file                      MLTRI.514   
                  !---------------------------------------------------     MLTRI.515   
                  CALL WRITECOEF(9, 1, RKOUNT, DOY)                        MLTRI.516   
               ENDIF                                                       MLTRI.517   
               IF (MYPE.EQ.0) WRITE(2,2010)9,RKOUNT,RNTAPE,DAY,DOY         MLTRI.518   
*ELSE                                                                      MLTRI.519   
               !-----------------------------------------------------      MLTRI.520   
               ! Write Z, D, T (and TRA for version 2.2) and SP to file    MLTRI.521   
               !-----------------------------------------------------      MLTRI.522   
               CALL WRITECOEF(9, 1, RKOUNT, RNTAPE, DAY)                   MLTRI.523   
               IF (MYPE.EQ.0) WRITE(2,2010)9,RKOUNT,RNTAPE,DAY             MLTRI.524   
*ENDIF                                                                     MLTRI.525   
               KOUTH=0                                                     MLTRI.526   
            ENDIF                                                          MLTRI.527   
            !-----------------------------------------------------         MLTRI.528   
            ! Output diagnostics                                           MLTRI.529   
            !-----------------------------------------------------         MLTRI.530   
            IF (KOUTP.EQ.KOUNTP) THEN                                      MLTRI.531   
               !-----------------------------------------------------      MLTRI.532   
               ! Write sigma-latitude x-sections                           MLTRI.533   
               !-----------------------------------------------------      MLTRI.534   
               CALL XSECT(INLAT)                                           MLTRI.535   
               !-----------------------------------------------------      MLTRI.536   
               ! Write out the spectral coefficients                       MLTRI.537   
               !-----------------------------------------------------      MLTRI.538   
               CALL SPOP                                                   MLTRI.539   
               KOUTP=0                                                     MLTRI.540   
            ENDIF                                                          MLTRI.541   
            IF (KOUTE.EQ.KOUNTE) THEN                                      MLTRI.542   
*IF DEF,ONLY_V3                                                            MLTRI.543   
               IF (KOUTP.EQ.0) CALL ENERGY                                 MLTRI.544   
*ELSE                                                                      MLTRI.545   
               CALL ENERGY                                                 MLTRI.546   
*ENDIF                                                                     MLTRI.547   
               KOUTE=0                                                     MLTRI.548   
            ENDIF                                                          MLTRI.549   
*ENDIF                                                                     MLTRI.550   
            !-----------------------------------------------------         MLTRI.551   
            ! Move on a timestep                                           MLTRI.552   
            !-----------------------------------------------------         MLTRI.553   
            IF (KOUNT.LT.KTOTAL) THEN                                      MLTRI.554   
               KOUTP=KOUTP+1                                               MLTRI.555   
               KOUTE=KOUTE+1                                               MLTRI.556   
               KOUTH=KOUTH+1                                               MLTRI.557   
               KOUTR=KOUTR+1                                               MLTRI.558   
               KOUNT=KOUNT+1                                               MLTRI.559   
               IF(KOUNT.EQ.1.AND.KITS.GT.0) DAY=DAY+DELT/PI2               MLTRI.560   
               DAY=DAY+DELT/PI2                                            MLTRI.561   
*IF DEF,ONLY_V3                                                            MLTRI.562   
               IF (.NOT. LPERPET) THEN                                     MLTRI.563   
                  IF(KOUNT.EQ.1.AND.KITS.GT.0) DOY=DOY+DELT/PI2            MLTRI.564   
                  DOY=DOY+DELT/PI2                                         MLTRI.565   
                  IF (DOY.GE.361) DOY = DOY-360.0                          MLTRI.566   
               ENDIF                                                       MLTRI.567   
*ENDIF                                                                     MLTRI.568   
               !-----------------------------------------------------      MLTRI.569   
               ! Adiabatic part of timestep                                MLTRI.570   
               !-----------------------------------------------------      MLTRI.571   
               CALL TSTEP                                                  MLTRI.572   
*IF DEF,ONLY_V3                                                            MLTRI.573   
               !-----------------------------------------------------      MLTRI.574   
               ! Mass correction.                                          MLTRI.575   
               !-----------------------------------------------------      MLTRI.576   
               IF (MyPe.EQ.0) THEN                                         MLTRI.577   
                  IF (LMASCOR) THEN                                        MLTRI.578   
                     CALL MASCOR                                           MLTRI.579   
                  ELSE IF (LRESTIJ) THEN                                   MLTRI.580   
                     !------------------------------------------------     MLTRI.581   
                     ! Fix to maintain surface pressure                    MLTRI.582   
                     !------------------------------------------------     MLTRI.583   
                     SP(1,1,1)=CMPLX(0.,0.)                                MLTRI.584   
                  ENDIF                                                    MLTRI.585   
               ENDIF                                                       MLTRI.586   
*ENDIF                                                                     MLTRI.587   
               !-----------------------------------------------------      MLTRI.588   
               ! Annual cycle of TRES                                      MLTRI.589   
               !-----------------------------------------------------      MLTRI.590   
               IF (LRESTIJ) CALL SETTEE                                    MLTRI.591   
*IF DEF,ABOVE_V1                                                           MLTRI.592   
               !-----------------------------------------------------      MLTRI.593   
               ! Preset accumulated diagnostics.                           MLTRI.594   
               !-----------------------------------------------------      MLTRI.595   
               IF (KOUTH.EQ.1) THEN                                        MLTRI.596   
                  AUTVDZ(:,:,:)=0.0                                        MLTRI.597   
                  AVTVDZ(:,:,:)=0.0                                        MLTRI.598   
                  ATTVDZ(:,:,:)=0.0                                        MLTRI.599   
                  AQTVDZ(:,:,:)=0.0                                        MLTRI.600   
                  ATTCRZ(:,:,:)=0.0                                        MLTRI.601   
                  AQTCRZ(:,:,:)=0.0                                        MLTRI.602   
                  ATTLRZ(:,:,:)=0.0                                        MLTRI.603   
                  AQTLRZ(:,:,:)=0.0                                        MLTRI.604   
                  ATTRDZ(:,:,:)=0.0                                        MLTRI.605   
                  ACTCRZ(:,:,:)=0.0                                        MLTRI.606   
                  ACTLRZ(:,:,:)=0.0                                        MLTRI.607   
                  AUTBLZ(:,:)=0.0                                          MLTRI.608   
                  AVTBLZ(:,:)=0.0                                          MLTRI.609   
                  ATTBLZ(:,:)=0.0                                          MLTRI.610   
                  AQTBLZ(:,:)=0.0                                          MLTRI.611   
               ENDIF                                                       MLTRI.612   
*ENDIF                                                                     MLTRI.613   
               !-----------------------------------------------------      MLTRI.614   
               ! Diabatic part of timestep. Preset tendencies to zero.     MLTRI.615   
               !-----------------------------------------------------      MLTRI.616   
*IF DEF,ONLY_V1                                                            MLTRI.617   
               ZT(:,:,:,:)=0.0                                             MLTRI.618   
               DT(:,:,:,:)=0.0                                             MLTRI.619   
               TT(:,:,:,:)=0.0                                             MLTRI.620   
*ELSE                                                                      MLTRI.621   
*IF DEF,NOMPI                                                              MLTRI.622   
               ZT(:,:,:,:)=0.0                                             MLTRI.623   
               DT(:,:,:,:)=0.0                                             MLTRI.624   
               TT(:,:,:,:)=0.0                                             MLTRI.625   
               TRAT(:,:,:,:,:)=0.0                                         MLTRI.626   
*ELSE                                                                      MLTRI.627   
               ZT2(:,:,:,:)=0.0                                            MLTRI.628   
               DT2(:,:,:,:)=0.0                                            MLTRI.629   
               TT2(:,:,:,:)=0.0                                            MLTRI.630   
               TRAT2(:,:,:,:,:)=0.0                                        MLTRI.631   
               !-----------------------------------------------------      MLTRI.632   
               ! Transpose the arrays so that the meridional wavenumber    MLTRI.633   
               ! dimension is the only dimension that isn't decomposed     MLTRI.634   
               ! over PEs                                                  MLTRI.635   
               !-----------------------------------------------------      MLTRI.636   
               CALL TRANS1                                                 MLTRI.637   
*ENDIF                                                                     MLTRI.638   
               !-----------------------------------------------------      MLTRI.639   
               ! Convert the meridional wavenumber dimension to a          MLTRI.640   
               ! latitude dimension                                        MLTRI.641   
               !-----------------------------------------------------      MLTRI.642   
               CALL LTIDIA                                                 MLTRI.643   
*IF DEF,NOMPI                                                              MLTRI.644   
               !-----------------------------------------------------      MLTRI.645   
               ! Convert zonal wavenumber dimension to longitude           MLTRI.646   
               ! dimension.                                                MLTRI.647   
               !-----------------------------------------------------      MLTRI.648   
               CALL FFT(1,NHEM*JG*NL,UG)                                   MLTRI.649   
               CALL FFT(1,NHEM*JG*NL,VG)                                   MLTRI.650   
               CALL FFT(1,NHEM*JG*NL,TG)                                   MLTRI.651   
               CALL FFT(1,NHEM*JG*NL*NTRAC,TRAG)                           MLTRI.652   
               IF (iCol.EQ.1) THEN                                         MLTRI.653   
                  CALL FFT(1,NHEM*JG,PLG)                                  MLTRI.654   
               ENDIF                                                       MLTRI.655   
*ELSE                                                                      MLTRI.656   
               !-----------------------------------------------------      MLTRI.657   
               ! Transpose the arrays so that the zonal wavenumber         MLTRI.658   
               ! dimension is the only dimension that isn't decomposed     MLTRI.659   
               ! over PEs                                                  MLTRI.660   
               !-----------------------------------------------------      MLTRI.661   
               CALL TRANS2B(UG,VG,TG,TRAG,PLG)                             MLTRI.662   
               !-----------------------------------------------------      MLTRI.663   
               ! Convert zonal wavenumber dimension to longitude           MLTRI.664   
               ! dimension.                                                MLTRI.665   
               !-----------------------------------------------------      MLTRI.666   
               CALL FFT(1,NHEM*JGy*NLx,UG2)                                MLTRI.667   
               CALL FFT(1,NHEM*JGy*NLx,VG2)                                MLTRI.668   
               CALL FFT(1,NHEM*JGy*NLx,TG2)                                MLTRI.669   
               CALL FFT(1,NHEM*JGy*NLx*NTRAC,TRAG2)                        MLTRI.670   
               IF (iCol.EQ.1) THEN                                         MLTRI.671   
                  CALL FFT(1,NHEM*JGy,PLG2)                                MLTRI.672   
               ENDIF                                                       MLTRI.673   
               !-----------------------------------------------------      MLTRI.674   
               ! Transpose the arrays so that layer dimension is the       MLTRI.675   
               ! only dimension that isn't decomposed over PEs             MLTRI.676   
               !-----------------------------------------------------      MLTRI.677   
               CALL TRANS3B                                                MLTRI.678   
*ENDIF                                                                     MLTRI.679   
               !-----------------------------------------------------      MLTRI.680   
               ! Calculate diabatic terms                                  MLTRI.681   
               !-----------------------------------------------------      MLTRI.682   
               CALL DGRMLT                                                 MLTRI.683   
               !-----------------------------------------------------      MLTRI.684   
               ! Write grid variables to history file                      MLTRI.685   
               !-----------------------------------------------------      MLTRI.686   
               RKOUNT=KOUNT                                                MLTRI.687   
               IF(KOUTH.EQ.KOUNTH) THEN                                    MLTRI.688   
*IF DEF,ONLY_V2                                                            MLTRI.689   
                  !---------------------------------------------------     MLTRI.690   
                  ! Write ASSBL, ..., ACLD and TNLG to file.               MLTRI.691   
                  !---------------------------------------------------     MLTRI.692   
                  CALL WRITEGRID(9, 14, RKOUNT, RNTAPE, DAY)               MLTRI.693   
*ELSE                                                                      MLTRI.694   
                  IF (LSHIST) THEN                                         MLTRI.695   
                     !-------------------------------------------------    MLTRI.696   
                     ! Write ASSBL, ..., ACLD and TNLG to file.            MLTRI.697   
                     !-------------------------------------------------    MLTRI.698   
                     CALL WRITEGRID(9, 10, RKOUNT, RNTAPE, DAY, DOY)       MLTRI.699   
                  ELSE                                                     MLTRI.700   
                     !-------------------------------------------------    MLTRI.701   
                     ! Write ASSBL, ..., ACLD, SSBL, ..., CLD and TNLG     MLTRI.702   
                     ! to file.                                            MLTRI.703   
                     !-------------------------------------------------    MLTRI.704   
                     CALL WRITEGRID(9, 14, RKOUNT, RNTAPE, DAY, DOY)       MLTRI.705   
                  ENDIF                                                    MLTRI.706   
*ENDIF                                                                     MLTRI.707   
               ENDIF                                                       MLTRI.708   
*IF DEF,NOMPI                                                              MLTRI.709   
               !-----------------------------------------------------      MLTRI.710   
               ! Convert the longitude dimension to a zonal wavenumber     MLTRI.711   
               ! dimension                                                 MLTRI.712   
               !-----------------------------------------------------      MLTRI.713   
               CALL FFT(-1,NHEM*JGy*NLx,TNLG)                              MLTRI.714   
               CALL FFT(-1,NHEM*JGy*NLx,FUG)                               MLTRI.715   
               CALL FFT(-1,NHEM*JGy*NLx,FVG)                               MLTRI.716   
               CALL FFT(-1,NHEM*JGy*NLx*NTRAC,TRANLG)                      MLTRI.717   
*ELSE                                                                      MLTRI.718   
               !-----------------------------------------------------      MLTRI.719   
               ! Transpose the arrays so that longitude dimension is       MLTRI.720   
               ! the only dimension that isn't decomposed over PEs         MLTRI.721   
               !-----------------------------------------------------      MLTRI.722   
               CALL TRANS4B                                                MLTRI.723   
               !-----------------------------------------------------      MLTRI.724   
               ! Convert the longitude dimension to a zonal wavenumber     MLTRI.725   
               ! dimension                                                 MLTRI.726   
               !-----------------------------------------------------      MLTRI.727   
               CALL FFT(-1,NHEM*JGy*NLx,TNLG2)                             MLTRI.728   
               CALL FFT(-1,NHEM*JGy*NLx,FUG2)                              MLTRI.729   
               CALL FFT(-1,NHEM*JGy*NLx,FVG2)                              MLTRI.730   
               CALL FFT(-1,NHEM*JGy*NLx*NTRAC,TRANLG2)                     MLTRI.731   
               !-----------------------------------------------------      MLTRI.732   
               ! Transpose the arrays so that latitude dimension is        MLTRI.733   
               ! the only dimension that isn't decomposed over PEs         MLTRI.734   
               !-----------------------------------------------------      MLTRI.735   
               CALL TRANS5B(TNLG,TRANLG,FUG,FVG)                           MLTRI.736   
*ENDIF                                                                     MLTRI.737   
               !-----------------------------------------------------      MLTRI.738   
               ! Convert the zonal wavenumber dimension to a longitude     MLTRI.739   
               ! dimension                                                 MLTRI.740   
               !-----------------------------------------------------      MLTRI.741   
               CALL LTDDIA                                                 MLTRI.742   
*IF DEF,NOMPI                                                              MLTRI.743   
*ELSE                                                                      MLTRI.744   
               !-----------------------------------------------------      MLTRI.745   
               ! Transpose the arrays so that the layer dimension is the   MLTRI.746   
               ! only dimension that isn't decomposed over PEs             MLTRI.747   
               !-----------------------------------------------------      MLTRI.748   
               CALL TRANS6B                                                MLTRI.749   
*ENDIF                                                                     MLTRI.750   
               !-----------------------------------------------------      MLTRI.751   
               ! Write zonally averaged diagnostics and spectral heating   MLTRI.752   
               ! to history file.                                          MLTRI.753   
               !-----------------------------------------------------      MLTRI.754   
               IF(KOUTH.GE.1.AND.KOUTH.LE.KOUNTH) THEN                     MLTRI.755   
                  !---------------------------------------------------     MLTRI.756   
                  ! Sum the grid-space diagnostics, ready for              MLTRI.757   
                  ! averaging later.                                       MLTRI.758   
                  !---------------------------------------------------     MLTRI.759   
                  AUTVDZ(:,:,:)=AUTVDZ(:,:,:)+UTVDZ(:,:,:)                 MLTRI.760   
                  AVTVDZ(:,:,:)=AVTVDZ(:,:,:)+VTVDZ(:,:,:)                 MLTRI.761   
                  ATTVDZ(:,:,:)=ATTVDZ(:,:,:)+TTVDZ(:,:,:)                 MLTRI.762   
                  AQTVDZ(:,:,:)=AQTVDZ(:,:,:)+QTVDZ(:,:,:)                 MLTRI.763   
                  ATTCRZ(:,:,:)=ATTCRZ(:,:,:)+TTCRZ(:,:,:)                 MLTRI.764   
                  AQTCRZ(:,:,:)=AQTCRZ(:,:,:)+QTCRZ(:,:,:)                 MLTRI.765   
                  ATTLRZ(:,:,:)=ATTLRZ(:,:,:)+TTLRZ(:,:,:)                 MLTRI.766   
                  AQTLRZ(:,:,:)=AQTLRZ(:,:,:)+QTLRZ(:,:,:)                 MLTRI.767   
                  ATTRDZ(:,:,:)=ATTRDZ(:,:,:)+TTRDZ(:,:,:)                 MLTRI.768   
                  ACTCRZ(:,:,:)=ACTCRZ(:,:,:)+CTCRZ(:,:,:)                 MLTRI.769   
                  ACTLRZ(:,:,:)=ACTLRZ(:,:,:)+CTLRZ(:,:,:)                 MLTRI.770   
                  AUTBLZ(:,:)=AUTBLZ(:,:)+UTBLZ(:,:)                       MLTRI.771   
                  AVTBLZ(:,:)=AVTBLZ(:,:)+VTBLZ(:,:)                       MLTRI.772   
                  ATTBLZ(:,:)=ATTBLZ(:,:)+TTBLZ(:,:)                       MLTRI.773   
                  AQTBLZ(:,:)=AQTBLZ(:,:)+QTBLZ(:,:)                       MLTRI.774   
               ENDIF                                                       MLTRI.775   
               IF(KOUTH.EQ.KOUNTH) THEN                                    MLTRI.776   
                  !---------------------------------------------------     MLTRI.777   
                  ! Average the grid-space diagnostics                     MLTRI.778   
                  !---------------------------------------------------     MLTRI.779   
                  RKP=1.0/REAL(KOUNTH)                                     MLTRI.780   
                  AUTVDZ(:,:,:)=AUTVDZ(:,:,:)*RKP                          MLTRI.781   
                  AVTVDZ(:,:,:)=AVTVDZ(:,:,:)*RKP                          MLTRI.782   
                  ATTVDZ(:,:,:)=ATTVDZ(:,:,:)*RKP                          MLTRI.783   
                  AQTVDZ(:,:,:)=AQTVDZ(:,:,:)*RKP                          MLTRI.784   
                  ATTCRZ(:,:,:)=ATTCRZ(:,:,:)*RKP                          MLTRI.785   
                  AQTCRZ(:,:,:)=AQTCRZ(:,:,:)*RKP                          MLTRI.786   
                  ATTLRZ(:,:,:)=ATTLRZ(:,:,:)*RKP                          MLTRI.787   
                  AQTLRZ(:,:,:)=AQTLRZ(:,:,:)*RKP                          MLTRI.788   
                  ATTRDZ(:,:,:)=ATTRDZ(:,:,:)*RKP                          MLTRI.789   
                  ACTCRZ(:,:,:)=ACTCRZ(:,:,:)*RKP                          MLTRI.790   
                  ACTLRZ(:,:,:)=ACTLRZ(:,:,:)*RKP                          MLTRI.791   
                  AUTBLZ(:,:)=AUTBLZ(:,:)*RKP                              MLTRI.792   
                  AVTBLZ(:,:)=AVTBLZ(:,:)*RKP                              MLTRI.793   
                  ATTBLZ(:,:)=ATTBLZ(:,:)*RKP                              MLTRI.794   
                  AQTBLZ(:,:)=AQTBLZ(:,:)*RKP                              MLTRI.795   
                  !---------------------------------------------------     MLTRI.796   
                  ! Write grid-space data to file                          MLTRI.797   
                  !---------------------------------------------------     MLTRI.798   
                  RKOUNT=KOUNT                                             MLTRI.799   
*IF DEF,ONLY_V2                                                            MLTRI.800   
                  CALL WRITEDIAG(9, RKOUNT)                                MLTRI.801   
*ELSE                                                                      MLTRI.802   
                  CALL WRITEDIAG(9, RKOUNT, DOY)                           MLTRI.803   
*ENDIF                                                                     MLTRI.804   
                  !---------------------------------------------------     MLTRI.805   
                  ! Write TT to file                                       MLTRI.806   
                  !---------------------------------------------------     MLTRI.807   
*IF DEF,ONLY_V2                                                            MLTRI.808   
                  CALL WRITECOEF(9, 16, RKOUNT, RNTAPE, DAY)               MLTRI.809   
*ELSE                                                                      MLTRI.810   
                  CALL WRITECOEF(9, 16, RKOUNT, DOY)                       MLTRI.811   
*ENDIF                                                                     MLTRI.812   
               ENDIF                                                       MLTRI.813   
*ENDIF                                                                     MLTRI.814   
*IF DEF,ONLY_V2                                                            MLTRI.815   
               !-----------------------------------------------------      MLTRI.816   
               ! Global tracer budget: non-linear source terms.            MLTRI.817   
               !-----------------------------------------------------      MLTRI.818   
               IF (LTRBUD) CALL TRBUD(2)                                   MLTRI.819   
*ENDIF                                                                     MLTRI.820   
               !-----------------------------------------------------      MLTRI.821   
               ! Apply dissipation and optional linear restoration.        MLTRI.822   
               !-----------------------------------------------------      MLTRI.823   
               CALL DIFUSE                                                 MLTRI.824   
*IF DEF,ONLY_V2                                                            MLTRI.825   
               !-----------------------------------------------------      MLTRI.826   
               ! Global tracer budget: total source terms.                 MLTRI.827   
               !-----------------------------------------------------      MLTRI.828   
               IF (LTRBUD) CALL TRBUD(3)                                   MLTRI.829   
*ENDIF                                                                     MLTRI.830   
               !-----------------------------------------------------      MLTRI.831   
               ! Update spectral fields in the diabatic timestep.          MLTRI.832   
               !-----------------------------------------------------      MLTRI.833   
               CALL DSTEP                                                  MLTRI.834   
*IF DEF,ONLY_V1                                                            MLTRI.835   
               !-----------------------------------------------------      MLTRI.836   
               ! Fix to maintain surface pressure                          MLTRI.837   
               !-----------------------------------------------------      MLTRI.838   
               IF ((LRESTIJ).AND.(MyPe.EQ.0)) THEN                         MLTRI.839   
                  SP(1,1,1)=CMPLX(0.,0.)                                   MLTRI.840   
               ENDIF                                                       MLTRI.841   
*ENDIF                                                                     MLTRI.842   
*IF DEF,ONLY_V2                                                            MLTRI.843   
               !-----------------------------------------------------      MLTRI.844   
               ! Mass correction.                                          MLTRI.845   
               !-----------------------------------------------------      MLTRI.846   
               IF (MyPe.EQ.0) THEN                                         MLTRI.847   
                  IF (LMASCOR) THEN                                        MLTRI.848   
                     CALL MASCOR                                           MLTRI.849   
                  ELSE IF (LRESTIJ) THEN                                   MLTRI.850   
                     !------------------------------------------------     MLTRI.851   
                     ! Fix to maintain surface pressure                    MLTRI.852   
                     !------------------------------------------------     MLTRI.853   
                     SP(1,1,1)=CMPLX(0.,0.)                                MLTRI.854   
                  ENDIF                                                    MLTRI.855   
               ENDIF                                                       MLTRI.856   
*ENDIF                                                                     MLTRI.857   
*IF DEF,ONLY_V3                                                            MLTRI.858   
               !-----------------------------------------------------      MLTRI.859   
               ! Sum temperature over a number of timesteps, ready         MLTRI.860   
               ! for averaging later.                                      MLTRI.861   
               !-----------------------------------------------------      MLTRI.862   
               DO L=1,NL                                                   MLTRI.863   
                  DO IHEM=1,NHEM                                           MLTRI.864   
                     DO IM=1,MMTyy(iRow)                                   MLTRI.865   
                        DO IN=1,NNTxx(iCol)                                MLTRI.866   
                           TAVE(IN,IM,IHEM,L)=TAVE(IN,IM,IHEM,L)+          MLTRI.867   
     &                          T(IN,IM,IHEM,L)                            MLTRI.868   
                        ENDDO                                              MLTRI.869   
                     ENDDO                                                 MLTRI.870   
                  ENDDO                                                    MLTRI.871   
               ENDDO                                                       MLTRI.872   
*ENDIF                                                                     MLTRI.873   
            ENDIF                                                          MLTRI.874   
            !-----------------------------------------------------         MLTRI.875   
            ! End of timestep                                              MLTRI.876   
            !-----------------------------------------------------         MLTRI.877   
         ENDIF   ! closes ELSE for IF ((LBALAN).AND.(KOUNT.LT.0))          MLTRI.878   
      ENDDO      ! closes DO KOUNT=-KITS,KTOTAL                            MLTRI.879   
!-----------------------------------------------------                     MLTRI.880   
! Write the final restart record                                           MLTRI.881   
!-----------------------------------------------------                     MLTRI.882   
      RKOUNT=KOUNT                                                         MLTRI.883   
      IF (MyPe.EQ.0) OPEN(UNIT=12,FILE='LastRestart.dat',                  MLTRI.884   
     &     FORM='unformatted')                                             MLTRI.885   
*IF DEF,ONLY_V3                                                            MLTRI.886   
      CALL WRITECOEF(12, 35, RKOUNT, DOY)                                  MLTRI.887   
*ELSE                                                                      MLTRI.888   
      CALL WRITECOEF(12, 3, RKOUNT, RNTAPE, DAY)                           MLTRI.889   
*ENDIF                                                                     MLTRI.890   
*IF DEF,ABOVE_V1                                                           MLTRI.891   
      IF (MyPe.EQ.0) THEN                                                  MLTRI.892   
         IF (LMASCOR) THEN                                                 MLTRI.893   
            RREC=2.0                                                       MLTRI.894   
            WRITE(12) RKOUNT,RNTAPE,DAY,RREC,GMSP0,GMSPMI,RNTAPE           MLTRI.895   
         ENDIF                                                             MLTRI.896   
*IF DEF,ONLY_V3                                                            MLTRI.897   
         !-----------------------------------------------------            MLTRI.898   
         ! Write surface quantities to file                                MLTRI.899   
         !-----------------------------------------------------            MLTRI.900   
         OPEN(UNIT=17,FILE='LastSurfRestart.dat',FORM='unformatted')       MLTRI.901   
      ENDIF                                                                MLTRI.902   
      CALL WRITEGRID(17, 1, RKOUNT, RNTAPE, DAY, DOY)                      MLTRI.903   
*ELSE                                                                      MLTRI.904   
      ENDIF                                                                MLTRI.905   
*ENDIF                                                                     MLTRI.906   
*ENDIF                                                                     MLTRI.907   
*IF DEF,ONLY_V2                                                            MLTRI.908   
!-----------------------------------------------------                     MLTRI.909   
! Write TRAGMI to file                                                     MLTRI.910   
!-----------------------------------------------------                     MLTRI.911   
      IF (NTRVAD.GT.1.AND.NTRAC.GT.0) THEN                                 MLTRI.912   
         CALL WRITEGRID(12, 16, RKOUNT, RNTAPE, DAY)                       MLTRI.913   
      ENDIF                                                                MLTRI.914   
*ENDIF                                                                     MLTRI.915   
      IF (MYPE.EQ.0) THEN                                                  MLTRI.916   
*IF DEF,ONLY_V3                                                            MLTRI.917   
         CLOSE(17)                                                         MLTRI.918   
         WRITE(2,2000)12,RKOUNT,RNTAPE,DAY,DOY                             MLTRI.919   
*ELSE                                                                      MLTRI.920   
         WRITE(2,2000)12,RKOUNT,RNTAPE,DAY                                 MLTRI.921   
*ENDIF                                                                     MLTRI.922   
         CLOSE(12)                                                         MLTRI.923   
      ENDIF                                                                MLTRI.924   
      IF (LRESTIJ) THEN                                                    MLTRI.925   
*IF DEF,ONLY_V3                                                            MLTRI.926   
         CALL WRITECOEF(13, 3, RKOUNT, DOY)                                MLTRI.927   
         IF (MYPE.EQ.0) THEN                                               MLTRI.928   
            WRITE(2,2020)13,RKOUNT,RNTAPE,DAY, DOY                         MLTRI.929   
*ELSE                                                                      MLTRI.930   
         CALL WRITECOEF(13, 3, RKOUNT, RNTAPE, DAY)                        MLTRI.931   
         IF (MYPE.EQ.0) THEN                                               MLTRI.932   
            WRITE(2,2020)13,RKOUNT,RNTAPE,DAY                              MLTRI.933   
*ENDIF                                                                     MLTRI.934   
            !-----------------------------------------------------         MLTRI.935   
            ! Close the restoration file                                   MLTRI.936   
            !-----------------------------------------------------         MLTRI.937   
            CLOSE(13)                                                      MLTRI.938   
         ENDIF                                                             MLTRI.939   
      ENDIF                                                                MLTRI.940   
!-----------------------------------------------------                     MLTRI.941   
! Close files                                                              MLTRI.942   
!-----------------------------------------------------                     MLTRI.943   
      IF (MYPE.EQ.0) THEN                                                  MLTRI.944   
         CLOSE(2)                                                          MLTRI.945   
         CLOSE(9)                                                          MLTRI.946   
         CLOSE(11)                                                         MLTRI.947   
*IF DEF,ABOVE_V1                                                           MLTRI.948   
         CLOSE(19)                                                         MLTRI.949   
*ENDIF                                                                     MLTRI.950   
      ENDIF                                                                MLTRI.951   
!-----------------------------------------------------                     MLTRI.952   
! End MPI session                                                          MLTRI.953   
!-----------------------------------------------------                     MLTRI.954   
      IF (NPE.GT.1) THEN                                                   MLTRI.955   
         CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)                             MLTRI.956   
         CALL MPI_FINALIZE(ierr)                                           MLTRI.957   
      ENDIF                                                                MLTRI.958   
      STOP                                                                 MLTRI.959   
      END                                                                  MLTRI.960   
*DECK INITAL                                                               INITAL.1     
!=====================================================                     INITAL.2     
! INITAL calls other initialisation routines.                              INITAL.3     
!=====================================================                     INITAL.4     
      SUBROUTINE INITAL                                                    INITAL.5     
      IMPLICIT NONE                                                        INITAL.6     
*CALL PARAM1                                                               INITAL.7     
*CALL PARAM2                                                               INITAL.8     
*CALL PARAM3                                                               INITAL.9     
*CALL BLANK                                                                INITAL.10    
*CALL MPIDECK                                                              INITAL.11    
!-----------------------------------------------------                     INITAL.12    
! Intialisation of MPI session, assign latitudes,                          INITAL.13    
! zonal wavenumbers etc. to PEs                                            INITAL.14    
!-----------------------------------------------------                     INITAL.15    
      CALL INIPARA                                                         INITAL.16    
!-----------------------------------------------------                     INITAL.17    
! Open input and output files                                              INITAL.18    
!-----------------------------------------------------                     INITAL.19    
      IF (MyPe.EQ.0) THEN                                                  INITAL.20    
         !-----------------------------------------------------            INITAL.21    
         ! Input files                                                     INITAL.22    
         !-----------------------------------------------------            INITAL.23    
         OPEN(UNIT=7,FILE='data',FORM='formatted')                         INITAL.24    
         !-----------------------------------------------------            INITAL.25    
         ! Output files                                                    INITAL.26    
         !-----------------------------------------------------            INITAL.27    
         OPEN(UNIT=2,FILE='output.dat',FORM='formatted')                   INITAL.28    
         OPEN(UNIT=9,FILE='history.dat',FORM='unformatted')                INITAL.29    
         OPEN(UNIT=11,FILE='restart.dat',FORM='unformatted')               INITAL.30    
*IF DEF,ABOVE_V1                                                           INITAL.31    
         OPEN(UNIT=19,FILE='SurfRestart.dat',FORM='unformatted')           INITAL.32    
*ENDIF                                                                     INITAL.33    
      ENDIF                                                                INITAL.34    
 !-----------------------------------------------------                    INITAL.35    
 ! Display parallel PE information                                         INITAL.36    
 !-----------------------------------------------------                    INITAL.37    
      IF (MyPe.eq.0) THEN                                                  INITAL.38    
         WRITE(2,*) 'Number of PEs:        ',NPE                           INITAL.39    
         WRITE(2,*) 'PE along longitudues: ',Px                            INITAL.40    
         WRITE(2,*) 'PE along latitudues:  ',Py                            INITAL.41    
         WRITE(2,*) 'MMT:',MMT                                             INITAL.42    
         WRITE(2,*) 'NNT:',NNT                                             INITAL.43    
      ENDIF                                                                INITAL.44    
!-----------------------------------------------------                     INITAL.45    
! Carry out the other initialisation routines                              INITAL.46    
!-----------------------------------------------------                     INITAL.47    
      CALL INISET                                                          INITAL.48    
      CALL INIGAU                                                          INITAL.49    
      CALL INISI                                                           INITAL.50    
*IF DEF,ABOVE_V1                                                           INITAL.51    
      CALL INIPHYS                                                         INITAL.52    
*ENDIF                                                                     INITAL.53    
      IF (LRESTIJ) THEN                                                    INITAL.54    
        CALL INIRESIJ                                                      INITAL.55    
      ELSE                                                                 INITAL.56    
        CALL INIRES                                                        INITAL.57    
      ENDIF                                                                INITAL.58    
      CALL INISTR                                                          INITAL.59    
*IF DEF,ONLY_V3                                                            INITAL.60    
      CALL INISURF                                                         INITAL.61    
      CALL INIQS                                                           INITAL.62    
*ENDIF                                                                     INITAL.63    
      END                                                                  INITAL.64    
*DECK INIPARA                                                              INIPARA.1     
!=====================================================                     INIPARA.2     
! Initialises the MPI session, divides up both the latitudes               INIPARA.3     
! and the zonal wavenumber between processors.                             INIPARA.4     
!=====================================================                     INIPARA.5     
      SUBROUTINE INIPARA                                                   INIPARA.6     
      IMPLICIT NONE                                                        INIPARA.7     
*CALL PARAM1                                                               INIPARA.8     
*CALL PARAM3                                                               INIPARA.9     
*CALL MPIDECK                                                              INIPARA.10    
!-----------------------------------------------------                     INIPARA.11    
! Define mpi variables needed for initialization                           INIPARA.12    
!-----------------------------------------------------                     INIPARA.13    
      INTEGER(KIND=Type) :: InitMype                                       INIPARA.14    
      INTEGER(KIND=Type) :: size                                           INIPARA.15    
      INTEGER(KIND=Type), PARAMETER :: BufferSize =                        INIPARA.16    
     &     4000000                                                         INIPARA.17    
      REAL, SAVE :: BsendBuffer(BufferSize)                                INIPARA.18    
!-----------------------------------------------------                     INIPARA.19    
! Local variables                                                          INIPARA.20    
!-----------------------------------------------------                     INIPARA.21    
! TWIN(1,:) is number of Ms (=1 or 2); TWIN(2:) is 1st M; TWIN(3:)         INIPARA.22    
! is 2nd M; TWIN(4,:) is number of Ns for 1st M.                           INIPARA.23    
      INTEGER :: TWIN(4,MMT)                                               INIPARA.24    
      INTEGER :: iPe                                                       INIPARA.25    
      INTEGER :: IM                                                        INIPARA.26    
      INTEGER :: iLength                                                   INIPARA.27    
      INTEGER :: NNT2                                                      INIPARA.28    
      INTEGER :: nFull(NNT)                                                INIPARA.29    
      INTEGER :: N                                                         INIPARA.30    
      INTEGER :: MP                                                        INIPARA.31    
      INTEGER :: Coefconvfull(NNT,MMT)                                     INIPARA.32    
      INTEGER :: iCol2, iRow2                                              INIPARA.33    
! Loop variables                                                           INIPARA.34    
      INTEGER :: I, IN, IT, iZon, J, JM                                    INIPARA.35    
!-----------------------------------------------------                     INIPARA.36    
! Check that there are enough zonal wavenumbers for this run               INIPARA.37    
!-----------------------------------------------------                     INIPARA.38    
      IF ( (2*Py).GT.(1+MM/MOCT) ) THEN                                    INIPARA.39    
         WRITE(6,*) "ERROR: expect there to be at least twice the ",       INIPARA.40    
     &        "number of zonal wavenumbers as rows of PEs"                 INIPARA.41    
         CALL ABORT                                                        INIPARA.42    
      ENDIF                                                                INIPARA.43    
!-----------------------------------------------------                     INIPARA.44    
! Initialise MPI session (if wanted)                                       INIPARA.45    
!-----------------------------------------------------                     INIPARA.46    
      IF (NPE.GT.1) THEN                                                   INIPARA.47    
         !-----------------------------------------------------            INIPARA.48    
         ! Start MPI session                                               INIPARA.49    
         !-----------------------------------------------------            INIPARA.50    
         CALL MPI_INIT(ierr)                                               INIPARA.51    
         CALL MPI_COMM_SIZE(MPI_COMM_WORLD, size, ierr)                    INIPARA.52    
         CALL MPI_COMM_RANK(MPI_COMM_WORLD, InitMyPe, ierr)                INIPARA.53    
         MyPe=InitMyPe                                                     INIPARA.54    
         !-----------------------------------------------------            INIPARA.55    
         ! Check we have the right number of processors                    INIPARA.56    
         !-----------------------------------------------------            INIPARA.57    
         IF (size.NE.NPE) THEN                                             INIPARA.58    
            WRITE(*,*) 'ERROR: set NPE to ',size                           INIPARA.59    
            CALL ABORT                                                     INIPARA.60    
         ENDIF                                                             INIPARA.61    
         !-----------------------------------------------------            INIPARA.62    
         ! Set the buffer size                                             INIPARA.63    
         !-----------------------------------------------------            INIPARA.64    
         CALL MPI_BUFFER_ATTACH(BsendBuffer, 8*BufferSize, ierr)           INIPARA.65    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            INIPARA.66    
      ELSE                                                                 INIPARA.67    
         !-----------------------------------------------------            INIPARA.68    
         ! One processor run                                               INIPARA.69    
         !-----------------------------------------------------            INIPARA.70    
         MyPe=0                                                            INIPARA.71    
      ENDIF                                                                INIPARA.72    
!-----------------------------------------------------                     INIPARA.73    
! Work out position of PE in grid                                          INIPARA.74    
!-----------------------------------------------------                     INIPARA.75    
      DO J=1,Py                                                            INIPARA.76    
         DO I=1,Px                                                         INIPARA.77    
            PeGrid(I,J)=(I-1)+(J-1)*Px                                     INIPARA.78    
         ENDDO                                                             INIPARA.79    
      ENDDO                                                                INIPARA.80    
!-----------------------------------------------------                     INIPARA.81    
! Store how dimensions are divided up                                      INIPARA.82    
!-----------------------------------------------------                     INIPARA.83    
      DO iPe=0,NPE-1                                                       INIPARA.84    
         !-----------------------------------------------------            INIPARA.85    
         ! Store grid position                                             INIPARA.86    
         !-----------------------------------------------------            INIPARA.87    
         iCol2=MOD(iPe,Px)+1                                               INIPARA.88    
         iRow2=iPe/Px+1                                                    INIPARA.89    
         GRID(1,iPe)=iCol2                                                 INIPARA.90    
         GRID(2,iPe)=iRow2                                                 INIPARA.91    
      ENDDO                                                                INIPARA.92    
!-----------------------------------------------------                     INIPARA.93    
! Separating dimensions across the PE columns                              INIPARA.94    
!-----------------------------------------------------                     INIPARA.95    
      DO iCol2=1,Px                                                        INIPARA.96    
         !-----------------------------------------------------            INIPARA.97    
         ! Divide up longitudes                                            INIPARA.98    
         !-----------------------------------------------------            INIPARA.99    
         MGxx(iCol2)=(MG+Px-iCol2)/Px                                      INIPARA.100   
         !-----------------------------------------------------            INIPARA.101   
         ! Divide up layers                                                INIPARA.102   
         !-----------------------------------------------------            INIPARA.103   
         NLxx(iCol2)=(NL+Px-iCol2)/Px                                      INIPARA.104   
         !-----------------------------------------------------            INIPARA.105   
         ! Divide up twined meridional wavenumbers                         INIPARA.106   
         !-----------------------------------------------------            INIPARA.107   
         NNTxx(iCol2)=(NNT+Px-iCol2)/Px                                    INIPARA.108   
      ENDDO                                                                INIPARA.109   
!-----------------------------------------------------                     INIPARA.110   
! Reference position for the PE column dimensions                          INIPARA.111   
!-----------------------------------------------------                     INIPARA.112   
      II1(1)=0                                                             INIPARA.113   
      KK1(1)=0                                                             INIPARA.114   
      NNT1(1)=0                                                            INIPARA.115   
      DO iCol2=2,Px                                                        INIPARA.116   
         II1(iCol2)=II1(iCol2-1)+MGxx(iCol2-1)                             INIPARA.117   
         KK1(iCol2)=KK1(iCol2-1)+NLxx(iCol2-1)                             INIPARA.118   
         NNT1(iCol2)=NNT1(iCol2-1)+NNTxx(iCol2-1)                          INIPARA.119   
      ENDDO                                                                INIPARA.120   
!-----------------------------------------------------                     INIPARA.121   
! Separating dimensions across the PE rows                                 INIPARA.122   
!-----------------------------------------------------                     INIPARA.123   
      DO iRow2=1,Py                                                        INIPARA.124   
         !-----------------------------------------------------            INIPARA.125   
         ! Divide up latitudes                                             INIPARA.126   
         !-----------------------------------------------------            INIPARA.127   
         JGyy(iRow2)=(JG+Py-iRow2)/Py                                      INIPARA.128   
         !-----------------------------------------------------            INIPARA.129   
         ! Divide up twinned zonal wavenumbers                             INIPARA.130   
         !-----------------------------------------------------            INIPARA.131   
         MMTyy(iRow2)=(MMT+Py-iRow2)/Py                                    INIPARA.132   
      ENDDO                                                                INIPARA.133   
!-----------------------------------------------------                     INIPARA.134   
! Reference position for the PE row dimensions                             INIPARA.135   
!-----------------------------------------------------                     INIPARA.136   
      JJ1(1)=0                                                             INIPARA.137   
      MMT1(1)=0                                                            INIPARA.138   
      DO iRow2=2,Py                                                        INIPARA.139   
         JJ1(iRow2)=JJ1(iRow2-1)+JGyy(iRow2-1)                             INIPARA.140   
         MMT1(iRow2)=MMT1(iRow2-1)+MMTyy(iRow2-1)                          INIPARA.141   
      ENDDO                                                                INIPARA.142   
!-----------------------------------------------------                     INIPARA.143   
! Twin zonal wavenumbers. Start the zonal wavenumbers with                 INIPARA.144   
! the most meridional wavenumbers.                                         INIPARA.145   
!-----------------------------------------------------                     INIPARA.146   
      TWIN(1,:)=1                                                          INIPARA.147   
      I=0                                                                  INIPARA.148   
      DO IM=1,MMT                                                          INIPARA.149   
         !-----------------------------------------------------            INIPARA.150   
         ! Store value of wavenumber, MP                                   INIPARA.151   
         !-----------------------------------------------------            INIPARA.152   
         MP=(IM-1)*MOCT                                                    INIPARA.153   
         TWIN(2,IM)=MP                                                     INIPARA.154   
         !-----------------------------------------------------            INIPARA.155   
         ! Determine the number of meridional wavenumber with this         INIPARA.156   
         !-----------------------------------------------------            INIPARA.157   
         TWIN(4,IM)=(MM-MP+1)/2                                            INIPARA.158   
         !-----------------------------------------------------            INIPARA.159   
         ! Store the order the coefficients are read in and                INIPARA.160   
         ! stored in NNT by MMT array.                                     INIPARA.161   
         !-----------------------------------------------------            INIPARA.162   
         DO J=1,TWIN(4,IM)                                                 INIPARA.163   
            CoefConvFull(J,IM)=I+J                                         INIPARA.164   
         ENDDO                                                             INIPARA.165   
         I=I+TWIN(4,IM)                                                    INIPARA.166   
      ENDDO                                                                INIPARA.167   
!-----------------------------------------------------                     INIPARA.168   
! Add the 2nd set of zonal wavenumber to the 1st.                          INIPARA.169   
!-----------------------------------------------------                     INIPARA.170   
      DO JM=MMT,(MM-1)/MOCT                                                INIPARA.171   
         IM=2*MMT-JM                                                       INIPARA.172   
         !-----------------------------------------------------            INIPARA.173   
         ! Store value of wavenumber, MP                                   INIPARA.174   
         !-----------------------------------------------------            INIPARA.175   
         MP=JM*MOCT                                                        INIPARA.176   
         TWIN(3,IM)=MP                                                     INIPARA.177   
         TWIN(1,IM)=2                                                      INIPARA.178   
         !-----------------------------------------------------            INIPARA.179   
         ! Store how the order the coefficients are read in are            INIPARA.180   
         ! stored in NNT by MMT array.                                     INIPARA.181   
         !-----------------------------------------------------            INIPARA.182   
         DO J=1,NNT-TWIN(4,IM)                                             INIPARA.183   
            CoefConvFull(J+TWIN(4,IM),IM)=I+J                              INIPARA.184   
         ENDDO                                                             INIPARA.185   
         I=I+NNT-TWIN(4,IM)                                                INIPARA.186   
      ENDDO                                                                INIPARA.187   
!-----------------------------------------------------                     INIPARA.188   
! Check the number of meriodonal wavenumber for a pair of                  INIPARA.189   
! zonal wavenumber is correct.                                             INIPARA.190   
!-----------------------------------------------------                     INIPARA.191   
      NNT2=( (MM-TWIN(2,1)+1)/2 )                                          INIPARA.192   
      IF (TWIN(1,1).EQ.2) THEN                                             INIPARA.193   
         NNT2=NNT2+( (MM-TWIN(3,1)+1)/2 )                                  INIPARA.194   
      ENDIF                                                                INIPARA.195   
      IF ((MyPe.EQ.0).AND.(NNT2.NE.NNT)) THEN                              INIPARA.196   
         IF (NNT2.NE.NNT) THEN                                             INIPARA.197   
            WRITE(6,*) 'ERROR: NNT needs changing from ',NNT,              INIPARA.198   
     &           ' to ',NNT2                                               INIPARA.199   
            CALL ABORT                                                     INIPARA.200   
         ENDIF                                                             INIPARA.201   
      ENDIF                                                                INIPARA.202   
!-----------------------------------------------------                     INIPARA.203   
! Work out properties of measures on this PE                               INIPARA.204   
!-----------------------------------------------------                     INIPARA.205   
      iCol=GRID(1,MyPe)                                                    INIPARA.206   
      iRow=GRID(2,MyPe)                                                    INIPARA.207   
!-----------------------------------------------------                     INIPARA.208   
! Work out many Ns for each M on this PE                                   INIPARA.209   
!-----------------------------------------------------                     INIPARA.210   
      DO IM=1,MMTyy(iRow)                                                  INIPARA.211   
         mTwin2(0,IM)=TWIN(1,IM+MMT1(iRow))                                INIPARA.212   
         mTwin2(1,IM)=0                                                    INIPARA.213   
         mTwin2(2,IM)=TWIN(4,IM+MMT1(iRow))                                INIPARA.214   
         mTwin2(3,IM)=NNT                                                  INIPARA.215   
         !-----------------------------------------------------            INIPARA.216   
         ! Values for this PE                                              INIPARA.217   
         !-----------------------------------------------------            INIPARA.218   
         mTwin1(0,IM)=mTwin2(0,IM)                                         INIPARA.219   
         mTwin1(1,IM)=0                                                    INIPARA.220   
         mTwin1(3,IM)=NNTxx(iCol)                                          INIPARA.221   
         IF ( mTwin2(2,IM).GE.(NNT1(iCol)+NNTxx(iCol)) ) THEN              INIPARA.222   
            mTwin1(2,IM)=NNTxx(iCol)                                       INIPARA.223   
         ELSE IF (mTwin2(2,IM).LE.NNT1(iCol)) THEN                         INIPARA.224   
            mTwin1(2,IM)=0                                                 INIPARA.225   
         ELSE                                                              INIPARA.226   
            mTwin1(2,IM)=mTwin2(2,IM)-NNT1(iCol)                           INIPARA.227   
         ENDIF                                                             INIPARA.228   
      ENDDO                                                                INIPARA.229   
!-----------------------------------------------------                     INIPARA.230   
! Store the values of N                                                    INIPARA.231   
!-----------------------------------------------------                     INIPARA.232   
      DO IM=1,MMTyy(iRow)                                                  INIPARA.233   
         !-----------------------------------------------------            INIPARA.234   
         ! Create a complete list of N for this M pair                     INIPARA.235   
         !-----------------------------------------------------            INIPARA.236   
         mWave(1,IM)=TWIN(2,IM+MMT1(iRow))                                 INIPARA.237   
         N=TWIN(2,IM+MMT1(iRow))                                           INIPARA.238   
         I=1                                                               INIPARA.239   
         DO N=TWIN(2,IM+MMT1(iRow)),NN-1,2                                 INIPARA.240   
            nFull(I)=N                                                     INIPARA.241   
            I=I+1                                                          INIPARA.242   
         ENDDO                                                             INIPARA.243   
         IF (TWIN(1,IM+MMT1(iRow)).EQ.2) THEN                              INIPARA.244   
            mWave(2,IM)=TWIN(3,IM+MMT1(iRow))                              INIPARA.245   
            DO N=mWave(2,IM),NN-1,2                                        INIPARA.246   
               nFull(I)=N                                                  INIPARA.247   
               I=I+1                                                       INIPARA.248   
            ENDDO                                                          INIPARA.249   
         ENDIF                                                             INIPARA.250   
         !-----------------------------------------------------            INIPARA.251   
         ! Keep part of N for this PE                                      INIPARA.252   
         !-----------------------------------------------------            INIPARA.253   
         DO iCol2=1,Px                                                     INIPARA.254   
            DO IN=1,NNTxx(iCol2)                                           INIPARA.255   
               nWave(IN,IM,iCol2)=nFull(NNT1(iCol2)+IN)                    INIPARA.256   
            ENDDO                                                          INIPARA.257   
         ENDDO                                                             INIPARA.258   
      ENDDO                                                                INIPARA.259   
!-----------------------------------------------------                     INIPARA.260   
! Create an array, CoefConv, for converting between how the                INIPARA.261   
! the coefficients are stored for reading in and writing out               INIPARA.262   
! and how they are stored in the code                                      INIPARA.263   
!-----------------------------------------------------                     INIPARA.264   
      DO iPe=0,NPE-1                                                       INIPARA.265   
         iCol2=GRID(1,iPe)                                                 INIPARA.266   
         iRow2=GRID(2,iPe)                                                 INIPARA.267   
         DO IM=1,MMTyy(iRow2)                                              INIPARA.268   
            DO IN=1,NNTxx(iCol2)                                           INIPARA.269   
               CoefConv(IN,IM,iPe)=                                        INIPARA.270   
     &              CoefConvFull(IN+NNT1(iCol2),IM+MMT1(iRow2))            INIPARA.271   
            ENDDO                                                          INIPARA.272   
         ENDDO                                                             INIPARA.273   
      ENDDO                                                                INIPARA.274   
      END                                                                  INIPARA.275   
*DECK INISET                                                               INISET.1     
!=====================================================                     INISET.2     
! Sets up various variables and arrays. Sets NAMELIST variables            INISET.3     
! to their default settings, then reads NAMELIST                           INISET.4     
!=====================================================                     INISET.5     
      SUBROUTINE INISET                                                    INISET.6     
      IMPLICIT NONE                                                        INISET.7     
*CALL PARAM1                                                               INISET.8     
*CALL PARAM2                                                               INISET.9     
*CALL PARAM3                                                               INISET.10    
*CALL BLANK                                                                INISET.11    
*CALL SPECTR                                                               INISET.12    
*CALL BATS                                                                 INISET.13    
*CALL OUTCON                                                               INISET.14    
*CALL COMFFT                                                               INISET.15    
*CALL POLYNO                                                               INISET.16    
*CALL RESTOR                                                               INISET.17    
*CALL STATS                                                                INISET.18    
*IF DEF,FFTW                                                               INISET.19    
*CALL GRIDPA2                                                              INISET.20    
*ENDIF                                                                     INISET.21    
*CALL MPIDECK                                                              INISET.22    
!-----------------------------------------------------                     INISET.23    
! Local variables                                                          INISET.24    
!-----------------------------------------------------                     INISET.25    
      REAL :: TDISS, TSPD                                                  INISET.26    
      REAL :: DAYS,DAYH,DAYR,DAYP                                          FORTE_RUNSCR.1     
      INTEGER :: NCKNTIN,NCKNT                                             FORTE_RUNSCR.2     
      INTEGER :: NDEL, NTRWG, JP                                           INISET.27    
      INTEGER :: NWJCH, NWJCH2                                             INISET.28    
      INTEGER :: NDELH                                                     INISET.29    
      REAL :: AKK                                                          INISET.30    
      CHARACTER*(80) :: CDUM                                               INISET.31    
! Loop variables                                                           INISET.32    
      INTEGER :: I, IHEM, IM, KK, L, MP, NP, nT                            INISET.33    
!-----------------------------------------------------                     INISET.34    
! Namelists                                                                INISET.35    
!-----------------------------------------------------                     INISET.36    
      NAMELIST/INPPL/ GA,GASCON,RADEA,AKAP,WW                              INISET.37    
*IF DEF,ABOVE_V1                                                           INISET.38    
     &     ,P0,RV,CPD,CLATNT                                               INISET.39    
*ENDIF                                                                     INISET.40    
      NAMELIST/INPRN/ DAYS,BEGDAY,TSPD,KITS,PNU,TDISS                      FORTE_RUNSCR.3     
c    $   ,ACCELRUN,START,SYNC,ASYNC,OLDACCEL                               FORTE_RUNSCR.4     
     &     ,NDEL,T0,LRSTRT,LSTRETCH,LSHORT                                 INISET.42    
     &     ,LBALAN,LRESTIJ,LNOISE                                          INISET.43    
*IF DEF,ABOVE_V1                                                           INISET.44    
     &     ,LMASCOR,LMASOLD,LMASPRT                                        INISET.45    
*ENDIF                                                                     INISET.46    
*IF DEF,ONLY_V3                                                            INISET.47    
     &     ,LFLUX,KOLOUR                                                   INISET.48    
     &     ,BEGDOY,LCLIM,LPERPET,L22L,LOROG,LCSFCT                         INISET.49    
*ENDIF                                                                     INISET.50    
      NAMELIST/INPOP/RNTAPE,NCKNTIN,DAYH,DAYR,DAYP,KOUNTE                  FORTE_RUNSCR.5     
     &      ,NCOEFF,NLAT,LGPO,LSPO                                         INISET.52    
*IF DEF,ABOVE_V1                                                           INISET.53    
     &      ,RNTAPO                                                        INISET.54    
*ENDIF                                                                     INISET.55    
*IF DEF,ONLY_V3                                                            INISET.56    
     &     ,NTRACO,LSHIST,LMINIH                                           INISET.57    
*ENDIF                                                                     INISET.58    
*IF DEF,ONLY_V2                                                            INISET.59    
      NAMELIST/INTRA/KOLOUR,NTRVAD,NTRVADO,NTRACO                          INISET.60    
     &     ,LFLUX,LTRBUD                                                   INISET.61    
*ENDIF                                                                     INISET.62    
!-----------------------------------------------------                     INISET.63    
! Format statements                                                        INISET.64    
!-----------------------------------------------------                     INISET.65    
  205 FORMAT(/' *****RNTAPE*****',F12.3)                                   INISET.66    
  207 FORMAT(' PRINTED OUTPUT EVERY ',I3,' TIMESTEPS'/                     INISET.67    
     +       ' RMS QUANTITIES OUTPUT EVERY ',I3,' TIMESTEPS'/              INISET.68    
     +       ' HISTORY RECORD WRITTEN EVERY ',I3,' TIMESTEPS'/             INISET.69    
     +       ' RESTART RECORD WRITTEN EVERY ',I3,' TIMESTEPS')             INISET.70    
  209 FORMAT(' INTEGRATION WITH',I3,                                       INISET.71    
     +' LEVELS IN THE VERTICAL (NL=',I3,')'/                               INISET.72    
     +' JAGGED TRIANGULAR/TRAPEZOIDAL TRUNCATION AT TOTAL WAVENO. ',I3/    INISET.73    
     +' AND ZONAL WAVENO. ',I3,' (NN=',I3,' MM=',I3,')')                   INISET.74    
  221 FORMAT(' NO LATERAL DISSIPATION')                                    INISET.75    
  222 FORMAT(' DEL',I2,' LATERAL DISSIPATION ON VORTICITY, DIVERGENCE'/    INISET.76    
     + ' AND TEMPERATURE WITH DIFFUSION COEFFICIENT  ',E10.4,              INISET.77    
     + ' m**',I1,'/s'/' THE E-FOLDING TIME FOR SMALLEST RESOLVED',         INISET.78    
     + ' SCALE IS ',F5.3,' DAYS')                                          INISET.79    
  223 FORMAT(' NO TIME FILTER')                                            INISET.80    
  224 FORMAT(' ROBERT TIME FILTER WITH PARAMETER PNU ',F5.2)               INISET.81    
  280 FORMAT(' GLOBAL DOMAIN: BOTH EVEN AND ODD COEFFICIENTS INCLUDED',    INISET.82    
     +' (NHEM=',I1,')')                                                    INISET.83    
  281 FORMAT(' HEMISPHERIC DOMAIN: ONLY EVEN DIVERGENCE TEMPERATURE'/      INISET.84    
     +' SURFACE PRESSURE AND ODD VORTICITY COEFFICIENTS INCLUDED',         INISET.85    
     +' (NHEM=',I1,')')                                                    INISET.86    
  210 FORMAT(' ',I2,'-FOLD SYMMETRY IN LONGITUDE IMPOSED AND ONLY'/        INISET.87    
     +' 1 /',I2,' OF THE DOMAIN USED (MOCT=',I2,')')                       INISET.88    
  211 FORMAT(' NON LINEAR TERMS EVALUATED ON GRID OF ',I3,                 INISET.89    
     +' GAUSSIAN LATITUDES '/' AND ',I3,                                   INISET.90    
     +' EVENLY SPACED LONGITUDES (JG=',I3,' MG=',I3,')')                   INISET.91    
  212 FORMAT(' ECMWF ANGULAR MOMENTUM CONSERVING VERTICAL SCHEME')         INISET.92    
  213 FORMAT(' GLOBAL MASS CORRECTION SWITCHED ON')                        INISET.93    
  214 FORMAT(' GLOBAL MASS CORRECTION SWITCHED OFF')                       INISET.94    
*IF DEF,ONLY_V2                                                            INISET.95    
  215 FORMAT(' FLUX FORM OF TRACER ADVECTION')                             INISET.96    
  216 FORMAT(' ADVECTIVE FORM OF TRACER ADVECTION')                        INISET.97    
  217 FORMAT(' TRACER VERTICAL ADVECTION BY 2ND ORDER CENTRED DIFFS')      INISET.98    
  218 FORMAT(' TRACER VERTICAL ADVECTION BY TVD BASED ON 2ND ORDER C-D')   INISET.99    
  219 FORMAT(' TRACER VERTICAL ADVECTION BY TVD BASED ON 4TH ORDER C-D')   INISET.100   
*ENDIF                                                                     INISET.101   
  225 FORMAT(/' ***ABORT*** CORRECT VALUE OF NWJ2',I5,' VALUE GIVEN',I5)   INISET.102   
  232 FORMAT(/' ***ABORT***  NLAT IS GREATER THAN JG*NHEM')                INISET.103   
  233 FORMAT(/' ***ABORT***NCOEFF IS GREATER THAN NN')                     INISET.104   
*IF DEF,ABOVE_V1                                                           INISET.105   
  240 FORMAT(/' ***ABORT*** NTRACO IS GREATER THAN NTRAC')                 INISET.106   
*ENDIF                                                                     INISET.107   
*IF DEF,ONLY_V2                                                            INISET.108   
  241 FORMAT(' ***WARNING: NTRACO RESET TO ZERO FOR INITIAL RUN,'          INISET.109   
     &      ,' TO SET-UP TIME-LAGGED FIELDS FOR ALL TRACERS')              INISET.110   
*ENDIF                                                                     INISET.111   
*IF DEF,ONLY_V1                                                            INISET.112   
*IF DEF,ABOVE_V1                                                           INISET.113   
      WRITE(6,*) 'ERROR: not possible to define both ONLY_V1 ',            INISET.114   
     &     '(version 1) and ABOVE_V1 (above version 1) in ',               INISET.115   
     &     'nupdate definitiions'                                          INISET.116   
*ENDIF                                                                     INISET.117   
*ELSE                                                                      INISET.118   
*IF DEF,ONLY_V2                                                            INISET.119   
*ELSE                                                                      INISET.120   
*IF DEF,ONLY_V3                                                            INISET.121   
*ELSE                                                                      INISET.122   
      WRITE(6,*) 'ERROR: need to declare either *IF DEF,ONLY_V1, ',        INISET.123   
     &     '*IF DEF,ONLY_V2 or *IF DEF,ONLY_V3 (version 1, 2 or 3).'       INISET.124   
      CALL ABORT                                                           INISET.125   
*ENDIF                                                                     INISET.126   
*ENDIF                                                                     INISET.127   
*IF DEF,ABOVE_V1                                                           INISET.128   
*ELSE                                                                      INISET.129   
      WRITE(6,*) 'ERROR: need to define ABOVE_V1 (above version 1) ',      INISET.130   
     &     'if defining either ONLY_V2 (version 2) or ONLY_V3 ',           INISET.131   
     &     '(version 3)'                                                   INISET.132   
*ENDIF                                                                     INISET.133   
*ENDIF                                                                     INISET.134   
!-----------------------------------------------------                     INISET.135   
! Variables are set on PE 0 and then passed to the other PEs               INISET.136   
!-----------------------------------------------------                     INISET.137   
      IF (MyPe.EQ.0) THEN                                                  INISET.138   
         !-----------------------------------------------------            INISET.139   
         ! Set default values and override as desired through              INISET.140   
         ! NAMELIST input                                                  INISET.141   
         !-----------------------------------------------------            INISET.142   
         GA=9.80665                                                        INISET.143   
         GASCON=287.0                                                      INISET.144   
         RADEA=6371000.0                                                   INISET.145   
         AKAP=0.286                                                        INISET.146   
         WW=7.292E-5                                                       INISET.147   
C                                                                          INISET.148   
         KRUN=0                                                            INISET.149   
         BEGDAY=0.0                                                        INISET.150   
         TSPD=24.0                                                         INISET.151   
         KITS=3                                                            INISET.152   
         PNU=0.02                                                          INISET.153   
         TDISS=0.25                                                        INISET.154   
         NDEL=6                                                            INISET.155   
         DO L=1,NL                                                         INISET.156   
            T0(L)=250.0                                                    INISET.157   
         ENDDO                                                             INISET.158   
         LRSTRT=.FALSE.                                                    INISET.159   
         LSTRETCH =.FALSE.                                                 INISET.160   
                                                                           INISET.161   
         LSHORT=.FALSE.                                                    INISET.162   
         LBALAN=.FALSE.                                                    INISET.163   
         LRESTIJ=.FALSE.                                                   INISET.164   
         LNOISE=.FALSE.                                                    INISET.165   
C                                                                          INISET.166   
         RNTAPE=0.0                                                        INISET.167   
         KOUNTH=0                                                          INISET.168   
         KOUNTR=0                                                          INISET.169   
         KOUNTP=0                                                          INISET.170   
         KOUNTE=0                                                          INISET.171   
         NCOEFF=0                                                          INISET.172   
         NLAT=MIN(16,JG*NHEM)                                              INISET.173   
                                                                           INISET.174   
         DO I=1,NL                                                         INISET.175   
            LSPO(I)=.FALSE.                                                INISET.176   
            LGPO(I)=.FALSE.                                                INISET.177   
         ENDDO                                                             INISET.178   
*IF DEF,ABOVE_V1                                                           INISET.179   
         ! mass correction switched on                                     INISET.180   
         LMASCOR=.TRUE.                                                    INISET.181   
         ! masses read from restart file                                   INISET.182   
         LMASOLD=.TRUE.                                                    INISET.183   
         ! mass correction printed every KOUNTP steps                      INISET.184   
         LMASPRT=.FALSE.                                                   INISET.185   
         LFLUX=.TRUE.                                                      INISET.186   
                                                                           INISET.187   
         P0=100000.0                                                       INISET.188   
         RV=461.51                                                         INISET.189   
         CLATNT=2.5E6                                                      INISET.190   
         CPD=GASCON/AKAP                                                   INISET.191   
                                                                           INISET.192   
         RNTAPO=-999.0                                                     INISET.193   
         NTRACO=0                                                          INISET.194   
                                                                           INISET.195   
*ENDIF                                                                     INISET.196   
*IF DEF,ONLY_V2                                                            INISET.197   
         NTRVAD=1                                                          INISET.198   
         NTRVADO=1                                                         INISET.199   
         LTRBUD=.FALSE.                                                    INISET.200   
*ENDIF                                                                     INISET.201   
*IF DEF,ONLY_V3                                                            INISET.202   
         BEGDOY=0.0                                                        INISET.203   
                                                                           INISET.204   
         LPERPET=.TRUE.                                                    INISET.205   
         LCLIM=.FALSE.                                                     INISET.206   
         L22L=.TRUE.                                                       INISET.207   
         LOROG=.FALSE.                                                     INISET.208   
         LCSFCT=.TRUE.                                                     INISET.209   
         LSHIST=.TRUE.                                                     INISET.210   
         LMINIH=.TRUE.                                                     INISET.211   
                                                                           INISET.212   
         IF (RNTAPO.EQ.-999.0) RNTAPO=RNTAPE                               INISET.213   
*ENDIF                                                                     INISET.214   
         !-----------------------------------------------------            INISET.215   
         ! Read NAMELISTs, overwrite defaults and write them out           INISET.216   
         !-----------------------------------------------------            INISET.217   
         READ(7,INPPL)                                                     INISET.218   
         WRITE(2,INPPL)                                                    INISET.219   
      READ(7,INPRN)                                                        FORTE_RUNSCR.6     
      KRUN=DAYS*TSPD                                                       FORTE_RUNSCR.7     
      write(6,*) " KRUN = ",KRUN                                           FORTE_RUNSCR.8     
         WRITE(2,INPRN)                                                    INISET.221   
      READ(7,INPOP)                                                        FORTE_RUNSCR.9     
      NCKNT=NCKNTIN                                                        FORTE_RUNSCR.10    
      KOUNTP=DAYP*TSPD                                                     FORTE_RUNSCR.11    
      KOUNTH=DAYH*TSPD                                                     FORTE_RUNSCR.12    
      KOUNTR=DAYR*TSPD                                                     FORTE_RUNSCR.13    
         WRITE(2,INPOP)                                                    INISET.223   
*IF DEF,ONLY_V2                                                            INISET.224   
         READ(7,INTRA)                                                     INISET.225   
         WRITE(2,INTRA)                                                    INISET.226   
*ENDIF                                                                     INISET.227   
      ENDIF       ! ends IF (MYPE.EQ.0) THEN                               INISET.228   
!-----------------------------------------------------                     INISET.229   
! Pass the information to the other PEs                                    INISET.230   
!-----------------------------------------------------                     INISET.231   
      IF (NPE.GT.1) THEN                                                   INISET.232   
         iSend=0                                                           INISET.233   
         nBuffSize=1                                                       INISET.234   
         !-----------------------------------------------------            INISET.235   
         ! Send most of contents of INPPL namelist                         INISET.236   
         !-----------------------------------------------------            INISET.237   
         CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)                             INISET.238   
         CALL MPI_BCAST(GA,nBuffSize,ParaReal,iSend,                       INISET.239   
     &        MPI_COMM_WORLD,ierr)                                         INISET.240   
         CALL MPI_BCAST(GASCON,nBuffSize,ParaReal,iSend,                   INISET.241   
     &        MPI_COMM_WORLD,ierr)                                         INISET.242   
         CALL MPI_BCAST(RADEA,nBuffSize,ParaReal,iSend,                    INISET.243   
     &        MPI_COMM_WORLD,ierr)                                         INISET.244   
         CALL MPI_BCAST(AKAP,nBuffSize,ParaReal,iSend,                     INISET.245   
     &        MPI_COMM_WORLD,ierr)                                         INISET.246   
         CALL MPI_BCAST(WW,nBuffSize,ParaReal,iSend,                       INISET.247   
     &        MPI_COMM_WORLD,ierr)                                         INISET.248   
         !-----------------------------------------------------            INISET.249   
         ! Send most of contents of INPRN namelist                         INISET.250   
         !-----------------------------------------------------            INISET.251   
         CALL MPI_BCAST(KRUN,nBuffSize,ParaInt,iSend,                      INISET.252   
     &        MPI_COMM_WORLD,ierr)                                         INISET.253   
         CALL MPI_BCAST(BEGDAY,nBuffSize,ParaReal,iSend,                   INISET.254   
     &        MPI_COMM_WORLD,ierr)                                         INISET.255   
         CALL MPI_BCAST(TSPD,nBuffSize,ParaReal,iSend,                     INISET.256   
     &        MPI_COMM_WORLD,ierr)                                         INISET.257   
         CALL MPI_BCAST(KITS,nBuffSize,ParaInt,iSend,                      INISET.258   
     &        MPI_COMM_WORLD,ierr)                                         INISET.259   
         CALL MPI_BCAST(PNU,nBuffSize,ParaReal,iSend,                      INISET.260   
     &        MPI_COMM_WORLD,ierr)                                         INISET.261   
         CALL MPI_BCAST(TDISS,nBuffSize,ParaReal,iSend,                    INISET.262   
     &        MPI_COMM_WORLD,ierr)                                         INISET.263   
         CALL MPI_BCAST(NDEL,nBuffSize,ParaInt,iSend,                      INISET.264   
     &        MPI_COMM_WORLD,ierr)                                         INISET.265   
         nBuffSize=NL                                                      INISET.266   
         CALL MPI_BCAST(T0,nBuffSize,ParaReal,iSend,                       INISET.267   
     &        MPI_COMM_WORLD,ierr)                                         INISET.268   
         nBuffSize=1                                                       INISET.269   
         CALL MPI_BCAST(LRSTRT,nBuffSize,ParaLog,iSend,                    INISET.270   
     &        MPI_COMM_WORLD,ierr)                                         INISET.271   
         CALL MPI_BCAST(LSTRETCH,nBuffSize,ParaLog,iSend,                  INISET.272   
     &        MPI_COMM_WORLD,ierr)                                         INISET.273   
         CALL MPI_BCAST(LSHORT,nBuffSize,ParaLog,iSend,                    INISET.274   
     &        MPI_COMM_WORLD,ierr)                                         INISET.275   
         CALL MPI_BCAST(LBALAN,nBuffSize,ParaLog,iSend,                    INISET.276   
     &        MPI_COMM_WORLD,ierr)                                         INISET.277   
         CALL MPI_BCAST(LRESTIJ,nBuffSize,ParaLog,iSend,                   INISET.278   
     &        MPI_COMM_WORLD,ierr)                                         INISET.279   
         CALL MPI_BCAST(LNOISE,nBuffSize,ParaLog,iSend,                    INISET.280   
     &        MPI_COMM_WORLD,ierr)                                         INISET.281   
         !-----------------------------------------------------            INISET.282   
         ! Send most of contents of INPOP namelist                         INISET.283   
         !-----------------------------------------------------            INISET.284   
         CALL MPI_BCAST(RNTAPE,nBuffSize,ParaReal,iSend,                   INISET.285   
     &        MPI_COMM_WORLD,ierr)                                         INISET.286   
         CALL MPI_BCAST(KOUNTH,nBuffSize,ParaInt,iSend,                    INISET.287   
     &        MPI_COMM_WORLD,ierr)                                         INISET.288   
         CALL MPI_BCAST(KOUNTR,nBuffSize,ParaInt,iSend,                    INISET.289   
     &        MPI_COMM_WORLD,ierr)                                         INISET.290   
         CALL MPI_BCAST(KOUNTP,nBuffSize,ParaInt,iSend,                    INISET.291   
     &        MPI_COMM_WORLD,ierr)                                         INISET.292   
         CALL MPI_BCAST(KOUNTE,nBuffSize,ParaInt,iSend,                    INISET.293   
     &        MPI_COMM_WORLD,ierr)                                         INISET.294   
         CALL MPI_BCAST(NCOEFF,nBuffSize,ParaInt,iSend,                    INISET.295   
     &        MPI_COMM_WORLD,ierr)                                         INISET.296   
         CALL MPI_BCAST(NLAT,nBuffSize,ParaInt,iSend,                      INISET.297   
     &        MPI_COMM_WORLD,ierr)                                         INISET.298   
         nBuffSize=NL                                                      INISET.299   
         CALL MPI_BCAST(LSPO,nBuffSize,ParaLog,iSend,                      INISET.300   
     &        MPI_COMM_WORLD,ierr)                                         INISET.301   
         CALL MPI_BCAST(LGPO,nBuffSize,ParaLog,iSend,                      INISET.302   
     &        MPI_COMM_WORLD,ierr)                                         INISET.303   
*IF DEF,ABOVE_V1                                                           INISET.304   
         nBuffSize=1                                                       INISET.305   
         CALL MPI_BCAST(LMASCOR,nBuffSize,ParaLog,iSend,                   INISET.306   
     &        MPI_COMM_WORLD,ierr)                                         INISET.307   
         CALL MPI_BCAST(LMASOLD,nBuffSize,ParaLog,iSend,                   INISET.308   
     &        MPI_COMM_WORLD,ierr)                                         INISET.309   
         CALL MPI_BCAST(LMASPRT,nBuffSize,ParaLog,iSend,                   INISET.310   
     &        MPI_COMM_WORLD,ierr)                                         INISET.311   
         CALL MPI_BCAST(LFLUX,nBuffSize,ParaLog,iSend,                     INISET.312   
     &        MPI_COMM_WORLD,ierr)                                         INISET.313   
         !-----------------------------------------------------            INISET.314   
         !                                                                 INISET.315   
         !-----------------------------------------------------            INISET.316   
         CALL MPI_BCAST(P0,nBuffSize,ParaReal,iSend,                       INISET.317   
     &        MPI_COMM_WORLD,ierr)                                         INISET.318   
         CALL MPI_BCAST(RV,nBuffSize,ParaReal,iSend,                       INISET.319   
     &        MPI_COMM_WORLD,ierr)                                         INISET.320   
         CALL MPI_BCAST(CLATNT,nBuffSize,ParaReal,iSend,                   INISET.321   
     &        MPI_COMM_WORLD,ierr)                                         INISET.322   
         CALL MPI_BCAST(CPD,nBuffSize,ParaReal,iSend,                      INISET.323   
     &        MPI_COMM_WORLD,ierr)                                         INISET.324   
         !-----------------------------------------------------            INISET.325   
         !                                                                 INISET.326   
         !-----------------------------------------------------            INISET.327   
         CALL MPI_BCAST(RNTAPO,nBuffSize,ParaReal,iSend,                   INISET.328   
     &        MPI_COMM_WORLD,ierr)                                         INISET.329   
         CALL MPI_BCAST(NTRACO,nBuffSize,ParaReal,iSend,                   INISET.330   
     &        MPI_COMM_WORLD,ierr)                                         INISET.331   
*ENDIF                                                                     INISET.332   
*IF DEF,ONLY_V2                                                            INISET.333   
         CALL MPI_BCAST(NTRVAD,nBuffSize,ParaReal,iSend,                   INISET.334   
     &        MPI_COMM_WORLD,ierr)                                         INISET.335   
         CALL MPI_BCAST(NTRVADO,nBuffSize,ParaReal,iSend,                  INISET.336   
     &        MPI_COMM_WORLD,ierr)                                         INISET.337   
         CALL MPI_BCAST(LTRBUD,nBuffSize,ParaLog,iSend,                    INISET.338   
     &        MPI_COMM_WORLD,ierr)                                         INISET.339   
*ENDIF                                                                     INISET.340   
*IF DEF,ONLY_V3                                                            INISET.341   
         CALL MPI_BCAST(BEGDOY,nBuffSize,ParaReal,iSend,                   INISET.342   
     &        MPI_COMM_WORLD,ierr)                                         INISET.343   
         !-----------------------------------------------------            INISET.344   
         !                                                                 INISET.345   
         !-----------------------------------------------------            INISET.346   
         CALL MPI_BCAST(LPERPET,nBuffSize,ParaLog,iSend,                   INISET.347   
     &        MPI_COMM_WORLD,ierr)                                         INISET.348   
         CALL MPI_BCAST(LCLIM,nBuffSize,ParaLog,iSend,                     INISET.349   
     &        MPI_COMM_WORLD,ierr)                                         INISET.350   
         CALL MPI_BCAST(L22L,nBuffSize,ParaLog,iSend,                      INISET.351   
     &        MPI_COMM_WORLD,ierr)                                         INISET.352   
         CALL MPI_BCAST(LOROG,nBuffSize,ParaLog,iSend,                     INISET.353   
     &        MPI_COMM_WORLD,ierr)                                         INISET.354   
         CALL MPI_BCAST(LCSFCT,nBuffSize,ParaLog,iSend,                    INISET.355   
     &        MPI_COMM_WORLD,ierr)                                         INISET.356   
         !-----------------------------------------------------            INISET.357   
         !                                                                 INISET.358   
         !-----------------------------------------------------            INISET.359   
         CALL MPI_BCAST(LSHIST,nBuffSize,ParaLog,iSend,                    INISET.360   
     &        MPI_COMM_WORLD,ierr)                                         INISET.361   
         CALL MPI_BCAST(LMINIH,nBuffSize,ParaLog,iSend,                    INISET.362   
     &        MPI_COMM_WORLD,ierr)                                         INISET.363   
*ENDIF                                                                     INISET.364   
      ENDIF                                                                INISET.365   
!-----------------------------------------------------                     INISET.366   
! Write dimension to main output file                                      INISET.367   
!-----------------------------------------------------                     INISET.368   
      IF (MyPe.EQ.0) THEN                                                  INISET.369   
         !-----------------------------------------------------            INISET.370   
         ! Write out details of model run                                  INISET.371   
         !-----------------------------------------------------            INISET.372   
         WRITE(2,205)RNTAPE                                                INISET.373   
         WRITE(2,209)NL,NL,NN,MM,NN,MM                                     INISET.374   
         IF(NHEM.EQ.2) WRITE(2,280) NHEM                                   INISET.375   
         IF(NHEM.EQ.1) WRITE(2,281) NHEM                                   INISET.376   
         WRITE(2,210) MOCT,MOCT,MOCT                                       INISET.377   
         WRITE(2,211)JG,MG,JG,MG                                           INISET.378   
         WRITE(2,212)                                                      INISET.379   
*IF DEF,ABOVE_V1                                                           INISET.380   
         IF (LMASCOR) THEN                                                 INISET.381   
            WRITE(2,213)                                                   INISET.382   
         ELSE                                                              INISET.383   
            WRITE(2,214)                                                   INISET.384   
         ENDIF                                                             INISET.385   
*ENDIF                                                                     INISET.386   
*IF DEF,ONLY_V2                                                            INISET.387   
         IF (LFLUX) THEN                                                   INISET.388   
            WRITE(2,215)                                                   INISET.389   
         ELSE                                                              INISET.390   
            WRITE(2,216)                                                   INISET.391   
         ENDIF                                                             INISET.392   
         IF (NTRVAD.EQ.1) WRITE(2,217)                                     INISET.393   
         IF (NTRVAD.EQ.2) WRITE(2,218)                                     INISET.394   
         IF (NTRVAD.EQ.3) WRITE(2,219)                                     INISET.395   
*ENDIF                                                                     INISET.396   
      ENDIF                                                                INISET.397   
!-----------------------------------------------------                     INISET.398   
! Set remaining physical constants and resolution dependent                INISET.399   
! quantities                                                               INISET.400   
!-----------------------------------------------------                     INISET.401   
      AIOCT=(0.,1.)*MOCT                                                   INISET.402   
*IF DEF,ABOVE_V1                                                           INISET.403   
      RD=GASCON                                                            INISET.404   
*ENDIF                                                                     INISET.405   
!-----------------------------------------------------                     INISET.406   
! Set SQ(n+1)=n(n+1) and RSQ(n+1)=1/(n(n+1))                               INISET.407   
!-----------------------------------------------------                     INISET.408   
      DO NP=1,NN+1                                                         INISET.409   
         SQ(NP)=NP*(NP-1)                                                  INISET.410   
         IF (NP.GT.1) THEN                                                 INISET.411   
            RSQ(NP)=1./SQ(NP)                                              INISET.412   
         ELSE                                                              INISET.413   
            RSQ(1)=0.                                                      INISET.414   
         ENDIF                                                             INISET.415   
      ENDDO                                                                INISET.416   
!-----------------------------------------------------                     INISET.417   
! Compute internal diffusion parameter                                     INISET.418   
!-----------------------------------------------------                     INISET.419   
      IF(TDISS.EQ.0.0) THEN                                                INISET.420   
         AKK=0.0                                                           INISET.421   
      ELSE                                                                 INISET.422   
         AKK=WW*(RADEA**NDEL)/                                             INISET.423   
     &        (2.0*PI*TDISS*((NN*(NN+1))**REAL(NDEL/2)))                   INISET.424   
      END IF                                                               INISET.425   
      IF (MYPE.EQ.0) THEN                                                  INISET.426   
         IF(AKK.EQ.0.0) WRITE(2,221)                                       INISET.427   
         IF(AKK.NE.0.0) WRITE(2,222) NDEL,AKK,NDEL,TDISS                   INISET.428   
      ENDIF                                                                INISET.429   
      AKK=AKK/(WW*(RADEA**NDEL))                                           INISET.430   
      NDELH=NDEL/2                                                         INISET.431   
      DO NP=1,NNP                                                          INISET.432   
         AK(NP)=AKK*(SQ(NP)**NDELH)                                        INISET.433   
      ENDDO                                                                INISET.434   
!-----------------------------------------------------                     INISET.435   
! Set time variables and counters                                          INISET.436   
!-----------------------------------------------------                     INISET.437   
      IF (MYPE.EQ.0) THEN                                                  INISET.438   
         IF(PNU.EQ.0.0)WRITE(2,223)                                        INISET.439   
         IF(PNU.NE.0.0)WRITE(2,224)PNU                                     INISET.440   
         WRITE(2,207)KOUNTP,KOUNTE,KOUNTH,KOUNTR                           INISET.441   
      ENDIF                                                                INISET.442   
                                                                           INISET.443   
      IF(KOUNTP.EQ.0) KOUNTP=-999                                          INISET.444   
      IF(KOUNTE.EQ.0) KOUNTE=-999                                          INISET.445   
      IF(KOUNTH.EQ.0) KOUNTH=-999                                          INISET.446   
      IF(KOUNTR.EQ.0) KOUNTR=-999                                          INISET.447   
      DELT=PI2/TSPD                                                        INISET.448   
      PNU2=PNU+PNU                                                         INISET.449   
      PNU21=1.0-PNU2                                                       INISET.450   
      ITSPD=NINT(TSPD)                                                     INISET.451   
!-----------------------------------------------------                     INISET.452   
! Check variables make sense                                               INISET.453   
!-----------------------------------------------------                     INISET.454   
      IF (MYPE.EQ.0) THEN                                                  INISET.455   
         IF (NLAT.GT.(JG*NHEM)) THEN                                       INISET.456   
            WRITE(2,232)                                                   INISET.457   
            CLOSE(2)                                                       INISET.458   
            CALL ABORT                                                     INISET.459   
         ENDIF                                                             INISET.460   
         IF (NCOEFF.GT.NN) THEN                                            INISET.461   
            WRITE(2,233)                                                   INISET.462   
            CLOSE(2)                                                       INISET.463   
            CALL ABORT                                                     INISET.464   
         ENDIF                                                             INISET.465   
         !-----------------------------------------------------            INISET.466   
         ! Work out how many spectral coefficients need retaining          INISET.467   
         !-----------------------------------------------------            INISET.468   
         NWJCH=0                                                           INISET.469   
         DO MP=0,MM-1,MOCT                                                 INISET.470   
            DO JP=MP,NN-1,MH                                               INISET.471   
               NWJCH=NWJCH+1                                               INISET.472   
            ENDDO                                                          INISET.473   
         ENDDO                                                             INISET.474   
         IF(NWJ2.NE.NWJCH) THEN                                            INISET.475   
            WRITE(2,225) NWJCH,NWJ2                                        INISET.476   
            CLOSE(2)                                                       INISET.477   
            CALL ABORT                                                     INISET.478   
         ENDIF                                                             INISET.479   
*IF DEF,ABOVE_V1                                                           INISET.480   
         IF (NTRACO.GT.NTRAC) THEN                                         INISET.481   
            WRITE(2,240)                                                   INISET.482   
            CLOSE(2)                                                       INISET.483   
            CALL ABORT                                                     INISET.484   
         ENDIF                                                             INISET.485   
*ENDIF                                                                     INISET.486   
*IF DEF,ONLY_V2                                                            INISET.487   
         IF ((.NOT.LRSTRT).AND.NTRACO.GT.0) THEN                           INISET.488   
            WRITE(2,241)                                                   INISET.489   
            NTRACO=0                                                       INISET.490   
         ENDIF                                                             INISET.491   
*ENDIF                                                                     INISET.492   
      ENDIF                                                                INISET.493   
!-----------------------------------------------------                     INISET.494   
! Set dimensionalising factors                                             INISET.495   
!-----------------------------------------------------                     INISET.496   
      EZ=1.0/SQRT(.375)                                                    INISET.497   
      CV=RADEA*WW                                                          INISET.498   
      CG=CV*CV                                                             INISET.499   
      CT=CG/GASCON                                                         INISET.500   
*IF DEF,ABOVE_V1                                                           INISET.501   
      CQ=1000.0                                                            INISET.502   
*ENDIF                                                                     INISET.503   
*IF DEF,ONLY_V3                                                            INISET.504   
      PFAC=0.5*CV*CV*1.0E5/GA                                              INISET.505   
*ENDIF                                                                     INISET.506   
      SQR2=SQRT(2.0)                                                       INISET.507   
      RSQR2=1.0/SQR2                                                       INISET.508   
      EAM1=SQR2/3.                                                         INISET.509   
      EAM2=SQRT(2./45.)                                                    INISET.510   
!-----------------------------------------------------                     INISET.511   
! Make T0 dimensionless                                                    INISET.512   
!-----------------------------------------------------                     INISET.513   
      DO L=1,NL                                                            INISET.514   
        T0(L)=T0(L)/CT                                                     INISET.515   
      ENDDO                                                                INISET.516   
*IF DEF,ONLY_V2                                                            INISET.517   
!-----------------------------------------------------                     INISET.518   
! Loop through the tracers                                                 INISET.519   
!-----------------------------------------------------                     INISET.520   
      DO KK=1,NTRAC                                                        INISET.521   
         IF (KK.EQ.1) THEN                                                 INISET.522   
            !-----------------------------------------------------         INISET.523   
            ! First tracer must be water vapour for parametrizations.      INISET.524   
            !-----------------------------------------------------         INISET.525   
            IF (KOLOUR(KK).NE.0) THEN                                      INISET.526   
               WRITE(2,'('' FIRST TRACER RESET TO WATER VAPOUR'')')        INISET.527   
               KOLOUR(KK)=0                                                INISET.528   
            ENDIF                                                          INISET.529   
            CTRA(KK)=CQ                                                    INISET.530   
         ELSE                                                              INISET.531   
            !-----------------------------------------------------         INISET.532   
            ! Potential temperature.                                       INISET.533   
            !-----------------------------------------------------         INISET.534   
            IF (KOLOUR(KK).EQ.1) CTRA(KK)=CT                               INISET.535   
            !-----------------------------------------------------         INISET.536   
            ! Ertel potential vorticity.                                   INISET.537   
            !-----------------------------------------------------         INISET.538   
            IF (KOLOUR(KK).EQ.2) CTRA(KK)=1.E6*CT*WW*GA/P0                 INISET.539   
         ENDIF                                                             INISET.540   
      ENDDO                                                                INISET.541   
*ENDIF                                                                     INISET.542   
*IF DEF,ONLY_V3                                                            INISET.543   
!-----------------------------------------------------                     INISET.544   
! Hard wires water to Tracer Number 1 water has "colour" of 3.             INISET.545   
!-----------------------------------------------------                     INISET.546   
      IF (NTRAC.GE.1) THEN                                                 INISET.547   
         KOLOUR(1)=3                                                       INISET.548   
         !-----------------------------------------------------            INISET.549   
         ! convert from g/Kg                                               INISET.550   
         !-----------------------------------------------------            INISET.551   
         CTRA(1)=CQ                                                        INISET.552   
      ENDIF                                                                INISET.553   
*ENDIF                                                                     INISET.554   
*IF DEF,FFTW                                                               INISET.555   
!-----------------------------------------------------                     INISET.556   
! Calculate the plans needed for FFTW. The size of the arrays              INISET.557   
! in this case UG2 and PLG2) are important rather the contents             INISET.558   
! here.                                                                    INISET.559   
!-----------------------------------------------------                     INISET.560   
      CALL DFFTW_PLAN_MANY_DFT_C2R(PlanBW3d,1,MG,NHEM*JGy*NLx,             INISET.561   
     &     UG2,0,1,MGPP/2,UG2,0,1,MGPP,FFTW_ESTIMATE+FFTW_UNALIGNED)       INISET.562   
      CALL DFFTW_PLAN_MANY_DFT_C2R(PlanBW2d,1,MG,NHEM*JGy,                 INISET.563   
     &     PLG2,0,1,MGPP/2,PLG2,0,1,MGPP,FFTW_ESTIMATE+FFTW_UNALIGNED)     INISET.564   
      CALL DFFTW_PLAN_MANY_DFT_R2C(PlanFW3d,1,MG,NHEM*JGy*NLx,             INISET.565   
     &     UG2,0,1,MGPP,UG2,0,1,MGPP/2,FFTW_ESTIMATE+FFTW_UNALIGNED)       INISET.566   
      CALL DFFTW_PLAN_MANY_DFT_R2C(PlanFW2d,1,MG,NHEM*JGy,                 INISET.567   
     &     PLG2,0,1,MGPP,PLG2,0,1,MGPP/2,FFTW_ESTIMATE+FFTW_UNALIGNED)     INISET.568   
*IF DEF,ABOVE_V1                                                           INISET.569   
      IF (NTRAC.GT.1) THEN                                                 INISET.570   
         CALL DFFTW_PLAN_MANY_DFT_C2R(PlanBWtrac,1,MG,                     INISET.571   
     &        NHEM*JGy*NLx*NTRAC,TRAG2,0,1,MGPP/2,                         INISET.572   
     &        TRAG2,0,1,MGPP,FFTW_ESTIMATE+FFTW_UNALIGNED)                 INISET.573   
         CALL DFFTW_PLAN_MANY_DFT_R2C(PlanFWtrac,1,MG,                     INISET.574   
     &        NHEM*JGy*NLx*NTRAC,TRAG2,0,1,MGPP,                           INISET.575   
     &        TRAG2,0,1,MGPP/2,FFTW_ESTIMATE+FFTW_UNALIGNED)               INISET.576   
      ENDIF                                                                INISET.577   
*ENDIF                                                                     INISET.578   
*ELSE                                                                      INISET.579   
!-----------------------------------------------------                     INISET.580   
! Calculate auxiliary values required by FFT991                            INISET.581   
!-----------------------------------------------------                     INISET.582   
      CALL SET99(TRIG,IFAX,MG)                                             INISET.583   
*ENDIF                                                                     INISET.584   
!-----------------------------------------------------                     INISET.585   
! Set output control variables and initialise WRSPS                        INISET.586   
!-----------------------------------------------------                     INISET.587   
      INSPC=0                                                              INISET.588   
      DO MP=1,NCOEFF,MOCT                                                  INISET.589   
         DO JP=MP,NCOEFF,MH                                                INISET.590   
            INSPC=INSPC+1                                                  INISET.591   
         ENDDO                                                             INISET.592   
      ENDDO                                                                INISET.593   
!-----------------------------------------------------                     INISET.594   
! Calling WRSPS the first time sets variables that need to be set          INISET.595   
! once before spectral coefficients can be written out                     INISET.596   
!-----------------------------------------------------                     INISET.597   
      IF (MyPe.EQ.0) CALL WRSPS(CDUM,Z,1,NL)                               INISET.598   
      IF (NLAT.NE.0) THEN                                                  INISET.599   
         INLAT=(JG*NHEM)/NLAT                                              INISET.600   
      ELSE                                                                 INISET.601   
         INLAT=0                                                           INISET.602   
      ENDIF                                                                INISET.603   
!-----------------------------------------------------                     INISET.604   
! Set up CMPA array to calculate x-derivative of half transforms           INISET.605   
!-----------------------------------------------------                     INISET.606   
      CMPA(:,:)=0.0                                                        INISET.607   
      DO IHEM=1,NHEM                                                       INISET.608   
         DO nT=1,2                                                         INISET.609   
            DO IM=1,MMTyy(iRow)                                            INISET.610   
               MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                         INISET.611   
               CMPA(MP,IHEM)=CMPLX(0.,REAL(mWave(nT,IM)))                  INISET.612   
            ENDDO                                                          INISET.613   
         ENDDO                                                             INISET.614   
      ENDDO                                                                INISET.615   
      END                                                                  INISET.616   
*DECK INIGAU                                                               INIGAU.1     
!=====================================================                     INIGAU.2     
! This subroutine calculates gaussian weights and latitudes                INIGAU.3     
!=====================================================                     INIGAU.4     
      SUBROUTINE INIGAU                                                    INIGAU.5     
      IMPLICIT NONE                                                        INIGAU.6     
*CALL PARAM1                                                               INIGAU.7     
*CALL PARAM2                                                               INIGAU.8     
*CALL PARAM3                                                               INIGAU.9     
*CALL BLANK                                                                INIGAU.10    
*CALL BATS                                                                 INIGAU.11    
*CALL LEGAU                                                                INIGAU.12    
*CALL MPIDECK                                                              INIGAU.13    
!-----------------------------------------------------                     INIGAU.14    
! Local variables                                                          INIGAU.15    
!-----------------------------------------------------                     INIGAU.16    
! Legendre polynomials                                                     INIGAU.17    
      REAL :: ALPJ(2,NWJ2)                                                 INIGAU.18    
! Derivatives of Legendre polynomials                                      INIGAU.19    
      REAL :: DALPJ(2,NWJ2)                                                INIGAU.20    
! Gaussian weight for current latitude                                     INIGAU.21    
      REAL :: WEIGHT                                                       INIGAU.22    
      INTEGER :: INFO                                                      INIGAU.23    
      REAL :: SISQ                                                         INIGAU.24    
      INTEGER :: I                                                         INIGAU.25    
      REAL :: ALAT2(JG)                                                    INIGAU.26    
      LOGICAL :: lDum                                                      INIGAU.27    
      INTEGER :: NP                                                        INIGAU.28    
      INTEGER :: iPe                                                       INIGAU.29    
! Loop variables                                                           INIGAU.30    
      INTEGER :: IHEM, IM, IN, J, JJ, K, M, N                              INIGAU.31    
!-----------------------------------------------------                     INIGAU.32    
! Format statments                                                         INIGAU.33    
!-----------------------------------------------------                     INIGAU.34    
  202 FORMAT(' GAUSSIAN LATITUDES')                                        INIGAU.35    
  201 FORMAT(10F7.2)                                                       INIGAU.36    
!-----------------------------------------------------                     INIGAU.37    
! Loop over the latitudes                                                  INIGAU.38    
!-----------------------------------------------------                     INIGAU.39    
      DO J=1,JG                                                            INIGAU.40    
         !-----------------------------------------------------            INIGAU.41    
         ! Calculate the sine of latitude and Gaussian weight              INIGAU.42    
         ! (GWTLT is external subroutine found in libutil)                 INIGAU.43    
         !-----------------------------------------------------            INIGAU.44    
         CALL GWTLT(SI(J,1),WEIGHT,J,JG,INFO)                              INIGAU.45    
         IF ((MyPe.EQ.0).AND.(INFO.NE.0)) THEN                             INIGAU.46    
            WRITE(2,'(15a)') ' NO CONVERGENCE'                             INIGAU.47    
         ENDIF                                                             INIGAU.48    
         !-----------------------------------------------------            INIGAU.49    
         ! Calculate other coefficient connected with latitude             INIGAU.50    
         !-----------------------------------------------------            INIGAU.51    
         SISQ=SI(J,1)*SI(J,1)                                              INIGAU.52    
         CSSQ(J,1)=1.-SISQ                                                 INIGAU.53    
         SECSQ(J,1)=1./CSSQ(J,1)                                           INIGAU.54    
         CS(J,1)=SQRT(CSSQ(J,1))                                           INIGAU.55    
         AW(J,1)=WEIGHT*2.0*SECSQ(J,1)                                     INIGAU.56    
         ALAT(J,1)=ATAN(SI(J,1)/CS(J,1))*180.0/PI                          INIGAU.57    
         !-----------------------------------------------------            INIGAU.58    
         ! Compute Legendre functions at the current latitude.             INIGAU.59    
         !-----------------------------------------------------            INIGAU.60    
         CALL LGNDRE(NN,MM,MOCT,ALPJ,DALPJ,NWJ2,SI(J,1),CS(J,1))           INIGAU.61    
         !-----------------------------------------------------            INIGAU.62    
         ! Reorder Legendre functions, separating even/odd functions.      INIGAU.63    
         !-----------------------------------------------------            INIGAU.64    
         DO K=1,2                                                          INIGAU.65    
            DO IM=1,MMTyy(iRow)                                            INIGAU.66    
               DO I=1,Px                                                   INIGAU.67    
                  DO IN=1,NNTxx(I)                                         INIGAU.68    
                     NP=nWave(IN,IM,I)                                     INIGAU.69    
                     iPe=PeGrid(I,iRow)                                    INIGAU.70    
                     ALP(IN+NNT1(I),IM,K,J)=                               INIGAU.71    
     &                    ALPJ(K,CoefConv(IN,IM,iPe))                      INIGAU.72    
                     DALP(IN+NNT1(I),IM,K,J)=                              INIGAU.73    
     &                    DALPJ(K,CoefConv(IN,IM,iPe))                     INIGAU.74    
                     RLP(IN+NNT1(I),IM,K,J)=                               INIGAU.75    
     &                    -RSQ(NP+K)*ALP(IN+NNT1(I),IM,K,J)                INIGAU.76    
                     RDLP(IN+NNT1(I),IM,K,J)=                              INIGAU.77    
     &                    -RSQ(NP+K)*DALP(IN+NNT1(I),IM,K,J)               INIGAU.78    
                  ENDDO                                                    INIGAU.79    
               ENDDO                                                       INIGAU.80    
            ENDDO                                                          INIGAU.81    
         ENDDO                                                             INIGAU.82    
      ENDDO                                                                INIGAU.83    
!-----------------------------------------------------                     INIGAU.84    
! Set values for the 2nd hemisphere                                        INIGAU.85    
!-----------------------------------------------------                     INIGAU.86    
      IF (NHEM.EQ.2) THEN                                                  INIGAU.87    
CDIR$    IVDEP                                                             INIGAU.88    
         DO J=1,JG                                                         INIGAU.89    
            SI(J,NHEM)   =-SI(J,1)                                         INIGAU.90    
            CS(J,NHEM)   =CS(J,1)                                          INIGAU.91    
            CSSQ(J,NHEM) =CSSQ(J,1)                                        INIGAU.92    
            SECSQ(J,NHEM)=SECSQ(J,1)                                       INIGAU.93    
            AW(J,NHEM)   =AW(J,1)                                          INIGAU.94    
            ALAT(J,NHEM)=-ALAT(J,1)                                        INIGAU.95    
         ENDDO                                                             INIGAU.96    
      ENDIF                                                                INIGAU.97    
!-----------------------------------------------------                     INIGAU.98    
! Output the Gaussian latitudes                                            INIGAU.99    
!-----------------------------------------------------                     INIGAU.100   
      IF (MyPe.EQ.0) THEN                                                  INIGAU.101   
         WRITE(2,202)                                                      INIGAU.102   
         WRITE(2,201)((ALAT(J+(IHEM-1)*(JG-2*J+1),IHEM),J=1,JG),           INIGAU.103   
     &        IHEM=1,NHEM)                                                 INIGAU.104   
      ENDIF                                                                INIGAU.105   
      END                                                                  INIGAU.106   
*DECK INISI                                                                INISI.1     
!=====================================================                     INISI.2     
! Sets up arrays and variables for the vertical structure                  INISI.3     
! and the semi-implicit scheme                                             INISI.4     
!=====================================================                     INISI.5     
      SUBROUTINE INISI                                                     INISI.6     
      IMPLICIT NONE                                                        INISI.7     
*CALL PARAM1                                                               INISI.8     
*CALL PARAM2                                                               INISI.9     
*CALL PARAM3                                                               INISI.10    
*CALL BLANK                                                                INISI.11    
*CALL BATS                                                                 INISI.12    
*CALL OUTCON                                                               INISI.13    
*CALL MPIDECK                                                              INISI.14    
!-----------------------------------------------------                     INISI.15    
! Local variables                                                          INISI.16    
!-----------------------------------------------------                     INISI.17    
      REAL :: H(NL),CR(NL),CI(NL),TBM1(NL,NL),WA(NL)                       INISI.18    
      INTEGER :: IWA(NL)                                                   INISI.19    
      REAL :: STP                                                          INISI.20    
      REAL :: T1, T2                                                       INISI.21    
      REAL :: P                                                            INISI.22    
      REAL :: S1, S2                                                       INISI.23    
      REAL :: T0M                                                          INISI.24    
      REAL :: T0P                                                          INISI.25    
      REAL :: ALJ                                                          INISI.26    
      REAL :: HL                                                           INISI.27    
      REAL :: TAQ                                                          INISI.28    
      REAL :: RDSIGL                                                       INISI.29    
      REAL :: SIG                                                          INISI.30    
      REAL :: DSIG                                                         INISI.31    
      REAL :: SIGM                                                         INISI.32    
      REAL :: TM, TMM, TTM                                                 INISI.33    
      REAL :: TTAU                                                         INISI.34    
      REAL :: TTKP                                                         INISI.35    
      REAL :: FAC                                                          INISI.36    
      REAL :: TT01S2                                                       INISI.37    
      REAL :: DELTSQ                                                       INISI.38    
      REAL :: T0L                                                          INISI.39    
      REAL :: RCN                                                          INISI.40    
      REAL :: SFAC                                                         INISI.41    
*IF DEF,ABOVE_V1                                                           INISI.42    
      REAL :: RGVAL                                                        INISI.43    
      REAL :: DA, DB, DC, DD                                               INISI.44    
*ENDIF                                                                     INISI.45    
! Loop variables                                                           INISI.46    
      INTEGER :: I, IN, J, L, M, N                                         INISI.47    
!-----------------------------------------------------                     INISI.48    
! Format statements                                                        INISI.49    
!-----------------------------------------------------                     INISI.50    
  203 FORMAT(' STANDARD HEIGHTS IN KM')                                    INISI.51    
  206 FORMAT(' GRAVITY WAVE SPEEDS IN M/SEC')                              INISI.52    
  208 FORMAT(' VALUES OF SIGMA AT HALF LEVELS')                            INISI.53    
  213 FORMAT(1X,8F8.4)                                                     INISI.54    
  214 FORMAT(' VALUES OF SIGMA AT FULL LEVELS')                            INISI.55    
  215 FORMAT(' BASIC STATE TEMPERATURES (NON-DIMENSIONAL)')                INISI.56    
  216 FORMAT(1X,8F8.3)                                                     INISI.57    
  217 FORMAT(5X,8F8.3)                                                     INISI.58    
!-----------------------------------------------------                     INISI.59    
! Set the sigma levels                                                     INISI.60    
!-----------------------------------------------------                     INISI.61    
      STP=1.0/NL                                                           INISI.62    
      IF (.NOT. LSTRETCH) THEN                                             INISI.63    
         DO L=1,NL-1                                                       INISI.64    
            SIGMAH(L)=L*STP                                                INISI.65    
         ENDDO                                                             INISI.66    
      ELSE                                                                 INISI.67    
         P=0.0                                                             INISI.68    
         T1=(.9375/.94-1.25)/(.9375*(SQRT(.9375)-1.0))                     INISI.69    
         T2=4.0+T1                                                         INISI.70    
         DO L=1,NL-1                                                       INISI.71    
            P=P+STP                                                        INISI.72    
            SIGMAH(L)=P*(2.0-P)*(1.0+0.25*SIN(PI2*(P**.6)))/               INISI.73    
     &                (5.0-T2*P+T1*(P**1.5))                               INISI.74    
         ENDDO                                                             INISI.75    
      ENDIF                                                                INISI.76    
*IF DEF,ONLY_V3                                                            INISI.77    
      IF (L22L.AND.NL.EQ.22) THEN                                          INISI.78    
         SIGMAH(1)=0.002                                                   INISI.79    
         SIGMAH(2)=0.009                                                   INISI.80    
         SIGMAH(3)=0.019                                                   INISI.81    
         SIGMAH(4)=0.037                                                   INISI.82    
         SIGMAH(5)=0.063                                                   INISI.83    
         SIGMAH(6)=0.100                                                   INISI.84    
         SIGMAH(7)=0.136                                                   INISI.85    
         SIGMAH(8)=0.172                                                   INISI.86    
         SIGMAH(9)=0.207                                                   INISI.87    
         SIGMAH(10)=0.242                                                  INISI.88    
         SIGMAH(11)=0.277                                                  INISI.89    
         SIGMAH(12)=0.316                                                  INISI.90    
         SIGMAH(13)=0.360                                                  INISI.91    
         SIGMAH(14)=0.411                                                  INISI.92    
         SIGMAH(15)=0.472                                                  INISI.93    
         SIGMAH(16)=0.544                                                  INISI.94    
         SIGMAH(17)=0.624                                                  INISI.95    
         SIGMAH(18)=0.712                                                  INISI.96    
         SIGMAH(19)=0.800                                                  INISI.97    
         SIGMAH(20)=0.882                                                  INISI.98    
         SIGMAH(21)=0.951                                                  INISI.99    
      ENDIF                                                                INISI.100   
*ENDIF                                                                     INISI.101   
      S1=0.                                                                INISI.102   
      DO L=1,NL-1                                                          INISI.103   
         S2=SIGMAH(L)                                                      INISI.104   
         DSIGMA(L)=S2-S1                                                   INISI.105   
         SIGMA(L)=0.5*(S2+S1)                                              INISI.106   
         RDSIG(L)=0.5/DSIGMA(L)                                            INISI.107   
         S1=S2                                                             INISI.108   
      ENDDO                                                                INISI.109   
      DSIGMA(NL)=1.-SIGMAH(NL-1)                                           INISI.110   
      RDSIG(NL)=0.5/DSIGMA(NL)                                             INISI.111   
      SIGMA(NL)=0.5*(1.+SIGMAH(NL-1))                                      INISI.112   
!-----------------------------------------------------                     INISI.113   
! This value, used in setting ALPHA(1), is irrelevant in the               INISI.114   
! angular momentum conserving ECMWF scheme                                 INISI.115   
!-----------------------------------------------------                     INISI.116   
      S1=LOG(SIGMA(1)*SIGMA(1)/SIGMAH(1))                                  INISI.117   
      T0M=T0(1)                                                            INISI.118   
      DO L=1,NL-1                                                          INISI.119   
         S2=LOG(SIGMAH(L))                                                 INISI.120   
         T0P=T0(L+1)                                                       INISI.121   
         G(1,L)=0.                                                         INISI.122   
         T01S2(L)=T0P-T0M                                                  INISI.123   
         ALPHA(L)=S2-S1                                                    INISI.124   
         TKP(L)=AKAP*T0M                                                   INISI.125   
         T0M=T0P                                                           INISI.126   
         S1=S2                                                             INISI.127   
      ENDDO                                                                INISI.128   
      ALPHA(NL)=-S1                                                        INISI.129   
      TKP(NL)=AKAP*T0M                                                     INISI.130   
      G(1,1)=1.0                                                           INISI.131   
      DO J=2,NL                                                            INISI.132   
         ALJ=ALPHA(J)                                                      INISI.133   
         DO I=1,J-1                                                        INISI.134   
            G(J,I)=ALJ                                                     INISI.135   
         ENDDO                                                             INISI.136   
         G(J,J)=1.0-ALJ*SIGMAH(J-1)/DSIGMA(J)                              INISI.137   
         IF (J.LT.NL) THEN                                                 INISI.138   
            DO I=J+1,NL                                                    INISI.139   
               G(J,I)=0.                                                   INISI.140   
            ENDDO                                                          INISI.141   
         ENDIF                                                             INISI.142   
      ENDDO                                                                INISI.143   
      DO I=1,NL                                                            INISI.144   
         DO J=I,NL                                                         INISI.145   
            C(I,J)=G(J,I)*DSIGMA(I)/DSIGMA(J)                              INISI.146   
         ENDDO                                                             INISI.147   
      ENDDO                                                                INISI.148   
      TT01S2=T01S2(1)                                                      INISI.149   
      TAU(1,1)=0.5*TT01S2*(SIGMAH(1)-1.0)+TKP(1)*C(1,1)                    INISI.150   
      DO L=2,NL                                                            INISI.151   
         TAU(L,1)=0.5*TT01S2*DSIGMA(L)                                     INISI.152   
      ENDDO                                                                INISI.153   
      SIG=SIGMAH(1)                                                        INISI.154   
      DO L=2,NL                                                            INISI.155   
         TTKP=TKP(L)                                                       INISI.156   
         TTM=TT01S2                                                        INISI.157   
         SIGM=SIG                                                          INISI.158   
         IF (L.LT.NL) THEN                                                 INISI.159   
            TT01S2=T01S2(L)                                                INISI.160   
            SIG=SIGMAH(L)                                                  INISI.161   
         ENDIF                                                             INISI.162   
         RDSIGL=RDSIG(L)                                                   INISI.163   
         DO M=1,NL                                                         INISI.164   
            IF( M.LT.L) THEN                                               INISI.165   
               TM=1.                                                       INISI.166   
               TMM=1.                                                      INISI.167   
            ELSEIF (M.EQ.L) THEN                                           INISI.168   
               TM=1.                                                       INISI.169   
               TMM=0.                                                      INISI.170   
            ELSE                                                           INISI.171   
               TM=0.                                                       INISI.172   
               TMM=0.                                                      INISI.173   
            ENDIF                                                          INISI.174   
            TTAU=TTM*(SIGM-TMM)                                            INISI.175   
            IF (L.LT.NL) TTAU=TTAU+TT01S2*(SIG-TM)                         INISI.176   
            TTAU=TTAU*RDSIGL*DSIGMA(M)                                     INISI.177   
            IF (M.LE.L) TTAU=TTAU+TTKP*C(M,L)                              INISI.178   
            TAU(M,L)=TTAU                                                  INISI.179   
         ENDDO                                                             INISI.180   
      ENDDO                                                                INISI.181   
      FAC=0.001*CG/GA                                                      INISI.182   
      DO L=1,NL                                                            INISI.183   
         HL=0.                                                             INISI.184   
         DO M=1,NL                                                         INISI.185   
            HL=HL+G(M,L)*T0(M)                                             INISI.186   
         ENDDO                                                             INISI.187   
         H(L)=HL*FAC                                                       INISI.188   
      ENDDO                                                                INISI.189   
      DO L=1,NL                                                            INISI.190   
         DO M=1,NL                                                         INISI.191   
            TAQ=T0(L)*DSIGMA(M)                                            INISI.192   
            DO N=1,NL                                                      INISI.193   
               TAQ=TAQ+G(N,L)*TAU(M,N)                                     INISI.194   
            ENDDO                                                          INISI.195   
            AQ(M,L)=TAQ                                                    INISI.196   
            TBM1(M,L)=TAQ                                                  INISI.197   
         ENDDO                                                             INISI.198   
      ENDDO                                                                INISI.199   
      CALL QREIG(TBM1,NL,NL,NL,CR,CI)                                      INISI.200   
      DO L=1,NL                                                            INISI.201   
         CR(L)=CV*SQRT(CR(L))                                              INISI.202   
      ENDDO                                                                INISI.203   
!-----------------------------------------------------                     INISI.204   
! Write out vertical information                                           INISI.205   
!-----------------------------------------------------                     INISI.206   
      IF (MYPE.EQ.0) THEN                                                  INISI.207   
         WRITE(2,208)                                                      INISI.208   
         WRITE(2,217)(SIGMAH(L),L=1,NL-1)                                  INISI.209   
         WRITE(2,214)                                                      INISI.210   
         WRITE(2,213)(SIGMA(L),L=1,NL)                                     INISI.211   
         WRITE(2,215)                                                      INISI.212   
         WRITE(2,216)(T0(L),L=1,NL)                                        INISI.213   
         WRITE(2,203)                                                      INISI.214   
         WRITE(2,216)(H(L),L=1,NL)                                         INISI.215   
         WRITE(2,206)                                                      INISI.216   
         WRITE(2,216)(CR(L),L=1,NL)                                        INISI.217   
         WRITE(2,*)                                                        INISI.218   
      ENDIF                                                                INISI.219   
*IF DEF,ABOVE_V1                                                           INISI.220   
!-----------------------------------------------------                     INISI.221   
! RGG matrix for vertical derivatives:                                     INISI.222   
! d()/dln(sigma) = (sigma)d()/d(sigma).                                    INISI.223   
!-----------------------------------------------------                     INISI.224   
      DO L=1,NL                                                            INISI.225   
         RGVAL=SIGMA(L)*RDSIG(L)                                           INISI.226   
         DO M=1,NL                                                         INISI.227   
            RGG(M,L)=0.                                                    INISI.228   
            IF (M.EQ.L-1) RGG(M,L)=-RGVAL                                  INISI.229   
            IF (M.EQ.L+1) RGG(M,L)=RGVAL                                   INISI.230   
         ENDDO                                                             INISI.231   
      ENDDO                                                                INISI.232   
      DA=SIGMA(1)                                                          INISI.233   
      DB=SIGMA(2)-DA                                                       INISI.234   
      DC=SIGMA(3)-SIGMA(2)                                                 INISI.235   
      DD=DC+DB                                                             INISI.236   
      RGG(1,1)=-DA*(DD+DB)/(DB*DD)                                         INISI.237   
      RGG(2,1)=DA*DD/(DB*DC)                                               INISI.238   
      RGG(3,1)=-DA*DB/(DC*DD)                                              INISI.239   
      DA=SIGMA(NL)                                                         INISI.240   
      DD=SIGMA(NL-1)                                                       INISI.241   
      DB=DA-DD                                                             INISI.242   
      DC=DD-SIGMA(NL-2)                                                    INISI.243   
      DD=DC+DB                                                             INISI.244   
      RGG(NL,NL)=DA*(DD+DB)/(DB*DD)                                        INISI.245   
      RGG(NL-1,NL)=-DA*DD/(DB*DC)                                          INISI.246   
      RGG(NL-2,NL)=DA*DB/(DC*DD)                                           INISI.247   
*ENDIF                                                                     INISI.248   
!-----------------------------------------------------                     INISI.249   
! Setup arrays for semi-implicit scheme                                    INISI.250   
!-----------------------------------------------------                     INISI.251   
      DELTSQ=DELT*DELT                                                     INISI.252   
      DO IN=1,NN                                                           INISI.253   
         RCN=RSQ(IN+1)                                                     INISI.254   
         DO L=1,NL                                                         INISI.255   
            DO M=1,NL                                                      INISI.256   
               TBM1(M,L)=AQ(M,L)*DELTSQ                                    INISI.257   
               IF(M.EQ.L)TBM1(M,L)=TBM1(M,L)+RCN                           INISI.258   
            ENDDO                                                          INISI.259   
         ENDDO                                                             INISI.260   
         CALL MATINV(TBM1,NL,NL,IWA,WA)                                    INISI.261   
         !-----------------------------------------------------            INISI.262   
         ! Copy contents of TBM1 into BM1 at wavenumber IN                 INISI.263   
         !-----------------------------------------------------            INISI.264   
         DO L=1,NL                                                         INISI.265   
            DO M=1,NL                                                      INISI.266   
               BM1(M,L,IN)=TBM1(M,L)                                       INISI.267   
            ENDDO                                                          INISI.268   
         ENDDO                                                             INISI.269   
      ENDDO                                                                INISI.270   
      SFAC=0.5**KITS                                                       INISI.271   
      IF(LRSTRT.AND..NOT.LSHORT)SFAC=1.0                                   INISI.272   
      DELT=DELT*SFAC                                                       INISI.273   
      DELT2=DELT+DELT                                                      INISI.274   
      DELTSQ=DELT*DELT                                                     INISI.275   
      DO L=1,NL                                                            INISI.276   
         DO M=1,NL                                                         INISI.277   
            AQ(M,L)=AQ(M,L)*DELTSQ                                         INISI.278   
         ENDDO                                                             INISI.279   
      ENDDO                                                                INISI.280   
      TOUT1=0.                                                             INISI.281   
      TOUT2=0.                                                             INISI.282   
      DO L=1,NL                                                            INISI.283   
         T0L=T0(L)                                                         INISI.284   
         DSIG=DSIGMA(L)*T0(L)                                              INISI.285   
         TOUT1=TOUT1+DSIG                                                  INISI.286   
         TOUT2=TOUT2+DSIG*T0L                                              INISI.287   
      ENDDO                                                                INISI.288   
      END                                                                  INISI.289   
*DECK INIPHYS                                                              INIPHYS.1     
*IF DEF,ABOVE_V1                                                           INIPHYS.2     
!=====================================================                     INIPHYS.3     
! Sets up PHYSICS variables and arrays. Sets NAMELIST variables            INIPHYS.4     
! to their default settings, then reads NAMELIST                           INIPHYS.5     
! (Piers Forster, 23/10/96)                                                INIPHYS.6     
!=====================================================                     INIPHYS.7     
      SUBROUTINE INIPHYS                                                   INIPHYS.8     
      IMPLICIT NONE                                                        INIPHYS.9     
*CALL PARAM1                                                               INIPHYS.10    
*CALL PARAM2                                                               INIPHYS.11    
*CALL PARAM3                                                               INIPHYS.12    
*CALL BLANK                                                                INIPHYS.13    
*CALL BATS                                                                 INIPHYS.14    
*CALL PHYSCA                                                               INIPHYS.15    
*CALL MPIDECK                                                              INIPHYS.16    
!-----------------------------------------------------                     INIPHYS.17    
! Local variables                                                          INIPHYS.18    
!-----------------------------------------------------                     INIPHYS.19    
      INTEGER :: NCNT                                                      INIPHYS.20    
      REAL :: FW                                                           INIPHYS.21    
      REAL :: FRADC                                                        INIPHYS.22    
      REAL :: CLATNTI                                                      INIPHYS.23    
      REAL :: SFAC                                                         INIPHYS.24    
      REAL :: CDIF                                                         INIPHYS.25    
      REAL :: FC                                                           INIPHYS.26    
      REAL :: ZAIRMWG, ZCO2MWG, ZCH4MWG                                    UPDMORCMB.10    
      REAL :: ZN2OMWG, ZC11MWG, ZC12MWG                                    UPDMORCMB.11    
      REAL :: ZH2OMWG                                                      UPDMORCMB.12    
*CALL MORCGAS                                                              UPDMORCMB.13    
! Loop variables                                                           INIPHYS.27    
      INTEGER :: IHEM, J, L                                                INIPHYS.28    
!-----------------------------------------------------                     UPDMORCMB.14    
! Data values                                                              UPDMORCMB.15    
!-----------------------------------------------------                     UPDMORCMB.16    
      DATA ZAIRMWG/28.970/                                                 UPDMORCMB.17    
      DATA ZCO2MWG/44.011/                                                 UPDMORCMB.18    
      DATA ZCH4MWG/16.043/                                                 UPDMORCMB.19    
      DATA ZN2OMWG/44.013/                                                 UPDMORCMB.20    
      DATA ZC11MWG/137.3686/                                               UPDMORCMB.21    
      DATA ZC12MWG/120.9140/                                               UPDMORCMB.22    
      DATA ZH2OMWG/18.015/                                                 UPDMORCMB.23    
!-----------------------------------------------------                     INIPHYS.29    
! Physics namelist                                                         INIPHYS.30    
!-----------------------------------------------------                     INIPHYS.31    
      NAMELIST/INPHYS/LBL,LVD,LCR,LLR,LRD,LCUBM,LCBADJ                     INIPHYS.32    
     &     ,CD,BLRH,AKVV,AKTV,AKQV,AKTC,AKQC,NLCR,NCUTOP,FW,FRADC          INIPHYS.33    
     &     ,CURHM,CUBMT,CBADJT,CBADJP                                      INIPHYS.34    
     &     ,GWK,GWNO                                                       GRAVDMOD.20    
*IF DEF,ONLY_V3                                                            INIPHYS.35    
     &     ,LSL,LOC,LNOICE,LOLDBL,LCOND,LNNSK,ITSLL,ITSLO                  INIPHYS.36    
*ENDIF                                                                     INIPHYS.37    
      NAMELIST/INMORCGAS/VMRCO2,VMRCH4,VMRN2O,                             UPDMORCMB.24    
     &              VMRCFC11,VMRCFC12,VMRH2OS,NEXOTIC                      UPDMORCMB.25    
!-----------------------------------------------------                     INIPHYS.38    
! Format statements                                                        INIPHYS.39    
!-----------------------------------------------------                     INIPHYS.40    
  240 FORMAT(' PHYSICAL PROCESSES INCLUDED ARE AS FOLLOWS:')               INIPHYS.41    
  241 FORMAT(' SURFACE FLUXES : CD, RH-FACTOR =',F10.4,F10.1,'%')          INIPHYS.42    
  242 FORMAT(' CONVECTION THROUGH',I4,' LAYERS FROM LOWEST LEVEL'/         INIPHYS.43    
     :' DRY CONVECTION   : ADJUSTMENT TO NEUTRALITY IN SINGLE TIMESTEP')   INIPHYS.44    
  246 FORMAT(' PRECIPITATING CONVECTION : NON-ENTRAINING CLOUD MODEL'      INIPHYS.45    
     :,' WITH ENVIRONMENTAL SDOT =',E7.1)                                  INIPHYS.46    
  247 FORMAT(' PRECIPITATING CONVECTION : ADJUSTMENT TO SUBSATURATED'      INIPHYS.47    
     :,' MOIST ADIABAT WITH SCRIPT-P(MB) TAU(HOURS) =',2F6.1)              INIPHYS.48    
  248 FORMAT(' NON-PRECIPITATING DIFFUSIVE MOIST CONVECTION WITH'          INIPHYS.49    
     :,' BACKGROUND KT KQ =',2F6.1,' M2/S')                                INIPHYS.50    
  249 FORMAT(' NON-PRECIPITATING BETTS-MILLER MOIST CONVECTION WITH'       INIPHYS.51    
     :,' BACKGROUND TIMESCALE ',F6.1,' HOURS')                             INIPHYS.52    
  250 FORMAT(' FORMALLY NON-PRECIPITATING CONVECTION INCLUDES RAINOUT'     INIPHYS.53    
     :,' EXCESS OVER',F6.1,'% RH')                                         INIPHYS.54    
  243 FORMAT(' LARGE-SCALE CONDENSATION TO SATURATION IN TIMESTEP')        INIPHYS.55    
*IF DEF,ONLY_V2                                                            INIPHYS.56    
  244 FORMAT(' RADIATION: UNIFORM COOLING BELOW 200MB OF',F5.2,' K/DAY')   INIPHYS.57    
*ELSE                                                                      INIPHYS.58    
  244 FORMAT(' RADIATION: MORCRETTE CODE(SMR+PMF), DIAGNOSTIC CLOUD        INIPHYS.59    
     : VERSION 2.0')                                                       INIPHYS.60    
*ENDIF                                                                     INIPHYS.61    
  245 FORMAT(' VERTICAL DIFFUSION OF MOMENTUM HEAT AND MOISTURE WITH',     INIPHYS.62    
     :       ' CONSTANT COEFFS AKVV AKTV AKQV =',3F8.2)                    INIPHYS.63    
  255 FORMAT('GWAVE Ks, Non orog amplitude = ',E9.3,E9.3)                  GRAVDMOD.21    
!-----------------------------------------------------                     INIPHYS.64    
! Preset namelist values.                                                  INIPHYS.65    
!-----------------------------------------------------                     INIPHYS.66    
      LBL=.FALSE.                                                          INIPHYS.67    
      LVD=.FALSE.                                                          INIPHYS.68    
      LCR=.FALSE.                                                          INIPHYS.69    
      LLR=.FALSE.                                                          INIPHYS.70    
      LRD=.FALSE.                                                          INIPHYS.71    
      LCUBM=.FALSE.                                                        INIPHYS.72    
      LCBADJ=.FALSE.                                                       INIPHYS.73    
      CD=0.001                                                             INIPHYS.74    
      BLRH=100.0                                                           INIPHYS.75    
      AKVV=1.0                                                             INIPHYS.76    
      AKTV=1.0                                                             INIPHYS.77    
      AKQV=1.0                                                             INIPHYS.78    
      AKTC=10.0                                                            INIPHYS.79    
      AKQC=10.0                                                            INIPHYS.80    
      FW=1.0E-6                                                            INIPHYS.81    
      FRADC=1.25                                                           INIPHYS.82    
      CURHM=200.0                                                          INIPHYS.83    
      CUBMT=3.0                                                            INIPHYS.84    
      CBADJT=3.0                                                           INIPHYS.85    
      CBADJP=-30.0                                                         INIPHYS.86    
      GWK = 1.5E-6                                                         GRAVDMOD.22    
      GWNO = 90.0                                                          GRAVDMOD.23    
!-----------------------------------------------------                     GRAVDMOD.24    
! Check this is not a spinup run                                           GRAVDMOD.25    
!-----------------------------------------------------                     GRAVDMOD.26    
      IF ((MyPe.EQ.0).AND.(.NOT. LRSTRT)) THEN                             GRAVDMOD.27    
	 write(2,*) '***GRAVITY WAVE DRAG WARNING***'                             GRAVDMOD.28    
	 WRITE(2,*) 'GWD in a spinup run'                                         GRAVDMOD.29    
	 write(2,*) 'Spurious GWD might be diagnosed with zero U:'                GRAVDMOD.30    
         write(2,*) 'If run crashes check this'                            GRAVDMOD.31    
	 WRITE(2,*) ''                                                            GRAVDMOD.32    
C 	  CLOSE(2)                                                              GRAVDMOD.33    
C	  stop                                                                   GRAVDMOD.34    
      ENDIF                                                                GRAVDMOD.35    
*IF DEF,ONLY_V3                                                            INIPHYS.87    
                                                                           INIPHYS.88    
      LSL=.TRUE.                                                           INIPHYS.89    
      LOC=.TRUE.                                                           INIPHYS.90    
      LNOICE=.FALSE.                                                       INIPHYS.91    
      LOLDBL=.FALSE.                                                       INIPHYS.92    
      LCOND=.TRUE.                                                         INIPHYS.93    
      LNNSK=.TRUE.                                                         INIPHYS.94    
      ITSLL=12.                                                            OAS_TILE.1     
      ITSLO=12.                                                            OAS_TILE.2     
                                                                           OAS_TILE.3     
*ENDIF                                                                     INIPHYS.97    
!-----------------------------------------------------                     UPDMORCMB.26    
! PRESET DEFAULT GAS Vol. Mix. Ratios                                      UPDMORCMB.27    
!                                                                          UPDMORCMB.28    
! IPCC/SACC VALUES FOR 1990:                                               UPDMORCMB.29    
!  VMRCO2: 353.93E-6, VMRCH4: 1.717E-6, VMRN2O: 309.68E-6                  UPDMORCMB.30    
!  VMRCFC11: 280.0E-12, VMRCFC12: 484.4E-12                                UPDMORCMB.31    
!  VMRH2OS = stratospheric water vapour abundance                          UPDMORCMB.32    
!          3-6E-6 (IPCC/TACC value for 1998)                               UPDMORCMB.33    
!-----------------------------------------------------                     UPDMORCMB.34    
      VMRCO2=353.9E-6                                                      UPDMORCMB.35    
      VMRCH4=1.717E-06                                                     UPDMORCMB.36    
      VMRN2O=309.7E-09                                                     UPDMORCMB.37    
      VMRCFC11=280.0E-12                                                   UPDMORCMB.38    
      VMRCFC12=484.4E-12                                                   UPDMORCMB.39    
      VMRH2OS=3.0E-6                                                       UPDMORCMB.40    
      NEXOTIC=.FALSE.                                                      UPDMORCMB.41    
!-----------------------------------------------------                     INIPHYS.98    
! Initialise parameters for physical processes                             INIPHYS.99    
!-----------------------------------------------------                     INIPHYS.100   
      NLCR=NL-1                                                            INIPHYS.101   
      NCNT=0                                                               INIPHYS.102   
      DO L=1,NL                                                            INIPHYS.103   
         IF(SIGMA(L).GE.0.75) NCNT=NCNT+1                                  INIPHYS.104   
      ENDDO                                                                INIPHYS.105   
      NCUTOP=NL+1-NCNT                                                     INIPHYS.106   
!-----------------------------------------------------                     INIPHYS.107   
! Read in namelist data and write out information                          INIPHYS.108   
!-----------------------------------------------------                     INIPHYS.109   
      IF (MyPe.EQ.0) THEN                                                  INIPHYS.110   
         READ (7,INPHYS)                                                   INIPHYS.111   
         WRITE(2,INPHYS)                                                   INIPHYS.112   
         WRITE(2,240)                                                      INIPHYS.113   
         IF(LBL) WRITE(2,241)CD,BLRH                                       INIPHYS.114   
         IF(LCR) WRITE(2,242)NLCR                                          INIPHYS.115   
         IF(LCR.AND..NOT.LCBADJ)WRITE(2,246)FW                             INIPHYS.116   
         IF(LCR.AND.LCBADJ)     WRITE(2,247)CBADJP,CBADJT                  INIPHYS.117   
         IF(LCR.AND..NOT.LCUBM) WRITE(2,248)AKTC,AKQC                      INIPHYS.118   
         IF(LCR.AND.LCUBM)      WRITE(2,249)CUBMT                          INIPHYS.119   
         IF(LCR.AND.(CURHM.LT.100.01))WRITE(2,250)CURHM                    INIPHYS.120   
         IF(LLR) WRITE(2,243)                                              INIPHYS.121   
*IF DEF,ONLY_V2                                                            INIPHYS.122   
         IF(LRD) WRITE(2,244)FRADC                                         INIPHYS.123   
*ELSE                                                                      INIPHYS.124   
         IF(LRD) WRITE(2,244)                                              INIPHYS.125   
*ENDIF                                                                     INIPHYS.126   
         IF(LVD) WRITE(2,245)AKVV,AKTV,AKQV                                INIPHYS.127   
         WRITE(2,255)GWK,GWNO                                              GRAVDMOD.36    
      ENDIF                                                                INIPHYS.128   
      IF (NPE.GT.1) THEN                                                   INIPHYS.129   
         !-----------------------------------------------------            INIPHYS.130   
         ! Need to pass the data read in by PE 0 to the                    INIPHYS.131   
         ! other PEs.                                                      INIPHYS.132   
         !-----------------------------------------------------            INIPHYS.133   
         iSend=0                                                           INIPHYS.134   
         nBuffSize=1                                                       INIPHYS.135   
         CALL MPI_BCAST(LBL,nBuffSize,ParaLog,iSend,                       INIPHYS.136   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.137   
         CALL MPI_BCAST(LVD,nBuffSize,ParaLog,iSend,                       INIPHYS.138   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.139   
         CALL MPI_BCAST(LCR,nBuffSize,ParaLog,iSend,                       INIPHYS.140   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.141   
         CALL MPI_BCAST(LLR,nBuffSize,ParaLog,iSend,                       INIPHYS.142   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.143   
         CALL MPI_BCAST(LRD,nBuffSize,ParaLog,iSend,                       INIPHYS.144   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.145   
         CALL MPI_BCAST(LCUBM,nBuffSize,ParaLog,iSend,                     INIPHYS.146   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.147   
         CALL MPI_BCAST(LCBADJ,nBuffSize,ParaLog,iSend,                    INIPHYS.148   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.149   
         CALL MPI_BCAST(CD,nBuffSize,ParaReal,iSend,                       INIPHYS.150   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.151   
         CALL MPI_BCAST(BLRH,nBuffSize,ParaReal,iSend,                     INIPHYS.152   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.153   
         CALL MPI_BCAST(AKVV,nBuffSize,ParaReal,iSend,                     INIPHYS.154   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.155   
         CALL MPI_BCAST(AKTV,nBuffSize,ParaReal,iSend,                     INIPHYS.156   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.157   
         CALL MPI_BCAST(AKQV,nBuffSize,ParaReal,iSend,                     INIPHYS.158   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.159   
         CALL MPI_BCAST(AKTC,nBuffSize,ParaReal,iSend,                     INIPHYS.160   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.161   
         CALL MPI_BCAST(AKQC,nBuffSize,ParaReal,iSend,                     INIPHYS.162   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.163   
         CALL MPI_BCAST(NLCR,nBuffSize,ParaInt,iSend,                      INIPHYS.164   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.165   
         CALL MPI_BCAST(NCUTOP,nBuffSize,ParaInt,iSend,                    INIPHYS.166   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.167   
         CALL MPI_BCAST(FW,nBuffSize,ParaReal,iSend,                       INIPHYS.168   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.169   
         CALL MPI_BCAST(FRADC,nBuffSize,ParaReal,iSend,                    INIPHYS.170   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.171   
         CALL MPI_BCAST(CURHM,nBuffSize,ParaReal,iSend,                    INIPHYS.172   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.173   
         CALL MPI_BCAST(CUBMT,nBuffSize,ParaReal,iSend,                    INIPHYS.174   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.175   
         CALL MPI_BCAST(CBADJT,nBuffSize,ParaReal,iSend,                   INIPHYS.176   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.177   
         CALL MPI_BCAST(CBADJP,nBuffSize,ParaReal,iSend,                   INIPHYS.178   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.179   
         CALL MPI_BCAST(GWK,nBuffSize,ParaReal,iSend,                      GRAVDMOD.37    
     &        MPI_COMM_WORLD,ierr)                                         GRAVDMOD.38    
         CALL MPI_BCAST(GWNO,nBuffSize,ParaReal,iSend,                     GRAVDMOD.39    
     &        MPI_COMM_WORLD,ierr)                                         GRAVDMOD.40    
*IF DEF,ONLY_V3                                                            INIPHYS.180   
         CALL MPI_BCAST(LSL,nBuffSize,ParaLog,iSend,                       INIPHYS.181   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.182   
         CALL MPI_BCAST(LOC,nBuffSize,ParaLog,iSend,                       INIPHYS.183   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.184   
         CALL MPI_BCAST(LNOICE,nBuffSize,ParaLog,iSend,                    INIPHYS.185   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.186   
         CALL MPI_BCAST(LOLDBL,nBuffSize,ParaLog,iSend,                    INIPHYS.187   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.188   
         CALL MPI_BCAST(LCOND,nBuffSize,ParaLog,iSend,                     INIPHYS.189   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.190   
         CALL MPI_BCAST(LNNSK,nBuffSize,ParaLog,iSend,                     INIPHYS.191   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.192   
         CALL MPI_BCAST(ITSLL,nBuffSize,ParaInt,iSend,                     INIPHYS.193   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.194   
         CALL MPI_BCAST(ITSLO,nBuffSize,ParaInt,iSend,                     INIPHYS.195   
     &        MPI_COMM_WORLD,ierr)                                         INIPHYS.196   
*ENDIF                                                                     INIPHYS.197   
      ENDIF                                                                INIPHYS.198   
!-----------------------------------------------------                     INIPHYS.199   
!                                                                          INIPHYS.200   
!-----------------------------------------------------                     INIPHYS.201   
*IF DEF,ONLY_V3                                                            INIPHYS.202   
      CLATNTI=2.834E6                                                      INIPHYS.203   
*ENDIF                                                                     INIPHYS.204   
      SFAC=0.5**KITS                                                       INIPHYS.205   
      IF(LRSTRT.AND..NOT.LSHORT) SFAC=1.0                                  INIPHYS.206   
      CTQ=CLATNT/(CPD*CT)                                                  INIPHYS.207   
*IF DEF,ONLY_V3                                                            INIPHYS.208   
      CTQI=CLATNTI/(CPD*CT)                                                INIPHYS.209   
      if (LNOICE) CTQI=CTQ                                                 INIPHYS.210   
*ENDIF                                                                     INIPHYS.211   
      CCC=CLATNT*CLATNT/(RV*CPD*CT*CT)                                     INIPHYS.212   
      ESCONB=CLATNT/RV                                                     INIPHYS.213   
      ESCONA=RD*EXP(ESCONB/273.15)*610.7/(RV*P0)                           INIPHYS.214   
      ESCONB=ESCONB/CT                                                     INIPHYS.215   
      EPSIQ=0.01/CQ                                                        INIPHYS.216   
*IF DEF,ONLY_V2                                                            INIPHYS.217   
      DRAG=CD*GA*RADEA/(RD*CT*DSIGMA(NL))                                  INIPHYS.218   
*ELSE                                                                      INIPHYS.219   
! Used to be multiplied by old (constant) CD. Now done in BLAYER           INIPHYS.220   
      DRAG=GA*RADEA/(RD*CT*DSIGMA(NL))                                     INIPHYS.221   
*ENDIF                                                                     INIPHYS.222   
      BLVAD=3.0/CV                                                         INIPHYS.223   
      BLA=500.0/CV ! A=500m/s                                              INIPHYS.224   
      BLRH=BLRH/100.0                                                      INIPHYS.225   
      FW=FW/WW                                                             INIPHYS.226   
      DTBUOY=1.0E-5/CT                                                     INIPHYS.227   
      TSLA=55.0/CT                                                         INIPHYS.228   
      TSLB=2840.0/CT                                                       INIPHYS.229   
      TSLC=3.5                                                             INIPHYS.230   
      TSLD=3.5*LOG(CT)-LOG(P0)-0.67485                                     INIPHYS.231   
      CBADJT=CBADJT*3600.0*WW                                              INIPHYS.232   
      CBADJP=CBADJP*100.0/P0                                               INIPHYS.233   
      CURHM=CURHM/100.0                                                    INIPHYS.234   
      CUBMT=CUBMT*3600.0*WW                                                INIPHYS.235   
*IF DEF,ONLY_V2                                                            INIPHYS.236   
      CUT1=1.0E4*DSIGMA(NL)/(RADEA*0.2*CD)                                 INIPHYS.237   
*ELSE                                                                      INIPHYS.238   
C     Used to be divided by old CD, now done in CUDIF and CUBM             INIPHYS.239   
      CUT1=1.0E4*DSIGMA(NL)/(RADEA*0.2)                                    INIPHYS.240   
*ENDIF                                                                     INIPHYS.241   
      CUT2=1.0E4*DSIGMA(NL-1)/RADEA                                        INIPHYS.242   
      CUT2=CUT2*CUT2*0.5                                                   INIPHYS.243   
      AKTC=AKTC/(RADEA*CV)                                                 INIPHYS.244   
      AKQC=AKQC/(RADEA*CV)                                                 INIPHYS.245   
      CDIF=GA/(CV*WW)                                                      INIPHYS.246   
      CDIF=CDIF*CDIF                                                       INIPHYS.247   
      RCON=P0*DELT/(SFAC*GA)                                               INIPHYS.248   
      CCR=RCON*FW                                                          INIPHYS.249   
*IF DEF,ONLY_V3                                                            INIPHYS.250   
!-----------------------------------------------------                     INIPHYS.251   
! Initialise values for the soil model                                     INIPHYS.252   
!-----------------------------------------------------                     INIPHYS.253   
      sdsnd=300.             ! density of snow (kg/m3) dimensional         INIPHYS.254   
      sdsn=sdsnd*(RD*CT)/P0  ! density of snow dedimensionalised           INIPHYS.255   
      sdw=1000.*(RD*CT)/P0   ! density of water (kg/m3)                    INIPHYS.256   
      shcs=2085.0E3*CT/P0    ! rho*c for 50% saturated soil                INIPHYS.257   
      shcsp=15.312E6*CT/P0   ! equ. heat cap. for freezing of soil water   INIPHYS.258   
      shcsn=627.0E3*CT/P0    ! rho*c for snow                              INIPHYS.259   
      skse=1.072818*CT/(RADEA*CV*P0)  ! effective soil conductivity        INIPHYS.260   
      sksn=0.24*CT/(RADEA*CV*P0)  ! thermal conductivity for snow          INIPHYS.261   
      slhf=3.5E5/(RD*CT)     ! latent heat of fusion of ice                INIPHYS.262   
      sd1=0.06/RADEA         ! depth of upper soil level                   INIPHYS.263   
      sd2=2.2999/RADEA       ! depth of lower soil level                   INIPHYS.264   
      ssmc=0.5/RADEA         ! depth equivalent to capacity of model       INIPHYS.265   
!-----------------------------------------------------                     INIPHYS.266   
! Albedos for snow and sea ice, depth for snow albedo function             INIPHYS.267   
!-----------------------------------------------------                     INIPHYS.268   
      sasnow=0.80  ! albedo of snow over ice (land snow set in SNOLOOK)    SURF_TYPE_BL.128   
      saice=0.60  ! ice albedo                                             SURF_TYPE_BL.129   
      if(mype.eq.0)then                                                    SURF_TYPE_BL.130   
      print*,'***********************************'                         SURF_TYPE_BL.131   
      print*,'*                                 *'                         SURF_TYPE_BL.132   
      print*,'*  DOUBLE CHECK SEA ICE IS NOT    *'                         SURF_TYPE_BL.133   
      print*,'*          OVERWRITTEN            *'                         SURF_TYPE_BL.134   
      print*,'*          IN JOB DECK            *'                         SURF_TYPE_BL.135   
      print*,'*                                 *'                         SURF_TYPE_BL.136   
      print*,'*                                 *'                         SURF_TYPE_BL.137   
      print*,'***********************************'                         SURF_TYPE_BL.138   
      endif                                                                SURF_TYPE_BL.139   
      shsstar=0.30/RADEA  ! depth of snow for albedo transfer function     INIPHYS.271   
!-----------------------------------------------------                     INIPHYS.272   
! max depth of snow for heat capacity of top soil layer                    INIPHYS.273   
! Note - equal to e-folding depth/sqrt(2)                                  INIPHYS.274   
!-----------------------------------------------------                     INIPHYS.275   
      SHSMAX=4.0/RADEA                                                     SURF_TYPE_BL.65    
!-----------------------------------------------------                     INIPHYS.277   
! heat capacity of ocean mixed layer. Mixed layer depth 25m.               INIPHYS.278   
!-----------------------------------------------------                     INIPHYS.279   
C Thickness and heat capacity for MOMA ocean top layer                     OAS_TEST.157   
      shco=30.*1000.*4190.*CT/P0/RADEA                                     OAS_TEST.158   
C Thickness and heat capacity for ice at -2C; double this at TICESNOW      OAS_TEST.159   
      shci=1.0*900.*2100.*CT/P0/RADEA                                      OAS_TEST.160   
*ENDIF                                                                     INIPHYS.283   
      DO L=1,NL-1                                                          INIPHYS.284   
        CLR(L)=RCON*DSIGMA(L)                                              INIPHYS.285   
        FWS(L) =-FW*RDSIG(L)                                               INIPHYS.286   
        FB(L)=CDIF*4.0*SIGMAH(L)*SIGMAH(L)/(SIGMA(L+1)-SIGMA(L))           INIPHYS.287   
        SKAP(L)=SIGMA(L)**AKAP                                             INIPHYS.288   
        SK(L)  =(SIGMA(L)/SIGMA(L+1))**AKAP                                INIPHYS.289   
      ENDDO                                                                INIPHYS.290   
      CLR(NL)=RCON*DSIGMA(NL)                                              INIPHYS.291   
      FWS(NL)=-FW*RDSIG(NL)                                                INIPHYS.292   
      SKAP(NL)=SIGMA(NL)**AKAP                                             INIPHYS.293   
!-----------------------------------------------------                     INIPHYS.294   
! Cooling rate set to be identical at all latitudes.                       INIPHYS.295   
!-----------------------------------------------------                     INIPHYS.296   
      FC=FRADC/(PI2*CT)                                                    INIPHYS.297   
      DO IHEM=1,NHEM                                                       INIPHYS.298   
         DO J=1,JGyy(iRow)                                                 INIPHYS.299   
            FRAD(J,IHEM)=-FC                                               INIPHYS.300   
         ENDDO                                                             INIPHYS.301   
      ENDDO                                                                INIPHYS.302   
      AKVV=AKVV/(RADEA*CV)                                                 INIPHYS.303   
      AKTV=AKTV/(RADEA*CV)                                                 INIPHYS.304   
      AKQV=AKQV/(RADEA*CV)                                                 INIPHYS.305   
      NAVRD=20                                                             INIPHYS.306   
      NAVWT=21                                                             INIPHYS.307   
!-----------------------------------------------------                     UPDMORCMB.42    
! READ NAMELIST INMORCGAS AND CONVERT VMR->MMR                             UPDMORCMB.43    
! M. Bourqui Nov. 2001                                                     UPDMORCMB.44    
! Read in namelist                                                         UPDMORCMB.45    
!-----------------------------------------------------                     UPDMORCMB.46    
      IF (MyPe.EQ.0) THEN                                                  UPDMORCMB.47    
         READ (7,INMORCGAS)                                                UPDMORCMB.48    
         WRITE(2,INMORCGAS)                                                UPDMORCMB.49    
      ENDIF                                                                UPDMORCMB.50    
      IF (NPE.GT.1) THEN                                                   UPDMORCMB.51    
         !-----------------------------------------------------            UPDMORCMB.52    
         ! Pass informations from PE 0 to other PEs                        UPDMORCMB.53    
         !-----------------------------------------------------            UPDMORCMB.54    
         iSend=0                                                           UPDMORCMB.55    
         nBuffSize=1                                                       UPDMORCMB.56    
         CALL MPI_BCAST(VMRCO2,nBuffSize,ParaReal,iSend,                   UPDMORCMB.57    
     &        MPI_COMM_WORLD,ierr)                                         UPDMORCMB.58    
         CALL MPI_BCAST(VMRCH4,nBuffSize,ParaReal,iSend,                   UPDMORCMB.59    
     &        MPI_COMM_WORLD,ierr)                                         UPDMORCMB.60    
         CALL MPI_BCAST(VMRN2O,nBuffSize,ParaReal,iSend,                   UPDMORCMB.61    
     &        MPI_COMM_WORLD,ierr)                                         UPDMORCMB.62    
         CALL MPI_BCAST(VMRCFC11,nBuffSize,ParaReal,iSend,                 UPDMORCMB.63    
     &        MPI_COMM_WORLD,ierr)                                         UPDMORCMB.64    
         CALL MPI_BCAST(VMRCFC12,nBuffSize,ParaReal,iSend,                 UPDMORCMB.65    
     &        MPI_COMM_WORLD,ierr)                                         UPDMORCMB.66    
         CALL MPI_BCAST(VMRH2OS,nBuffSize,ParaReal,iSend,                  UPDMORCMB.67    
     &        MPI_COMM_WORLD,ierr)                                         UPDMORCMB.68    
         CALL MPI_BCAST(NEXOTIC,nBuffSize,ParaInt,iSend,                   UPDMORCMB.69    
     &        MPI_COMM_WORLD,ierr)                                         UPDMORCMB.70    
      ENDIF                                                                UPDMORCMB.71    
                                                                           UPDMORCMB.72    
      ZCARDI  = VMRCO2*ZCO2MWG/ZAIRMWG                                     UPDMORCMB.73    
      RCH4    = VMRCH4*ZCH4MWG/ZAIRMWG                                     UPDMORCMB.74    
      RN2O    = VMRN2O*ZN2OMWG/ZAIRMWG                                     UPDMORCMB.75    
      RCFC11  = VMRCFC11*ZC11MWG/ZAIRMWG                                   UPDMORCMB.76    
      RCFC12  = VMRCFC12*ZC12MWG/ZAIRMWG                                   UPDMORCMB.77    
      RH2OS   = VMRH2OS*ZH2OMWG/ZAIRMWG                                    UPDMORCMB.78    
      RETURN                                                               INIPHYS.308   
      END                                                                  INIPHYS.309   
*ENDIF                                                                     INIPHYS.310   
*DECK INIRESIJ                                                             INIRESIJ.1     
!=====================================================                     INIRESIJ.2     
! Sets up restoration variables and arrays. Sets NAMELIST                  INIRESIJ.3     
! variables to their default settings, then reads NAMELIST.                INIRESIJ.4     
! Sets up Rayleigh friction coefficients.                                  INIRESIJ.5     
!=====================================================                     INIRESIJ.6     
      SUBROUTINE INIRESIJ                                                  INIRESIJ.7     
      IMPLICIT NONE                                                        INIRESIJ.8     
*CALL PARAM1                                                               INIRESIJ.9     
*CALL PARAM2                                                               INIRESIJ.10    
*CALL PARAM3                                                               INIRESIJ.11    
*CALL RESTIJ                                                               INIRESIJ.12    
*CALL BLANK                                                                INIRESIJ.13    
*CALL BATS                                                                 INIRESIJ.14    
*CALL MPIDECK                                                              INIRESIJ.15    
!-----------------------------------------------------                     INIRESIJ.16    
! Local variables                                                          INIRESIJ.17    
!-----------------------------------------------------                     INIRESIJ.18    
      REAL :: RESTIM(NL)                                                   INIRESIJ.19    
      REAL :: TTROP                                                        INIRESIJ.20    
      REAL :: THING                                                        INIRESIJ.21    
      REAL :: STPS                                                         INIRESIJ.22    
! Loop variable                                                            INIRESIJ.23    
      INTEGER :: L                                                         INIRESIJ.24    
!-----------------------------------------------------                     INIRESIJ.25    
! Namelist                                                                 INIRESIJ.26    
!-----------------------------------------------------                     INIRESIJ.27    
      NAMELIST/INPRSIJ/ TFRC,RESTIM,DTNS,DTEP,ALR,                         INIRESIJ.28    
     &                  DTTRP,ZTROP,TGR,YRLEN                              INIRESIJ.29    
                                                                           INIRESIJ.30    
      TFRC(NL)=1.                                                          INIRESIJ.31    
      DO L=1,NL-1                                                          INIRESIJ.32    
         TFRC(L) = 0.                                                      INIRESIJ.33    
      ENDDO                                                                INIRESIJ.34    
      DO L=1,NL                                                            INIRESIJ.35    
         RESTIM(L) = 15.0                                                  INIRESIJ.36    
      ENDDO                                                                INIRESIJ.37    
      DTNS=0.                                                              INIRESIJ.38    
      DTEP=60.                                                             INIRESIJ.39    
      ALR=6.5E-03                                                          INIRESIJ.40    
      DTTRP=2.                                                             INIRESIJ.41    
      ZTROP=12.0E03                                                        INIRESIJ.42    
      TGR=288.                                                             INIRESIJ.43    
      YRLEN=0.                                                             INIRESIJ.44    
!-----------------------------------------------------                     INIRESIJ.45    
! Read in namelist on PE 0                                                 INIRESIJ.46    
!-----------------------------------------------------                     INIRESIJ.47    
      IF (MYPE.EQ.0) THEN                                                  INIRESIJ.48    
         READ(7,INPRSIJ)                                                   INIRESIJ.49    
         WRITE(2,INPRSIJ)                                                  INIRESIJ.50    
      ENDIF                                                                INIRESIJ.51    
!-----------------------------------------------------                     INIRESIJ.52    
! Pass information from namelist to other PEs                              INIRESIJ.53    
!-----------------------------------------------------                     INIRESIJ.54    
      IF (NPE.GT.1) THEN                                                   INIRESIJ.55    
         CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)                             INIRESIJ.56    
         nBuffSize=NL                                                      INIRESIJ.57    
         iSend=0                                                           INIRESIJ.58    
         CALL MPI_BCAST(TFRC,nBuffSize,ParaReal,iSend,                     INIRESIJ.59    
     &        MPI_COMM_WORLD,ierr)                                         INIRESIJ.60    
         CALL MPI_BCAST(RESTIM,nBuffSize,ParaReal,iSend,                   INIRESIJ.61    
     &        MPI_COMM_WORLD,ierr)                                         INIRESIJ.62    
         nBuffSize=1                                                       INIRESIJ.63    
         CALL MPI_BCAST(DTNS,nBuffSize,ParaReal,iSend,                     INIRESIJ.64    
     &        MPI_COMM_WORLD,ierr)                                         INIRESIJ.65    
         CALL MPI_BCAST(DTEP,nBuffSize,ParaReal,iSend,                     INIRESIJ.66    
     &        MPI_COMM_WORLD,ierr)                                         INIRESIJ.67    
         CALL MPI_BCAST(ALR,nBuffSize,ParaReal,iSend,                      INIRESIJ.68    
     &        MPI_COMM_WORLD,ierr)                                         INIRESIJ.69    
         CALL MPI_BCAST(DTTRP,nBuffSize,ParaReal,iSend,                    INIRESIJ.70    
     &        MPI_COMM_WORLD,ierr)                                         INIRESIJ.71    
         CALL MPI_BCAST(ZTROP,nBuffSize,ParaReal,iSend,                    INIRESIJ.72    
     &        MPI_COMM_WORLD,ierr)                                         INIRESIJ.73    
         CALL MPI_BCAST(TGR,nBuffSize,ParaReal,iSend,                      INIRESIJ.74    
     &        MPI_COMM_WORLD,ierr)                                         INIRESIJ.75    
         CALL MPI_BCAST(YRLEN,nBuffSize,ParaReal,iSend,                    INIRESIJ.76    
     &        MPI_COMM_WORLD,ierr)                                         INIRESIJ.77    
      ENDIF                                                                INIRESIJ.78    
!-----------------------------------------------------                     INIRESIJ.79    
! Dimensionless coefficient for Newtonian cooling friction                 INIRESIJ.80    
! and timestep. A day is 2*pi in non dimensional                           INIRESIJ.81    
! units using omega as the unit of frquency.                               INIRESIJ.82    
!-----------------------------------------------------                     INIRESIJ.83    
      DO L=1,NL                                                            INIRESIJ.84    
         IF (RESTIM(L).GT.0.0) THEN                                        INIRESIJ.85    
            DDAMP(L)=1.0/(PI2*RESTIM(L))                                   INIRESIJ.86    
         ELSE                                                              INIRESIJ.87    
            DDAMP(L)=0.0                                                   INIRESIJ.88    
         ENDIF                                                             INIRESIJ.89    
         IF (TFRC(L).GT.0.0) THEN                                          INIRESIJ.90    
            TFRC(L)=1.0/(PI2*TFRC(L))                                      INIRESIJ.91    
         ELSE                                                              INIRESIJ.92    
            TFRC(L)=0.0                                                    INIRESIJ.93    
         ENDIF                                                             INIRESIJ.94    
      ENDDO                                                                INIRESIJ.95    
!-----------------------------------------------------                     INIRESIJ.96    
! Make temperatures dimensionless                                          INIRESIJ.97    
!-----------------------------------------------------                     INIRESIJ.98    
      DTNS=DTNS/CT                                                         INIRESIJ.99    
      DTEP=DTEP/CT                                                         INIRESIJ.100   
      DTTRP=DTTRP/CT                                                       INIRESIJ.101   
!-----------------------------------------------------                     INIRESIJ.102   
! Loop to set array FAC - this controls temperature gradients              INIRESIJ.103   
! as a function of SIGMA in TTRES. It is a sine wave from one              INIRESIJ.104   
! at SIGMA = 1 to zero at STPS (SIGMA at the tropopause).                  INIRESIJ.105   
!                                                                          INIRESIJ.106   
! First find SIGMA at ZTROP                                                INIRESIJ.107   
!-----------------------------------------------------                     INIRESIJ.108   
      TTROP = TGR - ZTROP*ALR                                              INIRESIJ.109   
      STPS = (TTROP/TGR)**(GA/(ALR*GASCON))                                INIRESIJ.110   
      DO L=1,NL                                                            INIRESIJ.111   
         THING=SIN(0.5*PI*(SIGMA(L)-STPS)/(1.-STPS))                       INIRESIJ.112   
         IF (THING.LT.0.) THEN                                             INIRESIJ.113   
            FAC(L)=0.                                                      INIRESIJ.114   
         ELSE                                                              INIRESIJ.115   
            FAC(L)=THING                                                   INIRESIJ.116   
         ENDIF                                                             INIRESIJ.117   
      ENDDO                                                                INIRESIJ.118   
      END                                                                  INIRESIJ.119   
*DECK INIRES                                                               INIRES.1     
!=====================================================                     INIRES.2     
! Sets up restoration variables and arrays. Sets NAMELIST                  INIRES.3     
! variables to their default settings, then reads NAMELIST                 INIRES.4     
!=====================================================                     INIRES.5     
      SUBROUTINE INIRES                                                    INIRES.6     
      IMPLICIT NONE                                                        INIRES.7     
*CALL PARAM1                                                               INIRES.8     
*CALL PARAM2                                                               INIRES.9     
*CALL PARAM3                                                               INIRES.10    
*CALL RESTOR                                                               INIRES.11    
*CALL MPIDECK                                                              INIRES.12    
!-----------------------------------------------------                     INIRES.13    
! Local variables                                                          INIRES.14    
!-----------------------------------------------------                     INIRES.15    
      REAL :: RESTIM                                                       INIRES.16    
!-----------------------------------------------------                     INIRES.17    
! Namelist                                                                 INIRES.18    
!-----------------------------------------------------                     INIRES.19    
      NAMELIST/INPRS/ RESTIM                                               INIRES.20    
                                                                           INIRES.21    
      RESTIM=0.0                                                           INIRES.22    
                                                                           INIRES.23    
      IF (MYPE.EQ.0) READ(7,INPRS)                                         INIRES.24    
      IF (NPE.GT.1) THEN                                                   INIRES.25    
         CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)                             INIRES.26    
         nBuffSize=1                                                       INIRES.27    
         iSend=0                                                           INIRES.28    
         CALL MPI_BCAST(RESTIM,nBuffSize,ParaReal,iSend,                   INIRES.29    
     &        MPI_COMM_WORLD,ierr)                                         INIRES.30    
      ENDIF                                                                INIRES.31    
      IF (MYPE.EQ.0) WRITE(2,INPRS)                                        INIRES.32    
!-----------------------------------------------------                     INIRES.33    
! Dimensionless coefficient for Newtonian cooling friction                 INIRES.34    
! and timestep. A day is 2*pi in non dimensional                           INIRES.35    
! units using omega as the unit of frequency.                              INIRES.36    
!-----------------------------------------------------                     INIRES.37    
      IF (RESTIM.GT.0.0) THEN                                              INIRES.38    
         DAMP=1.0/(PI2*RESTIM)                                             INIRES.39    
      ELSE                                                                 INIRES.40    
         DAMP=0.0                                                          INIRES.41    
      ENDIF                                                                INIRES.42    
      END                                                                  INIRES.43    
*DECK INISTR                                                               INISTR.1     
!=====================================================                     INISTR.2     
! Reads in data for a start/restart run                                    INISTR.3     
!=====================================================                     INISTR.4     
      SUBROUTINE INISTR                                                    INISTR.5     
      IMPLICIT NONE                                                        INISTR.6     
*CALL PARAM1                                                               INISTR.7     
*CALL PARAM2                                                               INISTR.8     
*CALL PARAM3                                                               INISTR.9     
*CALL BLANK                                                                INISTR.10    
*CALL SPECTR                                                               INISTR.11    
*CALL BATS                                                                 INISTR.12    
*CALL OUTCON                                                               INISTR.13    
*CALL RESTOR                                                               INISTR.14    
*CALL RESTIJ                                                               INISTR.15    
*CALL STATS                                                                INISTR.16    
*CALL BALAN                                                                INISTR.17    
*CALL OROG_G                                                               INISTR.18    
*IF DEF,ONLY_V2                                                            INISTR.19    
*CALL GRIDPA3                                                              INISTR.20    
*ENDIF                                                                     INISTR.21    
*IF DEF,ONLY_V3                                                            INISTR.22    
*CALL RADHT                                                                INISTR.23    
*ENDIF                                                                     INISTR.24    
*CALL MPIDECK                                                              INISTR.25    
!-----------------------------------------------------                     INISTR.26    
! Local variables                                                          INISTR.27    
!-----------------------------------------------------                     INISTR.28    
! File unit for writing data for a later restart run                       INISTR.29    
      INTEGER :: ID                                                        INISTR.30    
      REAL :: DAYNEAR                                                      INISTR.31    
      REAL :: RM1TAPE, RM2TAPE, RM3TAPE                                    INISTR.32    
! RKOUNT is an integer, but output expects a REAL                          INISTR.33    
      REAL :: RKOUNT                                                       INISTR.34    
      INTEGER :: KTEMP                                                     INISTR.35    
      REAL :: HoldVar(NNTx,NHEM,3*NL+1)                                    INISTR.36    
      REAL, ALLOCATABLE :: AllRes(:,:,:)                                   INISTR.37    
      INTEGER, PARAMETER :: TagRef=100                                     INISTR.38    
      INTEGER :: iCol2                                                     INISTR.39    
*IF DEF,ABOVE_V1                                                           INISTR.40    
      REAL :: ADUM                                                         INISTR.41    
*ENDIF                                                                     INISTR.42    
      COMPLEX, ALLOCATABLE :: GSFull(:,:)                                  INISTR.43    
      REAL, ALLOCATABLE :: OFRACFULL(:,:,:)                                OAS_TILE.5     
      REAL, ALLOCATABLE :: GSGFull(:,:,:)                                  INISTR.44    
*IF DEF,ONLY_V2                                                            INISTR.45    
      REAL, ALLOCATABLE :: TragmiFull(:,:,:,:,:)                           INISTR.46    
      REAL :: RK, RMT1, RMT2, RDAY, RREC                                   INISTR.47    
*ENDIF                                                                     INISTR.48    
      REAL, ALLOCATABLE :: TopvarFull(:,:,:)                               GRAVDMOD.1     
! Loop variables                                                           INISTR.49    
      INTEGER :: I, IHEM, IM, IN, J, KK, L                                 INISTR.50    
      REAL :: GSFAC                                                        T42L35.1     
      REAL :: TMEANJ(NL)                                                   T42L35.2     
      DATA TMEANJ /245.0,248.7,252.4,256.1,259.8,260.0,257.7,              T42L35.3     
     &     254.0,250.3,246.5,242.8,239.1,235.4,231.7,                      T42L35.4     
     &     227.6,222.3,213.1,209.0,209.2,212.8,217.6,                      T42L35.5     
     &     222.2,226.8,231.8,237.3,243.5,249.9,256.3,                      T42L35.6     
     &     262.3,268.2,273.9,278.8,282.5,285.2,287.5/                      T42L35.7     
      INTEGER :: IAREA, NCOAST                                             OAS_RUNOFF.60    
!-----------------------------------------------------                     INISTR.51    
! Format statments                                                         INISTR.52    
!-----------------------------------------------------                     INISTR.53    
 2000 FORMAT(' ***WARNING*** KITS < 1 FOR AN INITIAL RUN.'/)               INISTR.54    
 2030 FORMAT(/' ***ABORT*** CANNOT FIND THE CORRECT HISTORY RECORD.'/      INISTR.55    
     & ' LOOKING FOR DAY',F8.2/,' BUT THE NEAREST RECORD FOUND',           INISTR.56    
     & ' IS FOR DAY',F8.2)                                                 INISTR.57    
 2040 FORMAT(/' HISTORY RECORD READ FROM CHANNEL ',I3,/                    INISTR.58    
     & ' KOUNT  RMTAPE  DAY =',I8,2F12.3)                                  INISTR.59    
 2011 FORMAT(/' ***ABORT*** THE RESTART RECORDS READ FROM CHANNEL '        INISTR.60    
     & ,I3,/' ARE NOT IN CORRECT FORMAT ')                                 INISTR.61    
 2021 FORMAT(/' ***ABORT*** THE RUN NUMBER IN THE RESTART RECORD ',        INISTR.62    
     &     F10.3 /'DIFFERS FROM RNTAPO IN THE NAMELIST ',F10.3)            INISTR.63    
 2041 FORMAT(/' RESTART RECORD READ FROM CHANNEL ',I3,/                    INISTR.64    
     & ' KOUNT  RMTAPE  DAY =',I8,2F12.3)                                  INISTR.65    
 2012 FORMAT(/' ***ABORT*** THE RESTORATION RECORDS READ FROM CHANNEL '    INISTR.66    
     & ,I3,/' ARE NOT IN CORRECT FORMAT ')                                 INISTR.67    
 2022 FORMAT(/' ***ABORT*** THE RUN NUMBER IN THE RESTORATION RECORD'/     INISTR.68    
     & ' IS NOT THE SAME AS RNTAPE ENTERED IN NAMELIST')                   INISTR.69    
 2042 FORMAT(' RESTORATION RECORD READ FROM CHANNEL ',I3,/                 INISTR.70    
     & ' KOUNT  RMTAPE  DAY =',I8,2F12.3)                                  INISTR.71    
 2050 FORMAT(/' SPECTRAL ARRAYS ARE SET TO ZERO ')                         INISTR.72    
*IF DEF,ABOVE_V1                                                           INISTR.73    
 2100 FORMAT(/' MASS INFORMATION READ AT RESTART:'                         INISTR.74    
     &       /'    INITIAL (REFERENCE) MASS     = ',1PE20.12,' (PA)'       INISTR.75    
     &       /'    TIME-LAGGED MASS             = ',1PE20.12,' (PA)')      INISTR.76    
 2130 FORMAT(/' ***ABORT: EOF READING MASS RESTART RECORD AT DAY ',F8.2)   INISTR.77    
*ENDIF                                                                     INISTR.78    
*IF DEF,ONLY_V2                                                            INISTR.79    
 2101 FORMAT(/' TIME-LAGGED GRID-POINT TRACERS READ AT RESTART:'           INISTR.80    
     &       /'    NAMELIST SWITCHES ASSUME NTRACO, NTRVADO = ',2I5)       INISTR.81    
 2111 FORMAT(/' ***ABORT: TIME-LAGGED GRID-POINT TRACER RESTART RECORD'    INISTR.82    
     &       ,' HAS WRONG LENGTH')                                         INISTR.83    
 2131 FORMAT(/' ***ABORT: EOF READING TIME-LAGGED GRID-POINT TRACER'       INISTR.84    
     &       ,' RESTART RECORD AT DAY ',F8.2)                              INISTR.85    
*ENDIF                                                                     INISTR.86    
!-----------------------------------------------------                     INISTR.87    
! Initialise spectral arrays to zero and overwrite as desired              INISTR.88    
!-----------------------------------------------------                     INISTR.89    
      SP(:,:,:)=(0.0,0.0)                                                  INISTR.90    
      SPMI(:,:,:)=(0.,0.)                                                  INISTR.91    
      GS(:,:,:)=(0.0,0.0)                                                  INISTR.92    
      Z(:,:,:,:)=(0.0,0.0)                                                 INISTR.93    
      D(:,:,:,:)=(0.0,0.0)                                                 INISTR.94    
      T(:,:,:,:)=(0.0,0.0)                                                 INISTR.95    
      ZMI(:,:,:,:)=(0.0,0.0)                                               INISTR.96    
      DMI(:,:,:,:)=(0.0,0.0)                                               INISTR.97    
      TMI(:,:,:,:)=(0.0,0.0)                                               INISTR.98    
*IF DEF,ONLY_V3                                                            INISTR.99    
!-----------------------------------------------------                     INISTR.100   
! Zero HTNET array                                                         INISTR.101   
!-----------------------------------------------------                     INISTR.102   
      HTNET(:,:,:,:)=0.0                                                   INISTR.103   
!-----------------------------------------------------                     INISTR.104   
! Initialise current and global reference mass to zero (unset).            INISTR.105   
!-----------------------------------------------------                     INISTR.106   
      GMSP0=0.0                                                            INISTR.107   
      GMSPMI=0.0                                                           INISTR.108   
*ENDIF                                                                     INISTR.109   
!-----------------------------------------------------                     INISTR.110   
! Determine if this is a restart run                                       INISTR.111   
!-----------------------------------------------------                     INISTR.112   
      IF (.NOT.LRSTRT) THEN                                                INISTR.113   
         !-----------------------------------------------------            INISTR.114   
         ! Initial run                                                     INISTR.115   
         !-----------------------------------------------------            INISTR.116   
         IF ( (KITS.LT.1).AND.(MYPE.EQ.0) ) WRITE(2,2000)                  INISTR.117   
         DAY=0.0                                                           INISTR.118   
         IF (KITS.EQ.0) THEN                                               INISTR.119   
            KTOTAL=KRUN                                                    INISTR.120   
            KOUTP=0                                                        INISTR.121   
            KOUTE=0                                                        INISTR.122   
            KOUTH=0                                                        INISTR.123   
            KOUTR=0                                                        INISTR.124   
         ELSE                                                              INISTR.125   
            KTOTAL=KRUN+KITS-1                                             INISTR.126   
            KOUTP=1-KITS                                                   INISTR.127   
            KOUTE=1-KITS                                                   INISTR.128   
            KOUTH=1-KITS                                                   INISTR.129   
            KOUTR=1-KITS                                                   INISTR.130   
         ENDIF                                                             INISTR.131   
         !-----------------------------------------------------            INISTR.132   
         ! Initialise restoration array                                    INISTR.133   
         !-----------------------------------------------------            INISTR.134   
         IF (LRESTIJ) CALL SETZT                                           INISTR.135   
         !-----------------------------------------------------            INISTR.136   
         ! Initialise spectral arrays                                      INISTR.137   
         !-----------------------------------------------------            INISTR.138   
         IF (LBALAN) THEN                                                  INISTR.139   
            CALL INIBAL                                                    INISTR.140   
            KOUNT=-KBAL                                                    INISTR.141   
*IF DEF,ABOVE_V1                                                           INISTR.142   
            KSTART=0                                                       INISTR.143   
*ENDIF                                                                     INISTR.144   
         ELSE                                                              INISTR.145   
            IF (LRESTIJ) THEN                                              INISTR.146   
               CALL INISP                                                  INISTR.147   
            ELSE                                                           INISTR.148   
               IF (MYPE.EQ.0) WRITE (2,2050)                               INISTR.149   
            ENDIF                                                          INISTR.150   
            KOUNT=0                                                        INISTR.151   
*IF DEF,ABOVE_V1                                                           INISTR.152   
            KSTART=KOUNT                                                   INISTR.153   
*ENDIF                                                                     INISTR.154   
         ENDIF                                                             INISTR.155   
      ELSE                                                                 INISTR.156   
         !-----------------------------------------------------            INISTR.157   
         ! Code for restart and normal mode perturbation runs.             INISTR.158   
         ! assume spectral data is set up non-dimensionalised              INISTR.159   
         ! on a history (LSHORT) or restart (.NOT.LSHORT) record.          INISTR.160   
         !-----------------------------------------------------            INISTR.161   
         ID=10                                                             INISTR.162   
         DAYNEAR=-9999.5 ! allows desired day no. = 0                      INISTR.163   
         IF (LSHORT) THEN                                                  INISTR.164   
            !-----------------------------------------------------         INISTR.165   
            ! Only read in data through PE 0                               INISTR.166   
            !-----------------------------------------------------         INISTR.167   
            IF (ABS(BEGDAY) .LT. 1.0E-02) THEN                             INISTR.168   
               IF (Mype.EQ.0) OPEN(UNIT=ID,FILE='input.dat',               INISTR.169   
     &              FORM='formatted')                                      INISTR.170   
               CALL READCOEF(ID, 1, .FALSE., DAYNEAR,                      INISTR.171   
     &              RKOUNT, RM1TAPE, DAY)                                  INISTR.172   
            ELSE                                                           INISTR.173   
               IF (Mype.EQ.0) OPEN(UNIT=ID,FILE='input.dat',               INISTR.174   
     &              FORM='unformatted')                                    INISTR.175   
               CALL READCOEF(ID, 1, .TRUE., DAYNEAR,                       INISTR.176   
     &              RKOUNT, RM1TAPE, DAY)                                  INISTR.177   
            ENDIF                                                          INISTR.178   
            !-----------------------------------------------------         INISTR.179   
            ! Set the count values                                         INISTR.180   
            !-----------------------------------------------------         INISTR.181   
            KOUNT=NINT(RKOUNT)                                             INISTR.182   
            IF (MYPE.EQ.0) WRITE(2,2040) ID,KOUNT,RM1TAPE,BEGDAY           INISTR.183   
            KOUNT=0                                                        INISTR.184   
            IF (KITS.EQ.0) THEN                                            INISTR.185   
               KTOTAL=KRUN                                                 INISTR.186   
               KOUTP=0                                                     INISTR.187   
               KOUTE=0                                                     INISTR.188   
               KOUTH=0                                                     INISTR.189   
               KOUTR=0                                                     INISTR.190   
            ELSE                                                           INISTR.191   
               KTOTAL=KRUN+KITS-1                                          INISTR.192   
               KOUTP=1-KITS                                                INISTR.193   
               KOUTE=1-KITS                                                INISTR.194   
               KOUTH=1-KITS                                                INISTR.195   
               KOUTR=1-KITS                                                INISTR.196   
            ENDIF                                                          INISTR.197   
*IF DEF,ABOVE_V1                                                           INISTR.198   
            KSTART=KOUNT                                                   INISTR.199   
*ENDIF                                                                     INISTR.200   
            !-----------------------------------------------------         INISTR.201   
            ! Set the old value of vorticty, surface pressure etc          INISTR.202   
            ! to the current values                                        INISTR.203   
            !-----------------------------------------------------         INISTR.204   
            DO IHEM=1,NHEM                                                 INISTR.205   
               DO IM=1,MMTyy(iRow)                                         INISTR.206   
                  DO IN=1,NNTxx(iCol)                                      INISTR.207   
                     SPMI(IN,IM,IHEM)=SP(IN,IM,IHEM)                       INISTR.208   
                  ENDDO                                                    INISTR.209   
               ENDDO                                                       INISTR.210   
            ENDDO                                                          INISTR.211   
            DO L=1,NL                                                      INISTR.212   
               DO IHEM=1,NHEM                                              INISTR.213   
                  DO IM=1,MMTyy(iRow)                                      INISTR.214   
                     DO IN=1,NNTxx(iCol)                                   INISTR.215   
                        ZMI(IN,IM,IHEM,L)=Z(IN,IM,IHEM,L)                  INISTR.216   
                        DMI(IN,IM,IHEM,L)=D(IN,IM,IHEM,L)                  INISTR.217   
                        TMI(IN,IM,IHEM,L)=T(IN,IM,IHEM,L)                  INISTR.218   
                     ENDDO                                                 INISTR.219   
                  ENDDO                                                    INISTR.220   
               ENDDO                                                       INISTR.221   
            ENDDO                                                          INISTR.222   
*IF DEF,ABOVE_V1                                                           INISTR.223   
            DO KK=1,NTRAC                                                  INISTR.224   
               DO L=1,NL                                                   INISTR.225   
                  DO IHEM=1,NHEM                                           INISTR.226   
                     DO IM=1,MMTyy(iRow)                                   INISTR.227   
                        DO IN=1,NNTxx(iCol)                                INISTR.228   
                           TRAMI(IN,IM,IHEM,L,KK)=TRA(IN,IM,IHEM,L,KK)     INISTR.229   
                        ENDDO                                              INISTR.230   
                     ENDDO                                                 INISTR.231   
                  ENDDO                                                    INISTR.232   
               ENDDO                                                       INISTR.233   
            ENDDO                                                          INISTR.234   
*ENDIF                                                                     INISTR.235   
         ELSE                                                              INISTR.236   
            !-----------------------------------------------------         INISTR.237   
            ! Only read in data through PE 0                               INISTR.238   
            !-----------------------------------------------------         INISTR.239   
*IF DEF,ONLY_V3                                                            INISTR.240   
            IF (ABS(BEGDAY) .LT. 1.0E-02) THEN                             INISTR.241   
               IF (Mype.EQ.0) OPEN(UNIT=ID,FILE='input.dat',               INISTR.242   
     &              FORM='formatted')                                      INISTR.243   
               CALL READCOEF(ID, 35, .FALSE., DAYNEAR,                     INISTR.244   
     &              RKOUNT, RM1TAPE, DAY)                                  INISTR.245   
            ELSE                                                           INISTR.246   
               IF (Mype.EQ.0) OPEN(UNIT=ID,FILE='input.dat',               INISTR.247   
     &              FORM='unformatted')                                    INISTR.248   
               CALL READCOEF(ID, 35, .TRUE., DAYNEAR,                      INISTR.249   
     &              RKOUNT, RM1TAPE, DAY)                                  INISTR.250   
            ENDIF                                                          INISTR.251   
*ELSE                                                                      INISTR.252   
            IF (ABS(BEGDAY) .LT. 1.0E-02) THEN                             INISTR.253   
               IF (Mype.EQ.0) OPEN(UNIT=ID,FILE='input.dat',               INISTR.254   
     &              FORM='formatted')                                      INISTR.255   
               CALL READCOEF(ID, 3, .FALSE., DAYNEAR,                      INISTR.256   
     &              RKOUNT, RM1TAPE, DAY)                                  INISTR.257   
            ELSE                                                           INISTR.258   
               IF (Mype.EQ.0) OPEN(UNIT=ID,FILE='input.dat',               INISTR.259   
     &              FORM='unformatted')                                    INISTR.260   
               CALL READCOEF(ID, 3, .TRUE., DAYNEAR,                       INISTR.261   
     &              RKOUNT, RM1TAPE, DAY)                                  INISTR.262   
            ENDIF                                                          INISTR.263   
*ENDIF                                                                     INISTR.264   
*IF DEF,ONLY_V2                                                            INISTR.265   
            IF (NTRVADO.GT.1.AND.NTRACO.GT.0) THEN                         INISTR.266   
               !-----------------------------------------------------      INISTR.267   
               ! Read time-lagged grid-point tracers, TRAGMI, for          INISTR.268   
               ! TVD advection.                                            INISTR.269   
               !-----------------------------------------------------      INISTR.270   
               IF (Mype.EQ.0) THEN                                         INISTR.271   
                  ALLOCATE(TragmiFull(MGPP,NHEM,JG,NL,NTRACO))             INISTR.272   
                  !---------------------------------------------------     INISTR.273   
                  ! For TRAGMI the dimensions are read in in a             INISTR.274   
                  ! different order to how they're stored in TRAGMI        INISTR.275   
                  !---------------------------------------------------     INISTR.276   
                  READ(ID,END=1021) RK,RMT1,RDAY,RREC,                     INISTR.277   
     &                 (((((TragmiFull(I,IHEM,J,L,KK),I=1,MGPP),           INISTR.278   
     &                 IHEM=1,NHEM),L=1,NL),KK=1,NTRACO),J=1,JG),          INISTR.279   
     &                 RMT2                                                INISTR.280   
                  IF (RMT2.NE.RMT1) THEN                                   INISTR.281   
                     WRITE(2,2111)                                         INISTR.282   
                     CALL ABORT                                            INISTR.283   
                  ENDIF                                                    INISTR.284   
               ENDIF                                                       INISTR.285   
               !-----------------------------------------------------      INISTR.286   
               ! Share TRAGMI across the PEs                               INISTR.287   
               !-----------------------------------------------------      INISTR.288   
               CALL SHAREGRID(.TRUE.,MGPP,NL*NTRACO,TragmiFull,TRAGMI3)    INISTR.289   
               IF (MyPe.EQ.0) DEALLOCATE(TragmiFull)                       INISTR.290   
            ENDIF                                                          INISTR.291   
*ENDIF                                                                     INISTR.292   
            !-----------------------------------------------------         INISTR.293   
            ! Set the count values                                         INISTR.294   
            !-----------------------------------------------------         INISTR.295   
            KOUNT=NINT(RKOUNT)                                             INISTR.296   
            IF (MYPE.EQ.0) WRITE(2,2041) ID,KOUNT,RM1TAPE,BEGDAY           INISTR.297   
            KTOTAL=KOUNT+KRUN                                              INISTR.298   
*IF DEF,ABOVE_V1                                                           INISTR.299   
            KSTART=KOUNT                                                   INISTR.300   
*ENDIF                                                                     INISTR.301   
            KTEMP=KOUNT                                                    INISTR.302   
            IF(KITS.GT.0) KTEMP=KOUNT+1-KITS                               INISTR.303   
            KOUTP=KTEMP-KOUNTP*(KTEMP/KOUNTP)                              INISTR.304   
            KOUTE=KTEMP-KOUNTE*(KTEMP/KOUNTE)                              INISTR.305   
            KOUTH=KTEMP-KOUNTH*(KTEMP/KOUNTH)                              INISTR.306   
            KOUTR=KTEMP-KOUNTR*(KTEMP/KOUNTR)                              INISTR.307   
*IF DEF,ABOVE_V1                                                           INISTR.308   
            IF ((KTEMP.GT.0).AND.(KOUTH.EQ.0)) THEN                        INISTR.309   
               KOUTH=KOUNTH                                                INISTR.310   
            ENDIF                                                          INISTR.311   
            !-----------------------------------------------------         INISTR.312   
            ! Write values to output file                                  INISTR.313   
            !-----------------------------------------------------         INISTR.314   
            IF (LMASOLD) THEN                                              INISTR.315   
               IF (MYPE.EQ.0) WRITE(2,2100) GMSP0*P0,GMSPMI*P0             INISTR.316   
            ENDIF                                                          INISTR.317   
*ENDIF                                                                     INISTR.318   
*IF DEF,ONLY_V2                                                            INISTR.319   
            IF (NTRVADO.GT.1.AND.NTRACO.GT.0) THEN                         INISTR.320   
               IF (MYPE.EQ.0) WRITE(2,2101) NTRACO,NTRVADO                 INISTR.321   
            ENDIF                                                          INISTR.322   
*ENDIF                                                                     INISTR.323   
         ENDIF                                                             INISTR.324   
         !-----------------------------------------------------            INISTR.325   
         ! Close the input file                                            INISTR.326   
         !-----------------------------------------------------            INISTR.327   
         IF (MyPe.EQ.0) CLOSE(ID)                                          INISTR.328   
         !-----------------------------------------------------            INISTR.329   
         ! Read in restoration state from separate file                    INISTR.330   
         !-----------------------------------------------------            INISTR.331   
         IF (LRESTIJ) THEN                                                 INISTR.332   
            OPEN(UNIT=13,FILE='restoration.dat',FORM='formatted')          INISTR.333   
            CALL READCOEF(13, 4, .FALSE., DAYNEAR,                         INISTR.334   
     &           RKOUNT, RM1TAPE, DAY)                                     INISTR.335   
            CLOSE(13)                                                      INISTR.336   
         ELSE                                                              INISTR.337   
            IF(DAMP.GT.0.0) THEN                                           INISTR.338   
               IF (iRow.EQ.1) THEN                                         INISTR.339   
                  IF (MYPE.EQ.0) THEN                                      INISTR.340   
                     !------------------------------------------------     INISTR.341   
                     ! Read in restoration data                            INISTR.342   
                     !------------------------------------------------     INISTR.343   
                     ALLOCATE(AllRes(NNT,NHEM,3*NL+1))                     INISTR.344   
                     OPEN(UNIT=13,FILE='restoration.dat',                  INISTR.345   
     &                 FORM='unformatted')                                 INISTR.346   
                     READ(13) AllRes                                       INISTR.347   
                     CLOSE(13)                                             INISTR.348   
                     !------------------------------------------------     INISTR.349   
                     ! Pass data to the other PEs on row 1                 INISTR.350   
                     !------------------------------------------------     INISTR.351   
                     DO iCol2=1,Px                                         INISTR.352   
                        DO L=1,3*NL+1                                      INISTR.353   
                           DO IHEM=1,NHEM                                  INISTR.354   
                              DO J=mTwin1(1,1)+1,mTwin1(2,1)               INISTR.355   
                                 HoldVar(J,IHEM,L)=                        INISTR.356   
     &                                AllRes(NNT1(iCol2)+J,IHEM,L)         INISTR.357   
                              ENDDO                                        INISTR.358   
                           ENDDO                                           INISTR.359   
                        ENDDO                                              INISTR.360   
                        !---------------------------------------------     INISTR.361   
                        ! Send data need by other PEs                      INISTR.362   
                        !---------------------------------------------     INISTR.363   
                        IF (iCol2.GT.1) THEN                               INISTR.364   
                           iRecv=PeGrid(iCol2,1)                           INISTR.365   
                           nBuffSize=NNTx*NHEM*(3*NL+1)                    INISTR.366   
                           iTag=TagRef+iRecv                               INISTR.367   
                           CALL MPI_BSEND(HoldVar,nBuffSize,ParaReal,      INISTR.368   
     &                          iRecv,iTag,MPI_COMM_WORLD,ierr)            INISTR.369   
                        ENDIF                                              INISTR.370   
                     ENDDO                                                 INISTR.371   
                  ELSE                                                     INISTR.372   
                     !------------------------------------------------     INISTR.373   
                     ! Receive the data                                    INISTR.374   
                     !------------------------------------------------     INISTR.375   
                     iSend=0                                               INISTR.376   
                     nBuffSize=NNTx*NHEM*(3*NL+1)                          INISTR.377   
                     iTag=TagRef+MyPe                                      INISTR.378   
                     CALL MPI_RECV(HoldVar,nBuffSize,ParaReal,iSend,       INISTR.379   
     &                    iTag,MPI_COMM_WORLD,istat,ierr)                  INISTR.380   
                  ENDIF                                                    INISTR.381   
                  !---------------------------------------------------     INISTR.382   
                  ! Write all the data in ZRES etc                         INISTR.383   
                  !---------------------------------------------------     INISTR.384   
                  DO L=1,NL                                                INISTR.385   
                     DO IHEM=1,NHEM                                        INISTR.386   
                        DO J=mTwin1(1,1)+1,mTwin1(2,1)                     INISTR.387   
                           ZRES(J,IHEM,L)=HoldVar(J,IHEM,L)                INISTR.388   
                           DRES(J,IHEM,L)=HoldVar(J,IHEM,NL+L)             INISTR.389   
                           TRES(J,IHEM,L)=HoldVar(J,IHEM,2*NL+L)           INISTR.390   
                        ENDDO                                              INISTR.391   
                     ENDDO                                                 INISTR.392   
                  ENDDO                                                    INISTR.393   
                  DO IHEM=1,NHEM                                           INISTR.394   
                     DO J=mTwin1(1,1)+1,mTwin1(2,1)                        INISTR.395   
                        SPRES(J,IHEM)=HoldVar(J,IHEM,3*NL+1)               INISTR.396   
                     ENDDO                                                 INISTR.397   
                  ENDDO                                                    INISTR.398   
               ENDIF                                                       INISTR.399   
            ENDIF                                                          INISTR.400   
         ENDIF                                                             INISTR.401   
*IF DEF,ABOVE_V1                                                           INISTR.402   
         !-----------------------------------------------------            INISTR.403   
         ! Initialise any new tracer fields and surface state.             INISTR.404   
         !-----------------------------------------------------            INISTR.405   
         CALL ICTRAC                                                       INISTR.406   
*ENDIF                                                                     INISTR.407   
      ENDIF                                                                INISTR.408   
*IF DEF,ONLY_V3                                                            INISTR.409   
!-----------------------------------------------------                     INISTR.410   
C Read ocean fraction file                                                 OAS_TILE.6     
C MUST BE READ AS SAME AS OROG                                             OAS_TILE.7     
                                                                           OAS_TILE.8     
      if(mype .eq. 0)then                                                  OAS_TILE.9     
                                                                           OAS_TILE.10    
      ALLOCATE(ofracfull(MG,NHEM,JG))                                      OAS_TILE.11    
      open(50,file='orogdata/ofrac.igcm3',status='old')                    OAS_TILE.12    
      do j=1,jg                                                            OAS_TILE.13    
      read(50,*)(ofracfull(i,1,j),i=1,mg)                                  OAS_TILE.14    
      end do                                                               OAS_TILE.15    
      do j=jg,1,-1                                                         OAS_TILE.16    
      read(50,*)(ofracfull(i,2,j),i=1,mg)                                  OAS_TILE.17    
      end do                                                               OAS_TILE.18    
      close(50)                                                            OAS_TILE.19    
      write(2,*) 'fractional land mask looks like:'                        OAS_TILE.20    
      do j=1,jg                                                            OAS_TILE.21    
         write (2,'(128I1)')(nint( 10.*ofracfull(i,1,j)  ) ,i=1,mg)        OAS_TILE.22    
      enddo                                                                OAS_TILE.23    
      do j=jg,1,-1                                                         OAS_TILE.24    
         write (2,'(128I1)')(nint( 10.*ofracfull(i,2,j)),i=1,mg)           OAS_TILE.25    
      enddo                                                                OAS_TILE.26    
      endif     ! end MYPE if                                              OAS_TILE.27    
                                                                           OAS_TILE.28    
      ! Share OFRAC across PEs                                             OAS_TILE.29    
      CALL SHAREGRID(.TRUE.,MG,1,OFRACFULL,OFRAC)                          OAS_TILE.30    
                                                                           OAS_TILE.31    
      if(mype .eq. 0) DEALLOCATE(ofracfull)                                OAS_TILE.32    
      if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                   OAS_TILE.33    
! READS in T21 orography  part                                             INISTR.411   
!-----------------------------------------------------                     INISTR.412   
      IF (LOROG) THEN                                                      INISTR.413   
         !-----------------------------------------------------            INISTR.414   
         ! Read in geopotential spectral field                             INISTR.415   
         !-----------------------------------------------------            INISTR.416   
         IF (MyPe.EQ.0) THEN                                               INISTR.417   
            ALLOCATE(GSFull(NWJ2,NHEM))                                    INISTR.418   
            open(50,file='orogdata/t42.50',status='old')                   MISC_COMMON.2     
            read(50,*) GSFull                                              INISTR.420   
            close(50)                                                      INISTR.421   
         ENDIF                                                             INISTR.422   
         !-----------------------------------------------------            INISTR.423   
         ! Share geopotential spectral field across PEs                    INISTR.424   
         !-----------------------------------------------------            INISTR.425   
         CALL SHARECOEF(.TRUE.,NHEM,GSFull,GS)                             INISTR.426   
         !-----------------------------------------------------            INISTR.427   
         ! Read in gridpoint field                                         INISTR.428   
         ! Skipping extra line on equator                                  INISTR.429   
         ! Tstar goes from 1 at pole to jg at equator, gsg made            INISTR.430   
         ! the same                                                        INISTR.431   
         !-----------------------------------------------------            INISTR.432   
         IF (MyPe.EQ.0) THEN                                               INISTR.433   
            DEALLOCATE(GSFull)                                             INISTR.434   
            ALLOCATE(GSGFull(MG,NHEM,JG))                                  INISTR.435   
            open(50,file='orogdata/t42.59',status='old')                   MISC_COMMON.3     
            READ(50,*)((GSGFull(i,1,j),i=1,mg),j=1,jg),(adum,i=1,mg),      INISTR.437   
     &           ((GSGFull(i,2,j),i=1,mg),j=jg,1,-1)                       INISTR.438   
            CLOSE(50)                                                      INISTR.439   
            !-----------------------------------------------------         GRAVDMOD.2     
            ! Read in gravity wave drag array.                             GRAVDMOD.3     
            ! This is subgridscale st.dev. of topography slightly          GRAVDMOD.4     
            ! smoothed to represent the fact that gravity waves do         GRAVDMOD.5     
            ! not propagate purely vertically upwards but also             GRAVDMOD.6     
            ! slightly horizontally too.                                   GRAVDMOD.7     
            !-----------------------------------------------------         GRAVDMOD.8     
            ALLOCATE(TopvarFull(MG,NHEM,JG))                               GRAVDMOD.9     
            open(51,file='topog_gwd.dat',status='old')                     GRAVDMOD.10    
	    read(51,*) TopvarFull                                                 GRAVDMOD.11    
	    close(51)                                                             GRAVDMOD.12    
         ENDIF                                                             INISTR.440   
         !-----------------------------------------------------            INISTR.441   
         ! Share GSG across PEs                                            INISTR.442   
         !-----------------------------------------------------            INISTR.443   
         CALL SHAREGRID(.TRUE.,MG,1,GSGFull,GSG)                           INISTR.444   
         !-----------------------------------------------------            GRAVDMOD.13    
         ! Share TOPVAR across PEs                                         GRAVDMOD.14    
         !-----------------------------------------------------            GRAVDMOD.15    
         CALL SHAREGRID(.TRUE.,MG,1,TopvarFull,TOPVAR)                     GRAVDMOD.16    
         IF (MyPe.EQ.0) DEALLOCATE(TopvarFull)                             GRAVDMOD.17    
         !-----------------------------------------------------            INISTR.445   
         ! Print out land mask                                             INISTR.446   
         !-----------------------------------------------------            INISTR.447   
         IF (MyPe.EQ.0) THEN                                               INISTR.448   
            write(2,*) 'land mask looks like:'                             INISTR.449   
            do j=1,jg                                                      INISTR.450   
               write (2,'(128I1)')                                         INISTR.451   
     &              (nint((GSGFull(i,1,j)/(GSGFull(i,1,j)+.1))),i=1,mg)    INISTR.452   
            enddo                                                          INISTR.453   
            do j=jg,1,-1                                                   INISTR.454   
               write (2,'(128I1)')                                         INISTR.455   
     &              (nint((GSGFull(i,2,j)/(GSGFull(i,2,j)+.1))),i=1,mg)    INISTR.456   
            enddo                                                          INISTR.457   
            DEALLOCATE(GSGFull)                                            INISTR.458   
         ENDIF                                                             INISTR.459   
      ENDIF                                                                INISTR.460   
      IF (MyPe.EQ.0) THEN                                                  OAS_RUNOFF.61    
c     read in the preprepared runoff grid (non-polar)                      OAS_RUNOFF.62    
      open(50,file='orogdata/T42.runoff-real.ForteIGCM4.grid'              OAS_RUNOFF.63    
     $,status='old')                                                       OAS_RUNOFF.64    
      read (50,*) iareanum                                                 OAS_RUNOFF.65    
      do iarea=1,iareanum                                                  OAS_RUNOFF.66    
c      read in the land box perimeter                                      OAS_RUNOFF.67    
       read (50,*)                                                         OAS_RUNOFF.68    
         read (50,*) runoff(1,1,iarea),runoff(1,2,iarea)                   OAS_RUNOFF.69    
     $             ,runoff(2,1,iarea),runoff(2,2,iarea)                    OAS_RUNOFF.70    
         read (50,*) runoff(3,1,iarea)                                     OAS_RUNOFF.71    
         do ncoast=1, runoff(3,1,iarea)                                    OAS_RUNOFF.72    
         read (50,*) runoff(3+ncoast,1,iarea),runoff(3+ncoast,2,iarea)     OAS_RUNOFF.73    
         end do                                                            OAS_RUNOFF.74    
      end do                                                               OAS_RUNOFF.75    
      close(50)                                                            OAS_RUNOFF.76    
      ENDIF   ! End Mype if                                                OAS_RUNOFF.77    
      if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                   OAS_RUNOFF.78    
!-----------------------------------------------------                     INISTR.461   
! If BEGDOY=0 sets DOY from restart record - else                          INISTR.462   
! sets it from namelist                                                    INISTR.463   
!-----------------------------------------------------                     INISTR.464   
      IF (BEGDOY.GT.0.9) DOY=BEGDOY                                        INISTR.465   
      IF (MyPe.EQ.0) THEN                                                  INISTR.466   
         WRITE(2,*) 'STARTING FROM ',DOY,' DAY OF YEAR '                   INISTR.467   
         if (lshort) then                                                  INISTR.468   
            print *,'resetting DAY to 0.0'                                 INISTR.469   
            DAY=0.0                                                        INISTR.470   
         else                                                              INISTR.471   
            print*,' begdoy day doy ',begdoy,day,doy                       INISTR.472   
         endif                                                             INISTR.473   
      ENDIF                                                                INISTR.474   
*ENDIF                                                                     INISTR.475   
!-----------------------------------------------------                     INISTR.476   
! Open restoration file                                                    INISTR.477   
!-----------------------------------------------------                     INISTR.478   
      IF ((MyPe.EQ.0).AND.(LRESTIJ))                                       INISTR.479   
     &     OPEN(UNIT=13,FILE='restoration.dat',FORM='unformatted')         INISTR.480   
*IF DEF,ONLY_V2                                                            INISTR.481   
      RETURN                                                               INISTR.482   
!-----------------------------------------------------                     INISTR.483   
! To get here, must have prematurely reached the end of the                INISTR.484   
! input file.                                                              INISTR.485   
!-----------------------------------------------------                     INISTR.486   
 1021 WRITE(2,2131) DAY                                                    INISTR.487   
      CALL ABORT                                                           INISTR.488   
*ENDIF                                                                     INISTR.489   
      END                                                                  INISTR.490   
*DECK ICTRAC                                                               ICTRAC.1     
*IF DEF,ABOVE_V1                                                           ICTRAC.2     
!=====================================================                     ICTRAC.3     
! *********PMF Version 1.0 (8.4.97)*******************                     ICTRAC.4     
! Subroutine which initialises the tracer fields.                          ICTRAC.5     
! Tracers can be started as any function of the usual grid                 ICTRAC.6     
! point fields.                                                            ICTRAC.7     
! Mass mixing ratios converted to volume mixing ratios for                 ICTRAC.8     
! flux form of advection.                                                  ICTRAC.9     
!                                    John Methven, 10.04.95                ICTRAC.10    
! Slighly modified to add more tracers and add array GWORK                 ICTRAC.11    
! Piers Forster 22.01.97                                                   ICTRAC.12    
!                                                                          ICTRAC.13    
! Changed again to combine with phys2 update                               ICTRAC.14    
! to include surface water and temperature                                 ICTRAC.15    
! initilization.                                                           ICTRAC.16    
! Also lets water vapour profile be cacluated by setting                   ICTRAC.17    
! surface RH     Piers Forster  18.02.97                                   ICTRAC.18    
!                                                                          ICTRAC.19    
! Flag LFLUX added for FLUX form of advection                              ICTRAC.20    
!                                                                          ICTRAC.21    
! Marc 2 November 2010                                                     ICTRAC.22    
! Signficant change to this routine. In the non-parallel                   ICTRAC.23    
! version the transformation in this routines was:                         ICTRAC.24    
! TRA (spectral space) -> TRAG (grid space) -> Grid space                  ICTRAC.25    
! calculations -> TRAG (grid space) -> TRA.                                ICTRAC.26    
! To be consistent with the other spectral to grid space                   ICTRAC.27    
! to spectral loops (the ones involving MGRMLT and DGRMLT)                 ICTRAC.28    
! and for ease in writing other routines, here the                         ICTRAC.29    
! transformation is:                                                       ICTRAC.30    
! TRA (spectral space) -> TRAG (grid space) -> Grid space                  ICTRAC.31    
! calculations -> TRANLG (grid space) -> TRAT,                             ICTRAC.32    
! and where necessary the values of TRAT are read into                     ICTRAC.33    
! TRA.                                                                     ICTRAC.34    
!=====================================================                     ICTRAC.35    
      SUBROUTINE ICTRAC                                                    ICTRAC.36    
      IMPLICIT NONE                                                        ICTRAC.37    
*CALL PARAM1                                                               ICTRAC.38    
*CALL PARAM2                                                               ICTRAC.39    
*CALL PARAM3                                                               ICTRAC.40    
*CALL BLANK                                                                ICTRAC.41    
*CALL SPECTR                                                               ICTRAC.42    
*CALL GRIDPA                                                               ICTRAC.43    
*CALL GRIDPB                                                               ICTRAC.44    
*CALL BATS                                                                 ICTRAC.45    
*CALL PHYSCA                                                               ICTRAC.46    
*IF DEF,NOMPI                                                              ICTRAC.47    
*ELSE                                                                      ICTRAC.48    
*CALL GRIDPA2                                                              ICTRAC.49    
*CALL GRIDPB2                                                              ICTRAC.50    
*ENDIF                                                                     ICTRAC.51    
*CALL MPIDECK                                                              ICTRAC.52    
!-----------------------------------------------------                     ICTRAC.53    
! Local variables                                                          ICTRAC.54    
!-----------------------------------------------------                     ICTRAC.55    
      LOGICAL :: LNSURF                                                    ICTRAC.56    
      LOGICAL :: LRH                                                       ICTRAC.57    
      REAL :: RH(NL)                                                       ICTRAC.58    
      CHARACTER :: LHEM(2)*25                                              ICTRAC.59    
*IF DEF,ONLY_V2                                                            ICTRAC.60    
      REAL, ALLOCATABLE :: TstarFull(:,:)                                  ICTRAC.61    
      REAL, ALLOCATABLE :: QstarFull(:,:)                                  ICTRAC.62    
*ELSE                                                                      ICTRAC.63    
      REAL, ALLOCATABLE :: TstarFull(:,:,:)                                ICTRAC.64    
      REAL, ALLOCATABLE :: QstarFull(:,:,:)                                ICTRAC.65    
*ENDIF                                                                     ICTRAC.66    
      REAL :: TDUM(JG),QDUM(JG)                                            ICTRAC.67    
*IF DEF,ONLY_V2                                                            ICTRAC.68    
      INTEGER, PARAMETER :: TagRef=200                                     ICTRAC.69    
      INTEGER :: KKS                                                       ICTRAC.70    
      LOGICAL :: lWriteStar                                                ICTRAC.71    
*ENDIF                                                                     ICTRAC.72    
! Loop variables                                                           ICTRAC.73    
      INTEGER :: I, iCol2, IHEM, IM, IN, J, KK, L                          ICTRAC.74    
!-----------------------------------------------------                     ICTRAC.75    
! Set data in LHEM                                                         ICTRAC.76    
!-----------------------------------------------------                     ICTRAC.77    
*IF DEF,ONLY_V2                                                            ICTRAC.78    
      DATA LHEM/'  N HEM  POLE.....EQUATOR'                                ICTRAC.79    
     :         ,'  S HEM  POLE.....EQUATOR'/                               ICTRAC.80    
*ELSE                                                                      ICTRAC.81    
      DATA LHEM/'  N HEM  EQUATOR.....POLE'                                ICTRAC.82    
     :         ,'  S HEM  EQUATOR.....POLE'/                               ICTRAC.83    
*ENDIF                                                                     ICTRAC.84    
!-----------------------------------------------------                     ICTRAC.85    
! Format statements                                                        ICTRAC.86    
!-----------------------------------------------------                     ICTRAC.87    
*IF DEF,ONLY_V2                                                            ICTRAC.88    
 2010 FORMAT(' SURFACE TEMPERATURE IN DEGC',A,/,(10F8.3))                  ICTRAC.89    
 2020 FORMAT(' SURFACE SPECIFIC HUMIDITY IN G/KG',A,/,(10F8.4))            ICTRAC.90    
*ELSE                                                                      ICTRAC.91    
 2010 FORMAT('0SURFACE TEMPERATURE IN DEGC',A25/20(1X,F8.2))               ICTRAC.92    
 2020 FORMAT('0SURFACE SPECIFIC HUMIDITY IN G/KG',A25/20(1X,f8.4))         ICTRAC.93    
 2030 FORMAT(3X,20(1X,F5.1))                                               ICTRAC.94    
*ENDIF                                                                     ICTRAC.95    
!-----------------------------------------------------                     ICTRAC.96    
! Namelist                                                                 ICTRAC.97    
!-----------------------------------------------------                     ICTRAC.98    
      NAMELIST/INQ/LRH,RH,LNSURF                                           ICTRAC.99    
!-----------------------------------------------------                     ICTRAC.100   
! Preset namelist options                                                  ICTRAC.101   
!-----------------------------------------------------                     ICTRAC.102   
      LRH=.FALSE.                                                          ICTRAC.103   
      LNSURF=.FALSE.                                                       ICTRAC.104   
      DO L=1,NL                                                            ICTRAC.105   
        RH(L)=90.0*SIGMA(L)                                                ICTRAC.106   
      ENDDO                                                                ICTRAC.107   
*IF DEF,ONLY_V2                                                            ICTRAC.108   
!-----------------------------------------------------                     ICTRAC.109   
! Write information to output file                                         ICTRAC.110   
!-----------------------------------------------------                     ICTRAC.111   
      IF (MyPe.EQ.0) THEN                                                  ICTRAC.112   
         WRITE(2,'(/'' TRACER AND SURFACE INITIALISATION: '//              ICTRAC.113   
     &        'NTRAC,NTRACO ='',2I3)') NTRAC,NTRACO                        ICTRAC.114   
         DO KK=1,NTRAC                                                     ICTRAC.115   
            WRITE(2,'('' TRACER'',I3,'' : KOLOUR ='',I3)') KK,KOLOUR(KK)   ICTRAC.116   
         ENDDO                                                             ICTRAC.117   
      ENDIF                                                                ICTRAC.118   
*ENDIF                                                                     ICTRAC.119   
!-----------------------------------------------------                     ICTRAC.120   
! Read in namelist data                                                    ICTRAC.121   
!-----------------------------------------------------                     ICTRAC.122   
      IF (MyPe.EQ.0) THEN                                                  ICTRAC.123   
         READ(7,INQ)                                                       ICTRAC.124   
         WRITE(2,INQ)                                                      ICTRAC.125   
      ENDIF                                                                ICTRAC.126   
      IF (NPE.GT.1) THEN                                                   ICTRAC.127   
         iSend=0                                                           ICTRAC.128   
         nBuffSize=1                                                       ICTRAC.129   
         CALL MPI_BCAST(LRH,nBuffSize,ParaLog,iSend,                       ICTRAC.130   
     &        MPI_COMM_WORLD,ierr)                                         ICTRAC.131   
         CALL MPI_BCAST(LNSURF,nBuffSize,ParaLog,iSend,                    ICTRAC.132   
     &        MPI_COMM_WORLD,ierr)                                         ICTRAC.133   
         nBuffSize=NL                                                      ICTRAC.134   
         CALL MPI_BCAST(RH,nBuffSize,ParaReal,iSend,                       ICTRAC.135   
     &        MPI_COMM_WORLD,ierr)                                         ICTRAC.136   
      ENDIF                                                                ICTRAC.137   
!-----------------------------------------------------                     ICTRAC.138   
! Check that flags make sense.                                             ICTRAC.139   
!-----------------------------------------------------                     ICTRAC.140   
*IF DEF,ONLY_V2                                                            ICTRAC.141   
      IF (.NOT.LRH.AND.NTRACO.EQ.0) THEN                                   ICTRAC.142   
*ELSE                                                                      ICTRAC.143   
      IF (.NOT.LRH.AND.NTRACO.LT.NTRAC) THEN                               ICTRAC.144   
*ENDIF                                                                     ICTRAC.145   
         WRITE(2,'(A25)') 'No water Vapour. Need to set LRH to TRUE'       ICTRAC.146   
         CALL ABORT                                                        ICTRAC.147   
      ENDIF                                                                ICTRAC.148   
!-----------------------------------------------------                     ICTRAC.149   
! Convert RH from % to fraction                                            ICTRAC.150   
!-----------------------------------------------------                     ICTRAC.151   
      DO L=1,NL                                                            ICTRAC.152   
        RH(L)=RH(L)/100.0                                                  ICTRAC.153   
      ENDDO                                                                ICTRAC.154   
*IF DEF,ONLY_V2                                                            ICTRAC.155   
!-----------------------------------------------------                     ICTRAC.156   
! Read surface temperature and specific humidity.                          ICTRAC.157   
!-----------------------------------------------------                     ICTRAC.158   
      IF (.NOT.LNSURF) THEN                                                ICTRAC.159   
         READ(14) TSTAR,QSTAR                                              ICTRAC.160   
         WRITE(2,'('' ZONALLY SYMMETRIC SURFACE STATE READ'')')            ICTRAC.161   
      ENDIF                                                                ICTRAC.162   
!-----------------------------------------------------                     ICTRAC.163   
! Possible to skip the code below                                          ICTRAC.164   
!-----------------------------------------------------                     ICTRAC.165   
      IF (LNSURF.OR.LRH.OR.((.NOT.LRSTRT).AND.LSHORT)                      ICTRAC.166   
     &    .OR.(NTRACO.NE.NTRAC).OR.(NTRVADO.NE.NTRVAD)) THEN               ICTRAC.167   
         !-----------------------------------------------------            ICTRAC.168   
         ! Ensure that TSTAR and QSTAR are written to unit 14              ICTRAC.169   
         !-----------------------------------------------------            ICTRAC.170   
         lWriteStar=.TRUE.                                                 ICTRAC.171   
*ENDIF                                                                     ICTRAC.172   
*IF DEF,NOMPI                                                              ICTRAC.173   
*ELSE                                                                      ICTRAC.174   
!-----------------------------------------------------                     ICTRAC.175   
! Transpose the arrays so that the meridional wavenumber                   ICTRAC.176   
! dimension is the only dimension that isn't decomposed                    ICTRAC.177   
! over PEs                                                                 ICTRAC.178   
!-----------------------------------------------------                     ICTRAC.179   
      CALL TRANS1                                                          ICTRAC.180   
*ENDIF                                                                     ICTRAC.181   
!-----------------------------------------------------                     ICTRAC.182   
! Convert the meridional wavenumber dimension to a                         ICTRAC.183   
! latitude dimension                                                       ICTRAC.184   
!-----------------------------------------------------                     ICTRAC.185   
      CALL LTI                                                             ICTRAC.186   
      CALL LTIDT                                                           ICTRAC.187   
!-----------------------------------------------------                     ICTRAC.188   
! Transpose the arrays so that the zonal wavenumber                        ICTRAC.189   
! dimension is the only dimension that isn't decomposed                    ICTRAC.190   
! over PEs                                                                 ICTRAC.191   
!-----------------------------------------------------                     ICTRAC.192   
*IF DEF,NOMPI                                                              ICTRAC.193   
*ELSE                                                                      ICTRAC.194   
      CALL TRANS2(UG,VG,ZG,DG,TG,TRAG,PLG,PJG,PMG)                         ICTRAC.195   
      CALL TRANS2A(CHIG,SFG)                                               ICTRAC.196   
*ENDIF                                                                     ICTRAC.197   
*IF DEF,ONLY_V2                                                            ICTRAC.198   
!-----------------------------------------------------                     ICTRAC.199   
! Initialise a zonally symmetric surface temperature, using                ICTRAC.200   
! a dry adiabat from the lowest level zonal mean temperature               ICTRAC.201   
! (real part of m=0 Fourier coefficient).                                  ICTRAC.202   
!-----------------------------------------------------                     ICTRAC.203   
      IF (LNSURF) THEN                                                     ICTRAC.204   
         IF (iCol.EQ.Px) THEN                                              ICTRAC.205   
            DO J=1,JGyy(iRow)                                              ICTRAC.206   
               DO IHEM=1,NHEM                                              ICTRAC.207   
*IF DEF,NOMPI                                                              ICTRAC.208   
                  TSTAR(J,IHEM)=(REAL(TG(1,IHEM,J,NL))+                    ICTRAC.209   
*ELSE                                                                      ICTRAC.210   
                  TSTAR(J,IHEM)=(TG2(1,IHEM,J,NLxx(iCol))+                 ICTRAC.211   
*ENDIF                                                                     ICTRAC.212   
     &                 T0(NL))/SKAP(NL)                                    ICTRAC.213   
               ENDDO                                                       ICTRAC.214   
            ENDDO                                                          ICTRAC.215   
            !-----------------------------------------------------         ICTRAC.216   
            ! Send this value of TSTAR to the other PEs on this            ICTRAC.217   
            ! row                                                          ICTRAC.218   
            !-----------------------------------------------------         ICTRAC.219   
            IF (Px.GT.1) THEN                                              ICTRAC.220   
               DO iCol2=1,Px-1                                             ICTRAC.221   
                  iRecv=PeGrid(iCol2,iRow)                                 ICTRAC.222   
                  nBuffSize=JGy*NHEM                                       ICTRAC.223   
                  iTag=TagRef+iRecv                                        ICTRAC.224   
                  CALL MPI_BSEND(TSTAR,nBuffSize,ParaReal,iRecv,           ICTRAC.225   
     &                 iTag,MPI_COMM_WORLD,ierr)                           ICTRAC.226   
               ENDDO                                                       ICTRAC.227   
            ENDIF                                                          ICTRAC.228   
         ENDIF                                                             ICTRAC.229   
         IF (Px.GT.1) THEN                                                 ICTRAC.230   
            CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                         ICTRAC.231   
            IF (iCol.LT.Px) THEN                                           ICTRAC.232   
               !-----------------------------------------------------      ICTRAC.233   
               ! Need to receive the value of TSTAR from the PE on         ICTRAC.234   
               ! this row that has TG2(L=NL).                              ICTRAC.235   
               !-----------------------------------------------------      ICTRAC.236   
               iSend=PeGrid(Px,iRow)                                       ICTRAC.237   
               nBuffSize=JGy*NHEM                                          ICTRAC.238   
               iTag=TagRef+Mype                                            ICTRAC.239   
               CALL MPI_RECV(TSTAR,nBuffSize,ParaReal,iSend,               ICTRAC.240   
     &              iTag,MPI_COMM_WORLD,istat,ierr)                        ICTRAC.241   
            ENDIF                                                          ICTRAC.242   
         ENDIF                                                             ICTRAC.243   
      ENDIF                                                                ICTRAC.244   
*ENDIF                                                                     ICTRAC.245   
*IF DEF,NOMPI                                                              ICTRAC.246   
!-----------------------------------------------------                     ICTRAC.247   
! Convert zonal wavenumber dimension to longitude                          ICTRAC.248   
! dimension.                                                               ICTRAC.249   
!-----------------------------------------------------                     ICTRAC.250   
      CALL FFT(1,NHEM*JG*NL,CHIG)                                          ICTRAC.251   
      CALL FFT(1,NHEM*JG*NL,SFG)                                           ICTRAC.252   
      CALL FFT(1,NHEM*JG*NL,UG)                                            ICTRAC.253   
      CALL FFT(1,NHEM*JG*NL,VG)                                            ICTRAC.254   
      CALL FFT(1,NHEM*JG*NL,ZG)                                            ICTRAC.255   
      CALL FFT(1,NHEM*JG*NL,TG)                                            ICTRAC.256   
*IF DEF,ONLY_V2                                                            ICTRAC.257   
      IF (NTRACO.GT.0) THEN                                                ICTRAC.258   
         CALL FFT(1,NHEM*JG*NL*NTRACO,TRAG)                                ICTRAC.259   
      ENDIF                                                                ICTRAC.260   
*ENDIF                                                                     ICTRAC.261   
      IF (iCol.EQ.1) THEN                                                  ICTRAC.262   
         CALL FFT(1,NHEM*JG,PLG)                                           ICTRAC.263   
         CALL FFT(1,NHEM*JG,PJG)                                           ICTRAC.264   
         CALL FFT(1,NHEM*JG,PMG)                                           ICTRAC.265   
      ENDIF                                                                ICTRAC.266   
*ELSE                                                                      ICTRAC.267   
!-----------------------------------------------------                     ICTRAC.268   
! Convert zonal wavenumber dimension to longitude                          ICTRAC.269   
! dimension.                                                               ICTRAC.270   
!-----------------------------------------------------                     ICTRAC.271   
      CALL FFT(1,NHEM*JGy*NLx,CHIG2)                                       ICTRAC.272   
      CALL FFT(1,NHEM*JGy*NLx,SFG2)                                        ICTRAC.273   
      CALL FFT(1,NHEM*JGy*NLx,UG2)                                         ICTRAC.274   
      CALL FFT(1,NHEM*JGy*NLx,VG2)                                         ICTRAC.275   
      CALL FFT(1,NHEM*JGy*NLx,ZG2)                                         ICTRAC.276   
      CALL FFT(1,NHEM*JGy*NLx,TG2)                                         ICTRAC.277   
*IF DEF,ONLY_V2                                                            ICTRAC.278   
      IF (NTRACO.GT.0) THEN                                                ICTRAC.279   
         CALL FFT(1,NHEM*JG*NL*NTRACO,TRAG2)                               ICTRAC.280   
      ENDIF                                                                ICTRAC.281   
*ENDIF                                                                     ICTRAC.282   
      IF (iCol.EQ.1) THEN                                                  ICTRAC.283   
         CALL FFT(1,NHEM*JGy,PLG2)                                         ICTRAC.284   
         CALL FFT(1,NHEM*JGy,PJG2)                                         ICTRAC.285   
         CALL FFT(1,NHEM*JGy,PMG2)                                         ICTRAC.286   
      ENDIF                                                                ICTRAC.287   
!-----------------------------------------------------                     ICTRAC.288   
! Transpose the arrays so that layer dimension is the                      ICTRAC.289   
! only dimension that isn't decomposed over PEs                            ICTRAC.290   
!-----------------------------------------------------                     ICTRAC.291   
      CALL TRANS3                                                          ICTRAC.292   
      CALL TRANS3A                                                         ICTRAC.293   
*ENDIF                                                                     ICTRAC.294   
!-----------------------------------------------------                     ICTRAC.295   
! Carry out the grid-point calculations                                    ICTRAC.296   
!-----------------------------------------------------                     ICTRAC.297   
      CALL ICTGRMLT(LNSURF, LRH, RH)                                       ICTRAC.298   
*IF DEF,NOMPI                                                              ICTRAC.299   
*ELSE                                                                      ICTRAC.300   
      CALL TRANS4A                                                         ICTRAC.301   
*ENDIF                                                                     ICTRAC.302   
!-----------------------------------------------------                     ICTRAC.303   
! Transform all tracer fields to spectral space at each latitude.          ICTRAC.304   
! First do inverse FFT to give half-transforms.                            ICTRAC.305   
!-----------------------------------------------------                     ICTRAC.306   
*IF DEF,NOMPI                                                              ICTRAC.307   
      CALL FFT(-1,NHEM*JGy*NLx*NTRAC,TRANLG)                               ICTRAC.308   
*ELSE                                                                      ICTRAC.309   
      CALL FFT(-1,NHEM*JGy*NLx*NTRAC,TRANLG2)                              ICTRAC.310   
      CALL TRANS5A(TRANLG)                                                 ICTRAC.311   
*ENDIF                                                                     ICTRAC.312   
!-----------------------------------------------------                     ICTRAC.313   
! Call HANAL for direct Legendre transform.                                ICTRAC.314   
!-----------------------------------------------------                     ICTRAC.315   
*IF DEF,ONLY_V2                                                            ICTRAC.316   
      IF (NTRAC.GT.NTRACO) THEN                                            ICTRAC.317   
         !-----------------------------------------------------            ICTRAC.318   
         ! Only calculate for tracer with index higher than NTRACO         ICTRAC.319   
         !-----------------------------------------------------            ICTRAC.320   
         CALL HANALVICT(NTRACO+1,NTRAC)                                    ICTRAC.321   
         IF (MyPe.EQ.0) WRITE(2,*) ' ***ictrac trag g->w: nle = ',         ICTRAC.322   
     &        NL*(NTRAC-NTRACO)                                            ICTRAC.323   
      ENDIF                                                                ICTRAC.324   
      IF (LRH.AND.NTRACO.GT.0) THEN                                        ICTRAC.325   
         !-----------------------------------------------------            ICTRAC.326   
         ! Only calculate for first tracer - the water vapour              ICTRAC.327   
         !-----------------------------------------------------            ICTRAC.328   
         CALL HANALVICT(1,1)                                               ICTRAC.329   
         IF (MyPe.EQ.0) WRITE(2,*) ' ***ictrac trag g->w: vapour'          ICTRAC.330   
      ENDIF                                                                ICTRAC.331   
*ELSE                                                                      ICTRAC.332   
      CALL HANALVICT                                                       ICTRAC.333   
*ENDIF                                                                     ICTRAC.334   
*IF DEF,NOMPI                                                              ICTRAC.335   
*ELSE                                                                      ICTRAC.336   
!-----------------------------------------------------                     ICTRAC.337   
! Transpose the arrays so that the layer dimension is the                  ICTRAC.338   
! only dimension that isn't decomposed over PEs                            ICTRAC.339   
!-----------------------------------------------------                     ICTRAC.340   
      CALL TRANS6A                                                         ICTRAC.341   
*ENDIF                                                                     ICTRAC.342   
!-----------------------------------------------------                     ICTRAC.343   
! Return old tracers from the restart record into array TRA                ICTRAC.344   
! and set the t-1 record for the new tracers.                              ICTRAC.345   
!-----------------------------------------------------                     ICTRAC.346   
*IF DEF,ONLY_V2                                                            ICTRAC.347   
      IF (LRH) THEN                                                        ICTRAC.348   
         KKS=1                                                             ICTRAC.349   
      ELSE                                                                 ICTRAC.350   
         KKS=NTRACO+1                                                      ICTRAC.351   
      ENDIF                                                                ICTRAC.352   
      DO KK=KKS,NTRAC                                                      ICTRAC.353   
*ELSE                                                                      ICTRAC.354   
      DO KK=NTRACO+1,NTRAC                                                 ICTRAC.355   
*ENDIF                                                                     ICTRAC.356   
         DO L=1,NL                                                         ICTRAC.357   
            DO IHEM=1,NHEM                                                 ICTRAC.358   
               DO IM=1,MMTyy(iRow)                                         ICTRAC.359   
                  DO IN=1,NNTxx(iCol)                                      ICTRAC.360   
                     TRA(IN,IM,IHEM,L,KK)=TRAT(IN,IM,IHEM,L,KK)            ICTRAC.361   
                     TRAMI(IN,IM,IHEM,L,KK)=TRA(IN,IM,IHEM,L,KK)           ICTRAC.362   
                  ENDDO                                                    ICTRAC.363   
               ENDDO                                                       ICTRAC.364   
            ENDDO                                                          ICTRAC.365   
         ENDDO                                                             ICTRAC.366   
      ENDDO                                                                ICTRAC.367   
*IF DEF,ONLY_V2                                                            ICTRAC.368   
         !-----------------------------------------------------            ICTRAC.369   
         ! Make sure that the t-1 record for water vapour is set if        ICTRAC.370   
         ! LRSTRT and LSHORT are true.                                     ICTRAC.371   
         !-----------------------------------------------------            ICTRAC.372   
         IF ( LRSTRT.AND.LSHORT.AND.(KKS.GT.1) ) THEN                      ICTRAC.373   
            DO L=1,NL                                                      ICTRAC.374   
               DO IHEM=1,NHEM                                              ICTRAC.375   
                  DO IM=1,MMTyy(iRow)                                      ICTRAC.376   
                     DO IN=1,NNTxx(iCol)                                   ICTRAC.377   
                        TRAMI(IN,IM,IHEM,L,1)=TRA(IN,IM,IHEM,L,1)          ICTRAC.378   
                     ENDDO                                                 ICTRAC.379   
                  ENDDO                                                    ICTRAC.380   
               ENDDO                                                       ICTRAC.381   
            ENDDO                                                          ICTRAC.382   
         ENDIF                                                             ICTRAC.383   
      ELSE ! end the IF (LNSURF.OR.LRH.OR.((.NOT.LRSTRT).AND. ...          ICTRAC.384   
         lWriteStar=.FALSE.                                                ICTRAC.385   
      ENDIF                                                                ICTRAC.386   
*ENDIF                                                                     ICTRAC.387   
!-----------------------------------------------------                     ICTRAC.388   
! Writes out surface temp and humdidity to channel 14                      ICTRAC.389   
! Continue to write out restart in old format....                          ICTRAC.390   
!-----------------------------------------------------                     ICTRAC.391   
*IF DEF,ONLY_V2                                                            ICTRAC.392   
      IF (MyPe.EQ.0) THEN                                                  ICTRAC.393   
         ALLOCATE(TstarFull(JG,NHEM))                                      ICTRAC.394   
         ALLOCATE(QstarFull(JG,NHEM))                                      ICTRAC.395   
      ENDIF                                                                ICTRAC.396   
      CALL SHAREGRID4(JG,TSTAR,TstarFull)                                  ICTRAC.397   
      CALL SHAREGRID4(JG,QSTAR,QstarFull)                                  ICTRAC.398   
*ELSE                                                                      ICTRAC.399   
      IF (MyPe.EQ.0) THEN                                                  ICTRAC.400   
         ALLOCATE(TstarFull(MGPP,NHEM,JG))                                 ICTRAC.401   
         ALLOCATE(QstarFull(MGPP,NHEM,JG))                                 ICTRAC.402   
      ENDIF                                                                ICTRAC.403   
      CALL SHAREGRID(.FALSE.,MGPP,1,TstarFull,tstar)                       ICTRAC.404   
      CALL SHAREGRID(.FALSE.,MGPP,1,QstarFull,qstar)                       ICTRAC.405   
*ENDIF                                                                     ICTRAC.406   
      IF (MyPe.eq.0) THEN                                                  ICTRAC.407   
         !-----------------------------------------------------            ICTRAC.408   
         ! Write the TSTAR and QSTAR values to unit 14                     ICTRAC.409   
         !-----------------------------------------------------            ICTRAC.410   
*IF DEF,ONLY_V2                                                            ICTRAC.411   
         IF (lWriteStar) THEN                                              ICTRAC.412   
            IF (LNSURF) THEN                                               ICTRAC.413   
               OPEN(UNIT=14,FILE='tstar_qstar.dat',                        ICTRAC.414   
     &              FORM='unformatted')                                    ICTRAC.415   
               IF (NHEM.EQ.1) THEN                                         ICTRAC.416   
                  WRITE(14) TstarFull,QstarFull                            ICTRAC.417   
               ELSE                                                        ICTRAC.418   
                  WRITE(14) (TstarFull(j,1),j=1,jg),                       ICTRAC.419   
     &                 (TstarFull(j,2),j=1,jg),                            ICTRAC.420   
     &                 (QstarFull(j,1),j=1,jg),                            ICTRAC.421   
     &                 (QstarFull(j,2),j=1,jg)                             ICTRAC.422   
               ENDIF                                                       ICTRAC.423   
               CLOSE(14)                                                   ICTRAC.424   
            ENDIF                                                          ICTRAC.425   
            WRITE(2,'(/'' ZONALLY SYMMETRIC SURFACE STATE WRITTEN'')')     ICTRAC.426   
         ENDIF                                                             ICTRAC.427   
*ELSE                                                                      ICTRAC.428   
         IF (LNSURF) THEN                                                  ICTRAC.429   
            IF (NHEM.EQ.1) THEN                                            ICTRAC.430   
               WRITE(14,*) TstarFull,QstarFull                             ICTRAC.431   
            ELSE                                                           ICTRAC.432   
               WRITE(14,*) ( ((TstarFull(i,1,j),j=1,jg),                   ICTRAC.433   
     &              (TstarFull(i,2,j),j=1,jg)),i=1,MGPP),                  ICTRAC.434   
     &              ( ((QstarFull(i,1,j),j=1,jg),                          ICTRAC.435   
     &              (QstarFull(i,2,j),j=1,jg)),i=1,MGPP)                   ICTRAC.436   
            ENDIF                                                          ICTRAC.437   
         ENDIF                                                             ICTRAC.438   
         WRITE(2,'(A40)') 'O DEG LONG X-SECTS SHOWN BELOW'                 ICTRAC.439   
*ENDIF                                                                     ICTRAC.440   
         DO IHEM=1,NHEM                                                    ICTRAC.441   
            DO J=1,JG                                                      ICTRAC.442   
*IF DEF,ONLY_V2                                                            ICTRAC.443   
               TDUM(J)=CT*TstarFull(J,IHEM)-273.15                         ICTRAC.444   
               QDUM(J)=CQ*QstarFull(J,IHEM)                                ICTRAC.445   
*ELSE                                                                      ICTRAC.446   
               TDUM(J)=CT*TstarFull(1,IHEM,J)-273.15                       ICTRAC.447   
               QDUM(J)=CQ*QstarFull(1,IHEM,J)                              ICTRAC.448   
*ENDIF                                                                     ICTRAC.449   
            ENDDO                                                          ICTRAC.450   
*IF DEF,ONLY_V2                                                            ICTRAC.451   
            WRITE(2,2010) LHEM(IHEM),(TDUM(J),J=1,JG)                      ICTRAC.452   
            WRITE(2,2020) LHEM(IHEM),(QDUM(J),J=1,JG)                      ICTRAC.453   
*ELSE                                                                      ICTRAC.454   
            IF(JG.LE.20) THEN                                              ICTRAC.455   
               WRITE(2,2010) LHEM(IHEM),(TDUM(J),J=JG,1,-1)                ICTRAC.456   
               WRITE(2,2020) LHEM(IHEM),(QDUM(J),J=JG,1,-1)                ICTRAC.457   
            ELSE                                                           ICTRAC.458   
               WRITE(2,2010) LHEM(IHEM),(TDUM(J),J=JG,2,-2)                ICTRAC.459   
               WRITE(2,2030)            (TDUM(J),J=JG-1,1,-2)              ICTRAC.460   
               WRITE(2,2020) LHEM(IHEM),(QDUM(J),J=JG,2,-2)                ICTRAC.461   
               WRITE(2,2030)            (QDUM(J),J=JG-1,1,-2)              ICTRAC.462   
            ENDIF                                                          ICTRAC.463   
*ENDIF                                                                     ICTRAC.464   
         ENDDO                                                             ICTRAC.465   
         DEALLOCATE(TstarFull)                                             ICTRAC.466   
         DEALLOCATE(QstarFull)                                             ICTRAC.467   
      ENDIF                                                                ICTRAC.468   
      RETURN                                                               ICTRAC.469   
      END                                                                  ICTRAC.470   
*ENDIF                                                                     ICTRAC.471   
*DECK ICTGRMLT                                                             ICTGRMLT.1     
*IF DEF,ABOVE_V1                                                           ICTGRMLT.2     
!=====================================================                     ICTGRMLT.3     
! Grid-space calculations used in initialisation                           ICTGRMLT.4     
!=====================================================                     ICTGRMLT.5     
      SUBROUTINE ICTGRMLT(LNSURF, LRH, RH)                                 ICTGRMLT.6     
      IMPLICIT NONE                                                        ICTGRMLT.7     
*CALL PARAM1                                                               ICTGRMLT.8     
*CALL PARAM2                                                               ICTGRMLT.9     
*CALL PARAM3                                                               ICTGRMLT.10    
*CALL BLANK                                                                ICTGRMLT.11    
*CALL COMGRM                                                               ICTGRMLT.12    
*CALL PHYSCA                                                               ICTGRMLT.13    
*CALL BATS                                                                 ICTGRMLT.14    
*CALL GRIDPA3                                                              ICTGRMLT.15    
*CALL GRIDPB3                                                              ICTGRMLT.16    
*CALL MPIDECK                                                              ICTGRMLT.17    
!-----------------------------------------------------                     ICTGRMLT.18    
! Passed arguments                                                         ICTGRMLT.19    
!-----------------------------------------------------                     ICTGRMLT.20    
      LOGICAL :: LNSURF                                                    ICTGRMLT.21    
      LOGICAL :: LRH                                                       ICTGRMLT.22    
      REAL :: RH(NL)                                                       ICTGRMLT.23    
*IF DEF,ONLY_V3                                                            ICTGRMLT.24    
!-----------------------------------------------------                     ICTGRMLT.25    
! External function                                                        ICTGRMLT.26    
!-----------------------------------------------------                     ICTGRMLT.27    
      REAL, EXTERNAL :: PQSAT                                              ICTGRMLT.28    
*ENDIF                                                                     ICTGRMLT.29    
!-----------------------------------------------------                     ICTGRMLT.30    
! Local variables                                                          ICTGRMLT.31    
!-----------------------------------------------------                     ICTGRMLT.32    
      INTEGER, PARAMETER :: TagRef=300                                     ICTGRMLT.33    
      REAL :: TEMPTR(MGx,NHEM,NL)                                          ICTGRMLT.34    
      REAL :: SPZ(NHEM,JGy)                                                ICTGRMLT.35    
      REAL :: PlgHold(MGx,NHEM,JGy)                                        ICTGRMLT.36    
      REAL :: HoldVar(NHEM,JGy)                                            ICTGRMLT.37    
      REAL :: ESCON                                                        ICTGRMLT.38    
*IF DEF,ONLY_V2                                                            ICTGRMLT.39    
      INTEGER :: KKS                                                       ICTGRMLT.40    
*ENDIF                                                                     ICTGRMLT.41    
! Loop variables                                                           ICTGRMLT.42    
      INTEGER :: I, iCol2, IHEM, J, KK, L                                  ICTGRMLT.43    
!-----------------------------------------------------                     ICTGRMLT.44    
! Grid point calculations for surface pressure,                            ICTGRMLT.45    
! temperature T (=TO+T') and vertical derivatives of U,V and T.            ICTGRMLT.46    
!-----------------------------------------------------                     ICTGRMLT.47    
      DO J=1,JGyy(iRow)                                                    ICTGRMLT.48    
         DO IHEM=1,NHEM                                                    ICTGRMLT.49    
            DO I=1,MGxx(iCol)                                              ICTGRMLT.50    
               PLG3(I,IHEM,J)=EXP(PLG3(I,IHEM,J))                          ICTGRMLT.51    
            ENDDO                                                          ICTGRMLT.52    
         ENDDO                                                             ICTGRMLT.53    
      ENDDO                                                                ICTGRMLT.54    
!-----------------------------------------------------                     ICTGRMLT.55    
! If LNSURF is true, we'll need a sum of PLG over latitudes                ICTGRMLT.56    
! later                                                                    ICTGRMLT.57    
!-----------------------------------------------------                     ICTGRMLT.58    
      IF (LNSURF) THEN                                                     ICTGRMLT.59    
         IF (iCol.GT.1) THEN                                               ICTGRMLT.60    
            !-----------------------------------------------------         ICTGRMLT.61    
            ! Send data to first PE on this row                            ICTGRMLT.62    
            !-----------------------------------------------------         ICTGRMLT.63    
            iRecv=PeGrid(1,iRow)                                           ICTGRMLT.64    
            nBuffSize=MGx*NHEM*JGy                                         ICTGRMLT.65    
            iTag=TagRef+2*MyPe                                             ICTGRMLT.66    
            CALL MPI_BSEND(PLG3,nBuffSize,ParaReal,                        ICTGRMLT.67    
     &           iRecv,iTag,MPI_COMM_WORLD,ierr)                           ICTGRMLT.68    
         ENDIF                                                             ICTGRMLT.69    
         IF (Px.GT.1) CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)                ICTGRMLT.70    
         !-----------------------------------------------------            ICTGRMLT.71    
         ! Need an average of PLG3 over latitudes                          ICTGRMLT.72    
         !-----------------------------------------------------            ICTGRMLT.73    
         SPZ(:,:)=0.0                                                      ICTGRMLT.74    
         IF (iCol.EQ.1) THEN                                               ICTGRMLT.75    
            DO J=1,JGyy(iRow)                                              ICTGRMLT.76    
               DO IHEM=1,NHEM                                              ICTGRMLT.77    
                  DO I=1,MGxx(iCol)                                        ICTGRMLT.78    
                     SPZ(IHEM,J)=SPZ(IHEM,J)+PLG3(I,IHEM,J)                ICTGRMLT.79    
                  ENDDO                                                    ICTGRMLT.80    
               ENDDO                                                       ICTGRMLT.81    
            ENDDO                                                          ICTGRMLT.82    
            !-----------------------------------------------------         ICTGRMLT.83    
            ! Loop through the other PEs on this row                       ICTGRMLT.84    
            !-----------------------------------------------------         ICTGRMLT.85    
            IF (Px.GT.1) THEN                                              ICTGRMLT.86    
               DO iCol2=2,Px                                               ICTGRMLT.87    
                  !---------------------------------------------------     ICTGRMLT.88    
                  ! Receive data from the other PEs on this row            ICTGRMLT.89    
                  !---------------------------------------------------     ICTGRMLT.90    
                  iSend=PeGrid(iCol2, iRow)                                ICTGRMLT.91    
                  nBuffSize=MGx*NHEM*JGy                                   ICTGRMLT.92    
                  iTag=TagRef+2*iSend                                      ICTGRMLT.93    
                  CALL MPI_RECV(PlgHold,nBuffSize,ParaReal,                ICTGRMLT.94    
     &                 iSend,iTag,MPI_COMM_WORLD,istat,ierr)               ICTGRMLT.95    
                  !---------------------------------------------------     ICTGRMLT.96    
                  ! Add the data together                                  ICTGRMLT.97    
                  !---------------------------------------------------     ICTGRMLT.98    
                  DO J=1,JGyy(iRow)                                        ICTGRMLT.99    
                     DO IHEM=1,NHEM                                        ICTGRMLT.100   
                        DO I=1,MGxx(iCol2)                                 ICTGRMLT.101   
                           SPZ(IHEM,J)=SPZ(IHEM,J)+PlgHold(I,IHEM,J)       ICTGRMLT.102   
                        ENDDO                                              ICTGRMLT.103   
                     ENDDO                                                 ICTGRMLT.104   
                  ENDDO                                                    ICTGRMLT.105   
               ENDDO                                                       ICTGRMLT.106   
               !-----------------------------------------------------      ICTGRMLT.107   
               ! Loop through the other PEs on this row again (this time   ICTGRMLT.108   
               ! sending data).                                            ICTGRMLT.109   
               !-----------------------------------------------------      ICTGRMLT.110   
               DO iCol2=2,Px                                               ICTGRMLT.111   
                  !---------------------------------------------------     ICTGRMLT.112   
                  ! Send the data to the other PEs                         ICTGRMLT.113   
                  !---------------------------------------------------     ICTGRMLT.114   
                  iRecv=PeGrid(iCol2,iRow)                                 ICTGRMLT.115   
                  nBuffSize=JGy*NHEM                                       ICTGRMLT.116   
                  iTag=TagRef+2*iRecv+1                                    ICTGRMLT.117   
                  CALL MPI_BSEND(SPZ,nBuffSize,ParaReal,                   ICTGRMLT.118   
     &                 iRecv,iTag,MPI_COMM_WORLD,ierr)                     ICTGRMLT.119   
               ENDDO                                                       ICTGRMLT.120   
            ENDIF                                                          ICTGRMLT.121   
         ENDIF                                                             ICTGRMLT.122   
         IF (Px.GT.1) CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)                ICTGRMLT.123   
         IF (iCol.GT.1) THEN                                               ICTGRMLT.124   
            !-----------------------------------------------------         ICTGRMLT.125   
            ! Receive summed data from first PE on this row                ICTGRMLT.126   
            !-----------------------------------------------------         ICTGRMLT.127   
            iSend=PeGrid(1,iRow)                                           ICTGRMLT.128   
            nBuffSize=JGy*NHEM                                             ICTGRMLT.129   
            iTag=TagRef+2*MyPe+1                                           ICTGRMLT.130   
            CALL MPI_RECV(SPZ,nBuffSize,ParaReal,                          ICTGRMLT.131   
     &           iSend,iTag,MPI_COMM_WORLD,istat,ierr)                     ICTGRMLT.132   
         ENDIF                                                             ICTGRMLT.133   
*IF DEF,ONLY_V2                                                            ICTGRMLT.134   
         SPZ(:,:)=SPZ(:,:)/REAL(MG)                                        ICTGRMLT.135   
*ENDIF                                                                     ICTGRMLT.136   
      ENDIF                                                                ICTGRMLT.137   
!-----------------------------------------------------                     ICTGRMLT.138   
! Loop over latitudes                                                      ICTGRMLT.139   
!-----------------------------------------------------                     ICTGRMLT.140   
      DO J=1,JGyy(iRow)                                                    ICTGRMLT.141   
         DO L=1,NL                                                         ICTGRMLT.142   
            DO IHEM=1,NHEM                                                 ICTGRMLT.143   
               DO I=1,MGxx(iCol)                                           ICTGRMLT.144   
                  TG3(I,IHEM,J,L)=TG3(I,IHEM,J,L)+T0(L)                    ICTGRMLT.145   
               ENDDO                                                       ICTGRMLT.146   
            ENDDO                                                          ICTGRMLT.147   
         ENDDO                                                             ICTGRMLT.148   
*IF DEF,ONLY_V3                                                            ICTGRMLT.149   
         !-----------------------------------------------------            ICTGRMLT.150   
         ! Calculate TSTAR                                                 ICTGRMLT.151   
         !-----------------------------------------------------            ICTGRMLT.152   
         IF (LNSURF) THEN                                                  ICTGRMLT.153   
            DO IHEM=1,NHEM                                                 ICTGRMLT.154   
               DO I=1,MGxx(iCol)                                           ICTGRMLT.155   
                  TSTAR(I,IHEM,J)=TG3(I,IHEM,J,NL)/SKAP(NL)                ICTGRMLT.156   
               ENDDO                                                       ICTGRMLT.157   
            ENDDO                                                          ICTGRMLT.158   
         ENDIF                                                             ICTGRMLT.159   
*ENDIF                                                                     ICTGRMLT.160   
         !-----------------------------------------------------            ICTGRMLT.161   
         ! Compute non-linear diabatic forcing                             ICTGRMLT.162   
         !-----------------------------------------------------            ICTGRMLT.163   
*IF DEF,NOMPI                                                              ICTGRMLT.164   
         CALL DLSGCR(MG,MGPP,NHEM,JG,NL,J,UG3,RGG,DUDLSG)                  ICTGRMLT.165   
         CALL DLSGCR(MG,MGPP,NHEM,JG,NL,J,VG3,RGG,DVDLSG)                  ICTGRMLT.166   
         CALL DLSGCR(MG,MGPP,NHEM,JG,NL,J,TG3,RGG,DTDLSG)                  ICTGRMLT.167   
*ELSE                                                                      ICTGRMLT.168   
         CALL DLSGCR(MGx,MGx,NHEM,JGy,NL,J,UG3,RGG,DUDLSG)                 ICTGRMLT.169   
         CALL DLSGCR(MGx,MGx,NHEM,JGy,NL,J,VG3,RGG,DVDLSG)                 ICTGRMLT.170   
         CALL DLSGCR(MGx,MGx,NHEM,JGy,NL,J,TG3,RGG,DTDLSG)                 ICTGRMLT.171   
*ENDIF                                                                     ICTGRMLT.172   
*IF DEF,ONLY_V2                                                            ICTGRMLT.173   
         !-----------------------------------------------------            ICTGRMLT.174   
         ! In the non-parallel version of the code, TRAG is used           ICTGRMLT.175   
         ! as the half transform to calculate the source term for          ICTGRMLT.176   
         ! for the tracers. However, this is inconsistent with the         ICTGRMLT.177   
         ! rest of the code - namely the MRGMLT and DRGMLT loops -         ICTGRMLT.178   
         ! and the transformation rounties (TRANS* routines) which         ICTGRMLT.179   
         ! use TRANLG. So in this version we've used TRANLG.               ICTGRMLT.180   
         !-----------------------------------------------------            ICTGRMLT.181   
         TRANLG3(:,:,J,:,:)=TRAG3(:,:,J,:,:)                               ICTGRMLT.182   
*ENDIF                                                                     ICTGRMLT.183   
         !-----------------------------------------------------            ICTGRMLT.184   
         ! Grid point calculations for new tracer fields at one            ICTGRMLT.185   
         ! latitude (JH).                                                  ICTGRMLT.186   
         ! Initilise water vapour if LRH set  depends on RH                ICTGRMLT.187   
         ! goes into tracer No. 1                                          ICTGRMLT.188   
         !-----------------------------------------------------            ICTGRMLT.189   
         IF (LRH) THEN                                                     ICTGRMLT.190   
            DO IHEM=1,NHEM                                                 ICTGRMLT.191   
               DO I=1,MGxx(iCol)                                           ICTGRMLT.192   
*IF DEF,ONLY_V2                                                            ICTGRMLT.193   
                  ESCON=ESCONA/PLG3(I,IHEM,J)                              ICTGRMLT.194   
*ELSE                                                                      ICTGRMLT.195   
                  ESCON=1./PLG3(I,IHEM,J)                                  ICTGRMLT.196   
*ENDIF                                                                     ICTGRMLT.197   
                  DO L=1,NL                                                ICTGRMLT.198   
                     TRANLG3(I,IHEM,J,L,1)=ESCON*RH(L)*                    ICTGRMLT.199   
*IF DEF,ONLY_V2                                                            ICTGRMLT.200   
     &                    EXP(-ESCONB/TG3(I,IHEM,J,L))/SIGMA(L)            ICTGRMLT.201   
*ELSE                                                                      ICTGRMLT.202   
     &                    PQSAT(TG3(I,IHEM,J,L))/SIGMA(L)                  ICTGRMLT.203   
*ENDIF                                                                     ICTGRMLT.204   
                  ENDDO                                                    ICTGRMLT.205   
               ENDDO                                                       ICTGRMLT.206   
            ENDDO                                                          ICTGRMLT.207   
         ENDIF                                                             ICTGRMLT.208   
         !-----------------------------------------------------            ICTGRMLT.209   
         ! Optionally initialise surface humidity as saturated             ICTGRMLT.210   
         ! at the zonal mean surface temperature and pressure.             ICTGRMLT.211   
         !-----------------------------------------------------            ICTGRMLT.212   
         IF (LNSURF) THEN                                                  ICTGRMLT.213   
            DO IHEM=1,NHEM                                                 ICTGRMLT.214   
*IF DEF,ONLY_V2                                                            ICTGRMLT.215   
               ESCON=ESCONA/SPZ(IHEM,J)                                    ICTGRMLT.216   
               QSTAR(J,IHEM)=ESCON*EXP(-ESCONB/TSTAR(J,IHEM))              ICTGRMLT.217   
*ELSE                                                                      ICTGRMLT.218   
               ESCON=REAL(MG)/SPZ(IHEM,J)                                  ICTGRMLT.219   
               DO I=1,MGxx(iCol)                                           ICTGRMLT.220   
                  QSTAR(I,IHEM,J)=ESCON*PQSAT(TSTAR(I,IHEM,J))             ICTGRMLT.221   
               ENDDO                                                       ICTGRMLT.222   
               PRINT '(i2,x,10(F5.1,x))',J,                                ICTGRMLT.223   
     &              (ct*tstar(I,IHEM,J)-273.15,I=1,10)                     ICTGRMLT.224   
*ENDIF                                                                     ICTGRMLT.225   
            ENDDO                                                          ICTGRMLT.226   
         ENDIF                                                             ICTGRMLT.227   
         !-----------------------------------------------------            ICTGRMLT.228   
         ! Initialise any additional tracers.                              ICTGRMLT.229   
         !-----------------------------------------------------            ICTGRMLT.230   
         DO KK=NTRACO+1,NTRAC                                              ICTGRMLT.231   
*IF DEF,ONLY_V2                                                            ICTGRMLT.232   
            IF(KOLOUR(KK).EQ.0) THEN                                       ICTGRMLT.233   
               !-----------------------------------------------------      ICTGRMLT.234   
               ! Copy water vapour.                                        ICTGRMLT.235   
               !-----------------------------------------------------      ICTGRMLT.236   
               DO L=1,NL                                                   ICTGRMLT.237   
                  DO IHEM=1,NHEM                                           ICTGRMLT.238   
                     DO I=1,MGxx(iCol)                                     ICTGRMLT.239   
                        TRANLG3(I,IHEM,J,L,KK)=TRANLG3(I,IHEM,J,L,1)       ICTGRMLT.240   
                     ENDDO                                                 ICTGRMLT.241   
                  ENDDO                                                    ICTGRMLT.242   
               ENDDO                                                       ICTGRMLT.243   
            ELSE                                                           ICTGRMLT.244   
               !-----------------------------------------------------      ICTGRMLT.245   
               ! Initialise as a function of the dynamical fields.         ICTGRMLT.246   
               !-----------------------------------------------------      ICTGRMLT.247   
               CALL PVCR(KK,TRANLG3,KOLOUR(KK))                            ICTGRMLT.248   
               IF ((J.EQ.1).AND.(MyPe.EQ.0))                               ICTGRMLT.249   
     &              WRITE(2,*) ' ***ictrac trag set: kk = ',kk             ICTGRMLT.250   
            ENDIF                                                          ICTGRMLT.251   
*ELSE                                                                      ICTGRMLT.252   
            DO L=1,NL                                                      ICTGRMLT.253   
               DO IHEM=1,NHEM                                              ICTGRMLT.254   
                  DO I=1,MGxx(iCol)                                        ICTGRMLT.255   
                     TEMPTR(I,IHEM,L)=TRANLG3(I,IHEM,J,L,KK)               ICTGRMLT.256   
                  ENDDO                                                    ICTGRMLT.257   
               ENDDO                                                       ICTGRMLT.258   
            ENDDO                                                          ICTGRMLT.259   
            IF(KOLOUR(KK).EQ.1) THEN                                       ICTGRMLT.260   
               CALL PVCR(J,TEMPTR,1)                                       ICTGRMLT.261   
            ENDIF                                                          ICTGRMLT.262   
            IF(KOLOUR(KK).EQ.2) THEN                                       ICTGRMLT.263   
               CALL PVCR(J,TEMPTR,2)                                       ICTGRMLT.264   
            ENDIF                                                          ICTGRMLT.265   
            DO L=1,NL                                                      ICTGRMLT.266   
               DO IHEM=1,NHEM                                              ICTGRMLT.267   
                  DO I=1,MGxx(iCol)                                        ICTGRMLT.268   
                     TRANLG3(I,IHEM,J,L,KK)=TEMPTR(I,IHEM,L)               ICTGRMLT.269   
                  ENDDO                                                    ICTGRMLT.270   
               ENDDO                                                       ICTGRMLT.271   
            ENDDO                                                          ICTGRMLT.272   
*ENDIF                                                                     ICTGRMLT.273   
            !-----------------------------------------------------         ICTGRMLT.274   
            ! Convert mass mixing ratios to volume mixing ratios.          ICTGRMLT.275   
            !-----------------------------------------------------         ICTGRMLT.276   
            IF (LFLUX) THEN                                                ICTGRMLT.277   
               DO L=1,NL                                                   ICTGRMLT.278   
                  DO IHEM=1,NHEM                                           ICTGRMLT.279   
                     DO I=1,MGxx(iCol)                                     ICTGRMLT.280   
                        TRANLG3(I,IHEM,J,L,KK)=PLG3(I,IHEM,J)*             ICTGRMLT.281   
     &                    TRANLG3(I,IHEM,J,L,KK)                           ICTGRMLT.282   
                     ENDDO                                                 ICTGRMLT.283   
                  ENDDO                                                    ICTGRMLT.284   
               ENDDO                                                       ICTGRMLT.285   
*IF DEF,ONLY_V2                                                            ICTGRMLT.286   
               IF ((J.EQ.1).AND.(MyPe.EQ.0))                               ICTGRMLT.287   
     &              WRITE(2,*) ' ***lflux trag: kk = ',kk                  ICTGRMLT.288   
*ENDIF                                                                     ICTGRMLT.289   
            ENDIF                                                          ICTGRMLT.290   
         ENDDO                                                             ICTGRMLT.291   
*IF DEF,ONLY_V2                                                            ICTGRMLT.292   
         IF ( LFLUX.AND.LRH.AND.(NTRACO.GT.0) ) THEN                       ICTGRMLT.293   
            DO L=1,NL                                                      ICTGRMLT.294   
               DO IHEM=1,NHEM                                              ICTGRMLT.295   
                  DO I=1,MGxx(iCol)                                        ICTGRMLT.296   
                     TRANLG3(I,IHEM,J,L,1)=PLG3(I,IHEM,J)*                 ICTGRMLT.297   
     &                    TRANLG3(I,IHEM,J,L,1)                            ICTGRMLT.298   
                  ENDDO                                                    ICTGRMLT.299   
               ENDDO                                                       ICTGRMLT.300   
            ENDDO                                                          ICTGRMLT.301   
            IF ((J.EQ.1).AND.(MyPe.EQ.0))                                  ICTGRMLT.302   
     &           WRITE(2,*) ' ***lflux trag: vapour'                       ICTGRMLT.303   
         ENDIF                                                             ICTGRMLT.304   
         !-----------------------------------------------------            ICTGRMLT.305   
         ! Initialise time-lagged grid-point fields if TVD advection.      ICTGRMLT.306   
         !-----------------------------------------------------            ICTGRMLT.307   
         IF (NTRVAD.GT.1) THEN                                             ICTGRMLT.308   
            KKS=NTRACO+1                                                   ICTGRMLT.309   
            IF (NTRVADO.EQ.1) KKS=1                                        ICTGRMLT.310   
            IF (LRSTRT.AND.LSHORT) KKS=1                                   ICTGRMLT.311   
            DO KK=KKS,NTRAC                                                ICTGRMLT.312   
               DO L=1,NL                                                   ICTGRMLT.313   
                  DO IHEM=1,NHEM                                           ICTGRMLT.314   
                     DO I=1,MGxx(iCol)                                     ICTGRMLT.315   
                        TRAGMI3(I,IHEM,J,L,KK)=TRANLG3(I,IHEM,J,L,KK)      ICTGRMLT.316   
                     ENDDO                                                 ICTGRMLT.317   
                  ENDDO                                                    ICTGRMLT.318   
               ENDDO                                                       ICTGRMLT.319   
               IF ((J.EQ.1).AND.(MyPe.EQ.0))                               ICTGRMLT.320   
     &              WRITE(2,*)  ' ***ictrac tragmi set: kk = ',kk          ICTGRMLT.321   
            ENDDO                                                          ICTGRMLT.322   
            IF ( LRH.AND.(KKS.GT.1) ) THEN                                 ICTGRMLT.323   
               DO L=1,NL                                                   ICTGRMLT.324   
                  DO IHEM=1,NHEM                                           ICTGRMLT.325   
                     DO I=1,MGxx(iCol)                                     ICTGRMLT.326   
                        TRAGMI3(I,IHEM,J,L,1)=TRANLG3(I,IHEM,J,L,1)        ICTGRMLT.327   
                     ENDDO                                                 ICTGRMLT.328   
                  ENDDO                                                    ICTGRMLT.329   
               ENDDO                                                       ICTGRMLT.330   
            ENDIF                                                          ICTGRMLT.331   
         ENDIF                                                             ICTGRMLT.332   
*ENDIF                                                                     ICTGRMLT.333   
      ENDDO                                                                ICTGRMLT.334   
                                                                           ICTGRMLT.335   
      END                                                                  ICTGRMLT.336   
*ENDIF                                                                     ICTGRMLT.337   
*DECK INIBAL                                                               INIBAL.1     
!=====================================================                     INIBAL.2     
! This subroutine reads data used for balancing and                        INIBAL.3     
! calculates arrays needed for balancing.                                  INIBAL.4     
!=====================================================                     INIBAL.5     
      SUBROUTINE INIBAL                                                    INIBAL.6     
      IMPLICIT NONE                                                        INIBAL.7     
*CALL PARAM1                                                               INIBAL.8     
*CALL PARAM2                                                               INIBAL.9     
*CALL PARAM3                                                               INIBAL.10    
*CALL BLANK                                                                INIBAL.11    
*CALL SPECTR                                                               INIBAL.12    
*CALL BATS                                                                 INIBAL.13    
*CALL OUTCON                                                               INIBAL.14    
*CALL BALAN                                                                INIBAL.15    
*CALL MPIDECK                                                              INIBAL.16    
!-----------------------------------------------------                     INIBAL.17    
! Intrinic routine                                                         INIBAL.18    
!-----------------------------------------------------                     INIBAL.19    
      INTEGER, EXTERNAL :: ICAMAX                                          INIBAL.20    
!-----------------------------------------------------                     INIBAL.21    
! Local variables                                                          INIBAL.22    
!-----------------------------------------------------                     INIBAL.23    
      REAL :: TBM1(NL,NL)                                                  INIBAL.24    
      REAL :: SM(IDM,IDM)                                                  INIBAL.25    
      REAL :: WA2(NL)                                                      INIBAL.26    
      INTEGER :: IWA2(NL)                                                  INIBAL.27    
      REAL, ALLOCATABLE :: WA1(:)                                          INIBAL.28    
      INTEGER, ALLOCATABLE :: IWA1(:)                                      INIBAL.29    
      REAL, ALLOCATABLE :: AU(:,:)                                         INIBAL.30    
      REAL :: ZDATN(IDM,NHEM,NL),ZDAT1(IDM,NHEM)                           INIBAL.31    
! File unit for writing data for a later restart run                       INIBAL.32    
      INTEGER :: ID                                                        INIBAL.33    
      INTEGER :: IG                                                        INIBAL.34    
      REAL :: TRGT0                                                        INIBAL.35    
      INTEGER :: MAXIND                                                    INIBAL.36    
      REAL :: GSMAX                                                        INIBAL.37    
      REAL :: GSMAX2                                                       INIBAL.38    
      REAL :: TEMP, TEMPP                                                  INIBAL.39    
      REAL :: FACT                                                         INIBAL.40    
      REAL :: RM1TAPE, RM2TAPE                                             INIBAL.41    
      REAL :: RDAY                                                         INIBAL.42    
      INTEGER :: NWJ2IN                                                    INIBAL.43    
! RKOUNT is an integer, but output expects a REAL                          INIBAL.44    
      REAL :: RKOUNT                                                       INIBAL.45    
      INTEGER :: IE                                                        INIBAL.46    
      INTEGER :: J2                                                        INIBAL.47    
      REAL :: TAL                                                          INIBAL.48    
      INTEGER :: IM                                                        INIBAL.49    
      INTEGER :: iPe                                                       INIBAL.50    
      REAL :: HoldVar(NNTx,NHEM,NL+1)                                      INIBAL.51    
      INTEGER, PARAMETER :: TagRef=500                                     INIBAL.52    
      INTEGER :: IDM2                                                      INIBAL.53    
! Loop variableS                                                           INIBAL.54    
      INTEGER :: I, iCol2, IHEM, IN, J, K, L, M, MP, NP                    INIBAL.55    
!-----------------------------------------------------                     INIBAL.56    
! Namelist                                                                 INIBAL.57    
!-----------------------------------------------------                     INIBAL.58    
      NAMELIST/INPBL/ KBAL,LTBAL,TMEAN                                     INIBAL.59    
      NAMELIST/TMPSP/ ZDATN,ZDAT1                                          INIBAL.60    
      NAMELIST/WVORT/ ZDATN                                                INIBAL.61    
!-----------------------------------------------------                     INIBAL.62    
! Format statements                                                        INIBAL.63    
!-----------------------------------------------------                     INIBAL.64    
  219 FORMAT(/' BALANCING FROM TEMPERATURE AND SURFACE PRESSURE TO',       INIBAL.65    
     +       ' OBTAIN VORTICITY')                                          INIBAL.66    
  220 FORMAT(/' BALANCING FROM VORTICITY TO OBTAIN TEMPERATURE AND',       INIBAL.67    
     +       ' SURFACE PRESSURE')                                          INIBAL.68    
  234 FORMAT(/' ***ABORT*** BALANCING ATTEMPTED WITH OROGRAPHY'/           INIBAL.69    
     +       ' TEMPERATURE FIELD WOULD CONTAIN 2-GRID WAVE')               INIBAL.70    
!-----------------------------------------------------                     INIBAL.71    
! Set default values and override as desired through NAMELIST input        INIBAL.72    
!-----------------------------------------------------                     INIBAL.73    
      KBAL=0                                                               INIBAL.74    
      LTBAL=.FALSE.                                                        INIBAL.75    
      DO L=1,NL                                                            INIBAL.76    
         TMEAN(L)=250.0                                                    INIBAL.77    
      ENDDO                                                                INIBAL.78    
                                                                           INIBAL.79    
      IF (MYPE.EQ.0) READ(7,INPBL)                                         INIBAL.80    
      IF (NPE.GT.1) THEN                                                   INIBAL.81    
         CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)                             INIBAL.82    
         nBuffSize=1                                                       INIBAL.83    
         iSend=0                                                           INIBAL.84    
         CALL MPI_BCAST(KBAL,nBuffSize,ParaInt,iSend,                      INIBAL.85    
     &        MPI_COMM_WORLD,ierr)                                         INIBAL.86    
         CALL MPI_BCAST(LTBAL,nBuffSize,ParaLog,iSend,                     INIBAL.87    
     &        MPI_COMM_WORLD,ierr)                                         INIBAL.88    
         nBuffSize=NL                                                      INIBAL.89    
         CALL MPI_BCAST(TMEAN,nBuffSize,ParaLog,iSend,                     INIBAL.90    
     &        MPI_COMM_WORLD,ierr)                                         INIBAL.91    
      ENDIF                                                                INIBAL.92    
      IF (MYPE.EQ.0) THEN                                                  INIBAL.93    
         WRITE(2,INPBL)                                                    INIBAL.94    
         IF (     LTBAL) WRITE(2,219)                                      INIBAL.95    
         IF (.NOT.LTBAL) WRITE(2,220)                                      INIBAL.96    
      ENDIF                                                                INIBAL.97    
!-----------------------------------------------------                     INIBAL.98    
! Make TMEAN dimensionless                                                 INIBAL.99    
!-----------------------------------------------------                     INIBAL.100   
      DO L=1,NL                                                            INIBAL.101   
        TMEAN(L)=TMEAN(L)/CT                                               INIBAL.102   
      ENDDO                                                                INIBAL.103   
!-----------------------------------------------------                     INIBAL.104   
! Read in ZDATN and maybe ZDAT2 from namelist                              INIBAL.105   
!-----------------------------------------------------                     INIBAL.106   
      IF (MyPe.EQ.0) THEN                                                  INIBAL.107   
         IF(.NOT.LTBAL) THEN                                               INIBAL.108   
            READ (7,WVORT)                                                 INIBAL.109   
            WRITE(2,WVORT)                                                 INIBAL.110   
         ELSE                                                              INIBAL.111   
            READ (7,TMPSP)                                                 INIBAL.112   
            WRITE(2,TMPSP)                                                 INIBAL.113   
         ENDIF                                                             INIBAL.114   
      ENDIF                                                                INIBAL.115   
      IF (NPE.GT.1) THEN                                                   INIBAL.116   
         IF ( (Px.GT.1).AND.(MyPe.EQ.0) ) THEN                             INIBAL.117   
            !-----------------------------------------------------         INIBAL.118   
            ! Pass parts of ZDATN to other the PEs contained               INIBAL.119   
            ! meridional wavenumber for 1st zonal wavenumber.              INIBAL.120   
            !-----------------------------------------------------         INIBAL.121   
            DO iCol2=2,Px                                                  INIBAL.122   
               iPe=PeGrid(iCol2,1)                                         INIBAL.123   
               !---------------------------------------------------        INIBAL.124   
               ! See if any of ZDATN or ZDAT1 need passing                 INIBAL.125   
               !---------------------------------------------------        INIBAL.126   
               IF (IDM.GT.NNT1(iCol2)) THEN                                INIBAL.127   
                  IDM2=MIN(IDM-NNT1(iCol2),NNTx)                           INIBAL.128   
                  !------------------------------------------------        INIBAL.129   
                  ! Store data in ZDATN for passing                        INIBAL.130   
                  !------------------------------------------------        INIBAL.131   
                  DO L=1,NL                                                INIBAL.132   
                     DO IHEM=1,NHEM                                        INIBAL.133   
                        DO IN=1,IDM2                                       INIBAL.134   
                           HoldVar(IN,IHEM,L)=                             INIBAL.135   
     &                          ZDATN(NNT1(iCol2)+IN,IHEM,L)               INIBAL.136   
                        ENDDO                                              INIBAL.137   
                     ENDDO                                                 INIBAL.138   
                  ENDDO                                                    INIBAL.139   
                  IF (LTBAL) THEN                                          INIBAL.140   
                     DO IHEM=1,NHEM                                        INIBAL.141   
                        DO IN=1,IDM2                                       INIBAL.142   
                           HoldVar(IN,IHEM,NL+1)=                          INIBAL.143   
     &                          ZDAT1(NNT1(iCol2)+IN,IHEM)                 INIBAL.144   
                        ENDDO                                              INIBAL.145   
                     ENDDO                                                 INIBAL.146   
                  ENDIF                                                    INIBAL.147   
                  iRecv=iPe                                                INIBAL.148   
                  nBuffSize=NNTx*NHEM*(NL+1)                               INIBAL.149   
                  iTag=TagRef+iPe                                          INIBAL.150   
                  CALL MPI_BSEND(HoldVar, nBuffSize, ParaCom, iRecv,       INIBAL.151   
     &                 iTag, MPI_COMM_WORLD, ierr)                         INIBAL.152   
               ENDIF                                                       INIBAL.153   
            ENDDO                                                          INIBAL.154   
         ENDIF                                                             INIBAL.155   
         CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)                             INIBAL.156   
         IF ( (Px.GT.1).AND.(iRow.EQ.1).AND.(MyPe.GT.0) ) THEN             INIBAL.157   
            !----------------------------------------------------          INIBAL.158   
            ! Check that at least part of 1st zonal wavenumber             INIBAL.159   
            ! is stored on this PE                                         INIBAL.160   
            !----------------------------------------------------          INIBAL.161   
            IF (mTwin1(2,1).GT.0) THEN                                     INIBAL.162   
               !---------------------------------------------------        INIBAL.163   
               ! Receive part of ZDATN from PE 0                           INIBAL.164   
               !---------------------------------------------------        INIBAL.165   
               iSend=0                                                     INIBAL.166   
               nBuffSize=NNTx*NHEM*(NL+1)                                  INIBAL.167   
               iTag=TagRef+MyPe                                            INIBAL.168   
               CALL MPI_RECV(HoldVar, nBuffSize, ParaCom, iSend,           INIBAL.169   
     &              iTag, MPI_COMM_WORLD, istat, ierr)                     INIBAL.170   
               DO L=1,NL                                                   INIBAL.171   
                  DO IHEM=1,NHEM                                           INIBAL.172   
                     DO IN=mTwin1(1,1)+1,mTwin1(2,1)                       INIBAL.173   
                        ZDATN(IN,IHEM,L)=HoldVar(IN,IHEM,L)                INIBAL.174   
                     ENDDO                                                 INIBAL.175   
                  ENDDO                                                    INIBAL.176   
               ENDDO                                                       INIBAL.177   
               IF (LTBAL) THEN                                             INIBAL.178   
                  DO IHEM=1,NHEM                                           INIBAL.179   
                     DO IN=mTwin1(1,1)+1,mTwin1(2,1)                       INIBAL.180   
                        ZDAT1(IN,IHEM)=                                    INIBAL.181   
     &                       HoldVar(IN,IHEM,NL+1)                         INIBAL.182   
                     ENDDO                                                 INIBAL.183   
                  ENDDO                                                    INIBAL.184   
               ENDIF                                                       INIBAL.185   
            ENDIF                                                          INIBAL.186   
         ENDIF                                                             INIBAL.187   
      ENDIF                                                                INIBAL.188   
!-----------------------------------------------------                     INIBAL.189   
! Read zonally averaged state from NAMELIST WVORT or TMPSP.                INIBAL.190   
! Assumes data is non-dimensionalised spectral coefficients                INIBAL.191   
! and that temperature (if used) includes layer mean.                      INIBAL.192   
!-----------------------------------------------------                     INIBAL.193   
      IF(.NOT.LTBAL) THEN                                                  INIBAL.194   
         IF (iRow.EQ.1) THEN                                               INIBAL.195   
            DO L=1,NL                                                      INIBAL.196   
               DO IHEM=1,NHEM                                              INIBAL.197   
                  DO I=1,mTwin1(2,1)                                       INIBAL.198   
                     Z(I,1,IHEM,L)=ZDATN(I,IHEM,L)                         INIBAL.199   
                  ENDDO                                                    INIBAL.200   
               ENDDO                                                       INIBAL.201   
            ENDDO                                                          INIBAL.202   
            IF (MyPe.EQ.0) THEN                                            INIBAL.203   
               DO L=1,NL                                                   INIBAL.204   
                  T(1,1,1,L)=T(1,1,1,L)+SQR2*(TMEAN(L)-T0(L))              INIBAL.205   
               ENDDO                                                       INIBAL.206   
            ENDIF                                                          INIBAL.207   
         ENDIF                                                             INIBAL.208   
      ELSE                                                                 INIBAL.209   
         IF (iRow.EQ.1) THEN                                               INIBAL.210   
            DO IHEM=1,NHEM                                                 INIBAL.211   
               DO L=1,NL                                                   INIBAL.212   
                  DO I=1,mTwin1(2,1)                                       INIBAL.213   
                     T(I,1,IHEM,L)=ZDATN(I,IHEM,L)                         INIBAL.214   
                  ENDDO                                                    INIBAL.215   
               ENDDO                                                       INIBAL.216   
            ENDDO                                                          INIBAL.217   
            DO IHEM=1,NHEM                                                 INIBAL.218   
               DO I=1,mTwin1(2,1)                                          INIBAL.219   
                  SP(I,1,IHEM)=ZDAT1(I,IHEM)                               INIBAL.220   
               ENDDO                                                       INIBAL.221   
            ENDDO                                                          INIBAL.222   
            DO L=1,NL                                                      INIBAL.223   
               T(1,1,1,L)=T(1,1,1,L)-SQR2*T0(L)                            INIBAL.224   
            ENDDO                                                          INIBAL.225   
         ENDIF                                                             INIBAL.226   
         IF (NPE.GT.1) THEN                                                INIBAL.227   
            CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)                          INIBAL.228   
            iSend=0                                                        INIBAL.229   
            nBuffSize=1                                                    INIBAL.230   
            CALL MPI_BCAST(RKOUNT,nBuffSize,ParaReal,iSend,                INIBAL.231   
     &           MPI_COMM_WORLD,ierr)                                      INIBAL.232   
            CALL MPI_BCAST(RDAY,nBuffSize,ParaReal,iSend,                  INIBAL.233   
     &           MPI_COMM_WORLD,ierr)                                      INIBAL.234   
         ENDIF                                                             INIBAL.235   
      ENDIF                                                                INIBAL.236   
      IF (MyPe.EQ.0) THEN                                                  INIBAL.237   
         DO L=1,NL                                                         INIBAL.238   
            Z(1,1,1,L)=Z(1,1,1,L)+EZ                                       INIBAL.239   
         ENDDO                                                             INIBAL.240   
      ENDIF                                                                INIBAL.241   
!-----------------------------------------------------                     INIBAL.242   
! If the KBAL=0 leave this routine here                                    INIBAL.243   
!-----------------------------------------------------                     INIBAL.244   
      IF (KBAL.EQ.0) RETURN                                                INIBAL.245   
!-----------------------------------------------------                     INIBAL.246   
! Determine which choice of balancing is needed                            INIBAL.247   
!-----------------------------------------------------                     INIBAL.248   
      IF(.NOT.LTBAL) THEN                                                  INIBAL.249   
         !-----------------------------------------------------            INIBAL.250   
         ! Set values required in BALANC.                                  INIBAL.251   
         ! Find maximum value in GS                                        INIBAL.252   
         !-----------------------------------------------------            INIBAL.253   
         MAXIND=ICAMAX((NNTx*MMTy*NHEM),GS,1)                              INIBAL.254   
         IHEM=((MAXIND-1)/(NNTx*MMTy))+1                                   INIBAL.255   
         IM=(( MAXIND-((IHEM-1)*NNTx*MMTy)-1 )/MMTy)+1                     INIBAL.256   
         IN=MOD(MAXIND,NNTx)                                               INIBAL.257   
         GSMAX=ABS(GS(IN,IM,IHEM))                                         INIBAL.258   
         IF (NPE.GT.1) THEN                                                INIBAL.259   
            !-----------------------------------------------------         INIBAL.260   
            ! Find maximum value of GS across PEs                          INIBAL.261   
            !-----------------------------------------------------         INIBAL.262   
            CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                         INIBAL.263   
            nBuffSize=1                                                    INIBAL.264   
            CALL MPI_ALLREDUCE(GSMAX, GSMAX2, nBuffSize, ParaReal,         INIBAL.265   
     &           ParaMax, MPI_COMM_WORLD, ierr)                            INIBAL.266   
            GSMAX=GSMAX2                                                   INIBAL.267   
         ENDIF                                                             INIBAL.268   
         !-----------------------------------------------------            INIBAL.269   
         ! With orography the balanced temperature field contains a        INIBAL.270   
         ! 2-grid wave in the vertical. ABORT if this is attempted.        INIBAL.271   
         !-----------------------------------------------------            INIBAL.272   
         IF(GSMAX.GT.1.0E-10) THEN                                         INIBAL.273   
            IF (MYPE.EQ.0) WRITE(2,234)                                    INIBAL.274   
            CALL ABORT                                                     INIBAL.275   
         ENDIF                                                             INIBAL.276   
         DO L=1,NL                                                         INIBAL.277   
            DO M=1,NL                                                      INIBAL.278   
               TBM1(M,L)=G(M,L)                                            INIBAL.279   
            ENDDO                                                          INIBAL.280   
         ENDDO                                                             INIBAL.281   
         CALL MATINV(TBM1,NL,NL,IWA2,WA2)                                  INIBAL.282   
         DO L=1,NL                                                         INIBAL.283   
            DO M=1,NL                                                      INIBAL.284   
               RG(M,L)=TBM1(M,L)                                           INIBAL.285   
            ENDDO                                                          INIBAL.286   
         ENDDO                                                             INIBAL.287   
         DO L=1,NL                                                         INIBAL.288   
            BFILT(L)=0.                                                    INIBAL.289   
         ENDDO                                                             INIBAL.290   
         BFILT(1)=1.                                                       INIBAL.291   
         BFILT(2)=1.0                                                      INIBAL.292   
         IF (NL.GE.3) THEN                                                 INIBAL.293   
            TEMPP=1.0                                                      INIBAL.294   
            DO I=2,NL-1                                                    INIBAL.295   
               DO J=2,I                                                    INIBAL.296   
                  TEMP=BFILT(J)                                            INIBAL.297   
                  BFILT(J)=TEMP+TEMPP                                      INIBAL.298   
                  TEMPP=TEMP                                               INIBAL.299   
               ENDDO                                                       INIBAL.300   
               BFILT(I+1)=1.0                                              INIBAL.301   
            ENDDO                                                          INIBAL.302   
         ENDIF                                                             INIBAL.303   
         FACT=-1.0                                                         INIBAL.304   
         DO I=2,NL                                                         INIBAL.305   
            BFILT(I)=BFILT(I)*FACT                                         INIBAL.306   
            FACT=-FACT                                                     INIBAL.307   
         ENDDO                                                             INIBAL.308   
         SRGT0=0.                                                          INIBAL.309   
         IG=0                                                              INIBAL.310   
         DO L=1,NL                                                         INIBAL.311   
            TRGT0=0.                                                       INIBAL.312   
            DO M=1,NL                                                      INIBAL.313   
               TRGT0=TRGT0+RG(M,L)*T0(M)                                   INIBAL.314   
            ENDDO                                                          INIBAL.315   
            RGT0(L)=TRGT0                                                  INIBAL.316   
            SRGT0=SRGT0+TRGT0*BFILT(L)                                     INIBAL.317   
         ENDDO                                                             INIBAL.318   
      ELSE                                                                 INIBAL.319   
         !-----------------------------------------------------            INIBAL.320   
         ! Carry all calculation of EP1, EP2 and PMNRE only on PE 0        INIBAL.321   
         !-----------------------------------------------------            INIBAL.322   
         IF (MyPe.EQ.0) THEN                                               INIBAL.323   
            !-----------------------------------------------------         INIBAL.324   
            ! Calculate EP1 and EP2 for zonal wavenumbers below            INIBAL.325   
            ! MFTBAL                                                       INIBAL.326   
            !-----------------------------------------------------         INIBAL.327   
            DO MP=0,MFTBAL,MOCT                                            INIBAL.328   
               IM=1+(MP/MOCT)                                              INIBAL.329   
               IN=1                                                        INIBAL.330   
               DO NP=MP+1,MM,2                                             INIBAL.331   
                  EP2(IN,IM,1)=2.0*SQRT( (NP*NP-MP*MP)/                    INIBAL.332   
     &                 (4.0*NP*NP-1.0) )*(1.0-1.0/NP)                      INIBAL.333   
                  EP1(IN,IM,1)=2.0*SQRT( ( (NP+1)*(NP+1)-MP*MP)/           INIBAL.334   
     &                 (4.0*(NP+1)*(NP+1)-1.0) )*(1.0+1.0/(NP+1))          INIBAL.335   
                  IN=IN+1                                                  INIBAL.336   
               ENDDO                                                       INIBAL.337   
            ENDDO                                                          INIBAL.338   
            !-----------------------------------------------------         INIBAL.339   
            ! Loop over all the zonal wavenumbers great than 0, but        INIBAL.340   
            ! less than MFTBAL                                             INIBAL.341   
            !-----------------------------------------------------         INIBAL.342   
            DO MP=MOCT,MFTBAL,MOCT                                         INIBAL.343   
               IM=1+(MP/MOCT)                                              INIBAL.344   
               J2=(NN-MP-1)/2+1                                            INIBAL.345   
               !-----------------------------------------------------      INIBAL.346   
               ! Zero arrays                                               INIBAL.347   
               !-----------------------------------------------------      INIBAL.348   
               ALLOCATE(AU(J2,J2),IWA1(J2),WA1(J2))                        INIBAL.349   
               AU(:,:)=0.0                                                 INIBAL.350   
               IWA1(:)=0                                                   INIBAL.351   
               WA1(:)=0.0                                                  INIBAL.352   
               SM(:,:)=0.0                                                 INIBAL.353   
               !-----------------------------------------------------      INIBAL.354   
               ! Calculate SM and AU.                                      INIBAL.355   
               !-----------------------------------------------------      INIBAL.356   
               DO J=1,J2                                                   INIBAL.357   
                  SM(J,J)=EP2(J,IM,1)                                      INIBAL.358   
                  AU(J,J)=EP2(J,IM,1)*EP2(J,IM,1)+                         INIBAL.359   
     &                    EP1(J,IM,1)*EP1(J,IM,1)                          INIBAL.360   
                  IF(J.GT.1)AU(J-1,J)=EP1(J-1,IM,1)*EP2(J,IM,1)            INIBAL.361   
                  IF (J.NE.J2) THEN                                        INIBAL.362   
                     SM(J+1,J)=EP1(J,IM,1)                                 INIBAL.363   
                     AU(J+1,J)=EP1(J,IM,1)*EP2(J+1,IM,1)                   INIBAL.364   
                  ENDIF                                                    INIBAL.365   
               ENDDO                                                       INIBAL.366   
               !-----------------------------------------------------      INIBAL.367   
               ! Invert an array AU which is of size J2 by J2              INIBAL.368   
               !-----------------------------------------------------      INIBAL.369   
               CALL MATINV(AU,J2,J2,IWA1,WA1)                              INIBAL.370   
               DO I=1,J2                                                   INIBAL.371   
                  DO J=1,J2                                                INIBAL.372   
                     TAL=0.0                                               INIBAL.373   
                     DO K=1,J2                                             INIBAL.374   
                        TAL=TAL+AU(K,I)*SM(J,K)                            INIBAL.375   
                     ENDDO                                                 INIBAL.376   
                     PMNRE(J,I,IM)=TAL                                     INIBAL.377   
                  ENDDO                                                    INIBAL.378   
               ENDDO                                                       INIBAL.379   
               DEALLOCATE(AU,IWA1,WA1)                                     INIBAL.380   
            ENDDO                                                          INIBAL.381   
                                                                           INIBAL.382   
            IF(NHEM.EQ.2) THEN                                             INIBAL.383   
               !-----------------------------------------------------      INIBAL.384   
               ! Calculations for zonal wavenumber 0                       INIBAL.385   
               !-----------------------------------------------------      INIBAL.386   
               DO IN=1,IDM                                                 INIBAL.387   
                  NP=2*(IN-1)                                              INIBAL.388   
                  IF (NP.GT.0) THEN                                        INIBAL.389   
                     EP2(IN,1,NHEM)=2.0*SQRT(NP*NP/(4.0*NP*NP-1.0))*       INIBAL.390   
     &                    (1.0-1.0/NP)                                     INIBAL.391   
                     EP1(IN,1,NHEM)=2.0*SQRT( (NP+1.0)*(NP+1.0)/           INIBAL.392   
     &                    (4.0*(NP+1.0)*(NP+1.0)-1.0) )*                   INIBAL.393   
     &                    (1.0+1.0/(NP+1.0))                               INIBAL.394   
                  ENDIF                                                    INIBAL.395   
               ENDDO                                                       INIBAL.396   
               !-----------------------------------------------------      INIBAL.397   
               ! Calculations for zonal wavenumber > 0                     INIBAL.398   
               !-----------------------------------------------------      INIBAL.399   
               DO MP=MOCT,MFTBAL,MOCT                                      INIBAL.400   
                  IM=1+(MP/MOCT)                                           INIBAL.401   
                  IN=1                                                     INIBAL.402   
                  DO NP=MP+1,MM,2                                          INIBAL.403   
                     EP1(IN,IM,NHEM)=2.0*SQRT((NP*NP-MP*MP)/               INIBAL.404   
     &                    (4.0*NP*NP-1.0))*(1.0+1.0/NP)                    INIBAL.405   
                     EP2(IN,IM,NHEM)=2.0*SQRT(                             INIBAL.406   
     &                    ((NP+1.0)*(NP+1.0)-MP*MP)/(4.0*(NP+1.0)*         INIBAL.407   
     &                    (NP+1.0)-1.0) )*(1.0-1.0/(NP+1.0))               INIBAL.408   
                     IN=IN+1                                               INIBAL.409   
                  ENDDO                                                    INIBAL.410   
               ENDDO                                                       INIBAL.411   
               !-----------------------------------------------------      INIBAL.412   
               ! Calculations for zonal wavenumber 0                       INIBAL.413   
               !-----------------------------------------------------      INIBAL.414   
               ALLOCATE(AU(IDM-1,IDM-1),IWA1(IDM-1),WA1(IDM-1))            INIBAL.415   
               DO J=1,IDM-1                                                INIBAL.416   
                  DO I=1,IDM-1                                             INIBAL.417   
                     AU(I,J)=0.0                                           INIBAL.418   
                     SM(I,J)=0.0                                           INIBAL.419   
                  ENDDO                                                    INIBAL.420   
               ENDDO                                                       INIBAL.421   
               DO J=1,IDM-1                                                INIBAL.422   
                  SM(J,J)=EP2(J+1,1,NHEM)                                  INIBAL.423   
                  AU(J,J)=EP1(J+1,1,NHEM)*EP1(J+1,1,NHEM) +                INIBAL.424   
     &                 EP2(J+1,1,NHEM)*EP2(J+1,1,NHEM)                     INIBAL.425   
                  IF(J.GT.1) AU(J-1,J)=EP1(J,1,NHEM)*EP2(J+1,1,NHEM)       INIBAL.426   
                  SM(J+1,J)=EP1(J+1,1,NHEM)                                INIBAL.427   
                  IF(J.LT.IDM-1) AU(J+1,J)=EP1(J+1,1,NHEM)*                INIBAL.428   
     &                 EP2(J+2,1,NHEM)                                     INIBAL.429   
               ENDDO                                                       INIBAL.430   
               !-----------------------------------------------------      INIBAL.431   
               ! Invert matrix                                             INIBAL.432   
               !-----------------------------------------------------      INIBAL.433   
               CALL MATINV(AU,(IDM-1),(IDM-1),IWA1,WA1)                    INIBAL.434   
               !-----------------------------------------------------      INIBAL.435   
               ! Calculate PMNRE                                           INIBAL.436   
               !-----------------------------------------------------      INIBAL.437   
               DO I=1,IDM-1                                                INIBAL.438   
                  DO J=1,IDM                                               INIBAL.439   
                     TAL=0.0                                               INIBAL.440   
                     DO K=1,IDM-1                                          INIBAL.441   
                        TAL=TAL + AU(K,I)*SM(J,K)                          INIBAL.442   
                     ENDDO                                                 INIBAL.443   
                     PMNRE(J,I,1)=TAL                                      INIBAL.444   
                  ENDDO                                                    INIBAL.445   
               ENDDO                                                       INIBAL.446   
               DEALLOCATE(AU)                                              INIBAL.447   
            ENDIF                                                          INIBAL.448   
         ENDIF                                                             INIBAL.449   
      ENDIF                                                                INIBAL.450   
                                                                           INIBAL.451   
      END                                                                  INIBAL.452   
*DECK INISP                                                                INISP.1     
!=====================================================                     INISP.2     
! Initialise spectral arrays                                               INISP.3     
!=====================================================                     INISP.4     
      SUBROUTINE INISP                                                     INISP.5     
      IMPLICIT NONE                                                        INISP.6     
*CALL PARAM1                                                               INISP.7     
*CALL PARAM2                                                               INISP.8     
*CALL PARAM3                                                               INISP.9     
*CALL BLANK                                                                INISP.10    
*CALL SPECTR                                                               INISP.11    
*CALL OUTCON                                                               INISP.12    
*CALL RESTIJ                                                               INISP.13    
*CALL MPIDECK                                                              INISP.14    
!-----------------------------------------------------                     INISP.15    
! Local variables                                                          INISP.16    
!-----------------------------------------------------                     INISP.17    
! Loop variables                                                           INISP.18    
      INTEGER :: L                                                         INISP.19    
!-----------------------------------------------------                     INISP.20    
! Initialise temperature and vorticity                                     INISP.21    
!-----------------------------------------------------                     INISP.22    
      IF (MyPe.EQ.0) THEN                                                  INISP.23    
         DO L=1,NL                                                         INISP.24    
            T(1,1,1,L)=T(1,1,1,L)+SQR2*(TRS(L)-T0(L))                      INISP.25    
            TMI(1,1,1,L)=TMI(1,1,1,L)+SQR2*(TRS(L)-T0(L))                  INISP.26    
         ENDDO                                                             INISP.27    
         DO L=1,NL                                                         INISP.28    
            Z(1,1,1,L)=Z(1,1,1,L)+EZ                                       INISP.29    
            ZMI(1,1,1,L)=ZMI(1,1,1,L)+EZ                                   INISP.30    
         ENDDO                                                             INISP.31    
      ENDIF                                                                INISP.32    
      END                                                                  INISP.33    
*DECK INIQS                                                                INIQS.1     
*IF DEF,ONLY_V3                                                            INIQS.2     
!=====================================================                     INIQS.3     
! Calculates a value for PQSVAL.                                           INIQS.4     
!=====================================================                     INIQS.5     
       SUBROUTINE INIQS                                                    INIQS.6     
       IMPLICIT NONE                                                       INIQS.7     
*CALL PARAM1                                                               INIQS.8     
*CALL PARAM2                                                               INIQS.9     
*CALL PARAM3                                                               INIQS.10    
*CALL QSTABS                                                               INIQS.11    
*CALL PHYSCA                                                               INIQS.12    
!-----------------------------------------------------                     INIQS.13    
! Local variables                                                          INIQS.14    
!-----------------------------------------------------                     INIQS.15    
       REAL :: t                                                           INIQS.16    
! Loop variable                                                            INIQS.17    
       INTEGER :: I                                                        INIQS.18    
!-----------------------------------------------------                     INIQS.19    
! Calculate  PQSVAL                                                        INIQS.20    
!-----------------------------------------------------                     INIQS.21    
      do i=1,nqstab                                                        INIQS.22    
        t=REAL(i)/1e5                                                      INIQS.23    
        PQSVAL(i)=ESCONA*EXP(-ESCONB/T)                                    INIQS.24    
      enddo                                                                INIQS.25    
      END                                                                  INIQS.26    
*ENDIF                                                                     INIQS.27    
*DECK INISURF                                                              INISURF.1     
*IF DEF,ONLY_V3                                                            INISURF.2     
!=====================================================                     INISURF.3     
! Subroutine to initialise the surface model from history on channel       INISURF.4     
! 18.                                                                      INISURF.5     
!=====================================================                     INISURF.6     
      SUBROUTINE INISURF                                                   INISURF.7     
      IMPLICIT NONE                                                        INISURF.8     
*CALL PARAM1                                                               INISURF.9     
*CALL PARAM2                                                               INISURF.10    
*CALL PARAM3                                                               INISURF.11    
*CALL BLANK                                                                INISURF.12    
*CALL BATS                                                                 INISURF.13    
*CALL GRIDPC                                                               INISURF.14    
*CALL PHYSCA                                                               INISURF.15    
*CALL CPIERS                                                               INISURF.16    
*CALL LEGAU                                                                INISURF.17    
*CALL OROG_G                                                               INISURF.18    
*CALL MPIDECK                                                              INISURF.19    
*IF DEF,ONLY_V3                                                            INISURF.20    
*CALL PARAMH                                                               OAS_RUNOFF.1     
*CALL OAfields                                                             OAS_RUNOFF.2     
*CALL AOfields                                                             OAS_RUNOFF.3     
                                                                           OAS_RUNOFF.4     
!-----------------------------------------------------                     INISURF.21    
! External function                                                        INISURF.22    
!-----------------------------------------------------                     INISURF.23    
      REAL, EXTERNAL :: PQSAT                                              INISURF.24    
*ENDIF                                                                     INISURF.25    
!-----------------------------------------------------                     INISURF.26    
! Local variables                                                          INISURF.27    
!-----------------------------------------------------                     INISURF.28    
      REAL, ALLOCATABLE :: SvegeFull(:,:,:)                                INISURF.29    
      REAL, ALLOCATABLE :: SurfVarsFull(:,:,:,:)                           INISURF.30    
      REAL, ALLOCATABLE :: SurfVars(:,:,:,:)                               INISURF.31    
      REAL :: DAYNEAR                                                      INISURF.32    
      REAL :: RCHECK                                                       INISURF.33    
      REAL :: RRKOUNT                                                      INISURF.34    
      REAL :: RM1TAPE                                                      INISURF.35    
      REAL :: RDAY                                                         INISURF.36    
      REAL :: CDOY                                                         INISURF.37    
      REAL :: RM2TAPE                                                      INISURF.38    
      REAL :: SVLAT                                                        INISURF.39    
      REAL :: SALOOK(24)                                                   INISURF.40    
! Loop variables                                                           INISURF.41    
      INTEGER :: I, IHEM, J                                                INISURF.42    
!-----------------------------------------------------                     INISURF.43    
! Lookup table for vegetation to albedo: from Unified Model Doc. no. 70    INISURF.44    
! MMJ April 2000                                                           INISURF.45    
! Snow free lookup table                                                   INISURF.46    
!-----------------------------------------------------                     INISURF.47    
                                                                           SURF_TYPE_BL.1     
C Vegetation-albedo tuned to observations and lack of aerosol              SURF_TYPE_BL.2     
                                                                           SURF_TYPE_BL.3     
       DATA SALOOK /0.10, 0.80, 0.20,                                      SURF_TYPE_BL.4     
     & 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,                           SURF_TYPE_BL.5     
     & 0.25, 0.25, 0.25, 0.25,                                             SURF_TYPE_BL.6     
     & 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,                           SURF_TYPE_BL.7     
     & 0.50, 0.20, 0.30/                                                   SURF_TYPE_BL.8     
                                                                           SURF_TYPE_BL.9     
!-----------------------------------------------------                     INISURF.52    
! Read in data for RCHECK                                                  INISURF.53    
!-----------------------------------------------------                     INISURF.54    
      IF (MyPe.EQ.0) THEN                                                  INISURF.55    
         DAYNEAR=0.                                                        INISURF.56    
         OPEN(UNIT=18,FILE='RestartSurface.dat',FORM='UNFORMATTED')        INISURF.57    
 101     read(18,end=200) RCHECK                                           INISURF.58    
         if (abs(RCHECK+999.999).gt.0.0001) then                           INISURF.59    
            write (2,*) 'Wrong type of surface restart ',                  INISURF.60    
     &           rcheck,abs(rcheck+999.999)                                INISURF.61    
            call abort                                                     INISURF.62    
         endif                                                             INISURF.63    
         !-----------------------------------------------------            INISURF.64    
         ! Read the remaining data from unit 18                            INISURF.65    
         !-----------------------------------------------------            INISURF.66    
       if(daynear.lt.1.0E-5)ALLOCATE(SurfVarsFull(MGPP,NHEM,JG,17))        NEWRESTART.2     
         READ(18) rrkount,rm1tape,rday,CDOY,SurfVarsFull,RM2TAPE           INISURF.68    
         !-----------------------------------------------------            INISURF.69    
         ! Check that RM1TAPE and RM2TAPE are consistent                   INISURF.70    
         !-----------------------------------------------------            INISURF.71    
         if (RM1TAPE.ne.RM2TAPE) then                                      INISURF.72    
            write (2,*) 'Surface (SOIL) restart record wrong.'             INISURF.73    
            write (2,*) 'RM1TAPE != RM2TAPE',RM1TAPE,RM2TAPE               INISURF.74    
            call abort                                                     INISURF.75    
         endif                                                             INISURF.76    
         !-----------------------------------------------------            INISURF.77    
         ! Check that RDAY and BEGDAY agree                                INISURF.78    
         !-----------------------------------------------------            INISURF.79    
         IF (ABS(RDAY-BEGDAY).GT.1.0E-2)THEN                               INISURF.80    
            IF (ABS(RDAY-BEGDAY).LT.(ABS(DAYNEAR-BEGDAY)))THEN             INISURF.81    
               DAYNEAR=RDAY                                                INISURF.82    
            ENDIF                                                          INISURF.83    
            GOTO 101                                                       INISURF.84    
         ENDIF                                                             INISURF.85    
         CLOSE(18)                                                         INISURF.86    
         !-----------------------------------------------------            INISURF.87    
         ! Check that CDOY and DOY agree                                   INISURF.88    
         !-----------------------------------------------------            INISURF.89    
         if (CDOY.NE.DOY) then                                             INISURF.90    
            write (2,*) 'Surface DOY not equal to dynamical DOY.'          INISURF.91    
            write (2,*) cdoy,doy                                           INISURF.92    
            write (2,*) 'Value from dynamics used.'                        INISURF.93    
         endif                                                             INISURF.94    
      ENDIF                                                                INISURF.95    
!-----------------------------------------------------                     INISURF.96    
! Pass RDAY to the other PEs                                               INISURF.97    
!-----------------------------------------------------                     INISURF.98    
      IF (NPE.GT.1) THEN                                                   INISURF.99    
         CALL MPI_BARRIER(MPI_COMM_WORLD,IERR)                             INISURF.100   
         nBuffSize=1                                                       INISURF.101   
         iSend=0                                                           INISURF.102   
         CALL MPI_BCAST(RDAY,nBuffSize,ParaReal,iSend,                     INISURF.103   
     &        MPI_COMM_WORLD,ierr)                                         INISURF.104   
      ENDIF                                                                INISURF.105   
!-----------------------------------------------------                     INISURF.106   
! Share the surface variables across PEs                                   INISURF.107   
!-----------------------------------------------------                     INISURF.108   
CCC      ALLOCATE(SurfVars(MGx,NHEM,JGy,11))                               NEWRESTART.3     
CCC      CALL SHAREGRID(.TRUE.,MGPP,11,SurfVarsFull,SurfVars)              NEWRESTART.4     
      ALLOCATE(SurfVars(MGx,NHEM,JGy,17))                                  NEWRESTART.5     
      CALL SHAREGRID(.TRUE.,MGPP,17,SurfVarsFull,SurfVars)                 NEWRESTART.6     
      IF (MyPe.EQ.0) DEALLOCATE(SurfVarsFull)                              INISURF.111   
!-----------------------------------------------------                     INISURF.112   
! Write to the surface variables                                           INISURF.113   
!-----------------------------------------------------                     INISURF.114   
      TSTAR(:,:,:)=SurfVars(:,:,:,1)                                       INISURF.115   
      TDEEP(:,:,:)=SurfVars(:,:,:,2)                                       INISURF.116   
      SMSTAR(:,:,:)=SurfVars(:,:,:,3)                                      INISURF.117   
      QSTAR(:,:,:)=SurfVars(:,:,:,4)                                       INISURF.118   
      HSNOW(:,:,:)=SurfVars(:,:,:,5)                                       INISURF.119   
      SQSTAR(:,:,:)=SurfVars(:,:,:,6)                                      INISURF.120   
      SALB(:,:,:)=SurfVars(:,:,:,7)                                        INISURF.121   
      SBAL(:,:,:)=SurfVars(:,:,:,8)                                        INISURF.122   
      TSTARO(:,:,:)=SurfVars(:,:,:,9)                                      INISURF.123   
      TDEEPO(:,:,:)=SurfVars(:,:,:,10)                                     INISURF.124   
      SNET(:,:,:)=SurfVars(:,:,:,11)                                       INISURF.125   
      TSTAROO(:,:,:)=SurfVars(:,:,:,12)                                    NEWRESTART.7     
      TSTARF(:,:,:)=SurfVars(:,:,:,13)                                     NEWRESTART.8     
      zsst_2d(:,:,:)=SurfVars(:,:,:,14)                                    NEWRESTART.9     
      SICECOV(:,:,:)=SurfVars(:,:,:,15)                                    NEWRESTART.10    
      zscur_2d(:,:,:)=SurfVars(:,:,:,16)                                   NEWRESTART.11    
      mscur_2d(:,:,:)=SurfVars(:,:,:,17)                                   NEWRESTART.12    
C                                                                          NEWRESTART.13    
      DEALLOCATE(SurfVars)                                                 INISURF.126   
!-----------------------------------------------------                     INISURF.127   
! Read in vegetation data                                                  INISURF.128   
!-----------------------------------------------------                     INISURF.129   
      if(mype.eq.0)then                                                    SURF_TYPE_BL.10    
      ALLOCATE(SvegeFull(MGPP,NHEM,JG))                                    SURF_TYPE_BL.11    
      OPEN(UNIT=31,FILE='vegetation.dat',FORM='FORMATTED')                 SURF_TYPE_BL.12    
      READ(31,*) SvegeFull                                                 SURF_TYPE_BL.13    
      CLOSE(31)                                                            SURF_TYPE_BL.14    
      endif                                                                SURF_TYPE_BL.15    
      CALL SHAREGRID(.TRUE.,MGPP,1,SvegeFull,SVEGE)                        SURF_TYPE_BL.16    
      if(mype.eq.0)DEALLOCATE(SvegeFull)                                   SURF_TYPE_BL.17    
      if(npe.gt.1)CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                   SURF_TYPE_BL.18    
                                                                           SURF_TYPE_BL.19    
! Albedo field initialised from vegetation index                           NEWRESTART.1     
!-----------------------------------------------------                     INISURF.179   
! Leave this routine                                                       INISURF.180   
!-----------------------------------------------------                     INISURF.181   
      RETURN                                                               INISURF.182   
!-----------------------------------------------------                     INISURF.183   
! Only get here if the file has been read beyond                           INISURF.184   
!-----------------------------------------------------                     INISURF.185   
 200  write (2,*) 'EOF on surface restart file'                            INISURF.186   
      write (2,*) 'Looking for day ',begday,' but closest was ',           INISURF.187   
     $     daynear                                                         INISURF.188   
      CALL ABORT                                                           INISURF.189   
      END                                                                  INISURF.190   
*ENDIF                                                                     INISURF.191   
*DECK BALANC                                                               BALANC.1     
!=====================================================                     BALANC.2     
! Temperature and surface pressure is obtained from relative vorticity     BALANC.3     
!=====================================================                     BALANC.4     
      SUBROUTINE BALANC                                                    BALANC.5     
      IMPLICIT NONE                                                        BALANC.6     
*CALL PARAM1                                                               BALANC.7     
*CALL PARAM2                                                               BALANC.8     
*CALL PARAM3                                                               BALANC.9     
*CALL BLANK                                                                BALANC.10    
*CALL SPECTR                                                               BALANC.11    
*CALL BATS                                                                 BALANC.12    
*CALL BALAN                                                                BALANC.13    
*CALL MPIDECK                                                              BALANC.14    
!-----------------------------------------------------                     BALANC.15    
! Local variables                                                          BALANC.16    
!-----------------------------------------------------                     BALANC.17    
      COMPLEX :: GP(NL)                                                    BALANC.18    
      COMPLEX :: TA,GSI1,VPS,TK,SRGT                                       BALANC.19    
      INTEGER :: IN                                                        BALANC.20    
! Loop variables                                                           BALANC.21    
      INTEGER :: I, IHEM, IM, J, L, M, MP, nT                              BALANC.22    
!-----------------------------------------------------                     BALANC.23    
! Note: 2-grid vertical temperature wave is not removed if orography       BALANC.24    
!       is included. Program aborts in INITAL if attempted.                BALANC.25    
!-----------------------------------------------------                     BALANC.26    
      DO IHEM=1,NHEM                                                       BALANC.27    
         DO IM=1,MMTyy(iRow)                                               BALANC.28    
            DO I=1,NNTxx(iCol)                                             BALANC.29    
               IN=nWave(I,IM,iCol)                                         BALANC.30    
               !---------------------------------------------------        BALANC.31    
               ! Skip the code below for 1st zonal wavenum' & ihem=1       BALANC.32    
               !---------------------------------------------------        BALANC.33    
               IF((IN+IHEM).GT.1) THEN                                     BALANC.34    
                  VPS=VP(I,IM,IHEM)                                        BALANC.35    
                  GSI1=GS(I,IM,IHEM)                                       BALANC.36    
                  DO L=1,NL                                                BALANC.37    
                     TA=(0.,0.)                                            BALANC.38    
                     DO M=1,NL                                             BALANC.39    
                        TA=TA+G(M,L)*TT(I,IM,IHEM,M)                       BALANC.40    
                     ENDDO                                                 BALANC.41    
                     TA=(T0(L)*VPS-TA)*DELT -                              BALANC.42    
     &                    RSQ(IN+IHEM)*DT(I,IM,IHEM,L)                     BALANC.43    
                     GP(L)=TA-GSI1                                         BALANC.44    
                  ENDDO                                                    BALANC.45    
                  SRGT=(0.,0.)                                             BALANC.46    
                  DO L=1,NL                                                BALANC.47    
                     TK=(0.,0.)                                            BALANC.48    
                     DO M=1,NL                                             BALANC.49    
                        TK=TK+RG(M,L)*GP(M)                                BALANC.50    
                     ENDDO                                                 BALANC.51    
                     T(I,IM,IHEM,L)=TK                                     BALANC.52    
                     SRGT=SRGT+BFILT(L)*TK                                 BALANC.53    
                  ENDDO                                                    BALANC.54    
                  SRGT=SRGT/SRGT0                                          BALANC.55    
                  SP(I,IM,IHEM)=SRGT                                       BALANC.56    
                  DO L=1,NL                                                BALANC.57    
                     T(I,IM,IHEM,L)=T(I,IM,IHEM,L)-RGT0(L)*SRGT            BALANC.58    
                  ENDDO                                                    BALANC.59    
               ENDIF                                                       BALANC.60    
            ENDDO                                                          BALANC.61    
         ENDDO                                                             BALANC.62    
      ENDDO                                                                BALANC.63    
                                                                           BALANC.64    
      IF (KOUNT.EQ.0) THEN                                                 BALANC.65    
         DO IHEM=1,NHEM                                                    BALANC.66    
            DO IM=1,MMTyy(iRow)                                            BALANC.67    
               DO IN=1,NNTxx(iCol)                                         BALANC.68    
                  SPMI(IN,IM,IHEM)=SP(IN,IM,IHEM)                          BALANC.69    
               ENDDO                                                       BALANC.70    
            ENDDO                                                          BALANC.71    
         ENDDO                                                             BALANC.72    
         DO L=1,NL                                                         BALANC.73    
            DO IHEM=1,NHEM                                                 BALANC.74    
               DO IM=1,MMTyy(iRow)                                         BALANC.75    
                  DO IN=1,NNTxx(iCol)                                      BALANC.76    
                     ZMI(IN,IM,IHEM,L)=Z(IN,IM,IHEM,L)                     BALANC.77    
                     DMI(IN,IM,IHEM,L)=D(IN,IM,IHEM,L)                     BALANC.78    
                     TMI(IN,IM,IHEM,L)=T(IN,IM,IHEM,L)                     BALANC.79    
                  ENDDO                                                    BALANC.80    
               ENDDO                                                       BALANC.81    
            ENDDO                                                          BALANC.82    
         ENDDO                                                             BALANC.83    
      ENDIF                                                                BALANC.84    
      RETURN                                                               BALANC.85    
      END                                                                  BALANC.86    
*DECK BLAYER                                                               BLAYER.1     
*IF DEF,ABOVE_V1                                                           BLAYER.2     
!=====================================================                     BLAYER.3     
! Surface layer fluxes for present latitude.                               BLAYER.4     
! Bulk aerodynamice formulation for lowest level tendencies.               BLAYER.5     
!=====================================================                     BLAYER.6     
      SUBROUTINE BLAYER(JH)                                                BLAYER.7     
      IMPLICIT NONE                                                        BLAYER.8     
*CALL PARAM1                                                               BLAYER.9     
*CALL PARAM2                                                               BLAYER.10    
*CALL PARAM3                                                               BLAYER.11    
*CALL BLANK                                                                BLAYER.12    
*CALL LEGAU                                                                BLAYER.13    
*CALL GRIDPA3                                                              BLAYER.14    
*CALL GRIDPC                                                               BLAYER.15    
*CALL PHYSCA                                                               BLAYER.16    
*CALL MPIDECK                                                              BLAYER.17    
!-----------------------------------------------------                     BLAYER.18    
! Passed argument                                                          BLAYER.19    
!-----------------------------------------------------                     BLAYER.20    
! Latitude index                                                           BLAYER.21    
      INTEGER, INTENT(IN) :: JH                                            BLAYER.22    
!-----------------------------------------------------                     BLAYER.23    
! Local variables                                                          BLAYER.24    
!-----------------------------------------------------                     BLAYER.25    
      REAL :: RCSJ, SQRC                                                   BLAYER.26    
      REAL :: CTAU, CSH                                                    BLAYER.27    
      REAL :: DRAGJ                                                        BLAYER.28    
      REAL :: VM, VMP                                                      BLAYER.29    
      REAL :: CVM                                                          BLAYER.30    
      REAL :: THNL                                                         BLAYER.31    
      REAL :: QSURF                                                        BLAYER.32    
      REAL :: DTH                                                          BLAYER.33    
      REAL :: DQ                                                           BLAYER.34    
! Loop variables                                                           BLAYER.35    
      INTEGER :: I, IHEM                                                   BLAYER.36    
!-----------------------------------------------------                     BLAYER.37    
!                                                                          BLAYER.38    
!-----------------------------------------------------                     BLAYER.39    
      RCSJ=SECSQ(JJ1(iRow)+JH,1)                                           BLAYER.40    
      SQRC=SQRT(RCSJ)                                                      BLAYER.41    
      DO IHEM=1,NHEM                                                       BLAYER.42    
*IF DEF,ONLY_V2                                                            BLAYER.43    
         CTAU=CD/TSTAR(JH,IHEM)                                            BLAYER.44    
         CSH =CTAU/AKAP                                                    BLAYER.45    
         DRAGJ=DRAG/TSTAR(JH,IHEM)                                         BLAYER.46    
         DO I=1,MGxx(iCol)                                                 BLAYER.47    
*ELSE                                                                      BLAYER.48    
         DO I=1,MGxx(iCol)                                                 BLAYER.49    
            BLCD(I,IHEM)=CD                                                BLAYER.50    
            CTAU=CD/TSTAR(I,IHEM,JH)                                       BLAYER.51    
            CSH =CTAU/AKAP                                                 BLAYER.52    
            DRAGJ=CD*DRAG/TSTAR(I,IHEM,JH)                                 BLAYER.53    
                                                                           BLAYER.54    
*ENDIF                                                                     BLAYER.55    
            VM=SQRT(RCSJ*(UG3(I,IHEM,JH,NL)*UG3(I,IHEM,JH,NL)+             BLAYER.56    
     &           VG3(I,IHEM,JH,NL)*VG3(I,IHEM,JH,NL)))                     BLAYER.57    
            VMP=VM+BLVAD                                                   BLAYER.58    
            CVM=DRAGJ*VMP                                                  BLAYER.59    
            FUG3(I,IHEM,JH,NL)=-CVM*UG3(I,IHEM,JH,NL)                      BLAYER.60    
            FVG3(I,IHEM,JH,NL)=-CVM*VG3(I,IHEM,JH,NL)                      BLAYER.61    
            CVM=CTAU*PLG3(I,IHEM,JH)*VMP*SQRC                              BLAYER.62    
            TXBL(I,IHEM)=CVM*UG3(I,IHEM,JH,NL)                             BLAYER.63    
            TYBL(I,IHEM)=CVM*VG3(I,IHEM,JH,NL)                             BLAYER.64    
            THNL=TG3(I,IHEM,JH,NL)/SKAP(NL)                                BLAYER.65    
*IF DEF,ONLY_V2                                                            BLAYER.66    
            DTH=TSTAR(JH,IHEM)-THNL                                        BLAYER.67    
            DQ=BLRH*(QSTAR(JH,IHEM)-TRAG3(I,IHEM,JH,NL,1))                 BLAYER.68    
*ELSE                                                                      BLAYER.69    
            !-----------------------------------------------------         BLAYER.70    
            ! The next line prevents condensation onto a warm surface,     BLAYER.71    
            ! which doesn't happen in reality due to the surface           BLAYER.72    
            ! effectively becoming saturated after a very small amount     BLAYER.73    
            ! of condensation has occurred                                 BLAYER.74    
            !-----------------------------------------------------         BLAYER.75    
            QSURF=QSTAR(I,IHEM,JH)                                         BLAYER.76    
            IF (.NOT.LCOND) THEN                                           BLAYER.77    
               QSURF=MIN(SQSTAR(I,IHEM,JH),                                BLAYER.78    
     &              MAX(QSTAR(I,IHEM,JH),TRAG3(I,IHEM,JH,NL,1)))           BLAYER.79    
            ENDIF                                                          BLAYER.80    
            DTH=TSTAR(I,IHEM,JH)-THNL                                      BLAYER.81    
            DQ=BLRH*(QSURF-TRAG3(I,IHEM,JH,NL,1))                          BLAYER.82    
*ENDIF                                                                     BLAYER.83    
            BLVB(I,IHEM)=BLA*SQRT(ABS(DTH)/                                BLAYER.84    
*IF DEF,ONLY_V2                                                            BLAYER.85    
     &           (0.5*(THNL+TSTAR(JH,IHEM))))                              BLAYER.86    
*ELSE                                                                      BLAYER.87    
     &           (0.5*(THNL+TSTAR(I,IHEM,JH))))                            BLAYER.88    
*ENDIF                                                                     BLAYER.89    
            IF (DTH.LT.0.0) THEN                                           BLAYER.90    
               BLVB(I,IHEM)=0.0                                            BLAYER.91    
            END IF                                                         BLAYER.92    
            VMP=VM+BLVB(I,IHEM)                                            BLAYER.93    
            CVM=0.2*DRAGJ*VMP                                              BLAYER.94    
            TNLG3(I,IHEM,JH,NL)=CVM*DTH                                    BLAYER.95    
            TRANLG3(I,IHEM,JH,NL,1)=CVM*DQ                                 BLAYER.96    
            CVM=0.2*CSH*PLG3(I,IHEM,JH)*VMP                                BLAYER.97    
            SHBL(I,IHEM,JH)=CVM*DTH                                        BLAYER.98    
*IF DEF,ONLY_V2                                                            BLAYER.99    
            SLBL(I,IHEM,JH)=CVM*CTQ*DQ                                     BLAYER.100   
*ELSE                                                                      BLAYER.101   
            !-----------------------------------------------------         BLAYER.102   
            ! Choose appropriate value of latent heat based on             BLAYER.103   
            ! ground T, ie, we assume it snows if the ground is            BLAYER.104   
            ! colder than 273.15K                                          BLAYER.105   
            !-----------------------------------------------------         BLAYER.106   
            IF (tstar(I,IHEM,JH).gt.0.363224029) THEN                      BLAYER.107   
               slbl(I,IHEM,JH)=cvm*ctq*dq                                  BLAYER.108   
            ELSE                                                           BLAYER.109   
               slbl(I,IHEM,JH)=cvm*ctqi*dq                                 BLAYER.110   
            ENDIF                                                          BLAYER.111   
*ENDIF                                                                     BLAYER.112   
            UG3(I,IHEM,JH,NL)=UG3(I,IHEM,JH,NL)+                           BLAYER.113   
     &           DELT2C*FUG3(I,IHEM,JH,NL)                                 BLAYER.114   
            VG3(I,IHEM,JH,NL)=VG3(I,IHEM,JH,NL)+                           BLAYER.115   
     &           DELT2C*FVG3(I,IHEM,JH,NL)                                 BLAYER.116   
            TG3(I,IHEM,JH,NL)=TG3(I,IHEM,JH,NL)+                           BLAYER.117   
     &           DELT2C*TNLG3(I,IHEM,JH,NL)                                BLAYER.118   
            TRAG3(I,IHEM,JH,NL,1)=TRAG3(I,IHEM,JH,NL,1)+                   BLAYER.119   
     &           DELT2C*TRANLG3(I,IHEM,JH,NL,1)                            BLAYER.120   
         ENDDO                                                             BLAYER.121   
      ENDDO                                                                BLAYER.122   
      RETURN                                                               BLAYER.123   
      END                                                                  BLAYER.124   
*ENDIF                                                                     BLAYER.125   
*DECK BLSURF                                                               BLSURF.1     
*IF DEF,ONLY_V3                                                            BLSURF.2     
!=====================================================                     BLSURF.3     
! Perform time-splitting integration of the boundary layer and             BLSURF.4     
! Surface scheme together for a whole timestep                             BLSURF.5     
! In the case of LSL or LOC being false, should forget the                 BLSURF.6     
! timesplitting and just do the BL stuff (leave the surface alone)         BLSURF.7     
!=====================================================                     BLSURF.8     
      SUBROUTINE BLSURF(JH)                                                BLSURF.9     
      IMPLICIT NONE                                                        BLSURF.10    
*CALL PARAM1                                                               BLSURF.11    
*CALL PARAM2                                                               BLSURF.12    
*CALL PARAM3                                                               BLSURF.13    
*CALL BLANK                                                                BLSURF.14    
*CALL LEGAU                                                                BLSURF.15    
*CALL GRIDPA3                                                              BLSURF.16    
*CALL GRIDPC                                                               BLSURF.17    
*CALL BATS                                                                 BLSURF.18    
*CALL PHYSCA                                                               BLSURF.19    
*CALL CPIERS                                                               BLSURF.20    
*CALL OROG_G                                                               BLSURF.21    
*CALL MPIDECK                                                              BLSURF.22    
*CALL PARAMH                                                               OAS_COMTILE.92    
*CALL AOfields                                                             OAS_COMTILE.93    
*CALL OAfields                                                             OAS_COMTILE.94    
       REAL deltasnow                                                      OAS_COMTILE.95    
                                                                           OAS_COMTILE.96    
!-----------------------------------------------------                     BLSURF.23    
! Passed argument                                                          BLSURF.24    
!-----------------------------------------------------                     BLSURF.25    
! Latitude index                                                           BLSURF.26    
      INTEGER, INTENT(IN) :: JH                                            BLSURF.27    
!-----------------------------------------------------                     BLSURF.28    
! External function                                                        BLSURF.29    
!-----------------------------------------------------                     BLSURF.30    
      REAL, EXTERNAL :: PQSAT                                              BLSURF.31    
!-----------------------------------------------------                     BLSURF.32    
! Local variables                                                          BLSURF.33    
!-----------------------------------------------------                     BLSURF.34    
      REAL :: SZLOOK(24)                                                   BLSURF.35    
! Set up values for reference pressure and various temperatures            BLSURF.39    
! in non-dimensionalised form                                              BLSURF.40    
      REAL, PARAMETER :: TZC=273.15                                        BLSURF.41    
      REAL :: dum                                                          BLSURF.42    
      LOGICAL :: LSLH,LOCH                                                 BLSURF.43    
      INTEGER :: IFIRST                                                    BLSURF.44    
      DATA IFIRST/1/                                                       BLSURF.45    
      INTEGER :: Mpth1                                                     BLSURF.46    
      REAL :: ApFRAC                                                       BLSURF.47    
      REAL :: tp1, tz, tm2, tm3                                            BLSURF.48    
      REAL :: DELTL, DELTO                                                 BLSURF.49    
      REAL :: ssmc23, ssmc13, srsum                                        BLSURF.50    
      REAL :: RCSJ, SQRC                                                   BLSURF.51    
      REAL :: RSIGF                                                        BLSURF.52    
C      REAL :: RGZ0L, RGZ0O                                                SURF_TYPE_BL.39    
      REAL :: RGZ0L, RGZ0O, RGZ0IW, RGZ0IC                                 SURF_TYPE_BL.40    
      INTEGER :: MAXITER                                                   BLSURF.54    
      REAL :: DELTU                                                        BLSURF.55    
                                                                           BLSURF.56    
      INTEGER :: MPth2                                                     BLSURF.57    
      REAL :: RGZ0                                                         BLSURF.58    
      REAL :: TSCUR, TDCUR                                                 BLSURF.59    
      REAL :: QCUR, SQCUR                                                  BLSURF.60    
      REAL :: QNLGS, TNLGS                                                 BLSURF.61    
      REAL :: UNLGS, VNLGS                                                 BLSURF.62    
      REAL :: SHBLS, SLBLS                                                 BLSURF.63    
      REAL :: BLCDS, BLVBS                                                 BLSURF.64    
      REAL :: TXBLS, TYBLS                                                 BLSURF.65    
      REAL :: SRH                                                          BLSURF.66    
      REAL :: THNL                                                         BLSURF.67    
      REAL :: THBAR                                                        BLSURF.68    
      REAL :: RZZ0, RLZZ02                                                 BLSURF.69    
      REAL :: CTAU, CSH                                                    BLSURF.70    
      REAL :: DRAGJ                                                        BLSURF.71    
      REAL :: VM, VMP                                                      BLSURF.72    
      REAL :: CVM                                                          BLSURF.73    
      REAL :: DTH, DQ                                                      BLSURF.74    
      REAL :: SFC                                                          BLSURF.75    
      REAL :: rkappa                                                       BLSURF.76    
      REAL :: pc1, pc2                                                     BLSURF.77    
      REAL :: hc1, hc2                                                     BLSURF.78    
      REAL :: trans                                                        BLSURF.79    
      REAL :: rct1, rct2                                                   BLSURF.80    
      REAL :: OCF                                                          BLSURF.81    
      REAL :: hc                                                           BLSURF.82    
      REAL :: dts                                                          BLSURF.83    
      real :: TGBSOC,QGBSOC,QGBSOC2,UGBSOC,VGBSOC                          OAS_COMTILE.1     
      real :: UNLGJNL,VNLGJNL,TNLGJNL,QNLGJNL                              OAS_COMTILE.2     
      real :: SHBLJ,SLBLJ,TXBLJ,TYBLJ,BLVBJ                                OAS_COMTILE.3     
      real :: stempbs0,stempbs3,tscurw,escon,snowexcess                    OAS_COMTILE.4     
      real :: restorice,tspd                                               OAS_COMTILE.5     
      real :: UG3CUR, VG3CUR,UGBSOCUR,VGBSOCUR                             OAS_COMTILE.6     
      integer :: ifsstj                                                    OAS_COMTILE.7     
! Loop variables                                                           BLSURF.84    
      INTEGER :: I, IHEM, iMon, ITER, L                                    BLSURF.85    
       REAL VMPCD                                                          SURF_TYPE_BL.150   
       REAL TICEFORM  ! Temperature at which ice forms                     SURF_TYPE_BL.151   
       REAL TICESNOW  ! Temperature at which ice covered with snow         SURF_TYPE_BL.152   
!-----------------------------------------------------                     BLSURF.86    
! Only need to read in flux data once                                      BLSURF.87    
!-----------------------------------------------------                     BLSURF.88    
      SAVE IFIRST, MPth1, MPth2                                            OAS_TEST.156   
!-----------------------------------------------------                     BLSURF.90    
! Lookup table for vegetation to Z0: from Unified Model Doc. no. 70        BLSURF.91    
! Snow free lookup table                            MMJ April 2000         BLSURF.92    
!-----------------------------------------------------                     BLSURF.93    
                                                                           SURF_TYPE_BL.41    
C Roughness length as a function of land surface type or ocean             SURF_TYPE_BL.42    
                                                                           SURF_TYPE_BL.43    
       DATA SZLOOK /0.0001,0.03,0.001,                                     SURF_TYPE_BL.44    
     & 0.1,0.1,0.1,0.1,0.1,0.1,0.1,                                        SURF_TYPE_BL.45    
     & 0.05,0.05,0.05,0.05,                                                SURF_TYPE_BL.46    
     & 0.05,0.05,0.05,0.05,0.05,0.05,0.05,                                 SURF_TYPE_BL.47    
     & 0.03,0.03,0.03/                                                     SURF_TYPE_BL.48    
!-----------------------------------------------------                     BLSURF.98    
! THIS BIT READS IN RUN 1.0 (10 year ocean flux)                           BLSURF.99    
! 30-3-98  PMF                                                             BLSURF.100   
!-----------------------------------------------------                     BLSURF.101   
      IF (IFIRST.EQ.1.AND.LOC) THEN                                        BLSURF.102   
         IFIRST=0                                                          BLSURF.103   
      ENDIF                                                                BLSURF.136   
!-----------------------------------------------------                     BLSURF.137   
! SORT OUT TIMINGS                                                         BLSURF.138   
!-----------------------------------------------------                     BLSURF.139   
      IF (JH.EQ.1.AND.LOC) THEN                                            BLSURF.140   
         CALL CALNDR(DOY,Mpth1,ApFRAC)                                     BLSURF.141   
         MPth2=mpth1+1                                                     BLSURF.142   
         if (mpth2.eq.13) mpth2=1                                          BLSURF.143   
      ENDIF                                                                BLSURF.144   
      tp1=(tzc+1.)/ct                                                      BLSURF.145   
      tz=tzc/ct                                                            BLSURF.146   
      tm2=(tzc-1.9)/ct    ! Also done in T42.accum                         OAS_TEST.162   
C Temperature at which ice forms > -1.9C (brine freezing point)            OAS_TEST.163   
C because this is the average temperature of a 30m thick layer of ocean    OAS_TEST.164   
C Polar ocean is sensitive to this: keep between -1.5 and -0.5C.           OAS_TEST.165   
      TICEFORM=(tzc-1.5)/ct                                                OAS_TEST.166   
C Temperature at which albedo of ice is sasnow, also temperature           OAS_TEST.167   
C at which ice thickness is SHCI (2m) + thickness > -2C (1m)               OAS_TEST.168   
C which is maximum thickness observed in Arctic                            OAS_TEST.169   
      TICESNOW=(tzc-7.0)/ct                                                OAS_TEST.170   
C Timescale in days of restoring topmost ocean layer to -2C                OAS_TEST.171   
C 2 days appropriate if ocean cooled by intense mixing                     OAS_TEST.172   
      restorice=10.                                                        OAS_TEST.173   
      tspd=real(itspd)                                                     OAS_TEST.174   
C Warm ice roughness height > -2C < 0C                                     OAS_TEST.175   
      RGZ0IW=1.0E-2/2.2E4                                                  OAS_TEST.176   
C Cold ice roughness height =< -2C                                         OAS_TEST.177   
      RGZ0IC=1.0E-2/2.2E4                                                  OAS_TEST.178   
!-----------------------------------------------------                     BLSURF.149   
! Set up the number of timesplitting levels for land and ocean,            BLSURF.150   
! also the timesteps.                                                      BLSURF.151   
!-----------------------------------------------------                     BLSURF.152   
      DELTL=DELT2C/REAL(ITSLL)                                             BLSURF.153   
      DELTO=DELT2C/REAL(ITSLO)                                             BLSURF.154   
!-----------------------------------------------------                     BLSURF.155   
! Set up some more constants for the soil scheme                           BLSURF.156   
!-----------------------------------------------------                     BLSURF.157   
      ssmc23=ssmc*(2./3.)                                                  BLSURF.158   
      ssmc13=ssmc*(1./3.)                                                  BLSURF.159   
      srsum=sd1/skse+sd2/skse                                              BLSURF.160   
!-----------------------------------------------------                     BLSURF.161   
! And some for the BL scheme                                               BLSURF.162   
!-----------------------------------------------------                     BLSURF.163   
      RCSJ=SECSQ(JJ1(iRow)+JH,1)                                           BLSURF.164   
      SQRC=SQRT(RCSJ)                                                      BLSURF.165   
      RSIGF=2.*(1.0-SIGMA(NL))/(1.0+SIGMA(NL))                             BLSURF.166   
!-----------------------------------------------------                     BLSURF.175   
! Now begin looping over gridpoints                                        BLSURF.176   
!-----------------------------------------------------                     BLSURF.177   
      DO IHEM=1,NHEM                                                       BLSURF.178   
         DO I=1,MGxx(iCol)                                                 BLSURF.179   
        TGBSOC=TG3(I,IHEM,JH,NL)                                           OAS_COMTILE.20    
        QGBSOC=TRAG3(I,IHEM,JH,NL,1)                                       OAS_COMTILE.21    
        QGBSOC2=TRAG3(I,IHEM,JH,NL,1)                                      OAS_COMTILE.22    
        UGBSOC=UG3(I,IHEM,JH,NL)                                           OAS_COMTILE.23    
        VGBSOC=VG3(I,IHEM,JH,NL)                                           OAS_COMTILE.24    
c not used                                                                 OAS_COMTILE.25    
c      stempbs0=0.                                                         OAS_COMTILE.26    
c      do l=1,nl                                                           OAS_COMTILE.27    
c      stempbs0=stempbs0+TRAG3(I,IHEM,JH,L,1)*clr(l)                       OAS_COMTILE.28    
c      end do                                                              OAS_COMTILE.29    
            oceaniceflux(i,ihem)=0.0                                       OAS_TEST.179   
            !-----------------------------------------------------         BLSURF.180   
            ! Get land roughness lengths from vegetation index             BLSURF.181   
            !-----------------------------------------------------         BLSURF.182   
            RGZ0L=SZLOOK(NINT(SVEGE(I,IHEM,JH)))/2.2E4                     BLSURF.183   
            !-----------------------------------------------------         BLSURF.184   
            ! Now do a single gridpoint                                    BLSURF.185   
            !-----------------------------------------------------         BLSURF.186   
            LSLH=(LSL.and.(GSG(I,IHEM,jh).gt.0.))                          BLSURF.187   
            LOCH=(LOC.and.(GSG(I,IHEM,jh).le.0.))                          BLSURF.188   
            if (GSG(I,IHEM,jh).gt.0.) then                                 BLSURF.189   
               MAXITER=ITSLL                                               BLSURF.190   
               DELTU=DELTL                                                 BLSURF.191   
               RGZ0=RGZ0L                                                  BLSURF.192   
               if (LSL) then                                               BLSURF.193   
                  TSCUR=TSTARO(I,IHEM,JH)                                  BLSURF.194   
                  TDCUR=TDEEPO(I,IHEM,JH)                                  BLSURF.195   
               else                                                        BLSURF.196   
                  TSCUR=TSTAR(I,IHEM,JH)                                   BLSURF.197   
                  QCUR=QSTAR(I,IHEM,JH)                                    BLSURF.198   
                  SQCUR=SQSTAR(I,IHEM,JH)                                  BLSURF.199   
               endif                                                       BLSURF.200   
            else                                                           BLSURF.201   
                                                                           OAS_TEST.180   
c put ssts in here now, Arctic special case first: polewards of 86.5N      OAS_TEST.181   
C which is one gridpoint at T42                                            OAS_TEST.182   
                                                                           OAS_TEST.183   
               if(SI(JJ1(iRow)+JH,IHEM) .gt. 0.9981)then                   OAS_TEST.184   
C                 if(kount.gt.kstart+1)then                                OAS_TEST.185   
                 if(kount.gt.1)then                                        OAS_TEST.186   
                   if (LOCH) then                                          OAS_TEST.187   
C Updating of surface temperature depends on sea-ice cover                 OAS_TEST.188   
                     if(sicecov(i,ihem,jh).lt.0.5)then                     OAS_TEST.189   
                       tstaro(I,IHEM,JH)=zsst_2d(I,IHEM,JH)*GASCON/CG      OAS_TEST.190   
                     else                                                  OAS_TEST.191   
                       tscurw=zsst_2d(I,IHEM,jh)*GASCON/CG                 OAS_TEST.192   
C Relaxation to sea-ice base temp at -2C                                   OAS_TEST.193   
           oceaniceflux(I,IHEM)=(tscurw-max(TSTARO(I,IHEM,JH),tm2))*       OAS_TEST.194   
     $                           shco/restorice/tspd/DELT2C                OAS_TEST.195   
                     endif                                                 OAS_TEST.196   
                  else                                                     OAS_TEST.197   
                    tstar(I,IHEM,jh)=zsst_2d(I,IHEM,jh)*GASCON/CG          OAS_TEST.198   
                  end if                                                   OAS_TEST.199   
                endif                                                      OAS_TEST.200   
              endif                                                        OAS_TEST.201   
                                                                           OAS_TEST.202   
c put ssts in here now, moved from SFCT                                    OAS_TEST.203   
                                                                           OAS_TEST.204   
              if(ofrac(I,IHEM,jh).gt.0)then                                OAS_TEST.205   
C                if(kount.gt.kstart+1)then                                 OAS_TEST.206   
                if(kount.gt.1)then                                         OAS_TEST.207   
                  if (LOCH) then                                           OAS_TEST.208   
C Updating of surface temperature depends on sea-ice cover                 OAS_TEST.209   
                    if(sicecov(i,ihem,jh).lt.0.5)then                      OAS_TEST.210   
                      tstaro(I,IHEM,JH)=zsst_2d(I,IHEM,JH)*GASCON/CG       OAS_TEST.211   
                    else                                                   OAS_TEST.212   
                      tscurw=zsst_2d(I,IHEM,jh)*GASCON/CG                  OAS_TEST.213   
C Relaxation to sea-ice base temp at -2C                                   OAS_TEST.214   
              oceaniceflux(I,IHEM)=(tscurw-max(TSTARO(I,IHEM,JH),tm2))*    OAS_TEST.215   
     $                           shco/restorice/tspd/DELT2C                OAS_TEST.216   
                    endif                                                  OAS_TEST.217   
                  else                                                     OAS_TEST.218   
                    tstar(I,IHEM,jh)=zsst_2d(I,IHEM,jh)*GASCON/CG          OAS_TEST.219   
                  end if                                                   OAS_TEST.220   
                endif                                                      OAS_TEST.221   
              endif                                                        OAS_TEST.222   
               MAXITER=ITSLO                                               BLSURF.202   
               DELTU=DELTO                                                 BLSURF.203   
               if (LOC) then                                               BLSURF.205   
                  TSCUR=TSTARO(I,IHEM,JH)                                  BLSURF.206   
               else                                                        BLSURF.207   
                                                                           OAS_TEST.223   
c again, moved from SFCT now that sst assignment moved                     OAS_TEST.224   
                  escon=1./PLG3(I,IHEM,JH)                                 OAS_TEST.225   
                  sqstar(I,IHEM,JH)=escon*pqsat(tstar(I,IHEM,JH))          OAS_TEST.226   
                  qstar(I,IHEM,JH)=sqstar(I,IHEM,JH)                       OAS_TEST.227   
                  TSCUR=TSTAR(I,IHEM,JH)                                   BLSURF.208   
                  QCUR=QSTAR(I,IHEM,JH)                                    BLSURF.209   
                  SQCUR=SQSTAR(I,IHEM,JH)                                  BLSURF.210   
               endif                                                       BLSURF.211   
C Used with VMPCD code: Cd increases with windspeed                        SURF_TYPE_BL.49    
               RGZ0O=SZLOOK(NINT(SVEGE(I,IHEM,JH)))/2.2E4                  SURF_TYPE_BL.50    
C Ice Roughness length depends on Tsurf                                    SURF_TYPE_BL.51    
               RGZ0=RGZ0O                                                  SURF_TYPE_BL.52    
               if(tscur.le.tz)RGZ0=RGZ0IW                                  SURF_TYPE_BL.53    
               if(tscur.le.tm2)RGZ0=RGZ0IC                                 SURF_TYPE_BL.54    
            endif                                                          BLSURF.212   
                                                                           BLSURF.213   
            QNLGS=0.                                                       BLSURF.214   
            TNLGS=0.                                                       BLSURF.215   
            UNLGS=0.                                                       BLSURF.216   
            VNLGS=0.                                                       BLSURF.217   
            SHBLS=0.                                                       BLSURF.218   
            SLBLS=0.                                                       BLSURF.219   
            BLCDS=0.                                                       BLSURF.220   
            BLVBS=0.                                                       BLSURF.221   
            TXBLS=0.                                                       BLSURF.222   
            TYBLS=0.                                                       BLSURF.223   
                                                                           BLSURF.224   
c------get runoff here                                                     OAS_ACCUM_TILE.12    
       exwat(I,IHEM,jh)=0.                                                 OAS_ACCUM_TILE.13    
       exiwat(I,IHEM,jh)=0.                                                OAS_ACCUM_TILE.14    
       exiwatn(I,IHEM,jh)=0.                                               OAS_ACCUM_TILE.15    
            do iter=1,MAXITER                                              BLSURF.225   
               !-----------------------------------------------------      BLSURF.226   
               ! If we have interactive soil, calculate surface            BLSURF.227   
               ! humidities                                                BLSURF.228   
               !-----------------------------------------------------      BLSURF.229   
               if (LSLH) then                                              BLSURF.230   
C Soil moisture conservation done in SURFM                                 OAS_ACCUM_TILE.16    
                  if ((smstar(I,IHEM,jh).gt.ssmc23)                        OAS_ACCUM_TILE.17    
     &                    .or.(hsnow(I,IHEM,jh).gt.0.)) then               BLSURF.235   
                     srh=1.                                                BLSURF.236   
                  else if (smstar(I,IHEM,jh).gt.ssmc13) then               BLSURF.237   
                     srh=(smstar(I,IHEM,jh)/ssmc13)-1.                     BLSURF.238   
                  else                                                     BLSURF.239   
                     srh=0.                                                BLSURF.240   
                  endif                                                    BLSURF.241   
                  sqcur=pqsat(tscur)/PLG3(I,IHEM,JH)                       BLSURF.242   
                  qcur=srh*sqcur                                           BLSURF.243   
               endif                                                       BLSURF.244   
               !-----------------------------------------------------      BLSURF.245   
               ! Ditto for interactive ocean                               BLSURF.246   
               !-----------------------------------------------------      BLSURF.247   
               if (LOCH) then                                              BLSURF.248   
                  sqcur=pqsat(tscur)/PLG3(I,IHEM,JH)                       BLSURF.249   
                  qcur=sqcur                                               BLSURF.250   
               endif                                                       BLSURF.251   
                                                                           BLSURF.252   
C Surface winds used by BL routine UG3CUR,VG3CUR are                       OAS_COMTILE.10    
C atmospheric winds minus nondimensionalised surface current               OAS_COMTILE.11    
C Updated here since UG3 and VG3 are updated during ITER loop              OAS_COMTILE.12    
                                                                           OAS_COMTILE.13    
               UG3CUR=UG3(I,IHEM,JH,NL)-zscur_2d(I,IHEM,JH)/SQRC/CV        OAS_COMTILE.14    
               VG3CUR=VG3(I,IHEM,JH,NL)-mscur_2d(I,IHEM,JH)/SQRC/CV        OAS_COMTILE.15    
               THNL=TG3(I,IHEM,JH,NL)/SKAP(NL)                             BLSURF.253   
               THBAR=0.5*(THNL+TSCUR)                                      BLSURF.254   
               RZZ0=RSIGF*THBAR/RGZ0                                       BLSURF.255   
               RLZZ02=(LOG(RZZ0))**2                                       BLSURF.256   
               !-----------------------------------------------------      SURF_TYPE_BL.153   
               ! CALCULATE WIND SPEED, INCLUDING MINIMUM                   SURF_TYPE_BL.154   
               !-----------------------------------------------------      SURF_TYPE_BL.155   
C Surface winds used by BL routine UG3CUR,VG3CUR are                       SURF_TYPE_BL.156   
C atmospheric winds minus nondimensionalised surface current               SURF_TYPE_BL.157   
               VM=SQRT(RCSJ*(UG3CUR*UG3CUR+                                SURF_TYPE_BL.158   
     &              VG3CUR*VG3CUR))                                        SURF_TYPE_BL.159   
               VMP=VM+BLVAD                                                SURF_TYPE_BL.160   
               VMPCD=MIN(VMP*CV,40.0)                                      SURF_TYPE_BL.161   
               !-----------------------------------------------------      BLSURF.257   
               ! CD=(K/LN(Z/Z0))**2, K=0.41                                BLSURF.258   
               !-----------------------------------------------------      BLSURF.259   
               CD=0.1681/RLZZ02                                            BLSURF.260   
C Ocean Cd=f(Z0)+f(VMP); Max Cd=0.003 at VMP=40m/s without ice cover       SURF_TYPE_BL.162   
C From Wu (1980) JPO v10 p727; assumes V(NL)~=(4/3)**V(10m)                SURF_TYPE_BL.163   
               if(GSG(I,IHEM,JH).le.0.0.and.sicecov(i,ihem,jh).lt.0.5)     SURF_TYPE_BL.164   
     &         CD=CD+5.6E-5*VMPCD                                          SURF_TYPE_BL.165   
C increase southern ocean Cd: continuous swell means more surface area     SURF_TYPE_BL.166   
C experimental and commented out                                           SURF_TYPE_BL.167   
C              CD=CD*(1.0+                                                 SURF_TYPE_BL.168   
C     &         0.2*exp(-((SI(JJ1(iRow)+J,IHEM)+0.87)/0.15)**2))           SURF_TYPE_BL.169   
               blcds=blcds+cd/REAL(maxiter)                                BLSURF.261   
               CTAU=CD/TSCUR                                               BLSURF.262   
               CSH=CTAU/AKAP                                               BLSURF.263   
               DRAGJ=CD*DRAG/TSCUR                                         BLSURF.264   
               !-----------------------------------------------------      BLSURF.271   
               ! CALCULATE SURFACE STRESS AND LOWEST LEVEL FRICTION        BLSURF.272   
               !-----------------------------------------------------      BLSURF.273   
               CVM=DRAGJ*VMP                                               BLSURF.274   
               FUG3(I,IHEM,JH,NL)=-CVM*UG3CUR                              OAS_COMTILE.16    
               UNLGS=UNLGS+FUG3(I,IHEM,JH,NL)/REAL(MAXITER)                BLSURF.276   
               FVG3(I,IHEM,JH,NL)=-CVM*VG3CUR                              OAS_COMTILE.17    
               VNLGS=VNLGS+FVG3(I,IHEM,JH,NL)/REAL(MAXITER)                BLSURF.278   
               CVM=CTAU*PLG3(I,IHEM,JH)*VMP*SQRC                           BLSURF.279   
               TXBL(I,IHEM)=CVM*UG3CUR                                     OAS_COMTILE.18    
               TXBLS=TXBLS+TXBL(I,IHEM)/REAL(MAXITER)                      BLSURF.281   
               TYBL(I,IHEM)=CVM*VG3CUR                                     OAS_COMTILE.19    
               TYBLS=TYBLS+TYBL(I,IHEM)/REAL(MAXITER)                      BLSURF.283   
               !-----------------------------------------------------      BLSURF.284   
               ! CALCULATE SENSIBLE AND LATENT HEAT FLUXES                 BLSURF.285   
               !-----------------------------------------------------      BLSURF.286   
               QCUR=MIN(SQCUR,MAX(QCUR,TRAG3(I,IHEM,JH,NL,1)))             BLSURF.287   
               DTH=TSCUR-THNL                                              BLSURF.288   
               DQ=BLRH*(QCUR-TRAG3(I,IHEM,JH,NL,1))                        BLSURF.289   
               BLVB(I,IHEM)=0.                                             BLSURF.290   
C Enhancement of surface-air transfer when unstable                        SURF_TYPE_BL.140   
C VMP=VM+5*BLVB should be VMP=VM+VM*BLVB from Forster et al 2000           SURF_TYPE_BL.141   
C 5.95*RLZZO2 = 1/Cd; RGZ0 includes a factor of g                          SURF_TYPE_BL.142   
C Limit BLVB to 4*VM gustiness factor                                      SURF_TYPE_BL.143   
                                                                           SURF_TYPE_BL.144   
               IF (DTH.GT.0.)                                              SURF_TYPE_BL.145   
     $         BLVB(I,IHEM)=5.95*RLZZ02*SQRT(RGZ0*DTH/THBAR)               SURF_TYPE_BL.146   
               VMP=VM+VM*MIN(BLVB(I,IHEM)*CV,4.0)                          SURF_TYPE_BL.147   
C Bug fix: add calculation of BLVBS                                        SURF_TYPE_BL.148   
               blvbs=blvbs+BLVB(I,IHEM)/real(maxiter)                      SURF_TYPE_BL.149   
               CVM=0.2*DRAGJ*VMP                                           BLSURF.300   
               TNLG3(I,IHEM,JH,NL)=CVM*DTH                                 BLSURF.301   
               TNLGS=TNLGS+TNLG3(I,IHEM,JH,NL)/REAL(MAXITER)               BLSURF.302   
               TRANLG3(I,IHEM,JH,NL,1)=CVM*DQ                              BLSURF.303   
               QNLGS=QNLGS+TRANLG3(I,IHEM,JH,NL,1)/REAL(MAXITER)           BLSURF.304   
               CVM=0.2*CSH*PLG3(I,IHEM,JH)*VMP                             BLSURF.305   
               SHBL(I,IHEM,JH)=CVM*DTH                                     BLSURF.306   
               SHBLS=SHBLS+SHBL(I,IHEM,JH)/REAL(MAXITER)                   BLSURF.307   
               !-----------------------------------------------------      BLSURF.308   
               ! CHOOSE APPROPRIATE LATENT HEAT                            BLSURF.309   
               !-----------------------------------------------------      BLSURF.310   
               IF (TSCUR.GT.TZ) THEN                                       BLSURF.311   
                  SLBL(I,IHEM,JH)=CVM*CTQ*DQ                               BLSURF.312   
               ELSE                                                        BLSURF.313   
                  SLBL(I,IHEM,JH)=CVM*CTQI*DQ                              BLSURF.314   
               ENDIF                                                       BLSURF.315   
               SLBLS=SLBLS+SLBL(I,IHEM,JH)/REAL(MAXITER)                   BLSURF.316   
               UG3(I,IHEM,JH,NL)=UG3(I,IHEM,JH,NL)+                        BLSURF.317   
     &              DELTU*FUG3(I,IHEM,JH,NL)                               BLSURF.318   
               VG3(I,IHEM,JH,NL)=VG3(I,IHEM,JH,NL)+                        BLSURF.319   
     &              DELTU*FVG3(I,IHEM,JH,NL)                               BLSURF.320   
               TG3(I,IHEM,JH,NL)=TG3(I,IHEM,JH,NL)+                        BLSURF.321   
     &              DELTU*TNLG3(I,IHEM,JH,NL)                              BLSURF.322   
               TRAG3(I,IHEM,JH,NL,1)=TRAG3(I,IHEM,JH,NL,1)+                BLSURF.323   
     &              DELTU*TRANLG3(I,IHEM,JH,NL,1)                          BLSURF.324   
                                                                           BLSURF.325   
               if (LSLH) then                                              BLSURF.326   
                  !---------------------------------------------------     BLSURF.327   
                  ! CHECK SIGNS of shbl,slbl,snet                          BLSURF.328   
                  !---------------------------------------------------     BLSURF.329   
                  SFC=-shbl(I,IHEM,JH)-slbl(I,IHEM,JH)+                    BLSURF.330   
     &                 snet(I,IHEM,jh)/(CV*P0)                             BLSURF.331   
                  rkappa=2./(srsum+hsnow(I,IHEM,jh)/sksn)                  BLSURF.332   
                  pc1=shcs                                                 BLSURF.333   
                  pc2=shcs                                                 BLSURF.334   
                  if ((tscur.gt.tm3).and.(tscur.lt.tp1))                   BLSURF.335   
     &                 pc1=pc1+shcsp                                       BLSURF.336   
                  if ((tdcur.gt.tm3).and.(tdcur.lt.tp1))                   SURF_TYPE_BL.63    
     &                 pc2=pc2+shcsp                                       SURF_TYPE_BL.64    
                  hc1=pc1*sd1+min(hsnow(I,IHEM,jh),shsmax)*shcsn           BLSURF.339   
                  hc2=pc2*sd2                                              BLSURF.340   
                                                                           BLSURF.341   
                  trans=rkappa*(tscur-tdcur)                               BLSURF.342   
                  rct1=(sfc-trans)/hc1                                     BLSURF.343   
                  rct2=trans/hc2                                           BLSURF.344   
                                                                           BLSURF.345   
                  tscur=tscur+rct1*deltu                                   BLSURF.346   
                  tdcur=tdcur+rct2*deltu                                   BLSURF.347   
                                                                           BLSURF.348   
                  if (tscur.gt.tz) then                                    BLSURF.349   
                     if (hsnow(I,IHEM,jh).gt.0.) then                      BLSURF.350   
                        !---------------------------------------------     BLSURF.351   
                        ! The factor of 2 is *REALLY* meant to be here,    BLSURF.352   
                        ! since we are dealing with a forward time         BLSURF.353   
                        ! single level variable (hsnow) within an          BLSURF.354   
                        ! (effectively) centre time timestep - thus        BLSURF.355   
                        ! each segment of time is covered twice in this    BLSURF.356   
                        ! routine...                                       BLSURF.357   
                        !---------------------------------------------     BLSURF.358   
      deltasnow=0.0                                                        OAS_RUNOFF.5     
C No snowmelt over icecaps: snowdepth > SHSMAX handled later               OAS_RUNOFF.6     
      IF(SVEGE(I,IHEM,JH).NE.2)THEN                                        OAS_RUNOFF.7     
        deltasnow=-1.0*(tscur-tz)*hc1/(slhf*sdsn)/2.                       OAS_RUNOFF.8     
        if (hsnow(i,ihem,jh)+deltasnow.lt.0) then                          OAS_RUNOFF.9     
           deltasnow=-1*hsnow(i,ihem,jh)                                   OAS_RUNOFF.10    
        endif                                                              OAS_RUNOFF.11    
        hsnow(i,ihem,jh)=hsnow(i,ihem,jh)+deltasnow                        OAS_RUNOFF.12    
      ENDIF                                                                OAS_RUNOFF.13    
C I've changed SHSMAX in the IGCM to 4m to match FORTE                     OAS_RUNOFF.14    
                                                                           OAS_RUNOFF.15    
c     Put the melted snow into runoff after first recharging soil          OAS_RUNOFF.16    
      if (deltasnow.lt.0.) then                                            OAS_RUNOFF.17    
C Enough capacity in soil to take melted snow                              OAS_RUNOFF.18    
         if(ssmc-smstar(i,ihem,jh).gt.-deltasnow*sdsn/sdw) then            OAS_RUNOFF.19    
           smstar(i,ihem,jh)=smstar(i,ihem,jh)-deltasnow*sdsn/sdw          OAS_RUNOFF.20    
         else                                                              OAS_RUNOFF.21    
C Soil is saturated, excess snow into runoff                               OAS_RUNOFF.22    
           deltasnow=deltasnow+(ssmc-smstar(i,ihem,jh))*sdw/sdsn           OAS_RUNOFF.23    
           smstar(i,ihem,jh)=ssmc                                          OAS_RUNOFF.24    
           exwat(i,ihem,jh)=exwat(i,ihem,jh)-                              OAS_RUNOFF.25    
     :     deltasnow*(sdsn/sdw)*1000.*RADEA                                OAS_RUNOFF.26    
         endif                                                             OAS_RUNOFF.27    
      endif                                                                OAS_RUNOFF.28    
                                                                           OAS_RUNOFF.29    
c  alterwater called once both rain and snow are included                  OAS_RUNOFF.30    
                                                                           OAS_RUNOFF.31    
C Soil moisture calculation now handled in runoff code above               SURF_TYPE_BL.57    
C                        smstar(i,ihem,jh) =                               SURF_TYPE_BL.58    
C     &                  max(smstar(i,ihem,jh),ssmc23)                     SURF_TYPE_BL.59    
C                                                                          SURF_TYPE_BL.60    
C                        smstar(I,IHEM,jh) = smstar(I,IHEM,jh)             SURF_TYPE_BL.61    
C     &                  +(tscur-tz)*hc1/(slhf*sdw)/2.                     SURF_TYPE_BL.62    
                     endif                                                 BLSURF.362   
                  endif                                                    BLSURF.363   
c     Set a max snow depth of 4m to prevent runaway accumulation           OAS_RUNOFF.32    
      if (hsnow(i,ihem,jh).gt.SHSMAX) then                                 OAS_RUNOFF.33    
C Excess southwards of 55S added to iceberg flux for ocean                 OAS_RUNOFF.34    
        if (SI(JJ1(iRow)+JH,IHEM) .lt. -0.831)then                         OAS_RUNOFF.35    
          snowexcess=hsnow(i,ihem,jh)-SHSMAX                               OAS_RUNOFF.36    
          hsnow(i,ihem,jh)=SHSMAX                                          OAS_RUNOFF.37    
          exiwat(i,ihem,jh)=exiwat(i,ihem,jh)+                             OAS_RUNOFF.38    
     :    snowexcess*(sdsn/sdw)*1000.*RADEA                                OAS_RUNOFF.39    
                                                                           OAS_RUNOFF.40    
C Excess northwards of 66N added to iceberg flux for ocean                 OAS_RUNOFF.41    
C 66N chosen because otherwise large IGCM snowfall over                    OAS_RUNOFF.42    
C S Alaska/BC region goes into Arctic instead of Pacific                   OAS_RUNOFF.43    
C        elseif(SI(JJ1(iRow)+JH,IHEM) .ge. 0.914)then                      OAS_RUNOFF.44    
C                                                                          OAS_RUNOFF.45    
C          snowexcess=hsnow(i,ihem,jh)-SHSMAX                              OAS_RUNOFF.46    
C          hsnow(i,ihem,jh)=SHSMAX                                         OAS_RUNOFF.47    
C          exiwatn(i,ihem,jh)=exiwatn(i,ihem,jh)+                          OAS_RUNOFF.48    
C     :    snowexcess*(sdsn/sdw)*1000.*RADEA                               OAS_RUNOFF.49    
                                                                           OAS_RUNOFF.50    
        else                                                               OAS_RUNOFF.51    
C Excess at other latitudes added to coastal runoff                        OAS_RUNOFF.52    
        snowexcess=hsnow(i,ihem,jh)-SHSMAX                                 OAS_RUNOFF.53    
        hsnow(i,ihem,jh)=SHSMAX                                            OAS_RUNOFF.54    
        exwat(i,ihem,jh)=exwat(i,ihem,jh)+                                 OAS_RUNOFF.55    
     :  snowexcess*(sdsn/sdw)*1000.*RADEA                                  OAS_RUNOFF.56    
        endif                                                              OAS_RUNOFF.57    
      endif                                                                OAS_RUNOFF.58    
                                                                           OAS_RUNOFF.59    
               endif                                                       BLSURF.364   
                                                                           BLSURF.365   
               if (LOCH) then                                              BLSURF.366   
                  !---------------------------------------------------     BLSURF.367   
                  ! INTEROP between months                                 BLSURF.368   
                  !---------------------------------------------------     BLSURF.369   
c     OCF=0.                                                               OAS_TILE.4     
               if (sicecov(i,ihem,jh).ge.0.5)then                          SURF_TYPE_BL.72    
                                                                           SURF_TYPE_BL.73    
C SHCI constant: snow conductivity very low                                SURF_TYPE_BL.74    
                 hc=shci                                                   SURF_TYPE_BL.75    
C     $              +log(tm2-tscur+1.0)*shci/log(tm2-ticesnow+1)          SURF_TYPE_BL.76    
C                                                                          SURF_TYPE_BL.77    
               elseif(tscur.gt.tm2.and.sicecov(i,ihem,jh).ge.0.5)then      SURF_TYPE_BL.78    
                 hc=shci                                                   SURF_TYPE_BL.79    
               else                                                        SURF_TYPE_BL.80    
C Without ice heat capacity is that of ocean                               SURF_TYPE_BL.81    
                 hc=shco                                                   SURF_TYPE_BL.82    
               endif                                                       SURF_TYPE_BL.83    
                                                                           SURF_TYPE_BL.84    
                  !---------------------------------------------------     BLSURF.380   
                  ! Add OCF term to ocean heat flux                        BLSURF.381   
                  !---------------------------------------------------     BLSURF.382   
c  actually, /don't/ add in extra fluxes - for coupled operation           OAS_TEST.228   
                SFC=-shbl(I,IHEM,JH)-slbl(I,IHEM,JH)+                      OAS_TEST.229   
     &          (snet(I,IHEM,JH))/(CV*P0)                                  OAS_TEST.230   
                                                                           OAS_TEST.231   
                dts = (sfc +oceaniceflux(I,IHEM))/hc*deltu                 OAS_TEST.232   
                                                                           OAS_TEST.233   
C Start brine rejection bit- turned off                                    OAS_TEST.234   
C Below -2C ice thickness increases as Ts decreases.                       OAS_TEST.235   
C Freshwater flux to ocean is calculated similarly to snowmelt:            OAS_TEST.236   
C F = F + water depth change ~= +0.1m per +1C in Tsurf change              OAS_TEST.237   
C Over a season this should average to zero and conserve water             OAS_TEST.238   
c                if(sicecov(I,IHEM,JH).gt.0.5)                             OAS_TEST.239   
c     &          water2d(I,IHEM,JH)=water2d(I,IHEM,JH)+                    OAS_TEST.240   
c     &          dts*CT*0.1*1000.0/RADEA                                   OAS_TEST.241   
C End Brine rejection bit                                                  OAS_TEST.242   
                                                                           OAS_TEST.243   
c                                                                          BLSURF.387   
                  tscur=tscur+dts                                          SURF_TYPE_BL.85    
                                                                           SURF_TYPE_BL.86    
               endif                                                       SURF_TYPE_BL.87    
            enddo                                                          SURF_TYPE_BL.88    
                                                                           SURF_TYPE_BL.89    
            if(GSG(I,IHEM,jh).le.0.)then                                   SURF_TYPE_BL.90    
                                                                           SURF_TYPE_BL.91    
C At end of iteration add to sea-ice fractional cover if Ts<TICEFORM       SURF_TYPE_BL.92    
C over a timescale of a day- avoids 2dT waves but synoptically short       SURF_TYPE_BL.93    
C Formulation allows for hysteresis                                        SURF_TYPE_BL.94    
              if(tscur.le.TICEFORM)                                        SURF_TYPE_BL.95    
     :        sicecov(I,IHEM,jh)=min(sicecov(I,IHEM,jh)+1.0/TSPD,1.0)      SURF_TYPE_BL.96    
C If Ts>0C remove ice over one day                                         SURF_TYPE_BL.97    
              if(tscur.gt.tz)                                              SURF_TYPE_BL.98    
     :        sicecov(I,IHEM,jh)=max(sicecov(I,IHEM,jh)-1.0/TSPD,0.0)      SURF_TYPE_BL.99    
C Above 0C albedo based on ice cover                                       SURF_TYPE_BL.100   
              if(tscur.gt.TZ)then                                          SURF_TYPE_BL.101   
                salb(I,IHEM,jh)=sbal(i,ihem,jh)+                           SURF_TYPE_BL.102   
     :          (salb(I,IHEM,jh)-sbal(i,ihem,jh))*sicecov(i,ihem,jh)       SURF_TYPE_BL.103   
C Below 0C, Albedo is MAX(present SALB,diagnosed SALB from sea-ice)        SURF_TYPE_BL.104   
C representing ice staying covered with snow until final melting           SURF_TYPE_BL.105   
              elseif(tscur.gt.TICEFORM.and.tscur.le.tz)then                SURF_TYPE_BL.106   
                salb(I,IHEM,jh)=max(sbal(i,ihem,jh)+                       SURF_TYPE_BL.107   
     :          (saice-sbal(i,ihem,jh))*sicecov(i,ihem,jh),                SURF_TYPE_BL.108   
     :                          salb(I,IHEM,jh))                           SURF_TYPE_BL.109   
C Below TICEFORM, Albedo is MAX(present SALB,diagnosed SALB from snow)     SURF_TYPE_BL.110   
C representing ice staying covered with snow until final melting           SURF_TYPE_BL.111   
              elseif(tscur.ge.TICESNOW.and.tscur.le.TICEFORM)then          SURF_TYPE_BL.112   
                salb(I,IHEM,jh)=max(sasnow+                                SURF_TYPE_BL.113   
     :          (saice-sasnow)*(tscur-TICESNOW)/(TICEFORM-TICESNOW),       SURF_TYPE_BL.114   
     :                          salb(I,IHEM,jh))                           SURF_TYPE_BL.115   
C Below TICESNOW ice completely snow-covered                               SURF_TYPE_BL.116   
              else                                                         SURF_TYPE_BL.117   
                salb(I,IHEM,jh)=sasnow                                     SURF_TYPE_BL.118   
              endif                                                        SURF_TYPE_BL.119   
                                                                           SURF_TYPE_BL.120   
C ice-free wind-based whitecaps and seasalt parameterisation               SURF_TYPE_BL.121   
C based on (U-Threshold)^3 (similar to dust raising)                       SURF_TYPE_BL.122   
C EXPERIMENTAL AND TURNED OFF FOR NOW                                      SURF_TYPE_BL.123   
C              if(sicecov(i,ihem,jh).le.1.0e-5)salb(I,IHEM,jh)=            SURF_TYPE_BL.124   
C     :        min(sbal(i,ihem,jh)+max(0.0E-4*((VMPCD-5.0)**3),0.0),0.6)   SURF_TYPE_BL.125   
                                                                           SURF_TYPE_BL.126   
            endif                                                          SURF_TYPE_BL.127   
            !-----------------------------------------------------         BLSURF.406   
            ! End of iteration process, done full double timestep.         BLSURF.407   
            !-----------------------------------------------------         BLSURF.408   
            if (LSLH) then                                                 BLSURF.409   
               tdeepo(I,IHEM,jh)=tdeep(I,IHEM,jh)*(1.-2.*pnu)              BLSURF.410   
     &              +pnu*(tdeepo(I,IHEM,jh)+tdcur)                         BLSURF.411   
               tdeep(I,IHEM,jh)=tdcur                                      BLSURF.412   
               tstaro(I,IHEM,jh)=tstar(I,IHEM,jh)*(1.-2.*pnu)              BLSURF.413   
     &              +pnu*(tstaro(I,IHEM,jh)+tscur)                         BLSURF.414   
               tstar(I,IHEM,jh)=tscur                                      BLSURF.415   
               sqstar(I,IHEM,jh)=sqcur                                     BLSURF.416   
               qstar(I,IHEM,jh)=qcur                                       BLSURF.417   
            endif                                                          BLSURF.418   
                                                                           BLSURF.419   
            if (LOCH) then                                                 BLSURF.420   
c    only update tstaro in IGCM if sea-ice or land                         OAS_TEST.244   
               if (sicecov(I,IHEM,JH).ge.0.5 .or.                          OAS_TEST.245   
     &         ofrac(I,IHEM,JH).eq.0.)then                                 OAS_TEST.246   
               tstaro(I,IHEM,jh)=tstar(I,IHEM,jh)*(1.-2.*pnu)              BLSURF.421   
     &              +pnu*(tstaro(I,IHEM,jh)+tscur)                         BLSURF.422   
               tstar(I,IHEM,jh)=tscur                                      BLSURF.423   
               else                                                        OAS_TEST.247   
c     energy consistency, keep tstar=zsst                                  OAS_TEST.248   
                tstar(I,IHEM,jh)=tstaro(I,IHEM,jh)                         OAS_TEST.249   
               end if                                                      OAS_TEST.250   
               sqstar(I,IHEM,jh)=sqcur                                     BLSURF.424   
               qstar(I,IHEM,jh)=qcur                                       BLSURF.425   
            endif                                                          BLSURF.426   
                                                                           BLSURF.427   
            TRANLG3(I,IHEM,JH,NL,1)=QNLGS                                  BLSURF.428   
            TNLG3(I,IHEM,JH,NL)=TNLGS                                      BLSURF.429   
            FUG3(I,IHEM,JH,NL)=UNLGS                                       BLSURF.430   
            FVG3(I,IHEM,JH,NL)=VNLGS                                       BLSURF.431   
            SHBL(I,IHEM,JH)=SHBLS                                          BLSURF.432   
            SLBL(I,IHEM,JH)=SLBLS                                          BLSURF.433   
            BLCD(I,IHEM)=BLCDS                                             BLSURF.434   
            BLVB(I,IHEM)=BLVBS                                             BLSURF.435   
            TXBL(I,IHEM)=TXBLS                                             BLSURF.436   
            TYBL(I,IHEM)=TYBLS                                             BLSURF.437   
C                                                                          OAS_TILE.34    
C COASTAL TILING CODE STARTS HERE                                          OAS_TILE.35    
C                                                                          OAS_TILE.36    
      if(GSG(I,IHEM,JH).ne.0..and.ofrac(I,IHEM,JH).gt.0.                   OAS_TILE.37    
     $  .and.ofrac(I,IHEM,JH).lt.1.)then                                   OAS_TILE.38    
C                                                                          OAS_TILE.39    
C Calculate BL tendencies over ocean part of coastal tile                  OAS_TILE.40    
C                                                                          OAS_TILE.41    
                                                                           OAS_TILE.42    
C        if(kount.gt.kstart+1)then                                         OAS_TILE.43    
        if(kount.gt.1)then                                                 OAS_TILE.44    
          if(sicecov(i,ihem,jh).lt.0.5)then                                OAS_TILE.45    
            tstaroo(I,IHEM,JH)=zsst_2d(I,IHEM,JH)*GASCON/CG                OAS_TILE.46    
          else                                                             OAS_TILE.47    
C Ice cover- use IGCM Tsurf                                                OAS_TILE.48    
            tscurw=zsst_2d(I,IHEM,JH)*GASCON/CG                            OAS_TILE.49    
C Relaxation to sea-ice base temp                                          OAS_TILE.50    
            oceaniceflux(I,IHEM)=(tscurw-max(TSTAROO(I,IHEM,JH),tm2))      OAS_TILE.51    
     $      *shco/restorice/tspd/DELT2C                                    OAS_TILE.52    
          endif                                                            OAS_TILE.53    
C SVEGE array at coastal points is land so roughness length specified      OAS_TILE.54    
C from ocean points: used with VMPCD where Cd increases with windspeed     OAS_TILE.55    
          RGZ0O=SZLOOK(1)/2.2E4                                            OAS_TILE.56    
C Ice roughness length depends on ice cover, which depends on Tsurf        OAS_TILE.57    
          RGZ0=RGZ0O                                                       OAS_TILE.58    
          if(tscur.le.tz)RGZ0=RGZ0IW                                       OAS_TILE.59    
          if(tscur.le.tm2)RGZ0=RGZ0IC                                      OAS_TILE.60    
        endif                                                              OAS_TILE.61    
                                                                           OAS_TILE.62    
c Now do a single gridpoint                                                OAS_TILE.63    
c Put sst's in here now, moved from SFCT                                   OAS_TILE.64    
                                                                           OAS_TILE.65    
C        TSCUR=TSTARO(I,IHEM,JH)                                           OAS_TILE.66    
        TSCUR=TSTAROO(I,IHEM,JH)                                           OAS_TILE.67    
                                                                           OAS_TILE.68    
        MAXITER=ITSLO                                                      OAS_TILE.69    
        DELTU=DELTO                                                        OAS_TILE.70    
        QNLGS=0.                                                           OAS_TILE.71    
        TNLGS=0.                                                           OAS_TILE.72    
        UNLGS=0.                                                           OAS_TILE.73    
        VNLGS=0.                                                           OAS_TILE.74    
        SHBLS=0.                                                           OAS_TILE.75    
        SLBLS=0.                                                           OAS_TILE.76    
        BLCDS=0.                                                           OAS_TILE.77    
        BLVBS=0.                                                           OAS_TILE.78    
        TXBLS=0.                                                           OAS_TILE.79    
        TYBLS=0.                                                           OAS_TILE.80    
                                                                           OAS_TILE.81    
        do iter=1,MAXITER                                                  OAS_TILE.82    
                                                                           OAS_TILE.83    
c If we have interactive ocean, calculate surface humidities               OAS_TILE.84    
                                                                           OAS_TILE.85    
C Surface winds used by coastal BL routine UGBSOCUR,VGBSOCUR are           OAS_TILE.86    
C atmospheric winds minus nondimensionalised surface current               OAS_TILE.87    
C Updated here since UGBSOC and VGBSOC are updated during ITER loop        OAS_TILE.88    
                                                                           OAS_TILE.89    
        UGBSOCUR=UGBSOC-zscur_2d(I,IHEM,JH)/SQRC/CV                        OAS_TILE.90    
        VGBSOCUR=VGBSOC-mscur_2d(I,IHEM,JH)/SQRC/CV                        OAS_TILE.91    
                                                                           OAS_TILE.92    
        qcur=pqsat(tscur)/PLG3(I,IHEM,JH)                                  OAS_TILE.93    
        sqcur=qcur                                                         OAS_TILE.94    
C          THNL=1.02*TGBSOC/SKAP(NL)                                       OAS_TILE.95    
          THNL=1.00*TGBSOC/SKAP(NL)                                        OAS_TILE.96    
          THBAR=0.5*(THNL+TSCUR)                                           OAS_TILE.97    
          RZZ0=RSIGF*THBAR/RGZ0                                            OAS_TILE.98    
          RLZZ02=(LOG(RZZ0))**2                                            OAS_TILE.99    
                                                                           OAS_TILE.100   
c CALCULATE WIND SPEED, INCLUDING MINIMUM                                  OAS_TILE.101   
          VM=SQRT(RCSJ*(UGBSOCUR*UGBSOCUR+VGBSOCUR*VGBSOCUR))              OAS_TILE.102   
          VMP=VM+BLVAD                                                     OAS_TILE.103   
          VMPCD=MIN(VMP*CV,40.0)                                           OAS_TILE.104   
          CD=0.1681/RLZZ02                                                 OAS_TILE.105   
                                                                           OAS_TILE.106   
C Ocean Cd=f(Z0)+f(VMP); Max Cd=0.003 at VMP=40m/s without ice cover       OAS_TILE.107   
C From Wu (1980) JPO v10 p727; assumes V(NL)~=(4/3)**V(10m)                OAS_TILE.108   
          if(sicecov(i,ihem,jh).lt.0.5)CD=CD+5.6E-5*VMPCD                  OAS_TILE.109   
C                                                                          OAS_TILE.110   
          blcds=blcds+cd/real(maxiter)                                     OAS_TILE.111   
          CTAU=CD/TSCUR                                                    OAS_TILE.112   
          CSH=CTAU/AKAP                                                    OAS_TILE.113   
          DRAGJ=CD*DRAG/TSCUR                                              OAS_TILE.114   
c CALCULATE SURFACE STRESS AND LOWEST LEVEL FRICTION                       OAS_TILE.115   
          CVM=DRAGJ*VMP                                                    OAS_TILE.116   
          UNLGJNL=-CVM*UGBSOCUR                                            OAS_TILE.117   
          UNLGS=UNLGS+UNLGJNL/REAL(MAXITER)                                OAS_TILE.118   
          VNLGJNL=-CVM*VGBSOCUR                                            OAS_TILE.119   
          VNLGS=VNLGS+VNLGJNL/REAL(MAXITER)                                OAS_TILE.120   
          CVM=CTAU*PLG3(I,IHEM,JH)*VMP*SQRC                                OAS_TILE.121   
          TXBLJ=CVM*UGBSOCUR                                               OAS_TILE.122   
          TXBLS=TXBLS+TXBLJ/REAL(MAXITER)                                  OAS_TILE.123   
          TYBLJ=CVM*VGBSOCUR                                               OAS_TILE.124   
          TYBLS=TYBLS+TYBLJ/REAL(MAXITER)                                  OAS_TILE.125   
c CALCULATE SENSIBLE AND LATENT HEAT FLUXES                                OAS_TILE.126   
          QCUR=MIN(SQCUR,MAX(QCUR,QGBSOC))                                 OAS_TILE.127   
          DTH=TSCUR-THNL                                                   OAS_TILE.128   
          DQ=BLRH*(QCUR-QGBSOC)                                            OAS_TILE.129   
          BLVB(I,IHEM)=0.                                                  OAS_TILE.130   
                                                                           OAS_TILE.131   
C Enhancement of surface-air transfer when unstable                        OAS_TILE.132   
C VMP=VM+5*BLVB should be VMP=VM+VM*BLVB from Forster et al 2000           OAS_TILE.133   
C 5.95*RLZZO2 = 1/Cd; RGZ0 includes a factor of g                          OAS_TILE.134   
C Limit BLVB to 4*VM gustiness factor                                      OAS_TILE.135   
                                                                           OAS_TILE.136   
          IF (DTH.GT.0.)                                                   OAS_TILE.137   
     $    BLVB(I,IHEM)=5.95*RLZZ02*SQRT(RGZ0*DTH/THBAR)                    OAS_TILE.138   
          VMP=VM+VM*MIN(BLVB(I,IHEM)*CV,4.0)                               OAS_TILE.139   
C Bug fix: add calculation of BLVBS                                        OAS_TILE.140   
          blvbs=blvbs+BLVB(I,IHEM)/real(maxiter)                           OAS_TILE.141   
          CVM=0.2*DRAGJ*VMP                                                OAS_TILE.142   
          TNLGJNL=CVM*DTH                                                  OAS_TILE.143   
          TNLGS=TNLGS+TNLGJNL/REAL(MAXITER)                                OAS_TILE.144   
          QNLGJNL=CVM*DQ                                                   OAS_TILE.145   
          QNLGS=QNLGS+QNLGJNL/REAL(MAXITER)                                OAS_TILE.146   
          CVM=0.2*CSH*PLG3(I,IHEM,JH)*VMP                                  OAS_TILE.147   
          SHBLJ=CVM*DTH                                                    OAS_TILE.148   
          SHBLS=SHBLS+SHBLJ/REAL(MAXITER)                                  OAS_TILE.149   
c CHOOSE APPROPRIATE LATENT HEAT                                           OAS_TILE.150   
          IF (TSCUR.GT.TZ) THEN                                            OAS_TILE.151   
             SLBLJ=CVM*CTQ*DQ                                              OAS_TILE.152   
          ELSE                                                             OAS_TILE.153   
             SLBLJ=CVM*CTQI*DQ                                             OAS_TILE.154   
          ENDIF                                                            OAS_TILE.155   
          SLBLS=SLBLS+SLBLJ/REAL(MAXITER)                                  OAS_TILE.156   
          UGBSOC=UGBSOC+DELTU*UNLGJNL                                      OAS_TILE.157   
          VGBSOC=VGBSOC+DELTU*VNLGJNL                                      OAS_TILE.158   
          TGBSOC=TGBSOC+DELTU*TNLGJNL                                      OAS_TILE.159   
          QGBSOC=QGBSOC+DELTU*QNLGJNL                                      OAS_TILE.160   
                                                                           OAS_TILE.161   
          if (sicecov(i,ihem,jh).ge.0.5)then                               OAS_TILE.162   
                                                                           OAS_TILE.163   
C SHCI constant: snow conductivity low                                     OAS_TILE.164   
C            hc=shci                                                       OAS_TILE.165   
C     $         +log(tm2-tscur+1.0)*shci/log(tm2-ticesnow+1)               OAS_TILE.166   
C          elseif(tscur.gt.tm2.and.sicecov(i,ihem,jh).ge.0.5)then          OAS_TILE.167   
            hc=shci                                                        OAS_TILE.168   
          else                                                             OAS_TILE.169   
C Without ice heat capacity is that of ocean                               OAS_TILE.170   
            hc=shco                                                        OAS_TILE.171   
          endif                                                            OAS_TILE.172   
                                                                           OAS_TILE.173   
c Do not add OCF term to ocean heat flux in coupled run                    OAS_TILE.174   
          SFC=-shblj-slblj+(snet(I,IHEM,JH))/(CV*P0)                       OAS_TILE.175   
                                                                           OAS_TILE.176   
C Adding in oceaniceflux to coastal points                                 OAS_TILE.177   
          dts = (sfc +oceaniceflux(I,IHEM))/hc*deltu                       OAS_TILE.178   
                                                                           OAS_TILE.179   
C Start brine rejection bit- turned off                                    OAS_TILE.180   
C Below -2C ice thickness increases as Ts decreases.                       OAS_TILE.181   
C Freshwater flux to ocean is calculated similarly to snowmelt:            OAS_TILE.182   
C F = F + water depth change ~= +0.1m per +1C in Tsurf change              OAS_TILE.183   
C Over a season	this should average to zero and	conserve water             OAS_TILE.184   
C                if(sicecov(I,IHEM,JH).gt.0.5)                             OAS_TILE.185   
C     &          water2d(I,IHEM,JH)=water2d(I,IHEM,JH)+                    OAS_TILE.186   
C     &          dts*CT*0.1*1000.0/RADEA                                   OAS_TILE.187   
C End Brine rejection bit                                                  OAS_TILE.188   
                                                                           OAS_TILE.189   
        enddo                                                              OAS_TILE.190   
                                                                           OAS_TILE.191   
C At end of iteration add to sea-ice fractional cover if Ts<TICEFORM       OAS_TILE.192   
C over a timescale of a day- avoids 2dT waves but synoptically short       OAS_TILE.193   
C Formulation allows for hysteresis                                        OAS_TILE.194   
        if(tscur.le.TICEFORM)                                              OAS_TILE.195   
     :  sicecov(I,IHEM,jh)=min(sicecov(I,IHEM,jh)+1.0/TSPD,1.0)            OAS_TILE.196   
C If Ts>0C remove ice over one day                                         OAS_TILE.197   
        if(tscur.gt.tz)                                                    OAS_TILE.198   
     :  sicecov(I,IHEM,jh)=max(sicecov(I,IHEM,jh)-1.0/TSPD,0.0)            OAS_TILE.199   
C At icecap gridpoints coastal points sea-ice always present               OAS_TILE.200   
        if(SVEGE(I,IHEM,JH).EQ.2)                                          OAS_TILE.201   
     :  sicecov(I,IHEM,jh)=max(sicecov(I,IHEM,jh),0.5)                     OAS_TILE.202   
C Above 0C albedo based on ice cover                                       OAS_TILE.203   
        if(ofrac(I,IHEM,JH).gt.0.5)then                                    OAS_TILE.204   
          if(tscur.gt.TZ)then                                              OAS_TILE.205   
            salb(I,IHEM,jh)=sbal(i,ihem,jh)+                               OAS_TILE.206   
     :      (salb(I,IHEM,jh)-sbal(i,ihem,jh))*sicecov(i,ihem,jh)           OAS_TILE.207   
C Below 0C, Albedo is MAX(present SALB,diagnosed SALB from sea-ice)        OAS_TILE.208   
C representing ice staying covered with snow until final melting           OAS_TILE.209   
          elseif(tscur.gt.TICEFORM.and.tscur.le.tz)then                    OAS_TILE.210   
            salb(I,IHEM,jh)=max(sbal(i,ihem,jh)+                           OAS_TILE.211   
     :      (saice-sbal(i,ihem,jh))*sicecov(i,ihem,jh),                    OAS_TILE.212   
     :                      salb(I,IHEM,jh))                               OAS_TILE.213   
C Below TICEFORM, Albedo is MAX(present SALB,diagnosed SALB from snow)     OAS_TILE.214   
C representing ice staying covered with snow until final melting           OAS_TILE.215   
          elseif(tscur.ge.TICESNOW.and.tscur.le.TICEFORM)then              OAS_TILE.216   
            salb(I,IHEM,jh)=max(sasnow+                                    OAS_TILE.217   
     :      (saice-sasnow)*(tscur-TICESNOW)/(TICEFORM-TICESNOW),           OAS_TILE.218   
     :                      salb(I,IHEM,jh))                               OAS_TILE.219   
C Below TICESNOW ice completely snow-covered                               OAS_TILE.220   
          else                                                             OAS_TILE.221   
            salb(I,IHEM,jh)=sasnow                                         OAS_TILE.222   
          endif                                                            OAS_TILE.223   
        endif                                                              OAS_TILE.224   
C ice-free wind-based whitecaps and seasalt parameterisation               OAS_TILE.225   
C based on (U-Threshold)^3 (similar to dust raising)                       OAS_TILE.226   
C EXPERIMENTAL AND TURNED OFF FOR NOW                                      OAS_TILE.227   
C          if(sicecov(i,ihem,jh).le.1.0e-5)salb(I,IHEM,jh)=                OAS_TILE.228   
C     :    min(sbal(i,ihem,jh)+max(0.0E-4*((VMPCD-5.0)**3),0.0),0.6)       OAS_TILE.229   
                                                                           OAS_TILE.230   
                                                                           OAS_TILE.231   
c End of iteration process, done full double timestep.                     OAS_TILE.232   
c only update tstaro in IGCM if sea-ice                                    OAS_TILE.233   
        if (sicecov(I,IHEM,JH).ge.0.5) then                                OAS_TILE.234   
          tstaroo(I,IHEM,jh)=tstarf(I,IHEM,jh)*(1.-2.*pnu)                 OAS_TILE.235   
     $            +pnu*(tstaroo(I,IHEM,jh)+tscur)                          OAS_TILE.236   
          tstarf(I,IHEM,jh)=tscur                                          OAS_TILE.237   
        else                                                               OAS_TILE.238   
          tstarf(I,IHEM,jh)=tstaroo(I,IHEM,jh)                             OAS_TILE.239   
        end if                                                             OAS_TILE.240   
                                                                           OAS_TILE.241   
        sqstarf(I,IHEM,jh)=sqcur                                           OAS_TILE.242   
        qstarf(I,IHEM,jh)=qcur                                             OAS_TILE.243   
                                                                           OAS_TILE.244   
      ENDIF                                                                OAS_TILE.245   
C                                                                          OAS_TILE.246   
C Calculate moisture converegnce in atmosphere to close water budget:      OAS_COMTILE.30    
C needs to account for pre and post coastal tiling                         OAS_COMTILE.31    
C Balance before coastal tiling:for ocean, land, and land part of coast    OAS_COMTILE.32    
                                                                           OAS_COMTILE.33    
      stempbs3=0.                                                          OAS_COMTILE.34    
      do l=1,nl                                                            OAS_COMTILE.35    
      stempbs3=stempbs3+TRANLG3(I,IHEM,JH,L,1)*clr(l)                      OAS_COMTILE.36    
      end do                                                               OAS_COMTILE.37    
      wathbl(I,IHEM,JH)=stempbs3*PLG3(I,IHEM,JH)                           OAS_COMTILE.38    
                                                                           OAS_COMTILE.39    
C Balance after coastal tiling weighted by ocean fraction                  OAS_COMTILE.40    
C used for average gridpoint water balance                                 OAS_COMTILE.41    
      stempbs3=0.                                                          OAS_COMTILE.42    
      do l=1,nl-1                                                          OAS_COMTILE.43    
      stempbs3=stempbs3+TRANLG3(I,IHEM,JH,L,1)*clr(l)                      OAS_COMTILE.44    
      end do                                                               OAS_COMTILE.45    
      stempbs3=stempbs3+TRANLG3(I,IHEM,JH,NL,1)*                           OAS_COMTILE.46    
     :   (1-ofrac(I,IHEM,JH))*clr(nl)                                      OAS_COMTILE.47    
     :  +QNLGS*clr(nl)*ofrac(I,IHEM,JH)                                    OAS_COMTILE.48    
      watlbl(I,IHEM,JH)=stempbs3*PLG3(I,IHEM,JH)                           OAS_COMTILE.49    
                                                                           OAS_COMTILE.50    
C Balance after coastal tiling over fractional ocean points                OAS_COMTILE.51    
C is used for water balance over ocean parts of coastal points             OAS_COMTILE.52    
      stempbs3=0.                                                          OAS_COMTILE.53    
      do l=1,nl-1                                                          OAS_COMTILE.54    
      stempbs3=stempbs3+TRANLG3(I,IHEM,JH,L,1)*clr(l)                      OAS_COMTILE.55    
      end do                                                               OAS_COMTILE.56    
      stempbs3=stempbs3+QNLGS*clr(nl)                                      OAS_COMTILE.57    
      watsbl(I,IHEM,JH)=stempbs3*PLG3(I,IHEM,JH)                           OAS_COMTILE.58    
                                                                           OAS_COMTILE.59    
      if(GSG(I,IHEM,JH).ne.0..and.ofrac(I,IHEM,JH).gt.0.                   OAS_COMTILE.60    
     $  .and.ofrac(I,IHEM,JH).lt.1.)then                                   OAS_COMTILE.61    
C        SHBL(I,IHEM,JH)=SHBLS                                             OAS_COMTILE.62    
C        SLBL(I,IHEM,JH)=SLBLS                                             OAS_COMTILE.63    
C Diagnosed gridpoint SHBL and SLBL weighted by OFRAC                      OAS_COMTILE.64    
        SHBL(I,IHEM,JH)=(1.-ofrac(I,IHEM,JH))*                             OAS_COMTILE.65    
     $ SHBL(I,IHEM,JH)+ofrac(I,IHEM,JH)*SHBLS                              OAS_COMTILE.66    
        SLBL(I,IHEM,JH)=(1.-ofrac(I,IHEM,JH))*                             OAS_COMTILE.67    
     $ SLBL(I,IHEM,JH)+ofrac(I,IHEM,JH)*SLBLS                              OAS_COMTILE.68    
C SHBLS and SLBLS equivalent for ocean part of gridpoint                   OAS_COMTILE.69    
        SHBLC(I,IHEM,JH)=SHBLS                                             OAS_COMTILE.70    
        SLBLC(I,IHEM,JH)=SLBLS                                             OAS_COMTILE.71    
        TXBL(I,IHEM)=TXBLS                                                 OAS_COMTILE.72    
        TYBL(I,IHEM)=TYBLS                                                 OAS_COMTILE.73    
        TRANLG3(I,IHEM,JH,NL,1)=(1.-ofrac(I,IHEM,JH))*                     OAS_COMTILE.74    
     $TRANLG3(I,IHEM,JH,NL,1)+ofrac(I,IHEM,JH)*QNLGS                       OAS_COMTILE.75    
        TRAG3(I,IHEM,JH,NL,1)=(1.-ofrac(I,IHEM,JH))*                       OAS_COMTILE.76    
     $TRAG3(I,IHEM,JH,NL,1)+ofrac(I,IHEM,JH)*QGBSOC                        OAS_COMTILE.77    
        TNLG3(I,IHEM,JH,NL)=(1.-ofrac(I,IHEM,JH))*                         OAS_COMTILE.78    
     $TNLG3(I,IHEM,JH,NL)+ofrac(I,IHEM,JH)*TNLGS                           OAS_COMTILE.79    
        TG3(I,IHEM,JH,NL)=(1.-ofrac(I,IHEM,JH))*                           OAS_COMTILE.80    
     $TG3(I,IHEM,JH,NL)+ofrac(I,IHEM,JH)*TGBSOC                            OAS_COMTILE.81    
        FUG3(I,IHEM,JH,NL)=(1.-ofrac(I,IHEM,JH))*                          OAS_COMTILE.82    
     $FUG3(I,IHEM,JH,NL)+ofrac(I,IHEM,JH)*UNLGS                            OAS_COMTILE.83    
        UG3(I,IHEM,JH,NL)=(1.-ofrac(I,IHEM,JH))*                           OAS_COMTILE.84    
     $UG3(I,IHEM,JH,NL)+ofrac(I,IHEM,JH)*UGBSOC                            OAS_COMTILE.85    
        FVG3(I,IHEM,JH,NL)=(1.-ofrac(I,IHEM,JH))*                          OAS_COMTILE.86    
     $FVG3(I,IHEM,JH,NL)+ofrac(I,IHEM,JH)*VNLGS                            OAS_COMTILE.87    
        VG3(I,IHEM,JH,NL)=(1.-ofrac(I,IHEM,JH))*                           OAS_COMTILE.88    
     $VG3(I,IHEM,JH,NL)+ofrac(I,IHEM,JH)*VGBSOC                            OAS_COMTILE.89    
      endif                                                                OAS_COMTILE.90    
                                                                           OAS_COMTILE.91    
         enddo                                                             BLSURF.438   
      enddo                                                                BLSURF.439   
      end                                                                  BLSURF.440   
*ENDIF                                                                     BLSURF.441   
*DECK CALNDR                                                               CALNDR.1     
*IF DEF,ONLY_V3                                                            CALNDR.2     
!=====================================================                     CALNDR.3     
! Given the julian day, routine returns month and day as                   CALNDR.4     
! character*7 variable. Leap years are ignored.                            CALNDR.5     
!=====================================================                     CALNDR.6     
      SUBROUTINE CALNDR(DOY,MDUM,amfrac)                                   CALNDR.7     
      IMPLICIT NONE                                                        CALNDR.8     
!-----------------------------------------------------                     CALNDR.9     
! Passed arguments                                                         CALNDR.10    
!-----------------------------------------------------                     CALNDR.11    
      REAL :: DOY                                                          CALNDR.12    
      INTEGER :: MDUM                                                      CALNDR.13    
      REAL :: AMFRAC                                                       CALNDR.14    
!-----------------------------------------------------                     CALNDR.15    
! Local variables                                                          CALNDR.16    
!-----------------------------------------------------                     CALNDR.17    
      INTEGER :: JDAY                                                      CALNDR.18    
      REAL :: DAY, GAP                                                     CALNDR.19    
      CHARACTER*4 :: MONTH                                                 CALNDR.20    
      CHARACTER*4 :: MNTH(12)                                              CALNDR.21    
      INTEGER :: MDAY                                                      CALNDR.22    
      INTEGER :: NDAY(13)                                                  CALNDR.23    
! Loop variables                                                           CALNDR.24    
      INTEGER :: MM                                                        CALNDR.25    
!-----------------------------------------------------                     CALNDR.26    
! Days in each month and month names                                       CALNDR.27    
!-----------------------------------------------------                     CALNDR.28    
C      DATA NDAY/0,31,59,90,120,151,181,212,243,273,304,334,365/           CALNDR.29    
      DATA NDAY/0,30,60,90,120,150,180,210,240,270,300,330,360/            CALNDR.30    
     :    ,MNTH/'JAN.','FEB.','MAR.','APR.','MAY ','JUNE','JULY',          CALNDR.31    
     :           'AUG.','SEPT','OCT.','NOV.','DEC'/                        CALNDR.32    
!-----------------------------------------------------                     CALNDR.33    
! Perform operation                                                        CALNDR.34    
!-----------------------------------------------------                     CALNDR.35    
      DAY=DOY-1.0                                                          CALNDR.36    
      DO MM=12,1,-1                                                        CALNDR.37    
          IF (DAY.GE.(REAL(NDAY(MM+1)+NDAY(MM))/2.0)) THEN                 CALNDR.38    
           MDUM=MM                                                         CALNDR.39    
           GAP=30.0  ! const month length                                  CALNDR.40    
           AMFRAC=(DAY-0.5*REAL(NDAY(MM+1)+NDAY(MM)))/GAP                  CALNDR.41    
           GOTO 200                                                        CALNDR.42    
          ENDIF                                                            CALNDR.43    
       ENDDO                                                               CALNDR.44    
c this means day is between 1-15                                           CALNDR.45    
      MDUM=12                                                              CALNDR.46    
      GAP=30.0                                                             CALNDR.47    
      AMFRAC=(DAY+15.)/GAP                                                 CALNDR.48    
                                                                           CALNDR.49    
  200 CONTINUE                                                             CALNDR.50    
                                                                           CALNDR.51    
      END                                                                  CALNDR.52    
*ENDIF                                                                     CALNDR.53    
*DECK CBADJ                                                                CBADJ.1     
*IF DEF,ABOVE_V1                                                           CBADJ.2     
!=====================================================                     CBADJ.3     
! PRECIPITATING DEEP CONVECTION SCHEME.                                    CBADJ.4     
! ADJUSTMENT TOWARDS A SUBSATURATED MOIST ADIABAT.                         CBADJ.5     
!=====================================================                     CBADJ.6     
      SUBROUTINE CBADJ(NCRB,NCRT,I,IHEM,JH)                                CBADJ.7     
      IMPLICIT NONE                                                        CBADJ.8     
*CALL PARAM1                                                               CBADJ.9     
*CALL PARAM2                                                               CBADJ.10    
*CALL PARAM3                                                               CBADJ.11    
*CALL BLANK                                                                CBADJ.12    
*CALL LEGAU                                                                CBADJ.13    
*CALL GRIDPA3                                                              CBADJ.14    
*CALL GRIDPC                                                               CBADJ.15    
*CALL PHYSCA                                                               CBADJ.16    
*CALL BATS                                                                 CBADJ.17    
*CALL CPIERS                                                               CBADJ.18    
!-----------------------------------------------------                     CBADJ.19    
! Passed arguments                                                         CBADJ.20    
!-----------------------------------------------------                     CBADJ.21    
      INTEGER :: NCRB                                                      CBADJ.22    
      INTEGER :: NCRT                                                      CBADJ.23    
      INTEGER :: I                                                         CBADJ.24    
      INTEGER :: IHEM                                                      CBADJ.25    
! Latitude index                                                           CBADJ.26    
      INTEGER :: JH                                                        CBADJ.27    
*IF DEF,ONLY_V3                                                            CBADJ.28    
!-----------------------------------------------------                     CBADJ.29    
! External function                                                        CBADJ.30    
!-----------------------------------------------------                     CBADJ.31    
      REAL, EXTERNAL :: PQSAT                                              CBADJ.32    
*ENDIF                                                                     CBADJ.33    
!-----------------------------------------------------                     CBADJ.34    
! Local variables                                                          CBADJ.35    
!-----------------------------------------------------                     CBADJ.36    
      REAL :: CTQUSE                                                       CBADJ.37    
      INTEGER :: NLEV                                                      CBADJ.38    
      REAL :: EPSIT                                                        CBADJ.39    
      REAL :: PL(NL)                                                       CBADJ.40    
      REAL :: PSL(NL)                                                      CBADJ.41    
      REAL :: PSK(NL)                                                      CBADJ.42    
      REAL :: CBC(NL)                                                      CBADJ.43    
      REAL :: TSL(NL)                                                      CBADJ.44    
      REAL :: QR(NL)                                                       CBADJ.45    
      REAL :: SINT                                                         CBADJ.46    
      REAL :: TGINT                                                        CBADJ.47    
      REAL :: QGINT                                                        CBADJ.48    
      REAL :: TRINT                                                        CBADJ.49    
      REAL :: QRINT                                                        CBADJ.50    
      REAL :: HGINT                                                        CBADJ.51    
      REAL :: DHL                                                          CBADJ.52    
      REAL :: P                                                            CBADJ.53    
      REAL :: GH1(NL)                                                      CBADJ.54    
      INTEGER :: NIT                                                       CBADJ.55    
      REAL :: DTMAX                                                        CBADJ.56    
      REAL :: QN                                                           CBADJ.57    
      REAL :: DTSL                                                         CBADJ.58    
      REAL :: TR(NL)                                                       CBADJ.59    
      REAL :: TTEND                                                        CBADJ.60    
      REAL :: QTEND                                                        CBADJ.61    
! Loop variables                                                           CBADJ.62    
      INTEGER :: L                                                         CBADJ.63    
*IF DEF,ONLY_V3                                                            CBADJ.64    
!-----------------------------------------------------                     CBADJ.65    
! Choose appropriate value of latent heat based on ground T                CBADJ.66    
! ie, we assume it snows if the ground is colder than 273.15K              CBADJ.67    
!-----------------------------------------------------                     CBADJ.68    
      if (tstar(I,IHEM,jh).gt.0.363224029) then                            CBADJ.69    
         ctquse=ctq                                                        CBADJ.70    
      else                                                                 CBADJ.71    
         ctquse=ctqi                                                       CBADJ.72    
      endif                                                                CBADJ.73    
*ENDIF                                                                     CBADJ.74    
      NLEV=1+NCRB-NCRT                                                     CBADJ.75    
      EPSIT=CTQUSE*EPSIQ                                                   CBADJ.76    
C                                                                          CBADJ.77    
      DO L=NCRT,NCRB                                                       CBADJ.78    
        PL(L)=SIGMA(L)*PLG3(I,IHEM,JH)                                     CBADJ.79    
        PSL(L)=PL(L)+CBADJP                                                CBADJ.80    
        PSK(L)=(PSL(L)/PL(L))**AKAP                                        CBADJ.81    
*IF DEF,ONLY_V2                                                            CBADJ.82    
        CBC(L)=CTQ*ESCONA*PSK(L)/PSL(L)                                    CBADJ.83    
*ELSE                                                                      CBADJ.84    
        CBC(L)=CTQUSE*PSK(L)/PSL(L)                                        CBADJ.85    
*ENDIF                                                                     CBADJ.86    
        TSL(L)=TC(L)*PSK(L)                                                CBADJ.87    
*IF DEF,ONLY_V2                                                            CBADJ.88    
        QR(L)=ESCONA*EXP(-ESCONB/TSL(L))/PSL(L)                            CBADJ.89    
*ELSE                                                                      CBADJ.90    
        QR(L)=PQSAT(TSL(L))/PSL(L)                                         CBADJ.91    
*ENDIF                                                                     CBADJ.92    
      ENDDO                                                                CBADJ.93    
!-----------------------------------------------------                     CBADJ.94    
! Sum up DSIGMA                                                            CBADJ.95    
!-----------------------------------------------------                     CBADJ.96    
      SINT=0.0                                                             CBADJ.97    
      DO L=NCRT,NCRB                                                       CBADJ.98    
         SINT=SINT+DSIGMA(L)                                               CBADJ.99    
      ENDDO                                                                CBADJ.100   
!-----------------------------------------------------                     CBADJ.101   
!                                                                          CBADJ.102   
!-----------------------------------------------------                     CBADJ.103   
      TGINT=0.0                                                            CBADJ.104   
      QGINT=0.0                                                            CBADJ.105   
      TRINT=0.0                                                            CBADJ.106   
      QRINT=0.0                                                            CBADJ.107   
      DO L=NCRT,NCRB                                                       CBADJ.108   
         TGINT=TGINT+TG3(I,IHEM,JH,L)*DSIGMA(L)                            CBADJ.109   
         QGINT=QGINT+TRAG3(I,IHEM,JH,L,1)*DSIGMA(L)                        CBADJ.110   
         TRINT=TRINT+TC(L)*DSIGMA(L)                                       CBADJ.111   
         QRINT=QRINT+QR(L)*DSIGMA(L)                                       CBADJ.112   
      ENDDO                                                                CBADJ.113   
!-----------------------------------------------------                     CBADJ.114   
! Calculate GH1                                                            CBADJ.115   
!-----------------------------------------------------                     CBADJ.116   
      HGINT=TGINT+CTQUSE*QGINT                                             CBADJ.117   
      DHL=(HGINT-TRINT-CTQUSE*QRINT)/SINT                                  CBADJ.118   
      DO L=NCRT,NCRB                                                       CBADJ.119   
         GH1(L)=(TC(L)+CTQUSE*QR(L)+DHL)*PSK(L)                            CBADJ.120   
      ENDDO                                                                CBADJ.121   
!-----------------------------------------------------                     CBADJ.122   
! Iteration                                                                CBADJ.123   
!-----------------------------------------------------                     CBADJ.124   
      NIT=0                                                                CBADJ.125   
      DTMAX=99999.99                                                       CBADJ.126   
      DO WHILE ((DTMAX.GE.EPSIT).AND.(NIT.LE.10))                          CBADJ.127   
         DTMAX=0.0                                                         CBADJ.128   
         DO L=NCRT,NCRB                                                    CBADJ.129   
*IF DEF,ONLY_V2                                                            CBADJ.130   
            QN=CBC(L)*EXP(-ESCONB/TSL(L))                                  CBADJ.131   
*ELSE                                                                      CBADJ.132   
            QN=CBC(L)*PQSAT(TSL(L))                                        CBADJ.133   
*ENDIF                                                                     CBADJ.134   
            DTSL=(TSL(L)+QN-GH1(L))/(1.0+ESCONB*QN/(TSL(L)*TSL(L)))        CBADJ.135   
            DTMAX=MAX(ABS(DTSL),DTMAX)                                     CBADJ.136   
            TSL(L)=TSL(L)-DTSL                                             CBADJ.137   
         ENDDO                                                             CBADJ.138   
         NIT=NIT+1                                                         CBADJ.139   
      ENDDO                                                                CBADJ.140   
!-----------------------------------------------------                     CBADJ.141   
! Calculate TR and new value for QR                                        CBADJ.142   
!-----------------------------------------------------                     CBADJ.143   
      DO L=NCRT,NCRB                                                       CBADJ.144   
        TR(L)=TSL(L)/PSK(L)                                                CBADJ.145   
*IF DEF,ONLY_V2                                                            CBADJ.146   
        QR(L)=ESCONA*EXP(-ESCONB/TSL(L))/PSL(L)                            CBADJ.147   
*ELSE                                                                      CBADJ.148   
        QR(L)=PQSAT(TSL(L))/PSL(L)                                         CBADJ.149   
*ENDIF                                                                     CBADJ.150   
      ENDDO                                                                CBADJ.151   
!-----------------------------------------------------                     CBADJ.152   
! Calculate dot product of QR and DSIGMA                                   CBADJ.153   
!-----------------------------------------------------                     CBADJ.154   
      QRINT=0.0                                                            CBADJ.155   
      DO L=NCRT,NCRB                                                       CBADJ.156   
         QRINT=QRINT+QR(L)*DSIGMA(L)                                       CBADJ.157   
      ENDDO                                                                CBADJ.158   
!-----------------------------------------------------                     CBADJ.159   
! Determine if QRINT is greater than QGINT                                 CBADJ.160   
!-----------------------------------------------------                     CBADJ.161   
      IF(QRINT.GT.QGINT) THEN                                              CBADJ.162   
C*      WRITE(2,2001) J,JH,NCRB,NCRT,CQ*QRINT/SINT,CQ*QGINT/SINT           CBADJ.163   
        IF(LCUBM)      CALL CUBM (NCRB,NCRT,I,IHEM,JH)                     CBADJ.164   
        IF(.NOT.LCUBM) CALL CUDIF(NCRB,NCRT,I,IHEM,JH)                     CBADJ.165   
      ELSE                                                                 CBADJ.166   
         !-----------------------------------------------------            CBADJ.167   
         !                                                                 CBADJ.168   
         !-----------------------------------------------------            CBADJ.169   
         TRINT=0.0                                                         CBADJ.170   
         DO L=NCRT,NCRB                                                    CBADJ.171   
            TRINT=TRINT+TR(L)*DSIGMA(L)                                    CBADJ.172   
         ENDDO                                                             CBADJ.173   
         DHL=(HGINT-TRINT-CTQUSE*QRINT)/SINT                               CBADJ.174   
         !-----------------------------------------------------            CBADJ.175   
         ! Loop across levels                                              CBADJ.176   
         !-----------------------------------------------------            CBADJ.177   
         DO L=NCRT,NCRB                                                    CBADJ.178   
            TR(L)=TR(L)+DHL                                                CBADJ.179   
            TTEND=(TR(L)-TG3(I,IHEM,JH,L))/CBADJT                          CBADJ.180   
            QTEND=(QR(L)-TRAG3(I,IHEM,JH,L,1))/CBADJT                      CBADJ.181   
            TTMC(L)=TTMC(L)+TTEND                                          CBADJ.182   
            QTMC(L)=QTMC(L)+QTEND                                          CBADJ.183   
            TG3(I,IHEM,JH,L)=TG3(I,IHEM,JH,L)+DELT2C*TTEND                 CBADJ.184   
            TRAG3(I,IHEM,JH,L,1)=TRAG3(I,IHEM,JH,L,1)+DELT2C*QTEND         CBADJ.185   
            CTCR(L,IHEM)=CTCR(L,IHEM)+1.0                                  CBADJ.186   
         ENDDO                                                             CBADJ.187   
         CTCR(NCRB,IHEM)=CTCR(NCRB,IHEM)-1.0                               CBADJ.188   
         RRCR(I,IHEM,JH)=RRCR(I,IHEM,JH)-RCON*PLG3(I,IHEM,JH)*             CBADJ.189   
     &        (QRINT-QGINT)/CBADJT                                         CBADJ.190   
*IF DEF,ONLY_V3                                                            CBADJ.191   
         !-----------------------------------------------------            CBADJ.192   
         ! Deep convection parameterised by precip.:  P is mm/day          CBADJ.193   
         !-----------------------------------------------------            CBADJ.194   
         P=-REAL(ITSPD)*RCON*PLG3(I,IHEM,JH)*(QRINT-QGINT)/CBADJT          CBADJ.195   
         IF (P.GT.0.15) THEN                                               CBADJ.196   
C Deep conv cloud vs precip based on Slingo 1987 now includes              RAD_CL_SEBAL.43    
C 75% reduction ABOVE CLOUD BASE (see later) as detailed in that paper     RAD_CL_SEBAL.44    
C            CFRAC(I,IHEM,5)=0.245+0.125*LOG(P)                            RAD_CL_SEBAL.45    
C            CFRAC(I,IHEM,5)=MIN(1.0,CFRAC(I,IHEM,5))                      RAD_CL_SEBAL.46    
            CFRAC(I,IHEM,5)=0.25*(0.245+0.125*LOG(P))                      RAD_CL_SEBAL.47    
            CFRAC(I,IHEM,5)=MIN(0.25,CFRAC(I,IHEM,5))                      RAD_CL_SEBAL.48    
C Large-scale cloud sceheme not designed for conditions                    RAD_CL_SEBAL.49    
C when convective cloud present and RH > 0.8.                              RAD_CL_SEBAL.50    
C Remove middle or low cloud when convective cloud present                 RAD_CL_SEBAL.51    
C High level anvil cirrus is allowed                                       RAD_CL_SEBAL.52    
            ICFLAG(I,IHEM,5,1)=NCRB                                        CBADJ.199   
            ICFLAG(I,IHEM,5,2)=NCRT                                        CBADJ.200   
         ENDIF                                                             CBADJ.201   
*ENDIF                                                                     CBADJ.202   
      ENDIF                                                                CBADJ.203   
      RETURN                                                               CBADJ.204   
      END                                                                  CBADJ.205   
*ENDIF                                                                     CBADJ.206   
*DECK CBCON                                                                CBCON.1     
*IF DEF,ABOVE_V1                                                           CBCON.2     
!=====================================================                     CBCON.3     
! DEEP CONVECTION SCHEME. NON-ENTRAINING CLOUD MODEL                       CBCON.4     
!=====================================================                     CBCON.5     
      SUBROUTINE CBCON(NCRB,NCRT,I,IHEM,JH)                                CBCON.6     
      IMPLICIT NONE                                                        CBCON.7     
*CALL PARAM1                                                               CBCON.8     
*CALL PARAM2                                                               CBCON.9     
*CALL PARAM3                                                               CBCON.10    
*CALL LEGAU                                                                CBCON.11    
*CALL GRIDPA3                                                              CBCON.12    
*CALL GRIDPC                                                               CBCON.13    
*CALL PHYSCA                                                               CBCON.14    
!-----------------------------------------------------                     CBCON.15    
! Passed arguments                                                         CBCON.16    
!-----------------------------------------------------                     CBCON.17    
      INTEGER :: NCRB                                                      CBCON.18    
      INTEGER :: NCRT                                                      CBCON.19    
      INTEGER :: I                                                         CBCON.20    
      INTEGER :: IHEM                                                      CBCON.21    
! Latitude index                                                           CBCON.22    
      INTEGER :: JH                                                        CBCON.23    
!-----------------------------------------------------                     CBCON.24    
! Local variables                                                          CBCON.25    
!-----------------------------------------------------                     CBCON.26    
      INTEGER :: NCRBM                                                     CBCON.27    
      INTEGER :: NCRTP                                                     CBCON.28    
      REAL :: DSELP                                                        CBCON.29    
      REAL :: QEL                                                          CBCON.30    
      INTEGER :: LM                                                        CBCON.31    
      REAL :: DSELM                                                        CBCON.32    
      REAL :: TTEND                                                        CBCON.33    
      REAL :: QTEND                                                        CBCON.34    
      REAL :: DSEL                                                         CBCON.35    
      REAL :: QELP                                                         CBCON.36    
      REAL :: QELM                                                         CBCON.37    
! Loop variables                                                           CBCON.38    
      INTEGER :: L                                                         CBCON.39    
!-----------------------------------------------------                     CBCON.40    
!                                                                          CBCON.41    
!-----------------------------------------------------                     CBCON.42    
      NCRBM=NCRB-1                                                         CBCON.43    
      NCRTP=NCRT+1                                                         CBCON.44    
      RRCR(I,IHEM,JH)=RRCR(I,IHEM,JH)+PLG3(I,IHEM,JH)*CCR*                 CBCON.45    
     &     (TRAG3(I,IHEM,JH,NCRB,1)-QC(NCRT))                              CBCON.46    
      DSELP=-CTQ*TRAG3(I,IHEM,JH,NCRB,1)                                   CBCON.47    
      QELP=TRAG3(I,IHEM,JH,NCRB,1)                                         CBCON.48    
      DSEL=DSELP                                                           CBCON.49    
      QEL=QELP                                                             CBCON.50    
      DO L=NCRB,NCRTP,-1                                                   CBCON.51    
         LM=L-1                                                            CBCON.52    
         DSELM=TG3(I,IHEM,JH,LM)-TC(LM)-CTQ*QC(LM)                         CBCON.53    
         TTEND=FWS(L)*(DSELP-DSELM)                                        CBCON.54    
         QTEND=FWS(L)*(QELP-TRAG3(I,IHEM,JH,LM,1))                         CBCON.55    
         TTMC(L)=TTMC(L)+TTEND                                             CBCON.56    
         QTMC(L)=QTMC(L)+QTEND                                             CBCON.57    
         TG3(I,IHEM,JH,L)=TG3(I,IHEM,JH,L)+DELT2C*TTEND                    CBCON.58    
         TRAG3(I,IHEM,JH,L,1)=TRAG3(I,IHEM,JH,L,1)+DELT2C*QTEND            CBCON.59    
         DSELP=DSEL                                                        CBCON.60    
         DSEL=DSELM                                                        CBCON.61    
         QELP=QEL                                                          CBCON.62    
         QEL=TRAG3(I,IHEM,JH,LM,1)                                         CBCON.63    
      ENDDO                                                                CBCON.64    
      DSELM=TC(NCRT)-TG3(I,IHEM,JH,NCRT)-CTQ*QC(NCRT)                      CBCON.65    
      QELM=QC(NCRT)+QC(NCRT)-TRAG3(I,IHEM,JH,NCRT,1)                       CBCON.66    
      TTEND=FWS(NCRT)*(DSELP-DSELM)                                        CBCON.67    
      QTEND=FWS(NCRT)*(QELP-QELM)                                          CBCON.68    
      TTMC(NCRT)=TTMC(NCRT)+TTEND                                          CBCON.69    
      QTMC(NCRT)=QTMC(NCRT)+QTEND                                          CBCON.70    
      TG3(I,IHEM,JH,NCRT)=TG3(I,IHEM,JH,NCRT)+DELT2C*TTEND                 CBCON.71    
      TRAG3(I,IHEM,JH,NCRT,1)=TRAG3(I,IHEM,JH,NCRT,1)+DELT2C*QTEND         CBCON.72    
C                                                                          CBCON.73    
      DO L=NCRT,NCRBM                                                      CBCON.74    
         CTCR(L,IHEM)=CTCR(L,IHEM)+1.0                                     CBCON.75    
      ENDDO                                                                CBCON.76    
      RETURN                                                               CBCON.77    
      END                                                                  CBCON.78    
*ENDIF                                                                     CBCON.79    
*DECK Z_CONVEC                                                             Z_CONVEC.1     
*IF DEF,ABOVE_V1                                                           Z_CONVEC.2     
!=====================================================                     Z_CONVEC.3     
! CONVECTION SCHEME. THIS ROUTINE FINDS UNSTABLE LAYERS AND                Z_CONVEC.4     
! CALLS RELEVANT ROUTINES TO CALCULATE TENDENCIES ETC.                     Z_CONVEC.5     
!=====================================================                     Z_CONVEC.6     
      SUBROUTINE CONVEC(JH)                                                Z_CONVEC.7     
      IMPLICIT NONE                                                        Z_CONVEC.8     
*CALL PARAM1                                                               Z_CONVEC.9     
*CALL PARAM2                                                               Z_CONVEC.10    
*CALL PARAM3                                                               Z_CONVEC.11    
*CALL BLANK                                                                Z_CONVEC.12    
*CALL LEGAU                                                                Z_CONVEC.13    
*CALL GRIDPA3                                                              Z_CONVEC.14    
*CALL GRIDPC                                                               Z_CONVEC.15    
*CALL PHYSCA                                                               Z_CONVEC.16    
*CALL MPIDECK                                                              Z_CONVEC.17    
!-----------------------------------------------------                     Z_CONVEC.18    
! Passed argument                                                          Z_CONVEC.19    
!-----------------------------------------------------                     Z_CONVEC.20    
! Latitude index                                                           Z_CONVEC.21    
      INTEGER :: JH                                                        Z_CONVEC.22    
*IF DEF,ONLY_V3                                                            Z_CONVEC.23    
!-----------------------------------------------------                     Z_CONVEC.24    
! External function                                                        Z_CONVEC.25    
!-----------------------------------------------------                     Z_CONVEC.26    
      REAL, EXTERNAL :: PQSAT                                              Z_CONVEC.27    
*ENDIF                                                                     Z_CONVEC.28    
!-----------------------------------------------------                     Z_CONVEC.29    
! Local variables                                                          Z_CONVEC.30    
!-----------------------------------------------------                     Z_CONVEC.31    
      LOGICAL :: LCDRY,LCWET                                               Z_CONVEC.32    
      REAL :: ESCON(NL),SIGMIN                                             Z_CONVEC.33    
      INTEGER :: LTOP                                                      Z_CONVEC.34    
      INTEGER :: LP                                                        Z_CONVEC.35    
      INTEGER :: NCRB                                                      Z_CONVEC.36    
      REAL :: TCLP                                                         Z_CONVEC.37    
      REAL :: QCL                                                          Z_CONVEC.38    
      REAL :: TCL                                                          Z_CONVEC.39    
      REAL :: QSL                                                          Z_CONVEC.40    
      INTEGER :: NCRT                                                      Z_CONVEC.41    
      LOGICAL :: lCont                                                     Z_CONVEC.42    
      INTEGER :: NIT                                                       Z_CONVEC.43    
      REAL :: DQN                                                          Z_CONVEC.44    
      REAL :: DQ                                                           Z_CONVEC.45    
      INTEGER :: NCT                                                       Z_CONVEC.46    
*IF DEF,ONLY_V3                                                            Z_CONVEC.47    
      REAL :: PRESSMIN                                                     Z_CONVEC.48    
      REAL :: TMIN                                                         Z_CONVEC.49    
      REAL :: QGO(NL)                                                      Z_CONVEC.50    
      REAL :: QEXS                                                         Z_CONVEC.51    
      REAL :: QEX                                                          Z_CONVEC.52    
*ENDIF                                                                     Z_CONVEC.53    
! Loop variables                                                           Z_CONVEC.54    
      INTEGER :: I, IHEM, L                                                Z_CONVEC.55    
*IF DEF,ONLY_V3                                                            Z_CONVEC.56    
!-----------------------------------------------------                     Z_CONVEC.57    
! 28-05-97 PMF Water vapour fix to stop too low values                     Z_CONVEC.58    
! takes water vapour from level below                                      Z_CONVEC.59    
! this produces a slight vertical advection of Q                           Z_CONVEC.60    
! assumes no -ve water vapour in bottom layer                              Z_CONVEC.61    
!-----------------------------------------------------                     Z_CONVEC.62    
      PRESSMIN=0.20000  !  Minimum parcel pressure for                     Z_CONVEC.63    
                        !  which moist convection is attempted.            Z_CONVEC.64    
      TMIN=0.31000418   !  Minimum parcel temperature (dedim.) for         Z_CONVEC.65    
                        !  which moist convection is attempted.            Z_CONVEC.66    
*ENDIF                                                                     Z_CONVEC.67    
      LTOP=NL-NLCR      !  NLCR gives highest level for which              Z_CONVEC.68    
                        !  convection is attempted.                        Z_CONVEC.69    
!-----------------------------------------------------                     Z_CONVEC.70    
! Loop through grid points on this latitude                                Z_CONVEC.71    
!-----------------------------------------------------                     Z_CONVEC.72    
      DO IHEM=1,NHEM                                                       Z_CONVEC.73    
         DO I=1,MGxx(iCol)                                                 Z_CONVEC.74    
C Allow some shallow convection rainout over ocean                         RAD_CL_SEBAL.8     
         IF(SVEGE(I,IHEM,JH).eq.1)THEN                                     RAD_CL_SEBAL.9     
           CURHM=80.0/100.0                                                RAD_CL_SEBAL.10    
           CUBMT=6.0*3600.0*WW                                             RAD_CL_SEBAL.11    
         ELSE                                                              RAD_CL_SEBAL.12    
           CURHM=200.0/100.0                                               RAD_CL_SEBAL.13    
           CUBMT=6.0*3600.0*WW                                             RAD_CL_SEBAL.14    
         ENDIF                                                             RAD_CL_SEBAL.15    
            DO L=1,NL                                                      Z_CONVEC.75    
               TTDC(L)=0.0                                                 Z_CONVEC.76    
               QTDC(L)=0.0                                                 Z_CONVEC.77    
               TTMC(L)=0.0                                                 Z_CONVEC.78    
               QTMC(L)=0.0                                                 Z_CONVEC.79    
*IF DEF,ONLY_V2                                                            Z_CONVEC.80    
               ESCON(L)=ESCONA/(PLG3(I,IHEM,JH)*SIGMA(L))                  Z_CONVEC.81    
*ELSE                                                                      Z_CONVEC.82    
               ESCON(L)=1./(PLG3(I,IHEM,JH)*SIGMA(L))                      Z_CONVEC.83    
               QGO(L)=TRAG3(I,IHEM,JH,L,1)                                 Z_CONVEC.84    
*ENDIF                                                                     Z_CONVEC.85    
            ENDDO                                                          Z_CONVEC.86    
*IF DEF,ONLY_V3                                                            Z_CONVEC.87    
            !-----------------------------------------------------         Z_CONVEC.88    
            ! Water vapour fix                                             Z_CONVEC.89    
            !-----------------------------------------------------         Z_CONVEC.90    
            DO L=1,NL-1                                                    Z_CONVEC.91    
               IF (TRAG3(I,IHEM,JH,L,1).LT.1.0E-6) THEN                    Z_CONVEC.92    
                  QEXS=(1.0E-6)-TRAG3(I,IHEM,JH,L,1)                       Z_CONVEC.93    
                  IF (L.EQ.1) THEN                                         Z_CONVEC.94    
                     QEXS=QEXS*SIGMAH(1)                                   Z_CONVEC.95    
                  ELSE                                                     Z_CONVEC.96    
                     QEXS=QEXS*(SIGMAH(L)-SIGMAH(L-1))                     Z_CONVEC.97    
                  ENDIF                                                    Z_CONVEC.98    
                  IF (L.NE.NL-1) THEN                                      Z_CONVEC.99    
                     QEX=QEXS/(SIGMAH(L+1)-SIGMAH(L))                      Z_CONVEC.100   
                  ELSE                                                     Z_CONVEC.101   
                     QEX=QEXS/(1.0-SIGMAH(L))                              Z_CONVEC.102   
                  ENDIF                                                    Z_CONVEC.103   
                  !---------------------------------------------------     Z_CONVEC.104   
                  ! Assumes no large scale rain here in layer              Z_CONVEC.105   
                  !---------------------------------------------------     Z_CONVEC.106   
                  QTLR(I,IHEM,L)=((1.0E-6)-QGO(L))/DELT2C                  Z_CONVEC.107   
                  QTLR(I,IHEM,L+1)=QTLR(I,IHEM,L+1)-                       Z_CONVEC.108   
     &                 QEX/DELT2C                                          Z_CONVEC.109   
                  TRAG3(I,IHEM,JH,L,1)=1.0E-6                              Z_CONVEC.110   
                  TRAG3(I,IHEM,JH,L+1,1)=TRAG3(I,IHEM,JH,L+1,1)-QEX        Z_CONVEC.111   
               ENDIF                                                       Z_CONVEC.112   
            ENDDO                                                          Z_CONVEC.113   
*ENDIF                                                                     Z_CONVEC.114   
            !-----------------------------------------------------         Z_CONVEC.115   
            ! DRY ADJUSTMENT                                               Z_CONVEC.116   
            !-----------------------------------------------------         Z_CONVEC.117   
            L=NL                                                           Z_CONVEC.118   
            !-----------------------------------------------------         Z_CONVEC.119   
            ! Begin new parcel curve                                       Z_CONVEC.120   
            !-----------------------------------------------------         Z_CONVEC.121   
 20         NCRB=L                                                         Z_CONVEC.122   
            LCDRY=.FALSE.                                                  Z_CONVEC.123   
            TCLP=TG3(I,IHEM,JH,L)                                          Z_CONVEC.124   
            QCL=TRAG3(I,IHEM,JH,L,1)                                       Z_CONVEC.125   
C     DRY ADIABAT TO NEXT LEVEL                                            Z_CONVEC.126   
 30         L=L-1                                                          Z_CONVEC.127   
            IF(L.LT.LTOP) GOTO 40                                          Z_CONVEC.128   
            TCL=TCLP*SK(L)                                                 Z_CONVEC.129   
            IF(TCL.LE.TG3(I,IHEM,JH,L)) GOTO 40 !If stable layer           Z_CONVEC.130   
C     BUOYANT - IF SATURATED - MOIST CONVECTION - IGNORE                   Z_CONVEC.131   
*IF DEF,ONLY_V2                                                            Z_CONVEC.132   
            QSL=ESCON(L)*EXP(-ESCONB/TCL)                                  Z_CONVEC.133   
            IF (QCL.GE.QSL) GOTO 40                                        Z_CONVEC.134   
*ELSE                                                                      Z_CONVEC.135   
            QSL=ESCON(L)*PQSAT(TCL)                                        Z_CONVEC.136   
            IF ( QCL.GE.QSL ) THEN ! Is parcel supersaturated?             Z_CONVEC.137   
               IF ( ( (SIGMA(NCRB)*PLG3(I,IHEM,JH)).GE.PRESSMIN )          Z_CONVEC.138   
     :              .AND.( TG3(I,IHEM,JH,NCRB).GE.TMIN ) ) GOTO 40         Z_CONVEC.139   
               !-----------------------------------------------------      Z_CONVEC.140   
               ! If parcel is in stratosphere, do dry rather than          Z_CONVEC.141   
               ! moist convection as the dry and moist adiabats are        Z_CONVEC.142   
               ! approximately parallel and dry convection is a            Z_CONVEC.143   
               ! lot cheaper.                                              Z_CONVEC.144   
               !-----------------------------------------------------      Z_CONVEC.145   
            ENDIF                                                          Z_CONVEC.146   
*ENDIF                                                                     Z_CONVEC.147   
            !-----------------------------------------------------         Z_CONVEC.148   
            ! Dry convection, continue parcel curve up.                    Z_CONVEC.149   
            !-----------------------------------------------------         Z_CONVEC.150   
 35         LCDRY=.TRUE.                                                   Z_CONVEC.151   
            TCLP=TCL                                                       Z_CONVEC.152   
            GOTO 30                                                        Z_CONVEC.153   
 40         CONTINUE                                                       Z_CONVEC.154   
            !-----------------------------------------------------         Z_CONVEC.155   
            ! STABLE LAYER OR MODEL TOP - ADJUST ANY UNSTABLE              Z_CONVEC.156   
            ! LAYER BELOW                                                  Z_CONVEC.157   
            !-----------------------------------------------------         Z_CONVEC.158   
            IF(LCDRY) THEN                                                 Z_CONVEC.159   
               NCRT=L+1                                                    Z_CONVEC.160   
               CALL DRYADJ(NCRB,NCRT,I,IHEM,JH)                            Z_CONVEC.161   
            ENDIF                                                          Z_CONVEC.162   
            IF(L.GT.LTOP) GOTO 20                                          Z_CONVEC.163   
            !-----------------------------------------------------         Z_CONVEC.164   
            ! MOIST CONVECTION                                             Z_CONVEC.165   
            !-----------------------------------------------------         Z_CONVEC.166   
            L=NL                                                           Z_CONVEC.167   
C         BEGIN NEW PARCEL CURVE                                           Z_CONVEC.168   
 100        NCRB=L                                                         Z_CONVEC.169   
            LCWET=.FALSE.                                                  Z_CONVEC.170   
*IF DEF,ONLY_V3                                                            Z_CONVEC.171   
            IF ( (SIGMA(NCRB)*PLG3(I,IHEM,JH)).LT.PRESSMIN ) THEN          Z_CONVEC.172   
               L=LTOP                                                      Z_CONVEC.173   
               GOTO 150                                                    Z_CONVEC.174   
            ELSEIF ( TG3(I,IHEM,JH,NCRB).LT.TMIN ) THEN                    Z_CONVEC.175   
               L=L-1                                                       Z_CONVEC.176   
               GOTO 100                                                    Z_CONVEC.177   
            ENDIF                                                          Z_CONVEC.178   
*ENDIF                                                                     Z_CONVEC.179   
            TC(L)=TG3(I,IHEM,JH,L)                                         Z_CONVEC.180   
            QC(L)=TRAG3(I,IHEM,JH,L,1)                                     Z_CONVEC.181   
C     UP ONE LEVEL - DRY ADIABAT AS FIRST GUESS                            Z_CONVEC.182   
 110        LP=L                                                           Z_CONVEC.183   
            L=L-1                                                          Z_CONVEC.184   
            IF(L.LT.LTOP) GOTO 150                                         Z_CONVEC.185   
            TC(L)=TC(LP)*SK(L)                                             Z_CONVEC.186   
            QC(L)=QC(LP)                                                   Z_CONVEC.187   
*IF DEF,ONLY_V2                                                            Z_CONVEC.188   
            QSL=ESCON(L)*EXP(-ESCONB/TC(L))                                Z_CONVEC.189   
*ELSE                                                                      Z_CONVEC.190   
            QSL=ESCON(L)*PQSAT(TC(L))                                      Z_CONVEC.191   
*ENDIF                                                                     Z_CONVEC.192   
C     IF SATURATED MAY BE MOIST CONVECTION                                 Z_CONVEC.193   
            IF(QC(L).GE.QSL) GOTO 120                                      Z_CONVEC.194   
C     TEST FOR DRY INSTABILITY (SHOULD BE STABLE)                          Z_CONVEC.195   
            GOTO 150            !No moist convection                       Z_CONVEC.196   
C     POSSIBLE MOIST CONVECTION - ITERATE FOR THETAE (T,Q)                 Z_CONVEC.197   
 120        NIT=0                                                          Z_CONVEC.198   
 130        NIT=NIT+1                                                      Z_CONVEC.199   
            DQN=QC(L)-QSL                                                  Z_CONVEC.200   
            DQ=DQN/(1.0+CCC*QSL/(TC(L)*TC(L)))                             Z_CONVEC.201   
            QC(L)=QC(L)-DQ                                                 Z_CONVEC.202   
            TC(L)=TC(L)+CTQ*DQ                                             Z_CONVEC.203   
            IF(ABS(DQN).LT.EPSIQ) GOTO 140                                 Z_CONVEC.204   
            IF(NIT.GT.10) GOTO 140                                         Z_CONVEC.205   
*IF DEF,ONLY_V2                                                            Z_CONVEC.206   
            QSL=ESCON(L)*EXP(-ESCONB/TC(L))                                Z_CONVEC.207   
*ELSE                                                                      Z_CONVEC.208   
            QSL=ESCON(L)*PQSAT(TC(L))                                      Z_CONVEC.209   
*ENDIF                                                                     Z_CONVEC.210   
            GOTO 130                                                       Z_CONVEC.211   
C     BUOYANCY TEST - IF STABLE GO TO 150                                  Z_CONVEC.212   
 140        IF(TC(L).LT.TG3(I,IHEM,JH,L)) GOTO 150                         Z_CONVEC.213   
C     MOIST CONVECTION - CONTINUE PARCEL CURVE UP                          Z_CONVEC.214   
            LCWET=.TRUE.                                                   Z_CONVEC.215   
            GOTO 110                                                       Z_CONVEC.216   
 150        CONTINUE                                                       Z_CONVEC.217   
            !-----------------------------------------------------         Z_CONVEC.218   
            ! STABLE LAYER OR MODEL TOP - ADJUST ANY UNSTABLE              Z_CONVEC.219   
            ! LAYER BELOW                                                  Z_CONVEC.220   
            !-----------------------------------------------------         Z_CONVEC.221   
            IF(LCWET) THEN                                                 Z_CONVEC.222   
               NCRT=LP                                                     Z_CONVEC.223   
               IF(NCRT.LT.NCUTOP) THEN                                     Z_CONVEC.224   
                  IF(.NOT.LCBADJ) CALL CBCON(NCRB,NCRT,I,IHEM,JH)          Z_CONVEC.225   
                  IF(LCBADJ)      CALL CBADJ(NCRB,NCRT,I,IHEM,JH)          Z_CONVEC.226   
               ELSE                                                        Z_CONVEC.227   
                  NCT=NCRT                                                 Z_CONVEC.228   
                  IF(.NOT.LCUBM)  CALL CUDIF(NCRB,NCT,I,IHEM,JH)           Z_CONVEC.229   
                  IF(LCUBM)       CALL CUBM (NCRB,NCT,I,IHEM,JH)           Z_CONVEC.230   
               ENDIF                                                       Z_CONVEC.231   
            ENDIF                                                          Z_CONVEC.232   
            IF(L.GT.LTOP) GOTO 100                                         Z_CONVEC.233   
            !-----------------------------------------------------         Z_CONVEC.234   
            ! COLLECT TENDENCIES AND INCREMENT T,Q FOR MOIST               Z_CONVEC.235   
            ! CONVECTION                                                   Z_CONVEC.236   
            !-----------------------------------------------------         Z_CONVEC.237   
            DO L=1,NL                                                      Z_CONVEC.238   
               TTCR(I,IHEM,L)=TTDC(L)+TTMC(L)                              Z_CONVEC.239   
*IF DEF,ONLY_V2                                                            Z_CONVEC.240   
               QTCR(I,IHEM,L)=QTDC(L)+QTMC(L)                              Z_CONVEC.241   
*ELSE                                                                      Z_CONVEC.242   
               QTCR(I,IHEM,L)=QTDC(L)+QTMC(L)+QTLR(I,IHEM,L)               Z_CONVEC.243   
               QTLR(I,IHEM,L)=0.0                                          Z_CONVEC.244   
*ENDIF                                                                     Z_CONVEC.245   
            ENDDO                                                          Z_CONVEC.246   
         ENDDO                                                             Z_CONVEC.247   
      ENDDO                                                                Z_CONVEC.248   
      RETURN                                                               Z_CONVEC.249   
      END                                                                  Z_CONVEC.250   
*ENDIF                                                                     Z_CONVEC.251   
*DECK CUBM                                                                 CUBM.1     
*IF DEF,ABOVE_V1                                                           CUBM.2     
!=====================================================                     CUBM.3     
! BETTS-MILLER NON-PRECIPITATING CONVECTION. FOLLOWS ECMWF TECH REP        CUBM.4     
! NO 43. VARIABLE TIMESCALE AND CLOUD-TOP FLUXES WHEN SHALLOW.             CUBM.5     
! OPTIONAL RAINOUT OVER A SPECIFIED REL-HUM.                               CUBM.6     
!=====================================================                     CUBM.7     
      SUBROUTINE CUBM(NCRB,NCT,I,IHEM,JH)                                  CUBM.8     
      IMPLICIT NONE                                                        CUBM.9     
*CALL PARAM1                                                               CUBM.10    
*CALL PARAM2                                                               CUBM.11    
*CALL PARAM3                                                               CUBM.12    
*CALL BLANK                                                                CUBM.13    
*CALL LEGAU                                                                CUBM.14    
*CALL GRIDPA3                                                              CUBM.15    
*CALL GRIDPC                                                               CUBM.16    
*CALL PHYSCA                                                               CUBM.17    
*CALL BATS                                                                 CUBM.18    
*CALL CPIERS                                                               CUBM.19    
*CALL MPIDECK                                                              CUBM.20    
!-----------------------------------------------------                     CUBM.21    
! Passed arguments                                                         CUBM.22    
!-----------------------------------------------------                     CUBM.23    
      INTEGER :: NCRB                                                      CUBM.24    
      INTEGER :: NCT                                                       CUBM.25    
      INTEGER :: I                                                         CUBM.26    
      INTEGER :: IHEM                                                      CUBM.27    
! Latitude index                                                           CUBM.28    
      INTEGER :: JH                                                        CUBM.29    
!-----------------------------------------------------                     CUBM.30    
! External function                                                        CUBM.31    
!-----------------------------------------------------                     CUBM.32    
      REAL, EXTERNAL :: FTSL                                               CUBM.33    
*IF DEF,ONLY_V3                                                            CUBM.34    
      REAL, EXTERNAL :: PQSAT                                              CUBM.35    
*ENDIF                                                                     CUBM.36    
!-----------------------------------------------------                     CUBM.37    
! Local variables                                                          CUBM.38    
!-----------------------------------------------------                     CUBM.39    
      REAL :: QGMIN                                                        CUBM.40    
      INTEGER :: NCRT                                                      CUBM.41    
      REAL :: CUTAU                                                        CUBM.42    
      REAL :: TLIM                                                         CUBM.43    
      INTEGER :: NLEV                                                      CUBM.44    
      REAL :: RKAP                                                         CUBM.45    
      REAL :: PL(NL)                                                       CUBM.46    
      REAL :: PFK(NL)                                                      CUBM.47    
      REAL :: TH(NL)                                                       CUBM.48    
      REAL :: QQG                                                          CUBM.49    
      REAL :: TSL(NL)                                                      CUBM.50    
      REAL :: PSL(NL)                                                      CUBM.51    
      REAL :: SCRIP(NL)                                                    CUBM.52    
      REAL :: THM                                                          CUBM.53    
      REAL :: QM                                                           CUBM.54    
      REAL :: TMT                                                          CUBM.55    
      REAL :: TSLM                                                         CUBM.56    
      REAL :: PSLM                                                         CUBM.57    
      REAL :: TLAPSM                                                       CUBM.58    
      REAL :: SINT                                                         CUBM.59    
      REAL :: SCRINT                                                       CUBM.60    
      REAL :: THR(NL)                                                      CUBM.61    
      REAL :: TR(NL)                                                       CUBM.62    
      REAL :: TGINT                                                        CUBM.63    
      REAL :: TRINT                                                        CUBM.64    
      REAL :: DTINT                                                        CUBM.65    
      REAL :: QR(NL)                                                       CUBM.66    
      REAL :: QGINT                                                        CUBM.67    
      REAL :: QRINT                                                        CUBM.68    
      REAL :: DQINT                                                        CUBM.69    
      REAL :: TGP                                                          CUBM.70    
      REAL :: QGP                                                          CUBM.71    
      REAL :: QS                                                           CUBM.72    
      REAL :: QEXS                                                         CUBM.73    
      REAL :: CTQUSE                                                       CUBM.74    
      REAL :: QEX                                                          CUBM.75    
      REAL :: QTCOR                                                        CUBM.76    
! Loop variable                                                            CUBM.77    
      INTEGER :: L                                                         CUBM.78    
!-----------------------------------------------------                     CUBM.79    
! Format statements                                                        CUBM.80    
!-----------------------------------------------------                     CUBM.81    
*IF DEF,ONLY_V2                                                            CUBM.82    
 2001 FORMAT(' CUBM QMIN APPLIED: I,IHEM,J,L,NCRB,NCRT,QG = ',             CUBM.83    
     &     6I5,F10.4)                                                      CUBM.84    
 2002 FORMAT(' CUBM QMIN APPLIED FOR QM: I,IHEM,J,NCRB,NCRT,QM = ',        CUBM.85    
     &     5I5,F10.4)                                                      CUBM.86    
 2003 FORMAT(' CUBM LAPSE RATE LIMIT IMPOSED: I,J,NCRB,NCRT = ',           CUBM.87    
     &     5I5)                                                            CUBM.88    
 2004 FORMAT(' CUBM MID LEVEL SWAP IGNORED: I,IHEM,J,NCRB,NCRT =',         CUBM.89    
     &     5I5)                                                            CUBM.90    
*ENDIF                                                                     CUBM.91    
 2103 FORMAT(' CUBM LAPSE RATE LIMIT IMPOSED: I,IHEM,J,NCRB,NCRT = ',      CUBM.92    
     &     5I5)                                                            CUBM.93    
 2104 FORMAT(' CUBM LAPSE RATE LIMIT IMPOSED: I,IHEM,J,NCRB,NCRT,TLIM      CUBM.94    
     +                                                     = ',5I5,F7.4)   CUBM.95    
!-----------------------------------------------------                     CUBM.96    
! Minimum moisture for mixing line calculations.                           CUBM.97    
!-----------------------------------------------------                     CUBM.98    
      QGMIN=1.E-6                                                          CUBM.99    
      IF(NCT.GE.NCUTOP) THEN                                               CUBM.100   
         IF(BLVB(I,IHEM).EQ.0.0)RETURN                                     CUBM.101   
         NCRT=NCT-1                                                        CUBM.102   
*IF DEF,ONLY_V2                                                            CUBM.103   
         CUTAU=CUT1/BLVB(I,IHEM)                                           CUBM.104   
*ELSE                                                                      CUBM.105   
         CUTAU=CUT1/(BLVB(I,IHEM)*BLCD(I,IHEM))                            CUBM.106   
*ENDIF                                                                     CUBM.107   
      ELSEIF (NCRB.GE.NCUTOP) THEN                                         CUBM.108   
         !-----------------------------------------------------            CUBM.109   
         ! Limit the convective top for swap points to the maximum         CUBM.110   
         ! height of shallow convection.                                   CUBM.111   
         ! Note that NCRT includes the level above cloud top.              CUBM.112   
         !-----------------------------------------------------            CUBM.113   
         NCRT=NCUTOP-1                                                     CUBM.114   
         CUTAU=CUBMT                                                       CUBM.115   
      ELSE                                                                 CUBM.116   
         !-----------------------------------------------------            CUBM.117   
         ! No adjustment for mid-level swap points.                        CUBM.118   
         !-----------------------------------------------------            CUBM.119   
*IF DEF,ONLY_V2                                                            CUBM.120   
         WRITE(200+MyPe,2004) I,IHEM,JH,NCRB,NCT                           CUBM.121   
*ENDIF                                                                     CUBM.122   
         RETURN                                                            CUBM.123   
      ENDIF                                                                CUBM.124   
*IF DEF,ONLY_V3                                                            CUBM.125   
!-----------------------------------------------------                     CUBM.126   
! Stable limit to mixing line slope d(theta)/dp=-10^-3 K/Pa                CUBM.127   
!-----------------------------------------------------                     CUBM.128   
      TLIM=-1.0E-3*P0/CT                                                   CUBM.129   
!-----------------------------------------------------                     CUBM.130   
! Shallow convection                                                       CUBM.131   
!-----------------------------------------------------                     CUBM.132   
      ICFLAG(I,IHEM,4,1)=NCRB                                              CUBM.133   
      ICFLAG(I,IHEM,4,2)=NCRT                                              CUBM.134   
      CFRAC(I,IHEM,4)=0.35  ! cloud fraction for all shallow convection    CUBM.135   
*ENDIF                                                                     CUBM.136   
      NLEV=1+NCRB-NCRT                                                     CUBM.137   
      RKAP=1.0/AKAP                                                        CUBM.138   
      DO L=NCRT,NCRB                                                       CUBM.139   
         PL(L)=SIGMA(L)*PLG3(I,IHEM,JH)                                    CUBM.140   
         PFK(L)=PL(L)**AKAP                                                CUBM.141   
         TH(L)=TG3(I,IHEM,JH,L)/PFK(L)                                     CUBM.142   
*IF DEF,ONLY_V2                                                            CUBM.143   
         IF (TRAG3(I,IHEM,JH,L,1).LT.QGMIN) THEN                           CUBM.144   
            WRITE(200+MyPe,2001) I,IHEM,JH,L,NCRB,NCRT,                    CUBM.145   
     &           CQ*TRAG3(I,IHEM,JH,L,1)                                   CUBM.146   
         ENDIF                                                             CUBM.147   
*ENDIF                                                                     CUBM.148   
         !-----------------------------------------------------            CUBM.149   
         ! Apply a consistent minimum moisture criterion in the            CUBM.150   
         ! mixing line calculations.                                       CUBM.151   
         !-----------------------------------------------------            CUBM.152   
         QQG=MAX(TRAG3(I,IHEM,JH,L,1),QGMIN)                               CUBM.153   
         TSL(L)=FTSL(TG3(I,IHEM,JH,L),QQG,PL(L))                           CUBM.154   
         PSL(L)=PL(L)*(TSL(L)/TG3(I,IHEM,JH,L))**RKAP                      CUBM.155   
         SCRIP(L)=PSL(L)-PL(L)                                             CUBM.156   
      ENDDO                                                                CUBM.157   
C                                                                          CUBM.158   
      THM=0.5*(TH(NCRB)+TH(NCRT))                                          CUBM.159   
      QM=0.5*(TRAG3(I,IHEM,JH,NCRB,1)+TRAG3(I,IHEM,JH,NCRT,1))             CUBM.160   
*IF DEF,ONLY_V2                                                            CUBM.161   
      IF (QM.LT.QGMIN) THEN                                                CUBM.162   
         WRITE(2+MyPe,2002) I,IHEM,NCRB,NCRT,CQ*QM                         CUBM.163   
      ENDIF                                                                CUBM.164   
*ENDIF                                                                     CUBM.165   
      QM=MAX(QM,QGMIN)                                                     CUBM.166   
      TMT=THM*PFK(NCRT)                                                    CUBM.167   
      TSLM=FTSL(TMT,QM,PL(NCRT))                                           CUBM.168   
      PSLM=PL(NCRT)*(TSLM/TMT)**RKAP                                       CUBM.169   
      TLAPSM=(THM-TH(NCRB))/(PSLM-PSL(NCRB))                               CUBM.170   
*IF DEF,ONLY_V2                                                            CUBM.171   
      !-----------------------------------------------------               CUBM.172   
      ! Limit the mixing line slope by a dry adiabat.                      CUBM.173   
      !-----------------------------------------------------               CUBM.174   
      IF (TLAPSM.GT.0.0) THEN                                              CUBM.175   
         WRITE(200+MyPe,2003) I,IHEM,JH,NCRB,NCRT                          CUBM.176   
      ENDIF                                                                CUBM.177   
*ELSE                                                                      CUBM.178   
      TLAPSM=MAX(TLAPSM,TLIM) ! limit stability                            CUBM.179   
*ENDIF                                                                     CUBM.180   
      TLAPSM=MIN(TLAPSM,0.0) ! prevents instability                        CUBM.181   
*IF DEF,ONLY_V3                                                            CUBM.182   
      IF (TLAPSM.GT.0.0) THEN                                              CUBM.183   
         WRITE(200+MyPe,2103) I,IHEM,JH,NCRB,NCRT                          CUBM.184   
      ELSEIF (TLAPSM.LT.TLIM)THEN                                          CUBM.185   
         WRITE(200+MyPe,2104) I,IHEM,JH,NCRB,NCRT,TLIM                     CUBM.186   
      ENDIF                                                                CUBM.187   
*ENDIF                                                                     CUBM.188   
!-----------------------------------------------------                     CUBM.189   
! Sum sigma levels                                                         CUBM.190   
!-----------------------------------------------------                     CUBM.191   
      SINT=0.0                                                             CUBM.192   
      DO L=NCRT,NCRB                                                       CUBM.193   
         SINT=SINT+DSIGMA(L)                                               CUBM.194   
      ENDDO                                                                CUBM.195   
!-----------------------------------------------------                     CUBM.196   
! Dot product of SCRIP and DSIGMA                                          CUBM.197   
!-----------------------------------------------------                     CUBM.198   
      SCRINT=0.0                                                           CUBM.199   
      DO L=NCRT,NCRB                                                       CUBM.200   
         SCRINT=SCRINT+SCRIP(L)*DSIGMA(L)                                  CUBM.201   
      ENDDO                                                                CUBM.202   
      SCRINT=SCRINT/SINT                                                   CUBM.203   
      SCRINT=MIN(0.0,SCRINT)                                               CUBM.204   
!-----------------------------------------------------                     CUBM.205   
! Loop across levels                                                       CUBM.206   
!-----------------------------------------------------                     CUBM.207   
      DO L=NCRT,NCRB                                                       CUBM.208   
         THR(L)=TH(NCRB)+TLAPSM*(PL(L)-PL(NCRB))                           CUBM.209   
         TR(L) =THR(L)*PFK(L)                                              CUBM.210   
      ENDDO                                                                CUBM.211   
!-----------------------------------------------------                     CUBM.212   
! Dot prodcuts                                                             CUBM.213   
!-----------------------------------------------------                     CUBM.214   
      TGINT=0.0                                                            CUBM.215   
      TRINT=0.0                                                            CUBM.216   
      DO L=NCRT,NCRB                                                       CUBM.217   
         TGINT=TGINT+TG3(I,IHEM,JH,L)*DSIGMA(L)                            CUBM.218   
         TRINT=TRINT+TR(L)*DSIGMA(L)                                       CUBM.219   
      ENDDO                                                                CUBM.220   
      TGINT=TGINT/SINT                                                     CUBM.221   
      TRINT=TRINT/SINT                                                     CUBM.222   
      DTINT=TGINT-TRINT                                                    CUBM.223   
!-----------------------------------------------------                     CUBM.224   
! Loop across levels                                                       CUBM.225   
!-----------------------------------------------------                     CUBM.226   
      DO L=NCRT,NCRB                                                       CUBM.227   
         TR(L)=TR(L)+DTINT                                                 CUBM.228   
         PSL(L)=SCRINT+PL(L)                                               CUBM.229   
         TSL(L)=TR(L)*(PSL(L)/PL(L))**AKAP                                 CUBM.230   
*IF DEF,ONLY_V2                                                            CUBM.231   
         QR(L)=ESCONA*EXP(-ESCONB/TSL(L))/PSL(L)                           CUBM.232   
*ELSE                                                                      CUBM.233   
         QR(L)=PQSAT(TSL(L))/PSL(L)                                        CUBM.234   
*ENDIF                                                                     CUBM.235   
      ENDDO                                                                CUBM.236   
!-----------------------------------------------------                     CUBM.237   
! Dot products                                                             CUBM.238   
!-----------------------------------------------------                     CUBM.239   
      QGINT=0.0                                                            CUBM.240   
      QRINT=0.0                                                            CUBM.241   
      DO L=NCRT,NCRB                                                       CUBM.242   
         QGINT=QGINT+TRAG3(I,IHEM,JH,L,1)*DSIGMA(L)                        CUBM.243   
         QRINT=QRINT+QR(L)*DSIGMA(L)                                       CUBM.244   
      ENDDO                                                                CUBM.245   
      QGINT=QGINT/SINT                                                     CUBM.246   
      QRINT=QRINT/SINT                                                     CUBM.247   
      DQINT=QGINT-QRINT                                                    CUBM.248   
!-----------------------------------------------------                     CUBM.249   
! Loop across levels                                                       CUBM.250   
!-----------------------------------------------------                     CUBM.251   
      DO L=NCRT,NCRB                                                       CUBM.252   
         QR(L)=QR(L)+DQINT                                                 CUBM.253   
         TTMC(L)=(TR(L)-TG3(I,IHEM,JH,L))/CUTAU                            CUBM.254   
         QTMC(L)=(QR(L)-TRAG3(I,IHEM,JH,L,1))/CUTAU                        CUBM.255   
      ENDDO                                                                CUBM.256   
C                                                                          CUBM.257   
      IF(CURHM.LT.1.00001) THEN                                            CUBM.258   
         DO L=NCRT,NCRB                                                    CUBM.259   
            TGP=TG3(I,IHEM,JH,L)+DELT2C*TTMC(L)                            CUBM.260   
            QGP=TRAG3(I,IHEM,JH,L,1)+DELT2C*QTMC(L)                        CUBM.261   
*IF DEF,ONLY_V2                                                            CUBM.262   
            QS=CURHM*ESCONA*EXP(-ESCONB/TGP)/PL(L)                         CUBM.263   
*ELSE                                                                      CUBM.264   
            QS=CURHM*PQSAT(TGP)/PL(L)                                      CUBM.265   
*ENDIF                                                                     CUBM.266   
            QEXS=QGP-QS                                                    CUBM.267   
*IF DEF,ONLY_V3                                                            CUBM.268   
            !-----------------------------------------------------         CUBM.269   
            ! Choose appropriate value of latent heat based on             CUBM.270   
            ! ground T ie, we assume it snows if the ground is             CUBM.271   
            ! colder than 273.15K                                          CUBM.272   
            !-----------------------------------------------------         CUBM.273   
            IF (tstar(I,IHEM,JH).gt.0.363224029) THEN                      CUBM.274   
               ctquse=ctq                                                  CUBM.275   
            ELSE                                                           CUBM.276   
               ctquse=ctqi                                                 CUBM.277   
            ENDIF                                                          CUBM.278   
*ENDIF                                                                     CUBM.279   
            QEX=QEXS/(1.0+CTQ*QS*ESCONB/(TGP*TGP))                         CUBM.280   
            IF (QEXS.LT.0.0) THEN                                          CUBM.281   
               QEX=0.0                                                     CUBM.282   
            END IF                                                         CUBM.283   
            QTCOR=-QEX/DELT2C                                              CUBM.284   
            TTMC(L)=TTMC(L)-CTQUSE*QTCOR                                   CUBM.285   
            QTMC(L)=QTMC(L)+QTCOR                                          CUBM.286   
            RRCR(I,IHEM,JH)=RRCR(I,IHEM,JH)-QTCOR*CLR(L)*PLG3(I,IHEM,JH)   CUBM.287   
         ENDDO                                                             CUBM.288   
      ENDIF                                                                CUBM.289   
C                                                                          CUBM.290   
      DO L=NCRT,NCRB                                                       CUBM.291   
         TG3(I,IHEM,JH,L)=TG3(I,IHEM,JH,L)+DELT2C*TTMC(L)                  CUBM.292   
         TRAG3(I,IHEM,JH,L,1)=TRAG3(I,IHEM,JH,L,1)+DELT2C*QTMC(L)          CUBM.293   
         CTCR(L,IHEM)=CTCR(L,IHEM)+1.0                                     CUBM.294   
      ENDDO                                                                CUBM.295   
      CTCR(NCRB,IHEM)=CTCR(NCRB,IHEM)-1.0                                  CUBM.296   
      CTCR(NCRT,IHEM)=CTCR(NCRT,IHEM)-1.0                                  CUBM.297   
C                                                                          CUBM.298   
      RETURN                                                               CUBM.299   
      END                                                                  CUBM.300   
*ENDIF                                                                     CUBM.301   
*DECK CUDIF                                                                CUDIF.1     
*IF DEF,ABOVE_V1                                                           CUDIF.2     
!=====================================================                     CUDIF.3     
! NON-PRECIPITATING CONVECTION. DIFFUSION TOWARDS MIXING-LINE THETA        CUDIF.4     
! AND CONSTANT Q. CLOUD-TOP FLUXES AND VARIABLE K'S WHEN SHALLOW.          CUDIF.5     
! OPTIONAL RAINOUT OVER A SPECIFIED REL-HUM.                               CUDIF.6     
!=====================================================                     CUDIF.7     
      SUBROUTINE CUDIF(NCRB,NCT,I,IHEM,JH)                                 CUDIF.8     
      IMPLICIT NONE                                                        CUDIF.9     
*CALL PARAM1                                                               CUDIF.10    
*CALL PARAM2                                                               CUDIF.11    
*CALL PARAM3                                                               CUDIF.12    
*CALL BLANK                                                                CUDIF.13    
*CALL LEGAU                                                                CUDIF.14    
*CALL GRIDPA3                                                              CUDIF.15    
*CALL GRIDPC                                                               CUDIF.16    
*CALL PHYSCA                                                               CUDIF.17    
*CALL BATS                                                                 CUDIF.18    
*CALL MPIDECK                                                              CUDIF.19    
!-----------------------------------------------------                     CUDIF.20    
! Passed arguments                                                         CUDIF.21    
!-----------------------------------------------------                     CUDIF.22    
      INTEGER :: NCRB                                                      CUDIF.23    
      INTEGER :: NCT                                                       CUDIF.24    
      INTEGER :: I                                                         CUDIF.25    
      INTEGER :: IHEM                                                      CUDIF.26    
! Latitude index                                                           CUDIF.27    
      INTEGER :: JH                                                        CUDIF.28    
!-----------------------------------------------------                     CUDIF.29    
! External functions                                                       CUDIF.30    
!-----------------------------------------------------                     CUDIF.31    
      REAL, EXTERNAL :: FTSL                                               CUDIF.32    
*IF DEF,ONLY_V3                                                            CUDIF.33    
      REAL, EXTERNAL :: PQSAT                                              CUDIF.34    
*ENDIF                                                                     CUDIF.35    
!-----------------------------------------------------                     CUDIF.36    
! Local variables                                                          CUDIF.37    
!-----------------------------------------------------                     CUDIF.38    
      REAL :: QGMIN                                                        CUDIF.39    
      REAL :: TLIM                                                         CUDIF.40    
      REAL :: ESCON                                                        CUDIF.41    
      INTEGER :: NCRT                                                      CUDIF.42    
      REAL :: AKTCU                                                        CUDIF.43    
      REAL :: AKQCU                                                        CUDIF.44    
      INTEGER :: NLEV                                                      CUDIF.45    
      INTEGER :: NCRTP                                                     CUDIF.46    
      INTEGER :: NCRBM                                                     CUDIF.47    
      REAL :: RKAP                                                         CUDIF.48    
      REAL :: PL(NL)                                                       CUDIF.49    
      REAL :: PFK(NL)                                                      CUDIF.50    
      REAL :: THB                                                          CUDIF.51    
      REAL :: QQG                                                          CUDIF.52    
      REAL :: TSB                                                          CUDIF.53    
      REAL :: PSLB                                                         CUDIF.54    
      REAL :: THM                                                          CUDIF.55    
      REAL :: QM                                                           CUDIF.56    
      REAL :: TMT                                                          CUDIF.57    
      REAL :: TSLM                                                         CUDIF.58    
      REAL :: PSLM                                                         CUDIF.59    
      REAL :: TLAPSM                                                       CUDIF.60    
      REAL :: THRL                                                         CUDIF.61    
      REAL :: TR(NL)                                                       CUDIF.62    
      REAL :: TLPH                                                         CUDIF.63    
      REAL :: FPH                                                          CUDIF.64    
      REAL :: DGPH                                                         CUDIF.65    
      REAL :: DTPH                                                         CUDIF.66    
      REAL :: FMH                                                          CUDIF.67    
      REAL :: DQMH                                                         CUDIF.68    
      REAL :: DTMH                                                         CUDIF.69    
      REAL :: DQPH                                                         CUDIF.70    
      REAL :: SINT                                                         CUDIF.71    
      REAL :: TTCOR                                                        CUDIF.72    
      REAL :: TGP                                                          CUDIF.73    
      REAL :: QGP                                                          CUDIF.74    
      REAL :: QS                                                           CUDIF.75    
      REAL :: QEXS                                                         CUDIF.76    
      REAL :: QEX                                                          CUDIF.77    
      REAL :: QTCOR                                                        CUDIF.78    
! Loop variables                                                           CUDIF.79    
      INTEGER :: L                                                         CUDIF.80    
!-----------------------------------------------------                     CUDIF.81    
! Format statments                                                         CUDIF.82    
!-----------------------------------------------------                     CUDIF.83    
 2001 FORMAT(' CUDIF QMIN APPLIED AT BAS: I,IHEM,J,NCRB,NCRT,QG =',        CUDIF.84    
     &     6I5,F10.4)                                                      CUDIF.85    
 2002 FORMAT(' CUDIF QMIN APPLIED FOR QM: I,IHEM,J,NCRB,NCRT,QM =',        CUDIF.86    
     &     5I5,F10.4)                                                      CUDIF.87    
*IF DEF,ONLY_V2                                                            CUDIF.88    
 2003 FORMAT(' CUDIF LAPSE RATE LIMIT IMPOSED: I,J,NCRB,NCRT = ',          CUDIF.89    
     &     5I5)                                                            CUDIF.90    
 2004 FORMAT(' CUDIF MID LEVEL SWAP IGNORED: I,IHEM,J,NCRB,NCRT =',        CUDIF.91    
     &     5I5)                                                            CUDIF.92    
*ELSE                                                                      CUDIF.93    
 2103 FORMAT(' CUBM LAPSE RATE LIMIT IMPOSED: I,IHEM,J,NCRB,NCRT = ',      CUDIF.94    
     &     5I5)                                                            CUDIF.95    
 2104 FORMAT(' CUBM LAPSE RATE LIMIT IMPOSED: I,IHEM,J,NCRB,NCRT,TLIM',    CUDIF.96    
     &       ' = ',5I5,F7.4)                                               CUDIF.97    
*ENDIF                                                                     CUDIF.98    
*IF DEF,ONLY_V2                                                            CUDIF.99    
!-----------------------------------------------------                     CUDIF.100   
! Minimum moisture for mixing line calculations.                           CUDIF.101   
!-----------------------------------------------------                     CUDIF.102   
      QGMIN=1.E-6                                                          CUDIF.103   
C                                                                          CUDIF.104   
      ESCON=ESCONA/PLG3(I,IHEM,JH)                                         CUDIF.105   
*ELSE                                                                      CUDIF.106   
!-----------------------------------------------------                     CUDIF.107   
! Stable limit to mixing line slope d(theta)/dp=-10^-3 K/Pa                CUDIF.108   
!-----------------------------------------------------                     CUDIF.109   
      TLIM=-1.0E-3*P0/CT                                                   CUDIF.110   
C                                                                          CUDIF.111   
      ESCON=1./PLG3(I,IHEM,JH)                                             CUDIF.112   
*ENDIF                                                                     CUDIF.113   
      IF(NCT.GE.NCUTOP) THEN                                               CUDIF.114   
         IF(BLVB(I,IHEM).EQ.0.0)RETURN                                     CUDIF.115   
         NCRT=NCT-1                                                        CUDIF.116   
*IF DEF,ONLY_V2                                                            CUDIF.117   
         AKTCU=BLVB(I,IHEM)*CUT2/CUT1                                      CUDIF.118   
*ELSE                                                                      CUDIF.119   
         AKTCU=BLVB(I,IHEM)*BLCD(I,IHEM)*CUT2/CUT1                         CUDIF.120   
*ENDIF                                                                     CUDIF.121   
      ELSE IF (NCRB.GE.NCUTOP) THEN                                        CUDIF.122   
         !-----------------------------------------------------            CUDIF.123   
         ! Limit the convective top for swap points to the maximum         CUDIF.124   
         ! height of shallow convection.                                   CUDIF.125   
         ! Note that NCRT includes the level above cloud top.              CUDIF.126   
         !-----------------------------------------------------            CUDIF.127   
         NCRT=NCUTOP-1                                                     CUDIF.128   
         AKTCU=AKTC                                                        CUDIF.129   
      ELSE                                                                 CUDIF.130   
         !-----------------------------------------------------            CUDIF.131   
         ! No adjustment for mid-level swap points.                        CUDIF.132   
         !-----------------------------------------------------            CUDIF.133   
*IF DEF,ONLY_V2                                                            CUDIF.134   
         WRITE(200+MyPe,2004) I,IHEM,JH,NCRB,NCT                           CUDIF.135   
*ENDIF                                                                     CUDIF.136   
         RETURN                                                            CUDIF.137   
      ENDIF                                                                CUDIF.138   
      AKQCU=AKTCU*AKQC/AKTC                                                CUDIF.139   
      NLEV=1+NCRB-NCRT                                                     CUDIF.140   
      NCRTP=NCRT+1                                                         CUDIF.141   
      NCRBM=NCRB-1                                                         CUDIF.142   
C                                                                          CUDIF.143   
      RKAP=1.0/AKAP                                                        CUDIF.144   
      DO L=NCRT,NCRB                                                       CUDIF.145   
         PL(L)=SIGMA(L)*PLG3(I,IHEM,JH)                                    CUDIF.146   
         PFK(L)=PL(L)**AKAP                                                CUDIF.147   
      ENDDO                                                                CUDIF.148   
      THB=TG3(I,IHEM,JH,NCRB)/PFK(NCRB)                                    CUDIF.149   
      IF (TRAG3(I,IHEM,JH,NCRB,1).LT.QGMIN) THEN                           CUDIF.150   
         WRITE(200+MyPe,2001) I,IHEM,JH,L,NCRB,NCRT,                       CUDIF.151   
     &        CQ*TRAG3(I,IHEM,JH,NCRB,1)                                   CUDIF.152   
      ENDIF                                                                CUDIF.153   
!-----------------------------------------------------                     CUDIF.154   
! Apply a consistent minimum moisture criterion in the mixing line         CUDIF.155   
! calculations.                                                            CUDIF.156   
!-----------------------------------------------------                     CUDIF.157   
      QQG=MAX(TRAG3(I,IHEM,JH,NCRB,1),QGMIN)                               CUDIF.158   
      TSB=FTSL(TG3(I,IHEM,JH,NCRB),QQG,PL(NCRB))                           CUDIF.159   
      PSLB=PL(NCRB)*(TSB/TG3(I,IHEM,JH,NCRB))**RKAP                        CUDIF.160   
      THM=0.5*(THB+TG3(I,IHEM,JH,NCRT)/PFK(NCRT))                          CUDIF.161   
      QM =0.5*(TRAG3(I,IHEM,JH,NCRB,1)+TRAG3(I,IHEM,JH,NCRT,1))            CUDIF.162   
      IF (QM.LT.QGMIN) THEN                                                CUDIF.163   
         WRITE(2,2002) I,IHEM,JH,NCRB,NCRT,CQ*QM                           CUDIF.164   
      ENDIF                                                                CUDIF.165   
      QM=MAX(QM,QGMIN)                                                     CUDIF.166   
      TMT=THM*PFK(NCRT)                                                    CUDIF.167   
      TSLM=FTSL(TMT,QM,PL(NCRT))                                           CUDIF.168   
      PSLM=PL(NCRT)*(TSLM/TMT)**RKAP                                       CUDIF.169   
      TLAPSM=(THM-THB)/(PSLM-PSLB)                                         CUDIF.170   
*IF DEF,ONLY_V2                                                            CUDIF.171   
!-----------------------------------------------------                     CUDIF.172   
! Limit the mixing line slope by a dry adiabat.                            CUDIF.173   
!-----------------------------------------------------                     CUDIF.174   
      IF (TLAPSM.GT.0.0) THEN                                              CUDIF.175   
         WRITE(200+MyPe,2003) I,IHEM,JH,NCRB,NCRT                          CUDIF.176   
      ENDIF                                                                CUDIF.177   
*ELSE                                                                      CUDIF.178   
      TLAPSM=MAX(TLAPSM,TLIM) ! limit stability                            CUDIF.179   
*ENDIF                                                                     CUDIF.180   
      TLAPSM=MIN(TLAPSM,0.0) ! prevents instability                        CUDIF.181   
*IF DEF,ONLY_V3                                                            CUDIF.182   
      IF (TLAPSM.GT.0.0) THEN                                              CUDIF.183   
         WRITE(200+MyPe,2103) I,IHEM,JH,NCRB,NCRT                          CUDIF.184   
      ELSEIF (TLAPSM.LT.TLIM)THEN                                          CUDIF.185   
         WRITE(200+MyPe,2104) I,IHEM,JH,NCRB,NCRT,TLIM                     CUDIF.186   
      ENDIF                                                                CUDIF.187   
*ENDIF                                                                     CUDIF.188   
                                                                           CUDIF.189   
      DO L=NCRT,NCRB                                                       CUDIF.190   
         THRL=THB+(PL(L)-PL(NCRB))*TLAPSM                                  CUDIF.191   
         TR(L)=THRL*PFK(L)                                                 CUDIF.192   
      ENDDO                                                                CUDIF.193   
C                                                                          CUDIF.194   
      TLPH=TG3(I,IHEM,JH,NCRT)+TG3(I,IHEM,JH,NCRTP)                        CUDIF.195   
      FPH=FB(NCRT)/(TLPH*TLPH)                                             CUDIF.196   
      DQPH=TRAG3(I,IHEM,JH,NCRTP,1)-TRAG3(I,IHEM,JH,NCRT,1)                CUDIF.197   
      DTPH=SK(NCRT)*(TG3(I,IHEM,JH,NCRTP)-TR(NCRTP))-                      CUDIF.198   
     &     (TG3(I,IHEM,JH,NCRT)-TR(NCRT))                                  CUDIF.199   
      TTMC(NCRT)=AKTCU*FPH*DTPH/DSIGMA(NCRT)                               CUDIF.200   
      QTMC(NCRT)=AKQCU*FPH*DQPH/DSIGMA(NCRT)                               CUDIF.201   
C                                                                          CUDIF.202   
      IF(NLEV.GT.2) THEN                                                   CUDIF.203   
         DO L=NCRTP,NCRBM                                                  CUDIF.204   
            FMH=FPH                                                        CUDIF.205   
            DQMH=DQPH                                                      CUDIF.206   
            DTMH=DTPH/SK(L-1)                                              CUDIF.207   
            TLPH=TG3(I,IHEM,JH,L+1)+TG3(I,IHEM,JH,L)                       CUDIF.208   
            FPH=FB(L)/(TLPH*TLPH)                                          CUDIF.209   
            DQPH=TRAG3(I,IHEM,JH,L+1,1)-TRAG3(I,IHEM,JH,L,1)               CUDIF.210   
            DTPH=SK(L)*(TG3(I,IHEM,JH,L+1)-TR(L+1))-                       CUDIF.211   
     &           (TG3(I,IHEM,JH,L)-TR(L))                                  CUDIF.212   
            TTMC(L)=AKTCU*(FPH*DTPH-FMH*DTMH)/DSIGMA(L)                    CUDIF.213   
            QTMC(L)=AKQCU*(FPH*DQPH-FMH*DQMH)/DSIGMA(L)                    CUDIF.214   
            CTCR(L,IHEM)=CTCR(L,IHEM)+1.0                                  CUDIF.215   
         ENDDO                                                             CUDIF.216   
      ENDIF                                                                CUDIF.217   
C                                                                          CUDIF.218   
      TTMC(NCRB)=-AKTCU*FPH*DTPH/(SK(NCRBM)*DSIGMA(NCRB))                  CUDIF.219   
      QTMC(NCRB)=-AKQCU*FPH*DQPH/DSIGMA(NCRB)                              CUDIF.220   
!-----------------------------------------------------                     CUDIF.221   
! Sum sigma levels                                                         CUDIF.222   
!-----------------------------------------------------                     CUDIF.223   
      SINT=0.0                                                             CUDIF.224   
      DO L=NCRT,NCRB                                                       CUDIF.225   
         SINT=SINT+DSIGMA(L)                                               CUDIF.226   
      ENDDO                                                                CUDIF.227   
!-----------------------------------------------------                     CUDIF.228   
! Dot product of TTMC and DISGMA                                           CUDIF.229   
!-----------------------------------------------------                     CUDIF.230   
      TTCOR=0.0                                                            CUDIF.231   
      DO L=NCRT,NCRB                                                       CUDIF.232   
         TTCOR=TTCOR+TTMC(L)*DSIGMA(L)                                     CUDIF.233   
      ENDDO                                                                CUDIF.234   
      TTCOR=TTCOR/SINT                                                     CUDIF.235   
!-----------------------------------------------------                     CUDIF.236   
! Loop across levels                                                       CUDIF.237   
!-----------------------------------------------------                     CUDIF.238   
      DO L=NCRT,NCRB                                                       CUDIF.239   
         TTMC(L)=TTMC(L)-TTCOR                                             CUDIF.240   
      ENDDO                                                                CUDIF.241   
C                                                                          CUDIF.242   
      IF(CURHM.LT.1.00001) THEN                                            CUDIF.243   
         DO L=NCRT,NCRB                                                    CUDIF.244   
            TGP=TG3(I,IHEM,JH,L)+DELT2C*TTMC(L)                            CUDIF.245   
            QGP=TRAG3(I,IHEM,JH,L,1)+DELT2C*QTMC(L)                        CUDIF.246   
*IF DEF,ONLY_V2                                                            CUDIF.247   
            QS=CURHM*ESCON*EXP(-ESCONB/TGP)/SIGMA(L)                       CUDIF.248   
*ELSE                                                                      CUDIF.249   
            QS=CURHM*ESCON*PQSAT(TGP)/SIGMA(L)                             CUDIF.250   
*ENDIF                                                                     CUDIF.251   
            QEXS=QGP-QS                                                    CUDIF.252   
            QEX=QEXS/(1.0+CTQ*QS*ESCONB/(TGP*TGP))                         CUDIF.253   
            IF (QEXS.LT.0.0) THEN                                          CUDIF.254   
               QEX=0.0                                                     CUDIF.255   
            END IF                                                         CUDIF.256   
            QTCOR=-QEX/DELT2C                                              CUDIF.257   
            TTMC(L)=TTMC(L)-CTQ*QTCOR                                      CUDIF.258   
            QTMC(L)=QTMC(L)+QTCOR                                          CUDIF.259   
            RRCR(I,IHEM,JH)=RRCR(I,IHEM,JH)-QTCOR*CLR(L)*PLG3(I,IHEM,JH)   CUDIF.260   
         ENDDO                                                             CUDIF.261   
      ENDIF                                                                CUDIF.262   
C                                                                          CUDIF.263   
      DO L=NCRT,NCRB                                                       CUDIF.264   
         TG3(I,IHEM,JH,L)=TG3(I,IHEM,JH,L)+DELT2C*TTMC(L)                  CUDIF.265   
         TRAG3(I,IHEM,JH,L,1)=TRAG3(I,IHEM,JH,L,1)+DELT2C*QTMC(L)          CUDIF.266   
      ENDDO                                                                CUDIF.267   
C                                                                          CUDIF.268   
      RETURN                                                               CUDIF.269   
      END                                                                  CUDIF.270   
*ENDIF                                                                     CUDIF.271   
*DECK DANALV                                                               DANALV.1     
*IF DEF,ABOVE_V1                                                           DANALV.2     
!=====================================================                     DANALV.3     
! Perform all the direct Legendre transforms for the diabatic              DANALV.4     
! part of the timestep at the current latitude (pair), in place            DANALV.5     
! of separate calls to HANAL for individual transform types.               DANALV.6     
!                                                                          DANALV.7     
! An even/odd value of ITYPE denotes a spectral field of even/odd          DANALV.8     
! symmetry.                                                                DANALV.9     
!                                                                          DANALV.10    
! Maximum vector efficiency is achieved by chaining all multi-level        DANALV.11    
! transforms in one loop and by chaining all single-level transforms       DANALV.12    
! in a second loop.                                                        DANALV.13    
!                                                                          DANALV.14    
! All dummy argument arrays are declared complex.                          DANALV.15    
! All array dimensions are parameters.                                     DANALV.16    
! Multi-level arrays are 3-dimensional.                                    DANALV.17    
!                                                                          DANALV.18    
! Tracers (QNLG,QT) are included conditionally inside inner loops.         DANALV.19    
! This does *not* affect vectorisation, since the number of tracers,       DANALV.20    
! NTRAC, is a parameter and the relevant IF constructs are removed         DANALV.21    
! at compilation.  The same applies to code conditional on NHEM.           DANALV.22    
! (Only tested on Cray J90 with cf77).                                     DANALV.23    
!                                                                          DANALV.24    
! NOTE: The y-derivative transforms use integration by parts and           DANALV.25    
!       are valid only if the input field has zero zonal mean at           DANALV.26    
!       both poles.                                                        DANALV.27    
!                                                                          DANALV.28    
! NOTE: *** THE INPUT FOURIER FIELDS ARE MODIFIED IF GLOBAL ***            DANALV.29    
!                                                                          DANALV.30    
! Original version for IGCM2.             Mike Blackburn,  04.09.98.       DANALV.31    
!                                                                          DANALV.32    
!=====================================================                     DANALV.33    
      SUBROUTINE DANALV                                                    DANALV.34    
      IMPLICIT NONE                                                        DANALV.35    
*CALL PARAM1                                                               DANALV.36    
*CALL PARAM2                                                               DANALV.37    
*CALL PARAM3                                                               DANALV.38    
*CALL BLANK                                                                DANALV.39    
*CALL LEGAU                                                                DANALV.40    
*CALL POLYNO                                                               DANALV.41    
*CALL GRIDPA                                                               DANALV.42    
*CALL GRIDPB                                                               DANALV.43    
*CALL SPECTR2                                                              DANALV.44    
*CALL MPIDECK                                                              DANALV.45    
!-----------------------------------------------------                     DANALV.46    
! Local variables                                                          DANALV.47    
!-----------------------------------------------------                     DANALV.48    
      REAL :: AW1256                                                       DANALV.49    
      REAL :: AW3478                                                       DANALV.50    
      INTEGER :: IP, IPM, MP                                               DANALV.51    
      COMPLEX :: TEMP                                                      DANALV.52    
! Loop variables                                                           DANALV.53    
      INTEGER :: IHEM, IM, ITRAC, J, L, M, N, nT                           DANALV.54    
!-----------------------------------------------------                     DANALV.55    
! For a global run, sum and difference the complete Fourier                DANALV.56    
! transforms at the northern and southern latitude rows to give            DANALV.57    
! the even and odd contributions : E=(N+S)/2, O=(N-S)/2.                   DANALV.58    
! For Fourier fields symmetric about equator  : even precedes odd.         DANALV.59    
! For Fourier fields asymmetric about equator : odd precedes even.         DANALV.60    
!-----------------------------------------------------                     DANALV.61    
      IF (NHEM.EQ.2) THEN                                                  DANALV.62    
         DO J=1,JG                                                         DANALV.63    
            DO IM=1,2*MMTyy(iRow)                                          DANALV.64    
               DO L=1,NLxx(iCol)                                           DANALV.65    
                  !---------------------------------------------------     DANALV.66    
                  ! Temperature tendency : main + d/dx part : symmetric    DANALV.67    
                  !---------------------------------------------------     DANALV.68    
                  TEMP=TNLG(IM,1,J,L)                                      DANALV.69    
                  TNLG(IM,1,J,L)=0.5*(TEMP+TNLG(IM,NHEM,J,L))              DANALV.70    
                  TNLG(IM,NHEM,J,L)=0.5*(TEMP-TNLG(IM,NHEM,J,L))           DANALV.71    
                  !---------------------------------------------------     DANALV.72    
                  ! Divergence tendency : d/dx part : symmetric.           DANALV.73    
                  !---------------------------------------------------     DANALV.74    
                  TEMP=FUG(IM,1,J,L)                                       DANALV.75    
                  FUG(IM,1,J,L)=0.5*(TEMP+FUG(IM,NHEM,J,L))                DANALV.76    
                  FUG(IM,NHEM,J,L)=0.5*(TEMP-FUG(IM,NHEM,J,L))             DANALV.77    
                  !---------------------------------------------------     DANALV.78    
                  ! Vorticity tendency : d/dx part : anti-symmetric.       DANALV.79    
                  !---------------------------------------------------     DANALV.80    
                  TEMP=FVG(IM,1,J,L)                                       DANALV.81    
                  FVG(IM,1,J,L)=0.5*(TEMP-FVG(IM,NHEM,J,L))                DANALV.82    
                  FVG(IM,NHEM,J,L)=0.5*(TEMP+FVG(IM,NHEM,J,L))             DANALV.83    
                  !---------------------------------------------------     DANALV.84    
                  ! Divergence tendency : d/dy part : anti-symmetric.      DANALV.85    
                  !---------------------------------------------------     DANALV.86    
                  TEMP=FVGT(IM,1,J,L)                                      DANALV.87    
                  FVGT(IM,1,J,L)=0.5*(TEMP-FVGT(IM,NHEM,J,L))              DANALV.88    
                  FVGT(IM,NHEM,J,L)=0.5*(TEMP+FVGT(IM,NHEM,J,L))           DANALV.89    
                  !---------------------------------------------------     DANALV.90    
                  ! Vorticity tendency : d/dy part : symmetric.            DANALV.91    
                  !---------------------------------------------------     DANALV.92    
                  TEMP=FUGT(IM,1,J,L)                                      DANALV.93    
                  FUGT(IM,1,J,L)=0.5*(TEMP+FUGT(IM,NHEM,J,L))              DANALV.94    
                  FUGT(IM,NHEM,J,L)=0.5*(TEMP-FUGT(IM,NHEM,J,L))           DANALV.95    
                  !---------------------------------------------------     DANALV.96    
                  ! Tracer tendencies                                      DANALV.97    
                  !---------------------------------------------------     DANALV.98    
                  DO ITRAC=1,NTRAC                                         DANALV.99    
                     !------------------------------------------------     DANALV.100   
                     ! main + d/dx part : symmetric.                       DANALV.101   
                     !------------------------------------------------     DANALV.102   
                     TEMP=TRANLG(IM,1,J,L,ITRAC)                           DANALV.103   
                     TRANLG(IM,1,J,L,ITRAC)=                               DANALV.104   
     &                    0.5*(TEMP+TRANLG(IM,NHEM,J,L,ITRAC))             DANALV.105   
                     TRANLG(IM,NHEM,J,L,ITRAC)=                            DANALV.106   
     &                    0.5*(TEMP-TRANLG(IM,NHEM,J,L,ITRAC))             DANALV.107   
                  ENDDO                                                    DANALV.108   
               ENDDO                                                       DANALV.109   
            ENDDO                                                          DANALV.110   
         ENDDO                                                             DANALV.111   
      ENDIF                                                                DANALV.112   
!-----------------------------------------------------                     DANALV.113   
! Loop over all latitudes                                                  DANALV.114   
!-----------------------------------------------------                     DANALV.115   
      DO J=1,JG                                                            DANALV.116   
         !-----------------------------------------------------            DANALV.117   
         ! Set up the appropriate Gaussian weight for the current          DANALV.118   
         ! latitude, dependent on transform type.                          DANALV.119   
         !-----------------------------------------------------            DANALV.120   
         AW1256=AW(J,1)*CSSQ(J,1)                                          DANALV.121   
         AW3478=-AW(J,1)                                                   DANALV.122   
         !-----------------------------------------------------            DANALV.123   
         ! Calculate POLY array in a vector loop before the main           DANALV.124   
         ! transforms, for the required Legendre Function types.           DANALV.125   
         ! Both even and odd functions are required, irrespective of       DANALV.126   
         ! NHEM.                                                           DANALV.127   
         !-----------------------------------------------------            DANALV.128   
         DO IHEM=1,2                                                       DANALV.129   
            DO IM=1,MMTyy(iRow)                                            DANALV.130   
               DO IP=1,NNT                                                 DANALV.131   
                  POLY(IP,IM,IHEM,1)=AW1256*ALP(IP,IM,IHEM,J)              DANALV.132   
                  POLY(IP,IM,IHEM,2)=AW3478*DALP(IP,IM,IHEM,J)             DANALV.133   
               ENDDO                                                       DANALV.134   
            ENDDO                                                          DANALV.135   
         ENDDO                                                             DANALV.136   
         !-----------------------------------------------------            DANALV.137   
         ! Transform multi-level fields.                                   DANALV.138   
         ! Inner loop vectorisation is over total wavenumber, to access    DANALV.139   
         ! spectral memory sequentially, avoiding skip distances being     DANALV.140   
         ! multiple of 8 (which causes memory bank conflicts on Cray       DANALV.141   
         ! vector machines).                                               DANALV.142   
         !-----------------------------------------------------            DANALV.143   
         DO L=1,NLxx(iCol)                                                 DANALV.144   
            DO nT=1,2                                                      DANALV.145   
               DO IM=1,MMTyy(iRow)                                         DANALV.146   
                  MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                      DANALV.147   
                  DO IP=mTwin2(nT,IM)+1,mTwin2(nT+1,IM)                    DANALV.148   
                     !------------------------------------------------     DANALV.149   
                     ! Temperature tendency :main + d/dx part : type 2.    DANALV.150   
                     ! Temperature tendency :d/dy part        : type 4.    DANALV.151   
                     !------------------------------------------------     DANALV.152   
                     TT2 (IP,IM,1,L)=TT2 (IP,IM,1,L) + POLY(IP,IM,1,1)*    DANALV.153   
     &                    TNLG(MP,1,J,L)                                   DANALV.154   
                     !------------------------------------------------     DANALV.155   
                     ! Divergence tendency  : d/dx part       : type 2.    DANALV.156   
                     ! Divergence tendency  : d/dy part       : type 4.    DANALV.157   
                     !------------------------------------------------     DANALV.158   
                     DT2 (IP,IM,1,L)=DT2 (IP,IM,1,L) + POLY(IP,IM,1,1)*    DANALV.159   
     &                    FUG (MP,1,J,L)+POLY(IP,IM,1,2)*                  DANALV.160   
     &                    FVGT(MP,1,J,L)                                   DANALV.161   
                     !------------------------------------------------     DANALV.162   
                     ! Vorticity tendency   : d/dx part       : type 1.    DANALV.163   
                     ! Vorticity tendency   : d/dy part       : type 3.    DANALV.164   
                     !------------------------------------------------     DANALV.165   
                     ZT2 (IP,IM,1,L)=ZT2 (IP,IM,1,L) + POLY(IP,IM,2,1)*    DANALV.166   
     &                    FVG (MP,1,J,L)+POLY(IP,IM,2,2)*                  DANALV.167   
     &                    FUGT(MP,1,J,L)                                   DANALV.168   
                     !------------------------------------------------     DANALV.169   
                     ! Tracer tendency   : d/dy part        : type 4.      DANALV.170   
                     !------------------------------------------------     DANALV.171   
                     DO ITRAC=1,NTRAC                                      DANALV.172   
                        TRAT2(IP,IM,1,L,ITRAC)=TRAT2(IP,IM,1,L,ITRAC)+     DANALV.173   
     &                       POLY(IP,IM,1,1)*TRANLG(MP,1,J,L,ITRAC)        DANALV.174   
                     ENDDO                                                 DANALV.175   
                     IF (NHEM.EQ.2) THEN                                   DANALV.176   
                        !---------------------------------------------     DANALV.177   
                        ! Temperature tendency: main+d/dx part: type 2.    DANALV.178   
                        ! Temperature tendency: d/dy part     : type 4.    DANALV.179   
                        !---------------------------------------------     DANALV.180   
                        TT2 (IP,IM,NHEM,L)=TT2 (IP,IM,NHEM,L) +            DANALV.181   
     &                       POLY(IP,IM,2,1)*TNLG(MP,NHEM,J,L)             DANALV.182   
                        !---------------------------------------------     DANALV.183   
                        ! Divergence tendency  : d/dx part    : type 2.    DANALV.184   
                        ! Divergence tendency  : d/dy part    : type 4.    DANALV.185   
                        !---------------------------------------------     DANALV.186   
                        DT2 (IP,IM,NHEM,L)=DT2 (IP,IM,NHEM,L) +            DANALV.187   
     &                       POLY(IP,IM,2,1)*FUG (MP,NHEM,J,L) +           DANALV.188   
     &                       POLY(IP,IM,2,2)*FVGT(MP,NHEM,J,L)             DANALV.189   
                        !---------------------------------------------     DANALV.190   
                        ! Vorticity tendency   : d/dx part    : type 1.    DANALV.191   
                        ! Vorticity tendency   : d/dy part    : type 3.    DANALV.192   
                        !---------------------------------------------     DANALV.193   
                        ZT2 (IP,IM,NHEM,L)=ZT2 (IP,IM,NHEM,L) +            DANALV.194   
     &                       POLY(IP,IM,1,1)*FVG (MP,NHEM,J,L) +           DANALV.195   
     &                       POLY(IP,IM,1,2)*FUGT(MP,NHEM,J,L)             DANALV.196   
                        !---------------------------------------------     DANALV.197   
                        ! Tracer tendency   : d/dy part       : type 4.    DANALV.198   
                        !---------------------------------------------     DANALV.199   
                        DO ITRAC=1,NTRAC                                   DANALV.200   
                           TRAT2(IP,IM,NHEM,L,ITRAC)=                      DANALV.201   
     &                          TRAT2(IP,IM,NHEM,L,ITRAC)+                 DANALV.202   
     &                          POLY(IP,IM,2,1)*                           DANALV.203   
     &                          TRANLG(MP,NHEM,J,L,ITRAC)                  DANALV.204   
                        ENDDO                                              DANALV.205   
                    ENDIF                                                  DANALV.206   
                  ENDDO                                                    DANALV.207   
               ENDDO                                                       DANALV.208   
            ENDDO                                                          DANALV.209   
         ENDDO                                                             DANALV.210   
      ENDDO                                                                DANALV.211   
      RETURN                                                               DANALV.212   
      END                                                                  DANALV.213   
*ENDIF                                                                     DANALV.214   
*DECK DEXPV                                                                DEXPV.1     
*IF DEF,ABOVE_V1                                                           DEXPV.2     
!=====================================================                     DEXPV.3     
! Perform all the indirect Legendre transforms for the adiabatic           DEXPV.4     
! part of the timestep at the current latitude (pair), in place            DEXPV.5     
! of separate calls to HEXP for individual transform types.                DEXPV.6     
!                                                                          DEXPV.7     
! An even/odd value of ITYPE denotes a spectral field of even/odd          DEXPV.8     
! symmetry.                                                                DEXPV.9     
!                                                                          DEXPV.10    
! Maximum vector efficiency is achieved by chaining all multi-level        DEXPV.11    
! transforms in one loop and by chaining all single-level transform        DEXPV.12    
! in a second loop.                                                        DEXPV.13    
!                                                                          DEXPV.14    
! All dummy argument arrays are declared complex.                          DEXPV.15    
! All array dimensions are parameters.                                     DEXPV.16    
! Multi-level arrays are 3-dimensional.                                    DEXPV.17    
!                                                                          DEXPV.18    
! Version for RSGUP3.                     Mike Blackburn,  12.01.95        DEXPV.19    
!=====================================================                     DEXPV.20    
      SUBROUTINE DEXPV                                                     DEXPV.21    
      IMPLICIT NONE                                                        DEXPV.22    
*CALL PARAM1                                                               DEXPV.23    
*CALL PARAM2                                                               DEXPV.24    
*CALL PARAM3                                                               DEXPV.25    
*CALL BLANK                                                                DEXPV.26    
*CALL LEGAU                                                                DEXPV.27    
*CALL MPIDECK                                                              DEXPV.28    
*CALL SPECTR2                                                              DEXPV.29    
*CALL GRIDPA                                                               DEXPV.30    
*CALL GRIDPB                                                               DEXPV.31    
!-----------------------------------------------------                     DEXPV.32    
! Local variables                                                          DEXPV.33    
!-----------------------------------------------------                     DEXPV.34    
      COMPLEX :: TEMP                                                      DEXPV.35    
      INTEGER :: MP                                                        DEXPV.36    
! Loop variables                                                           DEXPV.37    
      INTEGER :: IM, IP, ITRAC, J, L, M, N, nT                             DEXPV.38    
!-----------------------------------------------------                     DEXPV.39    
! Transform multi-level fields to create even and odd contributions        DEXPV.40    
! to the Fourier coefficients at the northern hemisphere latitude.         DEXPV.41    
!-----------------------------------------------------                     DEXPV.42    
      DO L=1,NLxx(iCol)                                                    DEXPV.43    
         DO J=1,JG                                                         DEXPV.44    
            DO nT=1,2                                                      DEXPV.45    
               DO IM=1,MMTyy(iRow)                                         DEXPV.46    
                  MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                      DEXPV.47    
                  DO IP=mTwin2(nT,IM)+1,mTwin2(nT+1,IM)                    DEXPV.48    
                     !------------------------------------------------     DEXPV.49    
                     ! Velocity potential    : type 6.                     DEXPV.50    
                     !------------------------------------------------     DEXPV.51    
                     CHIG(MP,1,J,L)=CHIG(MP,1,J,L) +                       DEXPV.52    
     &                    RLP(IP,IM,1,J)*D2(IP,IM,1,L)                     DEXPV.53    
                     !------------------------------------------------     DEXPV.54    
                     ! Streamfunction        : type 5.                     DEXPV.55    
                     !------------------------------------------------     DEXPV.56    
                     SFG (MP,1,J,L)=SFG (MP,1,J,L) +                       DEXPV.57    
     &                    RLP(IP,IM,2,J)*Z2(IP,IM,1,L)                     DEXPV.58    
                     !------------------------------------------------     DEXPV.59    
                     ! Zonal (rot) wind      : type 7.                     DEXPV.60    
                     !------------------------------------------------     DEXPV.61    
                     UG  (MP,1,J,L)=UG  (MP,1,J,L) +                       DEXPV.62    
     &                    RDLP(IP,IM,2,J)*Z2(IP,IM,1,L)                    DEXPV.63    
                     !------------------------------------------------     DEXPV.64    
                     ! Merid (div) wind      : type 8.                     DEXPV.65    
                     !------------------------------------------------     DEXPV.66    
                     VG  (MP,1,J,L)=VG  (MP,1,J,L) +                       DEXPV.67    
     &                    RDLP(IP,IM,1,J)*D2(IP,IM,1,L)                    DEXPV.68    
                     !------------------------------------------------     DEXPV.69    
                     ! Temperature           : type 2.                     DEXPV.70    
                     !------------------------------------------------     DEXPV.71    
                     TG  (MP,1,J,L)=TG  (MP,1,J,L) +                       DEXPV.72    
     &                    ALP(IP,IM,1,J)*T2(IP,IM,1,L)                     DEXPV.73    
                     !------------------------------------------------     DEXPV.74    
                     ! Tracers               : type 2.                     DEXPV.75    
                     !------------------------------------------------     DEXPV.76    
                     DO ITRAC=1,NTRAC                                      DEXPV.77    
                        TRAG(MP,1,J,L,ITRAC)=TRAG(MP,1,J,L,ITRAC)+         DEXPV.78    
     &                       ALP(IP,IM,1,J)*TRA2(IP,IM,1,L,ITRAC)          DEXPV.79    
                     ENDDO                                                 DEXPV.80    
                     IF (NHEM.EQ.2) THEN                                   DEXPV.81    
                        !---------------------------------------------     DEXPV.82    
                        ! Velocity potential    : type 6.                  DEXPV.83    
                        !---------------------------------------------     DEXPV.84    
                        CHIG(MP,NHEM,J,L)=CHIG(MP,NHEM,J,L) +              DEXPV.85    
     &                       RLP(IP,IM,NHEM,J)*D2(IP,IM,NHEM,L)            DEXPV.86    
                        !---------------------------------------------     DEXPV.87    
                        ! Streamfunction        : type 5.                  DEXPV.88    
                        !---------------------------------------------     DEXPV.89    
                        SFG (MP,NHEM,J,L)=SFG (MP,NHEM,J,L) +              DEXPV.90    
     &                       RLP(IP,IM,1,J)*Z2(IP,IM,NHEM,L)               DEXPV.91    
                        !---------------------------------------------     DEXPV.92    
                        ! Zonal (rot) wind      : type 7.                  DEXPV.93    
                        !---------------------------------------------     DEXPV.94    
                        UG  (MP,NHEM,J,L)=UG  (MP,NHEM,J,L) +              DEXPV.95    
     &                       RDLP(IP,IM,1,J)*Z2(IP,IM,NHEM,L)              DEXPV.96    
                        !---------------------------------------------     DEXPV.97    
                        ! Merid (div) wind      : type 8.                  DEXPV.98    
                        !---------------------------------------------     DEXPV.99    
                        VG  (MP,NHEM,J,L)=VG  (MP,NHEM,J,L) +              DEXPV.100   
     &                       RDLP(IP,IM,NHEM,J)*D2(IP,IM,NHEM,L)           DEXPV.101   
                        !---------------------------------------------     DEXPV.102   
                        ! Temperature           : type 2.                  DEXPV.103   
                        !---------------------------------------------     DEXPV.104   
                        TG  (MP,NHEM,J,L)=TG  (MP,NHEM,J,L) +              DEXPV.105   
     &                       ALP(IP,IM,NHEM,J)*T2(IP,IM,NHEM,L)            DEXPV.106   
                        !---------------------------------------------     DEXPV.107   
                        ! Tracers           : type 2.                      DEXPV.108   
                        !---------------------------------------------     DEXPV.109   
                        DO ITRAC=1,NTRAC                                   DEXPV.110   
                           TRAG(MP,NHEM,J,L,ITRAC)=                        DEXPV.111   
     &                          TRAG(MP,NHEM,J,L,ITRAC)+ALP(IP,IM,2,J)     DEXPV.112   
     &                          *TRA2(IP,IM,NHEM,L,ITRAC)                  DEXPV.113   
                        ENDDO                                              DEXPV.114   
                     ENDIF                                                 DEXPV.115   
                  ENDDO                                                    DEXPV.116   
               ENDDO                                                       DEXPV.117   
            ENDDO                                                          DEXPV.118   
         ENDDO                                                             DEXPV.119   
      ENDDO                                                                DEXPV.120   
!-----------------------------------------------------                     DEXPV.121   
! Transform single-level fields to create even and odd contribution        DEXPV.122   
! to the Fourier coefficients at the northern hemisphere latitude.         DEXPV.123   
! Vectorisation is over total wavenumber for each zonal wavenumber.        DEXPV.124   
!-----------------------------------------------------                     DEXPV.125   
      IF (iCol.EQ.1) THEN                                                  DEXPV.126   
         DO J=1,JG                                                         DEXPV.127   
            DO nT=1,2                                                      DEXPV.128   
               DO IM=1,MMTyy(iRow)                                         DEXPV.129   
                  MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                      DEXPV.130   
                  DO IP=mTwin2(nT,IM)+1,mTwin2(nT+1,IM)                    DEXPV.131   
                     !------------------------------------------------     DEXPV.132   
                     ! Log (surface pressure)    : type 2.                 DEXPV.133   
                     !------------------------------------------------     DEXPV.134   
                     PLG(MP,1,J)=PLG(MP,1,J) +                             DEXPV.135   
     &                    ALP(IP,IM,1,J)*SP2(IP,IM,1)                      DEXPV.136   
                     IF (NHEM.EQ.2) THEN                                   DEXPV.137   
                        !---------------------------------------------     DEXPV.138   
                        ! Log (surface pressure)    : type 2.              DEXPV.139   
                        !---------------------------------------------     DEXPV.140   
                        PLG(MP,NHEM,J)=PLG(MP,NHEM,J) +                    DEXPV.141   
     &                       ALP(IP,IM,NHEM,J)*SP2(IP,IM,NHEM)             DEXPV.142   
                     ENDIF                                                 DEXPV.143   
                  ENDDO                                                    DEXPV.144   
               ENDDO                                                       DEXPV.145   
            ENDDO                                                          DEXPV.146   
         ENDDO                                                             DEXPV.147   
      ENDIF                                                                DEXPV.148   
!-----------------------------------------------------                     DEXPV.149   
! For a global run, sum and difference even and odd contributions          DEXPV.150   
! to give the complete Fourier transforms at the northern and              DEXPV.151   
! southern latitude rows: N=E+O, S=E-O.                                    DEXPV.152   
! For symmetric Fourier fields, even (IM,1) precedes odd (IM,2).           DEXPV.153   
! For asymmetric Fourier fields, odd (IM,1) precedes even (IM,2).          DEXPV.154   
!-----------------------------------------------------                     DEXPV.155   
      IF (NHEM.EQ.2) THEN                                                  DEXPV.156   
         DO L=1,NLxx(iCol)                                                 DEXPV.157   
            DO J=1,JG                                                      DEXPV.158   
               DO MP=1,2*MMTyy(iRow)                                       DEXPV.159   
                  !---------------------------------------------------     DEXPV.160   
                  ! Velocity potential : symmetric.                        DEXPV.161   
                  !---------------------------------------------------     DEXPV.162   
                  TEMP=CHIG(MP,1,J,L)                                      DEXPV.163   
                  CHIG(MP,1,J,L)=TEMP+CHIG(MP,NHEM,J,L)                    DEXPV.164   
                  CHIG(MP,NHEM,J,L)=TEMP-CHIG(MP,NHEM,J,L)                 DEXPV.165   
                  !---------------------------------------------------     DEXPV.166   
                  ! Streamfunction : anti-symmetric.                       DEXPV.167   
                  !---------------------------------------------------     DEXPV.168   
                  TEMP=SFG(MP,1,J,L)                                       DEXPV.169   
                  SFG(MP,1,J,L)=SFG(MP,NHEM,J,L)+TEMP                      DEXPV.170   
                  SFG(MP,NHEM,J,L)=SFG(MP,NHEM,J,L)-TEMP                   DEXPV.171   
                  !---------------------------------------------------     DEXPV.172   
                  ! Zonal (rotational) wind : symmetric.                   DEXPV.173   
                  !---------------------------------------------------     DEXPV.174   
                  TEMP=UG(MP,1,J,L)                                        DEXPV.175   
                  UG(MP,1,J,L)=TEMP+UG(MP,NHEM,J,L)                        DEXPV.176   
                  UG(MP,NHEM,J,L)=TEMP-UG(MP,NHEM,J,L)                     DEXPV.177   
                  !---------------------------------------------------     DEXPV.178   
                  ! Meridional (divergent) wind : anti-symmetric.          DEXPV.179   
                  !---------------------------------------------------     DEXPV.180   
                  TEMP=VG(MP,1,J,L)                                        DEXPV.181   
                  VG(MP,1,J,L)=VG(MP,NHEM,J,L)+TEMP                        DEXPV.182   
                  VG(MP,NHEM,J,L)=VG(MP,NHEM,J,L)-TEMP                     DEXPV.183   
                  !---------------------------------------------------     DEXPV.184   
                  ! Temperature : symmetric.                               DEXPV.185   
                  !---------------------------------------------------     DEXPV.186   
                  TEMP=TG(MP,1,J,L)                                        DEXPV.187   
                  TG(MP,1,J,L)=TEMP+TG(MP,NHEM,J,L)                        DEXPV.188   
                  TG(MP,NHEM,J,L)=TEMP-TG(MP,NHEM,J,L)                     DEXPV.189   
                  !---------------------------------------------------     DEXPV.190   
                  ! Tracers : symmetric.                                   DEXPV.191   
                  !---------------------------------------------------     DEXPV.192   
                  DO ITRAC=1,NTRAC                                         DEXPV.193   
                     TEMP=TRAG(MP,1,J,L,ITRAC)                             DEXPV.194   
                     TRAG(MP,1,J,L,ITRAC)=TEMP+TRAG(MP,NHEM,J,L,ITRAC)     DEXPV.195   
                     TRAG(MP,NHEM,J,L,ITRAC)=                              DEXPV.196   
     &                    TEMP-TRAG(MP,NHEM,J,L,ITRAC)                     DEXPV.197   
                  ENDDO                                                    DEXPV.198   
               ENDDO                                                       DEXPV.199   
            ENDDO                                                          DEXPV.200   
         ENDDO                                                             DEXPV.201   
                                                                           DEXPV.202   
         IF (iCol.EQ.1) THEN                                               DEXPV.203   
            DO J=1,JG                                                      DEXPV.204   
               DO MP=1,2*MMTyy(iRow)                                       DEXPV.205   
                  !---------------------------------------------------     DEXPV.206   
                  ! Log (surface pressure) : symmetric.                    DEXPV.207   
                  !---------------------------------------------------     DEXPV.208   
                  TEMP=PLG(MP,1,J)                                         DEXPV.209   
                  PLG(MP,1,J)=TEMP+PLG(MP,NHEM,J)                          DEXPV.210   
                  PLG(MP,NHEM,J)=TEMP-PLG(MP,NHEM,J)                       DEXPV.211   
               ENDDO                                                       DEXPV.212   
            ENDDO                                                          DEXPV.213   
         ENDIF                                                             DEXPV.214   
      ENDIF                                                                DEXPV.215   
                                                                           DEXPV.216   
      RETURN                                                               DEXPV.217   
      END                                                                  DEXPV.218   
*ENDIF                                                                     DEXPV.219   
*DECK DGRMLT                                                               DGRMLT.1     
*IF DEF,ABOVE_V1                                                           DGRMLT.2     
!=====================================================                     DGRMLT.3     
! Compute diabatic tendencies in grid point space. Accumulate              DGRMLT.4     
! time averages for printed output and history assumes output              DGRMLT.5     
! and history timesteps are synchronised.                                  DGRMLT.6     
!                                                                          DGRMLT.7     
! Full Physics                                                             DGRMLT.8     
! Piers 6/2/97 Version 2.0                                                 DGRMLT.9     
! Water vapour (things beginning with Q have changed                       DGRMLT.10    
! into tracer no 1)                                                        DGRMLT.11    
! and converted from Volume mixing  ratio to Mass mixing ratio             DGRMLT.12    
! As water vapour advection is now done in Flux form                       DGRMLT.13    
!=====================================================                     DGRMLT.14    
      SUBROUTINE DGRMLT                                                    DGRMLT.15    
      IMPLICIT NONE                                                        DGRMLT.16    
*CALL PARAM1                                                               DGRMLT.17    
*CALL PARAM2                                                               DGRMLT.18    
*CALL PARAM3                                                               DGRMLT.19    
*CALL BLANK                                                                DGRMLT.20    
*CALL LEGAU                                                                DGRMLT.21    
*CALL OUTCON                                                               DGRMLT.22    
*CALL GRIDPA3                                                              DGRMLT.23    
*CALL GRIDPC                                                               DGRMLT.24    
*CALL BATS                                                                 DGRMLT.25    
*CALL PHYSCA                                                               DGRMLT.26    
*CALL PTENDZ                                                               DGRMLT.27    
*CALL CPIERS                                                               DGRMLT.28    
*CALL OROG_G                                                               DGRMLT.29    
*CALL MPIDECK                                                              DGRMLT.30    
*CALL PARAMH                                                               OAS_COMTILE.97    
*CALL OAfields                                                             OAS_COMTILE.98    
*CALL AOfields                                                             OAS_COMTILE.99    
                                                                           OAS_COMTILE.100   
!-----------------------------------------------------                     DGRMLT.31    
! External functions                                                       DGRMLT.32    
!-----------------------------------------------------                     DGRMLT.33    
      REAL, EXTERNAL :: SSUM                                               DGRMLT.34    
!-----------------------------------------------------                     DGRMLT.35    
! Local variables                                                          DGRMLT.36    
!-----------------------------------------------------                     DGRMLT.37    
      LOGICAL :: LSUM                                                      DGRMLT.38    
      INTEGER :: IFIRST                                                    DGRMLT.39    
      REAL :: TROPHT(MGx,NHEM,JGy)                                         DGRMLT.40    
      INTEGER :: JH                                                        DGRMLT.41    
      REAL :: RKP                                                          DGRMLT.42    
      REAL :: RMG                                                          DGRMLT.43    
      real :: tspd,rkounth,tzc,tm2,evap,pp,evap2                           OAS_COMTILE.8     
                                                                           OAS_COMTILE.9     
! Loop variables                                                           DGRMLT.44    
      INTEGER :: I, IHEM, K, L                                             DGRMLT.45    
!-----------------------------------------------------                     DGRMLT.46    
! Store ifirst so that subroutine SFCT is only called the                  DGRMLT.47    
! first time through.                                                      DGRMLT.48    
!-----------------------------------------------------                     DGRMLT.49    
      SAVE IFIRST                                                          DGRMLT.50    
      DATA IFIRST/1/                                                       DGRMLT.51    
      SAVE TROPHT                                                          DGRMLT.52    
!-----------------------------------------------------                     DGRMLT.53    
! Switches/counters for the current timestep.                              DGRMLT.54    
!-----------------------------------------------------                     DGRMLT.55    
      LSUM=(KOUTH.GE.1.AND.KOUTH.LE.KOUNTH)                                DGRMLT.56    
      RKP=1.0/REAL(KOUNTH)                                                 DGRMLT.57    
      DELT2C=DELT2                                                         DGRMLT.58    
!-----------------------------------------------------                     DGRMLT.59    
! Preset accumulated diagnostics.                                          DGRMLT.60    
!-----------------------------------------------------                     DGRMLT.61    
      IF(LSUM) THEN                                                        DGRMLT.62    
         IF(KOUTH.EQ.1) THEN                                               DGRMLT.63    
            !-----------------------------------------------------         DGRMLT.64    
            ! Zeroing arrays                                               DGRMLT.65    
            !-----------------------------------------------------         DGRMLT.66    
*IF DEF,ONLY_V3                                                            DGRMLT.67    
            ARFLUX(:,:,:,:)=0.                                             DGRMLT.68    
            ASFLD(:,:,:,:)=0.                                              DGRMLT.69    
            ACLD(:,:,:,:)=0.                                               DGRMLT.70    
*ENDIF                                                                     DGRMLT.71    
            ASSBL(:,:,:)=0.0                                               DGRMLT.72    
            ASHBL(:,:,:)=0.0                                               DGRMLT.73    
            ASLBL(:,:,:)=0.0                                               DGRMLT.74    
            ARRCR(:,:,:)=0.0                                               DGRMLT.75    
            ARRLR(:,:,:)=0.0                                               DGRMLT.76    
         ENDIF                                                             DGRMLT.77    
      ENDIF                                                                DGRMLT.78    
!-----------------------------------------------------                     DGRMLT.79    
! Preset instantaneous forcing and diagnostic arrays.                      DGRMLT.80    
!-----------------------------------------------------                     DGRMLT.81    
      FUG3(:,:,:,:)=0.0                                                    DGRMLT.82    
      FVG3(:,:,:,:)=0.0                                                    DGRMLT.83    
      TNLG3(:,:,:,:)=0.0                                                   DGRMLT.84    
      TRANLG3(:,:,:,:,:)=0.0                                               DGRMLT.85    
      SSBL(:,:,:)=0.0                                                      DGRMLT.86    
      SHBL(:,:,:)=0.0                                                      DGRMLT.87    
      SLBL(:,:,:)=0.0                                                      DGRMLT.88    
      RRCR(:,:,:)=0.0                                                      DGRMLT.89    
      RRLR(:,:,:)=0.0                                                      DGRMLT.90    
!-----------------------------------------------------                     DGRMLT.91    
! Add mean temperature to temperature anomaly                              DGRMLT.92    
!-----------------------------------------------------                     DGRMLT.93    
      DO L=1,NL                                                            DGRMLT.94    
         TG3(:,:,:,L)=TG3(:,:,:,L)+T0(L)                                   DGRMLT.95    
      ENDDO                                                                DGRMLT.96    
!-----------------------------------------------------                     DGRMLT.97    
! Convert ln p* to p*                                                      DGRMLT.98    
!-----------------------------------------------------                     DGRMLT.99    
      PLG3(1:MGxx(iCol),:,1:JGyy(iRow))=                                   DGRMLT.100   
     &    EXP(PLG3(1:MGxx(iCol),:,1:JGyy(iRow)))                           DGRMLT.101   
!-----------------------------------------------------                     DGRMLT.102   
! Alter the tracer anomaly                                                 DGRMLT.103   
!-----------------------------------------------------                     DGRMLT.104   
      IF (LFLUX) THEN                                                      DGRMLT.105   
         DO L=1,NL                                                         DGRMLT.106   
            DO JH=1,JGyy(iRow)                                             DGRMLT.107   
               DO IHEM=1,NHEM                                              DGRMLT.108   
                  DO I=1,MGxx(iCol)                                        DGRMLT.109   
                     TRAG3(I,IHEM,JH,L,1)=TRAG3(I,IHEM,JH,L,1)/            DGRMLT.110   
     &                    PLG3(I,IHEM,JH)                                  DGRMLT.111   
                  ENDDO                                                    DGRMLT.112   
               ENDDO                                                       DGRMLT.113   
            ENDDO                                                          DGRMLT.114   
         ENDDO                                                             DGRMLT.115   
      ENDIF                                                                DGRMLT.116   
*IF DEF,ONLY_V3                                                            DGRMLT.117   
!-----------------------------------------------------                     DGRMLT.118   
! Find new T and Q based on DOY and climatology                            DGRMLT.119   
!-----------------------------------------------------                     DGRMLT.120   
      IF ((LCSFCT).AND.( (.NOT.LPERPET).OR.(IFIRST.EQ.1) )) THEN           DGRMLT.121   
         CALL SFCT(IFIRST, TROPHT)                                         DGRMLT.122   
         IFIRST=0                                                          DGRMLT.123   
      ENDIF                                                                DGRMLT.124   
*ENDIF                                                                     DGRMLT.125   
!-----------------------------------------------------                     DGRMLT.126   
! Loop over latitudes and hemispheres                                      DGRMLT.127   
!-----------------------------------------------------                     DGRMLT.128   
      DO JH=1,JGyy(iRow)                                                   DGRMLT.129   
         !-----------------------------------------------------            DGRMLT.130   
         ! Zeroing arrays                                                  DGRMLT.131   
         !-----------------------------------------------------            DGRMLT.132   
         QTVD(:,:,:)=0.0                                                   DGRMLT.133   
         UTVD(:,:,:)=0.0                                                   DGRMLT.134   
         VTVD(:,:,:)=0.0                                                   DGRMLT.135   
         TTVD(:,:,:)=0.0                                                   DGRMLT.136   
         TTCR(:,:,:)=0.0                                                   DGRMLT.137   
         QTCR(:,:,:)=0.0                                                   DGRMLT.138   
         TTLR(:,:,:)=0.0                                                   DGRMLT.139   
         QTLR(:,:,:)=0.0                                                   DGRMLT.140   
         TTRD(:,:,:)=0.0                                                   DGRMLT.141   
         TXBL(:,:)=0.0                                                     DGRMLT.142   
         TYBL(:,:)=0.0                                                     DGRMLT.143   
         CTCR(:,:)=0.0                                                     DGRMLT.144   
         CTLR(:,:)=0.0                                                     DGRMLT.145   
*IF DEF,ONLY_V3                                                            DGRMLT.146   
         CFRAC(:,:,:)=0.0                                                  DGRMLT.147   
         ICFLAG(:,:,:,1)=2                                                 DGRMLT.148   
         ICFLAG(:,:,:,2)=NL+1                                              DGRMLT.149   
*ENDIF                                                                     DGRMLT.150   
         !-----------------------------------------------------            DGRMLT.151   
         ! Call physical parametrizations.                                 DGRMLT.152   
         !-----------------------------------------------------            DGRMLT.153   
*IF DEF,ONLY_V2                                                            DGRMLT.154   
         IF (LBL) CALL BLAYER(JH)                                          DGRMLT.155   
*ELSE                                                                      DGRMLT.156   
         if (LOLDBL) then                                                  DGRMLT.157   
            if (LBL) call BLAYER(JH)                                       DGRMLT.158   
         else                                                              DGRMLT.159   
            if (LBL) call BLSURF(JH)                                       DGRMLT.160   
         endif                                                             DGRMLT.161   
         CALL GRAVD(JH)                                                    GRAVDMOD.41    
*ENDIF                                                                     DGRMLT.162   
         IF(LVD) CALL VDIFF(JH)                                            DGRMLT.163   
         IF(LCR) CALL CONVEC(JH)                                           DGRMLT.164   
         IF(LLR) CALL LSCRN(JH)                                            DGRMLT.165   
         !-----------------------------------------------------            DGRMLT.166   
         ! Radiation scheme                                                DGRMLT.167   
         !-----------------------------------------------------            DGRMLT.168   
*IF DEF,ONLY_V2                                                            DGRMLT.169   
         IF(LRD) CALL RADN(JH)                                             DGRMLT.170   
*ELSE                                                                      DGRMLT.171   
         IF(LRD) CALL RADN(JH,TROPHT)                                      DGRMLT.172   
*ENDIF                                                                     DGRMLT.173   
*IF DEF,ONLY_V3                                                            DGRMLT.174   
         !-----------------------------------------------------            DGRMLT.175   
         !                                                                 DGRMLT.176   
         !-----------------------------------------------------            DGRMLT.177   
         if (LBL.AND.(.NOT.LOLDBL)) CALL SURFM(JH)                         DGRMLT.178   
         !-----------------------------------------------------            DGRMLT.179   
         ! Store data that may be written out later                        DGRMLT.180   
         !-----------------------------------------------------            DGRMLT.181   
         DO IHEM=1,NHEM                                                    DGRMLT.182   
            DO I=1,MGxx(iCol)                                              DGRMLT.183   
               sfld(I,IHEM,JH,1)=salb(I,IHEM,JH)                           DGRMLT.184   
               sfld(I,IHEM,JH,2)=tstar(I,IHEM,JH)                          DGRMLT.185   
               sfld(I,IHEM,JH,3)=tdeep(I,IHEM,JH)                          DGRMLT.186   
               sfld(I,IHEM,JH,4)=qstar(I,IHEM,JH)                          DGRMLT.187   
               sfld(I,IHEM,JH,5)=smstar(I,IHEM,JH)                         DGRMLT.188   
               sfld(I,IHEM,JH,6)=hsnow(I,IHEM,JH)                          DGRMLT.189   
               cld(I,IHEM,JH,1)=cfrac(I,IHEM,1)                            DGRMLT.190   
               cld(I,IHEM,JH,2)=cfrac(I,IHEM,2)                            DGRMLT.191   
               cld(I,IHEM,JH,3)=cfrac(I,IHEM,3)                            DGRMLT.192   
               cld(I,IHEM,JH,4)=cfrac(I,IHEM,4)+cfrac(I,IHEM,5)            DGRMLT.193   
               DO K=1,6                                                    DGRMLT.194   
                  rflux(I,IHEM,JH,K)=rrflux(I,IHEM,JH,K)                   DGRMLT.195   
               ENDDO                                                       DGRMLT.196   
               !-----------------------------------------------------      DGRMLT.197   
               ! rflux(I,IHEM,JH,2) is +downwards surface flux Wm-2        DGRMLT.198   
               !-----------------------------------------------------      DGRMLT.199   
               rflux(I,IHEM,JH,2)=snet(I,IHEM,JH)-                         RAD_CL_SEBAL.107   
     &              CV*P0*(shbl(I,IHEM,JH)+slbl(I,IHEM,JH))                RAD_CL_SEBAL.108   
            ENDDO                                                          DGRMLT.203   
         ENDDO                                                             DGRMLT.204   
*ENDIF                                                                     DGRMLT.205   
         !-----------------------------------------------------            DGRMLT.206   
         ! Diagnostics: surface lat-long fields.                           DGRMLT.207   
         !-----------------------------------------------------            DGRMLT.208   
*IF DEF,ONLY_V2                                                            DGRMLT.209   
         DO IHEM=1,NHEM                                                    DGRMLT.210   
            DO I=1,MGxx(iCol)                                              DGRMLT.211   
               SSBL(I,IHEM,JH)=SQRT(TXBL(I,IHEM)*TXBL(I,IHEM)+             DGRMLT.212   
     &              TYBL(I,IHEM)*TYBL(I,IHEM))                             DGRMLT.213   
            ENDDO                                                          DGRMLT.214   
         ENDDO                                                             DGRMLT.215   
                                                                           DGRMLT.216   
*ENDIF                                                                     DGRMLT.217   
         IF(LSUM) THEN                                                     DGRMLT.218   
*IF DEF,ONLY_V3                                                            DGRMLT.219   
            DO K=1,6                                                       DGRMLT.220   
               DO IHEM=1,NHEM                                              DGRMLT.221   
                  DO I=1,MGxx(iCol)                                        DGRMLT.222   
                     arflux(I,IHEM,JH,K)=arflux(I,IHEM,JH,K)+              DGRMLT.223   
     &                    rflux(I,IHEM,JH,K)*RKP                           DGRMLT.224   
                     asfld(I,IHEM,JH,K)=asfld(I,IHEM,JH,K)+                DGRMLT.225   
     &                    sfld(I,IHEM,JH,K)*RKP                            DGRMLT.226   
                  ENDDO                                                    DGRMLT.227   
               ENDDO                                                       DGRMLT.228   
            ENDDO                                                          DGRMLT.229   
            DO K=1,4                                                       DGRMLT.230   
               DO IHEM=1,NHEM                                              DGRMLT.231   
                  DO I=1,MGxx(iCol)                                        DGRMLT.232   
                     acld(I,IHEM,JH,K)=acld(I,IHEM,JH,K)+                  DGRMLT.233   
     &                    cld(I,IHEM,JH,K)*RKP                             DGRMLT.234   
                  ENDDO                                                    DGRMLT.235   
               ENDDO                                                       DGRMLT.236   
            ENDDO                                                          DGRMLT.237   
*ENDIF                                                                     DGRMLT.238   
            DO IHEM=1,NHEM                                                 DGRMLT.239   
               DO I=1,MGxx(iCol)                                           DGRMLT.240   
*IF DEF,ONLY_V3                                                            DGRMLT.241   
                  SSBL(I,IHEM,JH)=SQRT(TXBL(I,IHEM)*TXBL(I,IHEM)+          DGRMLT.242   
     &                 TYBL(I,IHEM)*TYBL(I,IHEM))                          DGRMLT.243   
*ENDIF                                                                     DGRMLT.244   
                  ASSBL(I,IHEM,JH)=ASSBL(I,IHEM,JH)+SSBL(I,IHEM,JH)*RKP    DGRMLT.245   
                  ASHBL(I,IHEM,JH)=ASHBL(I,IHEM,JH)+SHBL(I,IHEM,JH)*RKP    DGRMLT.246   
                  ASLBL(I,IHEM,JH)=ASLBL(I,IHEM,JH)+SLBL(I,IHEM,JH)*RKP    DGRMLT.247   
                  ARRCR(I,IHEM,JH)=ARRCR(I,IHEM,JH)+RRCR(I,IHEM,JH)*RKP    DGRMLT.248   
                  ARRLR(I,IHEM,JH)=ARRLR(I,IHEM,JH)+RRLR(I,IHEM,JH)*RKP    DGRMLT.249   
                ENDDO                                                      DGRMLT.250   
            ENDDO                                                          DGRMLT.251   
            !-----------------------------------------------------         DGRMLT.252   
            ! Diagnostics: zonal averages. Sum for individual              DGRMLT.253   
            ! PEs and add the information across all PE once the           DGRMLT.254   
            ! statistics are needed.                                       DGRMLT.255   
            !-----------------------------------------------------         DGRMLT.256   
            RMG=1./REAL(MG)                                                DGRMLT.257   
            DO L=1,NL                                                      DGRMLT.258   
               DO IHEM=1,NHEM                                              DGRMLT.259   
                  UTVDZ(JH,IHEM,L)=                                        DGRMLT.260   
     &                 SSUM(MGxx(iCol),UTVD(1,IHEM,L),1)*RMG               DGRMLT.261   
                  VTVDZ(JH,IHEM,L)=                                        DGRMLT.262   
     &                 SSUM(MGxx(iCol),VTVD(1,IHEM,L),1)*RMG               DGRMLT.263   
                  TTVDZ(JH,IHEM,L)=                                        DGRMLT.264   
     &                 SSUM(MGxx(iCol),TTVD(1,IHEM,L),1)*RMG               DGRMLT.265   
                  QTVDZ(JH,IHEM,L)=                                        DGRMLT.266   
     &                 SSUM(MGxx(iCol),QTVD(1,IHEM,L),1)*RMG               DGRMLT.267   
                  TTCRZ(JH,IHEM,L)=                                        DGRMLT.268   
     &                 SSUM(MGxx(iCol),TTCR(1,IHEM,L),1)*RMG               DGRMLT.269   
                  QTCRZ(JH,IHEM,L)=                                        DGRMLT.270   
     &                 SSUM(MGxx(iCol),QTCR(1,IHEM,L),1)*RMG               DGRMLT.271   
                  TTLRZ(JH,IHEM,L)=                                        DGRMLT.272   
     &                 SSUM(MGxx(iCol),TTLR(1,IHEM,L),1)*RMG               DGRMLT.273   
                  QTLRZ(JH,IHEM,L)=                                        DGRMLT.274   
     &                 SSUM(MGxx(iCol),QTLR(1,IHEM,L),1)*RMG               DGRMLT.275   
                  TTRDZ(JH,IHEM,L)=                                        DGRMLT.276   
     &                 SSUM(MGxx(iCol),TTRD(1,IHEM,L),1)*RMG               DGRMLT.277   
                  CTCRZ(JH,IHEM,L)=CTCR(L,IHEM)                            DGRMLT.278   
                  CTLRZ(JH,IHEM,L)=CTLR(L,IHEM)                            DGRMLT.279   
               ENDDO                                                       DGRMLT.280   
            ENDDO                                                          DGRMLT.281   
            DO IHEM=1,NHEM                                                 DGRMLT.282   
               UTBLZ(JH,IHEM)=SSUM(MGxx(iCol),FUG3(1,IHEM,JH,NL),1)*RMG    DGRMLT.283   
               VTBLZ(JH,IHEM)=SSUM(MGxx(iCol),FVG3(1,IHEM,JH,NL),1)*RMG    DGRMLT.284   
               TTBLZ(JH,IHEM)=SSUM(MGxx(iCol),TNLG3(1,IHEM,JH,NL),1)*RMG   DGRMLT.285   
               QTBLZ(JH,IHEM)=SSUM(MGxx(iCol),TRANLG3(1,IHEM,JH,NL,1),1)   DGRMLT.286   
     &              *RMG                                                   DGRMLT.287   
            ENDDO                                                          DGRMLT.288   
         ENDIF                  ! IF(LSUM)                                 DGRMLT.289   
         !-----------------------------------------------------            DGRMLT.290   
         ! Total forcing from all processes.                               DGRMLT.291   
         !-----------------------------------------------------            DGRMLT.292   
         DO L=1,NL                                                         DGRMLT.293   
            DO IHEM=1,NHEM                                                 DGRMLT.294   
               DO I=1,MGxx(iCol)                                           DGRMLT.295   
                  FUG3(I,IHEM,JH,L)=FUG3(I,IHEM,JH,L)+UTVD(I,IHEM,L)       DGRMLT.296   
                  FVG3(I,IHEM,JH,L)=FVG3(I,IHEM,JH,L)+VTVD(I,IHEM,L)       DGRMLT.297   
                  TNLG3(I,IHEM,JH,L)=TNLG3(I,IHEM,JH,L)+TTVD(I,IHEM,L)+    DGRMLT.298   
     &                 TTCR(I,IHEM,L)+TTLR(I,IHEM,L)+TTRD(I,IHEM,L)        DGRMLT.299   
                  TRANLG3(I,IHEM,JH,L,1)=TRANLG3(I,IHEM,JH,L,1)+           DGRMLT.300   
     &                 QTVD(I,IHEM,L)+QTCR(I,IHEM,L)+QTLR(I,IHEM,L)        DGRMLT.301   
               ENDDO                                                       DGRMLT.302   
            ENDDO                                                          DGRMLT.303   
         ENDDO                                                             DGRMLT.304   
         !-----------------------------------------------------            DGRMLT.305   
         ! Mass weight the moisture forcing.                               DGRMLT.306   
         !-----------------------------------------------------            DGRMLT.307   
         IF (LFLUX) THEN                                                   DGRMLT.308   
            DO L=1,NL                                                      DGRMLT.309   
               DO IHEM=1,NHEM                                              DGRMLT.310   
                  DO I=1,MGxx(iCol)                                        DGRMLT.311   
                     TRANLG3(I,IHEM,JH,L,1)=PLG3(I,IHEM,JH)*               DGRMLT.312   
     &                    TRANLG3(I,IHEM,JH,L,1)                           DGRMLT.313   
                  ENDDO                                                    DGRMLT.314   
               ENDDO                                                       DGRMLT.315   
            ENDDO                                                          DGRMLT.316   
         ENDIF                                                             DGRMLT.317   
C                                                                          OAS_ACCUM_TILE.18    
      tspd =    real(itspd)                                                OAS_ACCUM_TILE.19    
      rkounth = real(kounth)                                               OAS_ACCUM_TILE.20    
      tzc=273.15                                                           OAS_ACCUM_TILE.21    
      tm2=(tzc-1.9)/ct    ! Also done in T42.oasis update                  OAS_ACCUM_TILE.22    
                                                                           OAS_ACCUM_TILE.23    
      do ihem=1,nhem                                                       OAS_ACCUM_TILE.24    
      do I=1,MGxx(iCol)                                                    OAS_ACCUM_TILE.25    
                                                                           OAS_ACCUM_TILE.26    
c-----daily average version                                                OAS_ACCUM_TILE.27    
c don't pass land or sea-ice heat/wind fluxes...                           OAS_ACCUM_TILE.28    
c NB E-P calculation now done HERE! MUST be used with setvbc.F from 2810   OAS_ACCUM_TILE.29    
                                                                           OAS_ACCUM_TILE.30    
c-----tiling - only pass ocean values for coastal points                   OAS_ACCUM_TILE.31    
c----Ocean points-----------------------                                   OAS_ACCUM_TILE.32    
      if (gsg(i,ihem,jh).eq.0.0) then                                      OAS_ACCUM_TILE.33    
                                                                           OAS_ACCUM_TILE.34    
C Water Correction: evap variable is moisture convergence                  OAS_ACCUM_TILE.35    
        evap=wathbl(i,ihem,jh)                                             OAS_ACCUM_TILE.36    
C atmosphere-ocean thermal fluxes dependent on ice fraction;               OAS_ACCUM_TILE.37    
C ocean isolated from atmosphere when ice cover > 0.5 consistent with      OAS_ACCUM_TILE.38    
C updating of surface temperature in rest of IGCM                          OAS_ACCUM_TILE.39    
        if(sicecov(i,ihem,jh).ge.0.5)then                                  OAS_ACCUM_TILE.40    
          sensible2d(i,ihem,jh)=sensible2d(i,ihem,jh) +                    OAS_ACCUM_TILE.41    
     $    (-1*CV*P0*oceaniceflux(i,ihem)/TSPD)                             OAS_ACCUM_TILE.42    
        else                                                               OAS_ACCUM_TILE.43    
          swlw2d(i,ihem,jh)=swlw2d(i,ihem,jh)+                             OAS_ACCUM_TILE.44    
     $    snet(i,ihem,jh)/TSPD                                             OAS_ACCUM_TILE.45    
          heatlat2d(i,ihem,jh)=heatlat2d(i,ihem,jh)+                       OAS_ACCUM_TILE.46    
     $    (-1*CV*P0*slbl(i,ihem,jh)/TSPD)                                  OAS_ACCUM_TILE.47    
          sensible2d(i,ihem,jh)=sensible2d(i,ihem,jh) +                    OAS_ACCUM_TILE.48    
     $    (-1*CV*P0*shbl(i,ihem,jh)/TSPD)                                  OAS_ACCUM_TILE.49    
        endif                                                              OAS_ACCUM_TILE.50    
C atmosphere-ocean momentum fluxes dependent on ice thickness;             OAS_ACCUM_TILE.51    
C ocean isolated from atmosphere when covered with thick ice               OAS_ACCUM_TILE.52    
        if(tstaro(I,IHEM,jh).ge.TM2)then                                   OAS_ACCUM_TILE.53    
          taux2d(i,ihem,jh)=taux2d(i,ihem,jh) +                            OAS_ACCUM_TILE.54    
     $    P0*txbl(i,ihem)/TSPD                                             OAS_ACCUM_TILE.55    
          tauy2d(i,ihem,jh)=tauy2d(i,ihem,jh) +                            OAS_ACCUM_TILE.56    
     $    P0*tybl(i,ihem)/TSPD                                             OAS_ACCUM_TILE.57    
        endif                                                              OAS_ACCUM_TILE.58    
                                                                           OAS_ACCUM_TILE.59    
        pp=(rrlr(i,ihem,jh)+rrcr(i,ihem,jh))                               OAS_ACCUM_TILE.60    
        water2d(i,ihem,jh)=water2d(i,ihem,jh)+(pp-evap)                    OAS_ACCUM_TILE.61    
                                                                           OAS_ACCUM_TILE.62    
      else                                                                 OAS_ACCUM_TILE.63    
                                                                           OAS_ACCUM_TILE.64    
c----Partial points-----------------------                                 OAS_ACCUM_TILE.65    
        if(ofrac(i,ihem,jh).ne.0. .and.                                    OAS_ACCUM_TILE.66    
     $  ofrac(i,ihem,jh).ne.1.)then                                        OAS_ACCUM_TILE.67    
                                                                           OAS_ACCUM_TILE.68    
C Correction for ocean parts of coastal points uses post-coastal tiling    OAS_ACCUM_TILE.69    
C evap variable is moisture convergence                                    OAS_ACCUM_TILE.70    
        evap=watsbl(i,ihem,jh)                                             OAS_ACCUM_TILE.71    
C atmosphere-ocean thermal fluxes dependent on ice fraction;               OAS_ACCUM_TILE.72    
C ocean isolated from atmosphere when ice cover > 0.5 consistent with      OAS_ACCUM_TILE.73    
C updating of surface temperature in rest of IGCM                          OAS_ACCUM_TILE.74    
        if(sicecov(i,ihem,jh).ge.0.5)then                                  OAS_ACCUM_TILE.75    
          sensible2d(i,ihem,jh)=sensible2d(i,ihem,jh) +                    OAS_ACCUM_TILE.76    
     $    (-1*CV*P0*oceaniceflux(i,ihem)/TSPD)                             OAS_ACCUM_TILE.77    
        else                                                               OAS_ACCUM_TILE.78    
          swlw2d(i,ihem,jh)=swlw2d(i,ihem,jh) +                            OAS_ACCUM_TILE.79    
     $    snet(i,ihem,jh)/TSPD                                             OAS_ACCUM_TILE.80    
C Use slblc, shblc: ocean only heat fluxes                                 OAS_ACCUM_TILE.81    
          heatlat2d(i,ihem,jh)=heatlat2d(i,ihem,jh)+                       OAS_ACCUM_TILE.82    
     $    (-1*CV*P0*slblc(i,ihem,jh)/TSPD)                                 OAS_ACCUM_TILE.83    
          sensible2d(i,ihem,jh)=sensible2d(i,ihem,jh) +                    OAS_ACCUM_TILE.84    
     $    (-1*CV*P0*shblc(i,ihem,jh)/TSPD)                                 OAS_ACCUM_TILE.85    
        endif                                                              OAS_ACCUM_TILE.86    
C atmosphere-ocean momentum fluxes dependent on ice thickness;             OAS_ACCUM_TILE.87    
C ocean isolated from atmosphere when covered with thick ice               OAS_ACCUM_TILE.88    
        if(tstaroo(I,IHEM,jh).ge.TM2)then                                  OAS_ACCUM_TILE.89    
          taux2d(i,ihem,jh)=taux2d(i,ihem,jh) +                            OAS_ACCUM_TILE.90    
     $    P0*txbl(i,ihem)/TSPD                                             OAS_ACCUM_TILE.91    
          tauy2d(i,ihem,jh)=tauy2d(i,ihem,jh) +                            OAS_ACCUM_TILE.92    
     $    P0*tybl(i,ihem)/TSPD                                             OAS_ACCUM_TILE.93    
        endif                                                              OAS_ACCUM_TILE.94    
C Scale water balance by OFRAC: (1-OFRAC) done by runoff                   OAS_ACCUM_TILE.95    
        pp=(rrlr(i,ihem,jh)+rrcr(i,ihem,jh))                               OAS_ACCUM_TILE.96    
        water2d(i,ihem,jh)=water2d(i,ihem,jh)+                             OAS_ACCUM_TILE.97    
     $                     (pp-evap)*ofrac(i,ihem,jh)                      OAS_ACCUM_TILE.98    
        exwater2d(i,ihem,jh)=exwater2d(i,ihem,jh)+                         OAS_ACCUM_TILE.99    
     $                 exwat(i,ihem,jh)                                    OAS_ACCUM_TILE.100   
        exiwater2d(i,ihem,jh)=exiwater2d(i,ihem,jh)+                       OAS_ACCUM_TILE.101   
     $                 exiwat(i,ihem,jh)                                   OAS_ACCUM_TILE.102   
        exiwatern2d(i,ihem,jh)=exiwatern2d(i,ihem,jh)+                     OAS_ACCUM_TILE.103   
     $                 exiwatn(i,ihem,jh)                                  OAS_ACCUM_TILE.104   
                                                                           OAS_ACCUM_TILE.105   
        else                                                               OAS_ACCUM_TILE.106   
c----Land points-----------------------                                    OAS_ACCUM_TILE.107   
        swlw2d(i,ihem,jh)=swlw2d(i,ihem,jh) +                              OAS_ACCUM_TILE.108   
     $  snet(i,ihem,jh)/TSPD                                               OAS_ACCUM_TILE.109   
        heatlat2d(i,ihem,jh)=heatlat2d(i,ihem,jh)+                         OAS_ACCUM_TILE.110   
     $  (-1*CV*P0*slbl(i,ihem,jh)                                          OAS_ACCUM_TILE.111   
     $                                /TSPD)                               OAS_ACCUM_TILE.112   
C Water Correction after coastal tiling: can use wathbl...                 OAS_ACCUM_TILE.113   
C evap variable is moisture convergence                                    OAS_ACCUM_TILE.114   
                                                                           OAS_ACCUM_TILE.115   
        evap=watlbl(i,ihem,jh)                                             OAS_ACCUM_TILE.116   
C                                                                          OAS_ACCUM_TILE.117   
        sensible2d(i,ihem,jh)=sensible2d(i,ihem,jh) +                      OAS_ACCUM_TILE.118   
     $   (-1*CV*P0*shbl(i,ihem,jh)/TSPD)                                   OAS_ACCUM_TILE.119   
        taux2d(i,ihem,jh)=taux2d(i,ihem,jh) +                              OAS_ACCUM_TILE.120   
     $  P0*txbl(i,ihem)/TSPD                                               OAS_ACCUM_TILE.121   
        tauy2d(i,ihem,jh)=tauy2d(i,ihem,jh) +                              OAS_ACCUM_TILE.122   
     $  P0*tybl(i,ihem)/TSPD                                               OAS_ACCUM_TILE.123   
        pp=(rrlr(i,ihem,jh)+rrcr(i,ihem,jh))                               OAS_ACCUM_TILE.124   
        water2d(i,ihem,jh)=water2d(i,ihem,jh)+(pp-evap)                    OAS_ACCUM_TILE.125   
        exwater2d(i,ihem,jh)=exwat(i,ihem,jh)+                             OAS_ACCUM_TILE.126   
     $  exwater2d(i,ihem,jh)                                               OAS_ACCUM_TILE.127   
        exiwater2d(i,ihem,jh)=exiwat(i,ihem,jh)+                           OAS_ACCUM_TILE.128   
     $  exiwater2d(i,ihem,jh)                                              OAS_ACCUM_TILE.129   
        exiwatern2d(i,ihem,jh)=exiwatn(i,ihem,jh)+                         OAS_ACCUM_TILE.130   
     $  exiwatern2d(i,ihem,jh)                                             OAS_ACCUM_TILE.131   
                                                                           OAS_ACCUM_TILE.132   
        end if                                                             OAS_ACCUM_TILE.133   
                                                                           OAS_ACCUM_TILE.134   
      end if                                                               OAS_ACCUM_TILE.135   
                                                                           OAS_ACCUM_TILE.136   
c-------------------------------------                                     OAS_ACCUM_TILE.137   
                                                                           OAS_ACCUM_TILE.138   
      end do                                                               OAS_ACCUM_TILE.139   
      end do                                                               OAS_ACCUM_TILE.140   
                                                                           OAS_ACCUM_TILE.141   
      ENDDO  ! ends DO JH=1,JGyy(iRow)                                     DGRMLT.318   
                                                                           DGRMLT.319   
      RETURN                                                               DGRMLT.320   
      END                                                                  DGRMLT.321   
*ENDIF                                                                     DGRMLT.322   
*DECK DIFUSE                                                               DIFUSE.1     
!=====================================================                     DIFUSE.2     
! Calculates spectral tendencies from restoration (if included)            DIFUSE.3     
! and biharmonic diffusion.                                                DIFUSE.4     
!=====================================================                     DIFUSE.5     
      SUBROUTINE DIFUSE                                                    DIFUSE.6     
      IMPLICIT NONE                                                        DIFUSE.7     
*CALL PARAM1                                                               DIFUSE.8     
*CALL PARAM2                                                               DIFUSE.9     
*CALL PARAM3                                                               DIFUSE.10    
*CALL BLANK                                                                DIFUSE.11    
*CALL SPECTR                                                               DIFUSE.12    
*CALL BATS                                                                 DIFUSE.13    
*CALL RESTOR                                                               DIFUSE.14    
*CALL RESTIJ                                                               DIFUSE.15    
*CALL MPIDECK                                                              DIFUSE.16    
!-----------------------------------------------------                     DIFUSE.17    
! Local variables                                                          DIFUSE.18    
!-----------------------------------------------------                     DIFUSE.19    
      REAL :: AKZ                                                          DIFUSE.20    
      REAL :: AKDT                                                         DIFUSE.21    
      INTEGER :: I, IR                                                     DIFUSE.22    
      INTEGER :: NVAL                                                      DIFUSE.23    
*IF DEF,ONLY_V3                                                            DIFUSE.24    
      REAL :: RfCoeff(NLEVRF)                                              DIFUSE.25    
      LOGICAL :: iFirstRf                                                  DIFUSE.26    
*ENDIF                                                                     DIFUSE.27    
! Loop variables                                                           DIFUSE.28    
      INTEGER :: IHEM, IM, IN, J, KK, L, MP                                DIFUSE.29    
*IF DEF,ONLY_V3                                                            DIFUSE.30    
!-----------------------------------------------------                     DIFUSE.31    
! Store Rayleigh Friction variables                                        DIFUSE.32    
!-----------------------------------------------------                     DIFUSE.33    
      SAVE iFirstRf, RfCoeff                                               DIFUSE.34    
      DATA iFirstRf /.TRUE./                                               DIFUSE.35    
*ENDIF                                                                     DIFUSE.36    
!-----------------------------------------------------                     DIFUSE.37    
! Add newtonian cooling and drag.                                          DIFUSE.38    
!-----------------------------------------------------                     DIFUSE.39    
      IF (LRESTIJ) THEN                                                    DIFUSE.40    
         DO L=1,NL                                                         DIFUSE.41    
            DO IHEM=1,NHEM                                                 DIFUSE.42    
               DO IM=1,MMTyy(iRow)                                         DIFUSE.43    
                  DO IN=1,NNTxx(iCol)                                      DIFUSE.44    
                     TT(IN,IM,IHEM,L)=TT(IN,IM,IHEM,L)-                    DIFUSE.45    
     &                    DDAMP(L)*(T(IN,IM,IHEM,L)-TTRES(IN,IM,IHEM,L))   DIFUSE.46    
                     ZT(IN,IM,IHEM,L)=ZT(IN,IM,IHEM,L)-                    DIFUSE.47    
     &                    TFRC(L)*Z(IN,IM,IHEM,L)                          DIFUSE.48    
                     DT(IN,IM,IHEM,L)=DT(IN,IM,IHEM,L)-                    DIFUSE.49    
     &                    TFRC(L)*D(IN,IM,IHEM,L)                          DIFUSE.50    
                  ENDDO                                                    DIFUSE.51    
               ENDDO                                                       DIFUSE.52    
            ENDDO                                                          DIFUSE.53    
         ENDDO                                                             DIFUSE.54    
         !-----------------------------------------------------            DIFUSE.55    
         ! No friction on planetary vorticity                              DIFUSE.56    
         !-----------------------------------------------------            DIFUSE.57    
         IF (MyPe.EQ.0) THEN                                               DIFUSE.58    
            DO L=1,NL                                                      DIFUSE.59    
               ZT(1,1,1,L)=ZT(1,1,1,L)+TFRC(L)*EZ                          DIFUSE.60    
            ENDDO                                                          DIFUSE.61    
         ENDIF                                                             DIFUSE.62    
      ELSE                                                                 DIFUSE.63    
         IF(DAMP.GT.0.0) THEN                                              DIFUSE.64    
            !-----------------------------------------------------         DIFUSE.65    
            ! Apply damping for first zonal wavenumber                     DIFUSE.66    
            !-----------------------------------------------------         DIFUSE.67    
            IF (iRow.EQ.1) THEN                                            DIFUSE.68    
               DO L=1,NL                                                   DIFUSE.69    
                  DO IHEM=1,NHEM                                           DIFUSE.70    
                     DO J=1,mTwin1(2,1)                                    DIFUSE.71    
                        ZT(J,1,IHEM,L)=ZT(J,1,IHEM,L)-DAMP*                DIFUSE.72    
     &                       (Z(J,1,IHEM,L)-ZRES(J,IHEM,L))                DIFUSE.73    
                        DT(J,1,IHEM,L)=DT(J,1,IHEM,L)-DAMP*                DIFUSE.74    
     &                       (D(J,1,IHEM,L)-DRES(J,IHEM,L))                DIFUSE.75    
                        TT(J,1,IHEM,L)=TT(J,1,IHEM,L)-DAMP*                DIFUSE.76    
     &                       (T(J,1,IHEM,L)-TRES(J,IHEM,L))                DIFUSE.77    
                     ENDDO                                                 DIFUSE.78    
                  ENDDO                                                    DIFUSE.79    
               ENDDO                                                       DIFUSE.80    
            ENDIF                                                          DIFUSE.81    
         ENDIF                                                             DIFUSE.82    
      ENDIF                                                                DIFUSE.83    
!-----------------------------------------------------                     DIFUSE.84    
! Add in biharmonic diffusion if required                                  DIFUSE.85    
!-----------------------------------------------------                     DIFUSE.86    
      IF (AK(2).GT.0.0) THEN                                               DIFUSE.87    
         DO L=1,NL                                                         DIFUSE.88    
            DO IHEM=1,NHEM                                                 DIFUSE.89    
               DO IM=1,MMTyy(iRow)                                         DIFUSE.90    
                  DO IN=1,NNTxx(iCol)                                      DIFUSE.91    
                     NVAL=nWave(IN,IM,iCol)                                DIFUSE.92    
                     AKZ =AK(NVAL+3-IHEM)                                  DIFUSE.93    
                     AKDT=AK(NVAL+IHEM)                                    DIFUSE.94    
                     ZT(IN,IM,IHEM,L)=ZT(IN,IM,IHEM,L)-                    DIFUSE.95    
     &                    AKZ *Z(IN,IM,IHEM,L)                             DIFUSE.96    
                     DT(IN,IM,IHEM,L)=DT(IN,IM,IHEM,L)-                    DIFUSE.97    
     &                    AKDT*D(IN,IM,IHEM,L)                             DIFUSE.98    
                     TT(IN,IM,IHEM,L)=TT(IN,IM,IHEM,L)-                    DIFUSE.99    
     &                    AKDT*T(IN,IM,IHEM,L)                             DIFUSE.100   
                  ENDDO                                                    DIFUSE.101   
               ENDDO                                                       DIFUSE.102   
*IF DEF,ABOVE_V1                                                           DIFUSE.103   
               DO KK=1,NTRAC                                               DIFUSE.104   
                  DO IM=1,MMTyy(iRow)                                      DIFUSE.105   
                     DO IN=1,NNTxx(iCol)                                   DIFUSE.106   
                        NVAL=nWave(IN,IM,iCol)                             DIFUSE.107   
                        AKDT=AK(NVAL+IHEM)                                 DIFUSE.108   
                        TRAT(IN,IM,IHEM,L,KK)=TRAT(IN,IM,IHEM,L,KK)-       DIFUSE.109   
     &                       AKDT*TRA(IN,IM,IHEM,L,KK)                     DIFUSE.110   
                     ENDDO                                                 DIFUSE.111   
                  ENDDO                                                    DIFUSE.112   
               ENDDO                                                       DIFUSE.113   
*ENDIF                                                                     DIFUSE.114   
            ENDDO                                                          DIFUSE.115   
         ENDDO                                                             DIFUSE.116   
         !-----------------------------------------------------            DIFUSE.117   
         ! No diffusion on EZ (planetary vorticity)                        DIFUSE.118   
         !-----------------------------------------------------            DIFUSE.119   
         IF (MyPe.EQ.0) THEN                                               DIFUSE.120   
            DO L=1,NL                                                      DIFUSE.121   
               ZT(1,1,1,L)=ZT(1,1,1,L)+AK(2)*EZ                            DIFUSE.122   
            ENDDO                                                          DIFUSE.123   
         ENDIF                                                             DIFUSE.124   
      ENDIF                                                                DIFUSE.125   
*IF DEF,ONLY_V3                                                            DIFUSE.126   
C                                                                          GRAVDMOD.42    
*ENDIF                                                                     DIFUSE.161   
      RETURN                                                               DIFUSE.162   
      END                                                                  DIFUSE.163   
*DECK DLSGCR                                                               DLSGCR.1     
*IF DEF,ABOVE_V1                                                           DLSGCR.2     
!=====================================================                     DLSGCR.3     
! Black-box routine to take vertical derivative of a 2D array              DLSGCR.4     
! in the model's vertical co-ordinates using the RGG matrix:               DLSGCR.5     
!                                                                          DLSGCR.6     
!         DF   =   RGG   *   F                                             DLSGCR.7     
!                                                                          DLSGCR.8     
! gives    DF   =   d(F)/dln(sigma)   =   (sigma)d(F)/d(sigma).            DLSGCR.9     
!                                                                          DLSGCR.10    
! Calculates DF at NL levels for NCOL columns from the array F.            DLSGCR.11    
! Uses vector loops over NCOL at each level.  Note that for                DLSGCR.12    
! NCOL <= 3 inner loops unroll to give vectorisation over levels.          DLSGCR.13    
!                                                                          DLSGCR.14    
! Uses explicit values of RGG matrix rather than function SDOT             DLSGCR.15    
! over NL elements of RGG at each level.  Due to sparse nature             DLSGCR.16    
! of RGG, this gives large speed-up for NL >> 3.                           DLSGCR.17    
!                                                                          DLSGCR.18    
! Reading model - sigma.                                                   DLSGCR.19    
!=====================================================                     DLSGCR.20    
      SUBROUTINE DLSGCR(NCOL,IDIM,NHEM,JDIM,NL,JH,F,RGG,DF)                DLSGCR.21    
      IMPLICIT NONE                                                        DLSGCR.22    
!-----------------------------------------------------                     DLSGCR.23    
! Passed arguments                                                         DLSGCR.24    
!-----------------------------------------------------                     DLSGCR.25    
      INTEGER :: NCOL                                                      DLSGCR.26    
      INTEGER :: IDIM                                                      DLSGCR.27    
      INTEGER :: JDIM                                                      DLSGCR.28    
      INTEGER :: NHEM                                                      DLSGCR.29    
      INTEGER :: NL                                                        DLSGCR.30    
      INTEGER :: JH                                                        DLSGCR.31    
      REAL :: F(IDIM,NHEM,JDIM,NL)                                         DLSGCR.32    
      REAL :: RGG(NL,NL)                                                   DLSGCR.33    
      REAL :: DF(IDIM,NHEM,NL)                                             DLSGCR.34    
!-----------------------------------------------------                     DLSGCR.35    
! Local variables                                                          DLSGCR.36    
!-----------------------------------------------------                     DLSGCR.37    
! Loop variables                                                           DLSGCR.38    
      INTEGER :: I, IHEM, L                                                DLSGCR.39    
!-----------------------------------------------------                     DLSGCR.40    
! Format statements                                                        DLSGCR.41    
!-----------------------------------------------------                     DLSGCR.42    
 6900 FORMAT(/' ***ABORT IN DLSGCR: MORE COLUMNS THAN ARRAY DIMENSION:'    DLSGCR.43    
     :       ,' NCOL IDIM ='2I10)                                          DLSGCR.44    
!-----------------------------------------------------                     DLSGCR.45    
!                                                                          DLSGCR.46    
!-----------------------------------------------------                     DLSGCR.47    
      IF (NCOL.GT.IDIM) THEN                                               DLSGCR.48    
         WRITE(2,6900) NCOL,IDIM                                           DLSGCR.49    
         CALL ABORT                                                        DLSGCR.50    
      ENDIF                                                                DLSGCR.51    
!-----------------------------------------------------                     DLSGCR.52    
! Top and bottom levels.                                                   DLSGCR.53    
!-----------------------------------------------------                     DLSGCR.54    
      DO IHEM=1,NHEM                                                       DLSGCR.55    
         DO I=1,NCOL                                                       DLSGCR.56    
            DF(I,IHEM,1)=F(I,IHEM,JH,1)*RGG(1,1)+                          DLSGCR.57    
     &           F(I,IHEM,JH,2)*RGG(2,1)+F(I,IHEM,JH,3)*RGG(3,1)           DLSGCR.58    
            DF(I,IHEM,NL)=F(I,IHEM,JH,NL-2)*RGG(NL-2,NL)+                  DLSGCR.59    
     &           F(I,IHEM,JH,NL-1)*RGG(NL-1,NL)+                           DLSGCR.60    
     &           F(I,IHEM,JH,NL)*RGG(NL,NL)                                DLSGCR.61    
         ENDDO                                                             DLSGCR.62    
      ENDDO                                                                DLSGCR.63    
!-----------------------------------------------------                     DLSGCR.64    
! Intermediate levels.                                                     DLSGCR.65    
!-----------------------------------------------------                     DLSGCR.66    
      DO L=2,NL-1                                                          DLSGCR.67    
         DO IHEM=1,NHEM                                                    DLSGCR.68    
            DO I=1,NCOL                                                    DLSGCR.69    
               DF(I,IHEM,L)=F(I,IHEM,JH,L-1)*RGG(L-1,L)+                   DLSGCR.70    
     &              F(I,IHEM,JH,L+1)*RGG(L+1,L)                            DLSGCR.71    
            ENDDO                                                          DLSGCR.72    
         ENDDO                                                             DLSGCR.73    
      ENDDO                                                                DLSGCR.74    
      RETURN                                                               DLSGCR.75    
      END                                                                  DLSGCR.76    
*ENDIF                                                                     DLSGCR.77    
*DECK DRYADJ                                                               DRYADJ.1     
*IF DEF,ABOVE_V1                                                           DRYADJ.2     
!=====================================================                     DRYADJ.3     
! DRY ADIABATIC ADJUSTMENT TO NEUTRALITY IN DELT2 STEP                     DRYADJ.4     
! Always mix moisture, irrespective of the parcel origin level.            DRYADJ.5     
!=====================================================                     DRYADJ.6     
      SUBROUTINE DRYADJ(NCRB,NCRT,I,IHEM,JH)                               DRYADJ.7     
      IMPLICIT NONE                                                        DRYADJ.8     
*CALL PARAM1                                                               DRYADJ.9     
*CALL PARAM2                                                               DRYADJ.10    
*CALL PARAM3                                                               DRYADJ.11    
*CALL BLANK                                                                DRYADJ.12    
*CALL LEGAU                                                                DRYADJ.13    
*CALL GRIDPA3                                                              DRYADJ.14    
*CALL GRIDPC                                                               DRYADJ.15    
*CALL PHYSCA                                                               DRYADJ.16    
!-----------------------------------------------------                     DRYADJ.17    
! Passed arguments                                                         DRYADJ.18    
!-----------------------------------------------------                     DRYADJ.19    
      INTEGER :: NCRB                                                      DRYADJ.20    
      INTEGER :: NCRT                                                      DRYADJ.21    
      INTEGER :: I                                                         DRYADJ.22    
      INTEGER :: IHEM                                                      DRYADJ.23    
! Latitude index                                                           DRYADJ.24    
      INTEGER :: JH                                                        DRYADJ.25    
!-----------------------------------------------------                     DRYADJ.26    
! Local variables                                                          DRYADJ.27    
!-----------------------------------------------------                     DRYADJ.28    
      INTEGER :: NLEV                                                      DRYADJ.29    
      REAL :: SINT                                                         DRYADJ.30    
      REAL :: SKINT                                                        DRYADJ.31    
      REAL :: TINT                                                         DRYADJ.32    
      REAL :: QINT                                                         DRYADJ.33    
      REAL :: TL                                                           DRYADJ.34    
      REAL :: QL                                                           DRYADJ.35    
! Loop variables                                                           DRYADJ.36    
      INTEGER :: L                                                         DRYADJ.37    
!-----------------------------------------------------                     DRYADJ.38    
! Sum up the levels                                                        DRYADJ.39    
!-----------------------------------------------------                     DRYADJ.40    
      NLEV=1+NCRB-NCRT                                                     DRYADJ.41    
      SINT=0.0                                                             DRYADJ.42    
      DO L=NCRT,NCRB                                                       DRYADJ.43    
         SINT=SINT+DSIGMA(L)                                               DRYADJ.44    
      ENDDO                                                                DRYADJ.45    
!-----------------------------------------------------                     DRYADJ.46    
! Work out the dot products                                                DRYADJ.47    
!-----------------------------------------------------                     DRYADJ.48    
      SKINT=0.0                                                            DRYADJ.49    
      TINT=0.0                                                             DRYADJ.50    
      QINT=0.0                                                             DRYADJ.51    
      DO L=NCRT,NCRB                                                       DRYADJ.52    
         SKINT=SKINT+SKAP(L)*DSIGMA(L)                                     DRYADJ.53    
         TINT=TINT+TG3(I,IHEM,JH,L)*DSIGMA(L)                              DRYADJ.54    
         QINT=QINT+TRAG3(I,IHEM,JH,L,1)*DSIGMA(L)                          DRYADJ.55    
      ENDDO                                                                DRYADJ.56    
      TINT=TINT/SKINT                                                      DRYADJ.57    
      QINT=QINT/SINT                                                       DRYADJ.58    
!-----------------------------------------------------                     DRYADJ.59    
! Loop across levels                                                       DRYADJ.60    
!-----------------------------------------------------                     DRYADJ.61    
      DO L=NCRT,NCRB                                                       DRYADJ.62    
         TL=SKAP(L)*TINT                                                   DRYADJ.63    
         QL=QINT                                                           DRYADJ.64    
         TTDC(L)=(TL-TG3(I,IHEM,JH,L))/DELT2C                              DRYADJ.65    
         QTDC(L)=(QL-TRAG3(I,IHEM,JH,L,1))/DELT2C                          DRYADJ.66    
         TG3(I,IHEM,JH,L)=TL                                               DRYADJ.67    
         TRAG3(I,IHEM,JH,L,1)=QL                                           DRYADJ.68    
         CTCR(L,IHEM)=CTCR(L,IHEM)+2.0                                     DRYADJ.69    
      ENDDO                                                                DRYADJ.70    
      CTCR(NCRB,IHEM)=CTCR(NCRB,IHEM)-2.0                                  DRYADJ.71    
      RETURN                                                               DRYADJ.72    
      END                                                                  DRYADJ.73    
*ENDIF                                                                     DRYADJ.74    
*DECK DSTEP                                                                DSTEP.1     
!=====================================================                     DSTEP.2     
! Diabatic part of timestep. Completion of time-filter.                    DSTEP.3     
! Note that only Z,D,T have diabatic tendencies at present.                DSTEP.4     
!=====================================================                     DSTEP.5     
      SUBROUTINE DSTEP                                                     DSTEP.6     
      IMPLICIT NONE                                                        DSTEP.7     
*CALL PARAM1                                                               DSTEP.8     
*CALL PARAM2                                                               DSTEP.9     
*CALL PARAM3                                                               DSTEP.10    
*CALL SPECTR                                                               DSTEP.11    
*CALL BATS                                                                 DSTEP.12    
*CALL MPIDECK                                                              DSTEP.13    
!-----------------------------------------------------                     DSTEP.14    
! Local variables                                                          DSTEP.15    
!-----------------------------------------------------                     DSTEP.16    
! Loop variables                                                           DSTEP.17    
      INTEGER :: I, IHEM, IM, IN, KK, L                                    DSTEP.18    
!-----------------------------------------------------                     DSTEP.19    
! Choose between centred and forward timestep                              DSTEP.20    
!-----------------------------------------------------                     DSTEP.21    
      IF(KOUNT.GT.KITS) THEN                                               DSTEP.22    
         !-----------------------------------------------------            DSTEP.23    
         ! Ordinary centred timestep                                       DSTEP.24    
         !-----------------------------------------------------            DSTEP.25    
         DO L=1,NL                                                         DSTEP.26    
            DO IHEM=1,NHEM                                                 DSTEP.27    
               DO IM=1,MMTyy(iRow)                                         DSTEP.28    
                  DO IN=1,NNTxx(iCol)                                      DSTEP.29    
                     Z(IN,IM,IHEM,L)=Z(IN,IM,IHEM,L)+                      DSTEP.30    
     &                    DELT2*ZT(IN,IM,IHEM,L)                           DSTEP.31    
                     T(IN,IM,IHEM,L)=T(IN,IM,IHEM,L)+                      DSTEP.32    
     &                    DELT2*TT(IN,IM,IHEM,L)                           DSTEP.33    
                     D(IN,IM,IHEM,L)=D(IN,IM,IHEM,L)+                      DSTEP.34    
     &                    DELT2*DT(IN,IM,IHEM,L)                           DSTEP.35    
                     ZMI(IN,IM,IHEM,L)=ZMI(IN,IM,IHEM,L)+                  DSTEP.36    
     &                    PNU*Z(IN,IM,IHEM,L)                              DSTEP.37    
                     TMI(IN,IM,IHEM,L)=TMI(IN,IM,IHEM,L)+                  DSTEP.38    
     &                    PNU*T(IN,IM,IHEM,L)                              DSTEP.39    
                     DMI(IN,IM,IHEM,L)=DMI(IN,IM,IHEM,L)+                  DSTEP.40    
     &                    PNU*D(IN,IM,IHEM,L)                              DSTEP.41    
                  ENDDO                                                    DSTEP.42    
               ENDDO                                                       DSTEP.43    
            ENDDO                                                          DSTEP.44    
         ENDDO                                                             DSTEP.45    
*IF DEF,ABOVE_V1                                                           DSTEP.46    
         DO KK=1,NTRAC                                                     DSTEP.47    
            DO L=1,NL                                                      DSTEP.48    
               DO IHEM=1,NHEM                                              DSTEP.49    
                  DO IM=1,MMTyy(iRow)                                      DSTEP.50    
                     DO IN=1,NNTxx(iCol)                                   DSTEP.51    
                        TRA(IN,IM,IHEM,L,KK)=TRA(IN,IM,IHEM,L,KK)+         DSTEP.52    
     &                       DELT2*TRAT(IN,IM,IHEM,L,KK)                   DSTEP.53    
                        TRAMI(IN,IM,IHEM,L,KK)=TRAMI(IN,IM,IHEM,L,KK)+     DSTEP.54    
     &                       PNU*TRA(IN,IM,IHEM,L,KK)                      DSTEP.55    
                     ENDDO                                                 DSTEP.56    
                  ENDDO                                                    DSTEP.57    
               ENDDO                                                       DSTEP.58    
            ENDDO                                                          DSTEP.59    
         ENDDO                                                             DSTEP.60    
*ENDIF                                                                     DSTEP.61    
         DO IHEM=1,NHEM                                                    DSTEP.62    
            DO IM=1,MMTyy(iRow)                                            DSTEP.63    
               DO IN=1,NNTxx(iCol)                                         DSTEP.64    
                  SPMI(IN,IM,IHEM)=SPMI(IN,IM,IHEM)+                       DSTEP.65    
     &                 PNU*SP(IN,IM,IHEM)                                  DSTEP.66    
               ENDDO                                                       DSTEP.67    
            ENDDO                                                          DSTEP.68    
         ENDDO                                                             DSTEP.69    
         RETURN                                                            DSTEP.70    
      ELSE                                                                 DSTEP.71    
         !-----------------------------------------------------            DSTEP.72    
         ! Short initial timestep                                          DSTEP.73    
         !-----------------------------------------------------            DSTEP.74    
         DO L=1,NL                                                         DSTEP.75    
            DO IHEM=1,NHEM                                                 DSTEP.76    
               DO IM=1,MMTyy(iRow)                                         DSTEP.77    
                  DO IN=1,NNTxx(iCol)                                      DSTEP.78    
                     Z(IN,IM,IHEM,L)=Z(IN,IM,IHEM,L)+                      DSTEP.79    
     &                    DELT2*ZT(IN,IM,IHEM,L)                           DSTEP.80    
                     T(IN,IM,IHEM,L)=T(IN,IM,IHEM,L)+                      DSTEP.81    
     &                    DELT2*TT(IN,IM,IHEM,L)                           DSTEP.82    
                     D(IN,IM,IHEM,L)=D(IN,IM,IHEM,L)+                      DSTEP.83    
     &                    DELT2*DT(IN,IM,IHEM,L)                           DSTEP.84    
                  ENDDO                                                    DSTEP.85    
               ENDDO                                                       DSTEP.86    
            ENDDO                                                          DSTEP.87    
         ENDDO                                                             DSTEP.88    
*IF DEF,ABOVE_V1                                                           DSTEP.89    
         DO KK=1,NTRAC                                                     DSTEP.90    
            DO L=1,NL                                                      DSTEP.91    
               DO IHEM=1,NHEM                                              DSTEP.92    
                  DO IM=1,MMTyy(iRow)                                      DSTEP.93    
                     DO IN=1,NNTxx(iCol)                                   DSTEP.94    
                        TRA(IN,IM,IHEM,L,KK)=TRA(IN,IM,IHEM,L,KK)+         DSTEP.95    
     &                       DELT2*TRAT(IN,IM,IHEM,L,KK)                   DSTEP.96    
                     ENDDO                                                 DSTEP.97    
                  ENDDO                                                    DSTEP.98    
               ENDDO                                                       DSTEP.99    
            ENDDO                                                          DSTEP.100   
         ENDDO                                                             DSTEP.101   
*ENDIF                                                                     DSTEP.102   
         DELT=DELT2                                                        DSTEP.103   
         DELT2=DELT2+DELT2                                                 DSTEP.104   
         RETURN                                                            DSTEP.105   
      ENDIF                                                                DSTEP.106   
      END                                                                  DSTEP.107   
*DECK ENERGY                                                               ENERGY.1     
!=====================================================                     ENERGY.2     
! Calculates various global diagnostic quantities                          ENERGY.3     
! every itstp timesteps.                                                   ENERGY.4     
!=====================================================                     ENERGY.5     
      SUBROUTINE ENERGY                                                    ENERGY.6     
      IMPLICIT NONE                                                        ENERGY.7     
*CALL PARAM1                                                               ENERGY.8     
*CALL PARAM2                                                               ENERGY.9     
*CALL PARAM3                                                               ENERGY.10    
*CALL BLANK                                                                ENERGY.11    
*CALL SPECTR                                                               ENERGY.12    
*CALL OUTCON                                                               ENERGY.13    
*CALL BATS                                                                 ENERGY.14    
*CALL MPIDECK                                                              ENERGY.15    
!-----------------------------------------------------                     ENERGY.16    
! Local variables                                                          ENERGY.17    
!-----------------------------------------------------                     ENERGY.18    
      COMPLEX :: TIG,SPIP,CTIG,CRGS                                        ENERGY.19    
      INTEGER, PARAMETER :: TagRef=600                                     ENERGY.20    
      INTEGER :: IG                                                        ENERGY.21    
      REAL :: DSIG, DSIGH                                                  ENERGY.22    
      REAL :: RTIG, RZIG, RDIG                                             ENERGY.23    
      REAL :: RSPIP                                                        ENERGY.24    
      REAL :: TOTP                                                         ENERGY.25    
      REAL :: PSITOT                                                       ENERGY.26    
      REAL :: CHITOT                                                       ENERGY.27    
      REAL :: TMPTOT                                                       ENERGY.28    
      REAL :: TOTI                                                         ENERGY.29    
      REAL :: RTL                                                          ENERGY.30    
      REAL :: ST2B                                                         ENERGY.31    
      REAL :: ST                                                           ENERGY.32    
      REAL :: AMSP                                                         ENERGY.33    
      REAL :: HOLDVAR(5+NTRAC)                                             ENERGY.34    
      REAL :: GS1                                                          ENERGY.35    
      INTEGER :: iPe                                                       ENERGY.36    
      INTEGER :: iCol2, iRow2                                              ENERGY.37    
*IF DEF,ABOVE_V1                                                           ENERGY.38    
! Total moisture diagnostic (as in BGCM5).                                 ENERGY.39    
      REAL :: TOTQ                                                         ENERGY.40    
! Accounts for the p0 term excluded from SPA(1) in MGRMLT                  ENERGY.41    
      REAL :: AMQ                                                          ENERGY.42    
*ENDIF                                                                     ENERGY.43    
! Loop variables                                                           ENERGY.44    
      INTEGER :: IHEM, IM, IN, L                                           ENERGY.45    
!-----------------------------------------------------                     ENERGY.46    
! Remove planetary vorticity so Z contains relative vorticity              ENERGY.47    
!-----------------------------------------------------                     ENERGY.48    
      IF (MyPe.EQ.0) THEN                                                  ENERGY.49    
         DO L=1,NL                                                         ENERGY.50    
            Z(1,1,1,L)=Z(1,1,1,L)-EZ                                       ENERGY.51    
         ENDDO                                                             ENERGY.52    
      ENDIF                                                                ENERGY.53    
!-----------------------------------------------------                     ENERGY.54    
! Calculate means - PSITOT RMS vorticity                                   ENERGY.55    
!                   CHITOT RMS divergence                                  ENERGY.56    
!                   TMPTOT RMS temperature                                 ENERGY.57    
!                   TOTP  IE+PE potential energy                           ENERGY.58    
!                   AMSP mean surface pressure                             ENERGY.59    
!-----------------------------------------------------                     ENERGY.60    
      HoldVar(:)=0.0                                                       ENERGY.61    
      ST2B=0.                                                              ENERGY.62    
      ST=0.                                                                ENERGY.63    
*IF DEF,ABOVE_V1                                                           ENERGY.64    
      AMQ=0.                                                               ENERGY.65    
*ENDIF                                                                     ENERGY.66    
      DO IM=1,MMTyy(iRow)                                                  ENERGY.67    
         DO IN=1,NNTxx(iCol)                                               ENERGY.68    
            !-----------------------------------------------------         ENERGY.69    
            ! Determine if this is zonal wavenumber 0                      ENERGY.70    
            !-----------------------------------------------------         ENERGY.71    
            IF ((mWave(1,IM).EQ.0).AND.(IN.LE.mTwin1(2,1))) THEN           ENERGY.72    
               !-----------------------------------------------------      ENERGY.73    
               ! Zonal wavenumber 0                                        ENERGY.74    
               !-----------------------------------------------------      ENERGY.75    
               DO IHEM=1,NHEM                                              ENERGY.76    
                  DO L=1,NL                                                ENERGY.77    
                     DSIG=DSIGMA(L)                                        ENERGY.78    
                     DSIGH=0.5*DSIG                                        ENERGY.79    
                     RZIG=REAL(Z(IN,IM,IHEM,L))                            ENERGY.80    
                     RDIG=REAL(D(IN,IM,IHEM,L))                            ENERGY.81    
                     RTIG=REAL(T(IN,IM,IHEM,L))                            ENERGY.82    
                     HoldVar(1)=HoldVar(1)+DSIGH*RZIG*RZIG                 ENERGY.83    
                     HoldVar(2)=HoldVar(2)+DSIGH*RDIG*RDIG                 ENERGY.84    
                     HoldVar(3)=HoldVar(3)+DSIGH*RTIG*RTIG                 ENERGY.85    
                     RSPIP=REAL(SPA(IN,IM,IHEM))                           ENERGY.86    
                     HoldVar(4)=HoldVar(4)+DSIGH*RSPIP*RTIG                ENERGY.87    
*IF DEF,ABOVE_V1                                                           ENERGY.88    
                     HoldVar(6)=HoldVar(6)+DSIGH*RSPIP*                    ENERGY.89    
     &                    REAL(TRA(IN,IM,IHEM,L,1))                        ENERGY.90    
*ENDIF                                                                     ENERGY.91    
                  ENDDO                                                    ENERGY.92    
                  HoldVar(5)=HoldVar(5)+0.5*RSPIP*REAL(GS(IN,IM,IHEM))     ENERGY.93    
               ENDDO                                                       ENERGY.94    
            ELSE                                                           ENERGY.95    
               !-----------------------------------------------------      ENERGY.96    
               ! Zonal wavenumber is greater than 0                        ENERGY.97    
               !-----------------------------------------------------      ENERGY.98    
               DO IHEM=1,NHEM                                              ENERGY.99    
                  DO L=1,NL                                                ENERGY.100   
                     DSIG=DSIGMA(L)                                        ENERGY.101   
                     TIG=T(IN,IM,IHEM,L)                                   ENERGY.102   
                     CTIG=CONJG(TIG)                                       ENERGY.103   
                     SPIP=SPA(IN,IM,IHEM)                                  ENERGY.104   
                     HoldVar(1)=HoldVar(1)+DSIG*                           ENERGY.105   
     &                    REAL(Z(IN,IM,IHEM,L)*CONJG(Z(IN,IM,IHEM,L)))     ENERGY.106   
                     HoldVar(2)=HoldVar(2)+DSIG*                           ENERGY.107   
     &                    REAL(D(IN,IM,IHEM,L)*CONJG(D(IN,IM,IHEM,L)))     ENERGY.108   
                     HoldVar(3)=HoldVar(3)+DSIG*REAL(TIG*CTIG)             ENERGY.109   
                     HoldVar(4)=HoldVar(4)+DSIG*REAL(SPIP*CTIG)            ENERGY.110   
*IF DEF,ABOVE_V1                                                           ENERGY.111   
                     HoldVar(6)=HoldVar(6)+DSIG*                           ENERGY.112   
     &                    REAL(SPIP*CONJG(TRA(IN,IM,IHEM,L,1)))            ENERGY.113   
*ENDIF                                                                     ENERGY.114   
                  ENDDO                                                    ENERGY.115   
                  CRGS=CONJG(GS(IN,IM,IHEM))                               ENERGY.116   
                  HoldVar(5)=HoldVar(5)+REAL(SPIP*CRGS)                    ENERGY.117   
               ENDDO                                                       ENERGY.118   
            ENDIF                                                          ENERGY.119   
         ENDDO                                                             ENERGY.120   
      ENDDO                                                                ENERGY.121   
!-----------------------------------------------------                     ENERGY.122   
! Collect all the wavenumbers together                                     ENERGY.123   
!-----------------------------------------------------                     ENERGY.124   
      PSITOT=holdvar(1)                                                    ENERGY.125   
      CHITOT=holdvar(2)                                                    ENERGY.126   
      TMPTOT=holdvar(3)                                                    ENERGY.127   
      TOTI=holdvar(4)                                                      ENERGY.128   
      TOTP=holdvar(5)                                                      ENERGY.129   
*IF DEF,ABOVE_V1                                                           ENERGY.130   
      TOTQ=holdvar(6)                                                      ENERGY.131   
*ENDIF                                                                     ENERGY.132   
      IF (MyPe.GT.0) THEN                                                  ENERGY.133   
         !-----------------------------------------------------            ENERGY.134   
         ! Send all the data to PE 0                                       ENERGY.135   
         !-----------------------------------------------------            ENERGY.136   
         iRecv=0                                                           ENERGY.137   
         nBuffSize=5+NTRAC                                                 ENERGY.138   
         iTag=TagRef+MyPe                                                  ENERGY.139   
         CALL MPI_BSEND(HoldVar, nBuffSize, ParaReal, iRecv,               ENERGY.140   
     &        iTag, MPI_COMM_WORLD, ierr)                                  ENERGY.141   
      ELSE                                                                 ENERGY.142   
         DO iPe=1,NPE-1                                                    ENERGY.143   
            !-----------------------------------------------------         ENERGY.144   
            ! On PE 0, receive all the data                                ENERGY.145   
            !-----------------------------------------------------         ENERGY.146   
            iSend=iPe                                                      ENERGY.147   
            nBuffSize=5+NTRAC                                              ENERGY.148   
            iTag=TagRef+iPe                                                ENERGY.149   
            CALL MPI_RECV(HoldVar, nBuffSize, ParaReal, iSend,             ENERGY.150   
     &           iTag, MPI_COMM_WORLD, istat, ierr)                        ENERGY.151   
            !-----------------------------------------------------         ENERGY.152   
            ! Calculate means                                              ENERGY.153   
            !-----------------------------------------------------         ENERGY.154   
            PSITOT=PSITOT+HoldVar(1)                                       ENERGY.155   
            CHITOT=CHITOT+HoldVar(2)                                       ENERGY.156   
            TMPTOT=TMPTOT+HoldVar(3)                                       ENERGY.157   
            TOTI=TOTI+HoldVar(4)                                           ENERGY.158   
            TOTP=TOTP+HoldVar(5)                                           ENERGY.159   
*IF DEF,ABOVE_V1                                                           ENERGY.160   
            TOTQ=TOTQ+holdvar(6)                                           ENERGY.161   
*ENDIF                                                                     ENERGY.162   
         ENDDO                                                             ENERGY.163   
         !-----------------------------------------------------            ENERGY.164   
         ! Calculate ST2B and ST                                           ENERGY.165   
         !-----------------------------------------------------            ENERGY.166   
         DO L=1,NL                                                         ENERGY.167   
            RTL=REAL(T(1,1,1,L))                                           ENERGY.168   
            DSIG=DSIGMA(L)                                                 ENERGY.169   
            ST2B=ST2B+T0(L)*RTL*DSIG                                       ENERGY.170   
            ST=ST+RTL*DSIG                                                 ENERGY.171   
*IF DEF,ABOVE_V1                                                           ENERGY.172   
            AMQ=AMQ+DSIG*REAL(TRA(1,1,1,L,1))                              ENERGY.173   
*ENDIF                                                                     ENERGY.174   
         ENDDO                                                             ENERGY.175   
         !-----------------------------------------------------            ENERGY.176   
         ! Calculate the mean surface pressure, AMSP                       ENERGY.177   
         !-----------------------------------------------------            ENERGY.178   
         AMSP=1.0+REAL(SPA(1,1,1))*RSQR2                                   ENERGY.179   
*IF DEF,ABOVE_V1                                                           ENERGY.180   
         !-----------------------------------------------------            ENERGY.181   
         ! Moisture calculations                                           ENERGY.182   
         !-----------------------------------------------------            ENERGY.183   
         AMQ=CQ*RSQR2*AMQ                                                  ENERGY.184   
*IF DEF,ONLY_V2                                                            ENERGY.185   
         IF (LFLUX) THEN                                                   ENERGY.186   
            TOTQ=AMQ                                                       ENERGY.187   
         ELSE                                                              ENERGY.188   
            TOTQ=AMQ+CQ*TOTQ                                               ENERGY.189   
         ENDIF                                                             ENERGY.190   
*ELSE                                                                      ENERGY.191   
         TOTQ=CQ*TOTQ+AMQ                                                  ENERGY.192   
*ENDIF                                                                     ENERGY.193   
*ENDIF                                                                     ENERGY.194   
         !-----------------------------------------------------            ENERGY.195   
         ! Final calculations                                              ENERGY.196   
         !-----------------------------------------------------            ENERGY.197   
         GS1=REAL(GS(1,1,1))                                               ENERGY.198   
         PSITOT=SQRT(PSITOT)                                               ENERGY.199   
         CHITOT=SQRT(CHITOT)                                               ENERGY.200   
         TMPTOT=SQRT(TMPTOT+TOUT2+ST2B*SQR2)                               ENERGY.201   
         TOTP=TOTP+RSQR2*GS1+(AMSP*TOUT1+TOTI+RSQR2*ST)/AKAP               ENERGY.202   
         !-----------------------------------------------------            ENERGY.203   
         ! Display mean values to screen                                   ENERGY.204   
         !-----------------------------------------------------            ENERGY.205   
*IF DEF,ONLY_V3                                                            ENERGY.206   
         IF (KOUNT.EQ.0) WRITE(2,40)                                       ENERGY.207   
*ELSE                                                                      ENERGY.208   
         IF (KOUTP .LT. KOUNTE .OR. KOUTH .LT. KOUNTE .OR.                 ENERGY.209   
     &        KOUTR .LT. KOUNTE .OR. KOUNT .EQ. 0) WRITE(2,40)             ENERGY.210   
*ENDIF                                                                     ENERGY.211   
*IF DEF,ABOVE_V1                                                           ENERGY.212   
         WRITE (2,50) KOUNT,PSITOT,CHITOT,TMPTOT,TOTP,TOTQ,AMSP            ENERGY.213   
*ELSE                                                                      ENERGY.214   
         WRITE (2,50) KOUNT,PSITOT,CHITOT,TMPTOT,TOTP,AMSP                 ENERGY.215   
*ENDIF                                                                     ENERGY.216   
         !-----------------------------------------------------            ENERGY.217   
         ! Restore Z to absolute vorticity                                 ENERGY.218   
         !-----------------------------------------------------            ENERGY.219   
         DO L=1,NL                                                         ENERGY.220   
            Z(1,1,1,L)=Z(1,1,1,L)+EZ                                       ENERGY.221   
         ENDDO                                                             ENERGY.222   
      ENDIF                                                                ENERGY.223   
!-----------------------------------------------------                     ENERGY.224   
! Format statements                                                        ENERGY.225   
!-----------------------------------------------------                     ENERGY.226   
*IF DEF,ABOVE_V1                                                           ENERGY.227   
   40 FORMAT(/3X,'KOUNT',3X,'RMSVORT',8X,'RMSDIV',8X,'RMSTEMP'             ENERGY.228   
     +       ,8X,'PE+IE',8X,'TOTQ',9X,'MSP')                               ENERGY.229   
   50 FORMAT(I8,1X,4E15.6,2F13.10)                                         MISC_COMMON.16    
*ELSE                                                                      ENERGY.231   
   40 FORMAT(/3X,'KOUNT',3X,'RMSVORT',8X,'RMSDIV',8X,'RMSTEMP'             ENERGY.232   
     +       ,8X,'PE+IE',10X,'MSP')                                        ENERGY.233   
   50 FORMAT(I6,1X,4E15.6,F13.10)                                          ENERGY.234   
*ENDIF                                                                     ENERGY.235   
                                                                           ENERGY.236   
      RETURN                                                               ENERGY.237   
      END                                                                  ENERGY.238   
*DECK FFT                                                                  FFT.1     
!=====================================================                     FFT.2     
! Carry out a fast-fourier transform                                       FFT.3     
!=====================================================                     FFT.4     
      SUBROUTINE FFT(iDirection, nLevels, ARRAY)                           FFT.5     
      IMPLICIT NONE                                                        FFT.6     
*CALL PARAM1                                                               FFT.7     
*CALL PARAM2                                                               FFT.8     
*CALL PARAM3                                                               FFT.9     
*CALL COMFFT                                                               FFT.10    
!-----------------------------------------------------                     FFT.11    
! Passed variable                                                          FFT.12    
!-----------------------------------------------------                     FFT.13    
      INTEGER, INTENT(IN) :: iDirection                                    FFT.14    
      INTEGER, INTENT(IN) :: nLevels                                       FFT.15    
      REAL, INTENT(INOUT) :: ARRAY(MGPP, nLevels)                          FFT.16    
*IF DEF,FFTW                                                               FFT.17    
      IF (iDirection.EQ.1) THEN                                            FFT.18    
         IF (nLevels.EQ.(NHEM*JGy)) THEN                                   FFT.19    
            CALL DFFTW_EXECUTE_DFT_C2R(PlanBW2d,ARRAY,ARRAY)               FFT.20    
         ELSE IF (nLevels.EQ.(NHEM*JGy*NLx)) THEN                          FFT.21    
            CALL DFFTW_EXECUTE_DFT_C2R(PlanBW3d,ARRAY,ARRAY)               FFT.22    
*IF DEF,ABOVE_V1                                                           FFT.23    
         ELSE IF (nLevels.EQ.(NHEM*JGy*NLx*NTRAC)) THEN                    FFT.24    
            CALL DFFTW_EXECUTE_DFT_C2R(PlanBWtrac,ARRAY,ARRAY)             FFT.25    
*ENDIF                                                                     FFT.26    
         ENDIF                                                             FFT.27    
      ELSE                                                                 FFT.28    
         IF (nLevels.EQ.(NHEM*JGy)) THEN                                   FFT.29    
            CALL DFFTW_EXECUTE_DFT_R2C(PlanFW2d,ARRAY,ARRAY)               FFT.30    
         ELSE IF (nLevels.EQ.(NHEM*JGy*NLx)) THEN                          FFT.31    
            CALL DFFTW_EXECUTE_DFT_R2C(PlanFW3d,ARRAY,ARRAY)               FFT.32    
*IF DEF,ABOVE_V1                                                           FFT.33    
         ELSE IF (nLevels.EQ.(NHEM*JGy*NLx*NTRAC)) THEN                    FFT.34    
            CALL DFFTW_EXECUTE_DFT_R2C(PlanFWtrac,ARRAY,ARRAY)             FFT.35    
*ENDIF                                                                     FFT.36    
         ENDIF                                                             FFT.37    
         ARRAY(:,:)=ARRAY(:,:)/REAL(MG)                                    FFT.38    
      ENDIF                                                                FFT.39    
*ELSE                                                                      FFT.40    
!-----------------------------------------------------                     FFT.41    
! Local variables                                                          FFT.42    
!-----------------------------------------------------                     FFT.43    
      INTEGER :: nFullNcray                                                FFT.44    
      INTEGER :: nRemain                                                   FFT.45    
      INTEGER :: I                                                         FFT.46    
!-----------------------------------------------------                     FFT.47    
! Work out how many full NCRAY levels can be fitted in                     FFT.48    
!-----------------------------------------------------                     FFT.49    
      nFullNcray=nLevels/NCRAY                                             FFT.50    
      nRemain=nLevels - (nFullNcray * NCRAY)                               FFT.51    
!-----------------------------------------------------                     FFT.52    
! Carry at fast fourier transform                                          FFT.53    
!-----------------------------------------------------                     FFT.54    
      DO I=1,nFullNcray                                                    FFT.55    
         CALL FFT991(ARRAY(1,1+(I-1)*NCRAY),WORK,TRIG,IFAX,1,              FFT.56    
     &        MGPP,MG,NCRAY,iDirection)                                    FFT.57    
      ENDDO                                                                FFT.58    
      IF (nRemain.GT.0) THEN                                               FFT.59    
         CALL FFT991(ARRAY(1,1+nFullNcray*NCRAY),WORK,TRIG,IFAX,1,         FFT.60    
     &        MGPP,MG,nRemain,iDirection)                                  FFT.61    
      ENDIF                                                                FFT.62    
*ENDIF                                                                     FFT.63    
      END                                                                  FFT.64    
*DECK HANALV                                                               HANALV.1     
!=====================================================                     HANALV.2     
! Perform all the direct Legendre transforms for the adiabatic             HANALV.3     
! part of the timestep at the current latitude (pair), in place            HANALV.4     
! of separate calls to HANAL for individual transform types.               HANALV.5     
!                                                                          HANALV.6     
! An even/odd value of ITYPE denotes a spectral field of even/odd          HANALV.7     
! symmetry.                                                                HANALV.8     
!                                                                          HANALV.9     
! Maximum vector efficiency is achieved by chaining all multi-level        HANALV.10    
! transforms in one loop and by chaining all single-level transform        HANALV.11    
! in a second loop.                                                        HANALV.12    
!                                                                          HANALV.13    
! All dummy argument arrays are declared complex.                          HANALV.14    
! All array dimensions are parameters.                                     HANALV.15    
! Multi-level arrays are 3-dimensional.                                    HANALV.16    
!                                                                          HANALV.17    
! NOTE: The y-derivative transforms use integration by parts and           HANALV.18    
!       are valid only if the input field has zero zonal mean at           HANALV.19    
!       both poles.                                                        HANALV.20    
!                                                                          HANALV.21    
! NOTE: *** THE INPUT FOURIER FIELDS ARE MODIFIED IF GLOBAL ***            HANALV.22    
!                                                                          HANALV.23    
! Version for RSGUP3.                     Mike Blackburn,  12.01.95        HANALV.24    
!=====================================================                     HANALV.25    
      SUBROUTINE HANALV                                                    HANALV.26    
      IMPLICIT NONE                                                        HANALV.27    
*CALL PARAM1                                                               HANALV.28    
*CALL PARAM2                                                               HANALV.29    
*CALL PARAM3                                                               HANALV.30    
*CALL BLANK                                                                HANALV.31    
*CALL LEGAU                                                                HANALV.32    
*CALL POLYNO                                                               HANALV.33    
*CALL GRIDPA                                                               HANALV.34    
*CALL GRIDPB                                                               HANALV.35    
*CALL SPECTR2                                                              HANALV.36    
*CALL MPIDECK                                                              HANALV.37    
!-----------------------------------------------------                     HANALV.38    
! Local variables                                                          HANALV.39    
!-----------------------------------------------------                     HANALV.40    
      REAL :: AW1256                                                       HANALV.41    
      REAL :: AW3478                                                       HANALV.42    
      INTEGER :: IP, IPM, MP                                               HANALV.43    
      COMPLEX :: TEMP                                                      HANALV.44    
! Loop variables                                                           HANALV.45    
      INTEGER :: IHEM, IM, ITRAC, J, L, M, N, nT                           HANALV.46    
!-----------------------------------------------------                     HANALV.47    
! For a global run, sum and difference the complete Fourier                HANALV.48    
! transforms at the northern and southern latitude rows to give            HANALV.49    
! the even and odd contributions : E=(N+S)/2, O=(N-S)/2.                   HANALV.50    
! For Fourier fields symmetric about equator  : even precedes odd.         HANALV.51    
! For Fourier fields asymmetric about equator : odd precedes even.         HANALV.52    
!-----------------------------------------------------                     HANALV.53    
      IF (NHEM.EQ.2) THEN                                                  HANALV.54    
         DO J=1,JG                                                         HANALV.55    
            DO IM=1,2*MMTyy(iRow)                                          HANALV.56    
               !-----------------------------------------------------      HANALV.57    
               ! Surface pressure : symmetric.                             HANALV.58    
               !-----------------------------------------------------      HANALV.59    
               TEMP=SPG(IM,1,J)                                            HANALV.60    
               SPG(IM,1,J)=0.5*(TEMP+SPG(IM,NHEM,J))                       HANALV.61    
               SPG(IM,NHEM,J)=0.5*(TEMP-SPG(IM,NHEM,J))                    HANALV.62    
               !-----------------------------------------------------      HANALV.63    
               ! Surface pressure tendency : symmetric.                    HANALV.64    
               !-----------------------------------------------------      HANALV.65    
               TEMP=VPG(IM,1,J)                                            HANALV.66    
               VPG(IM,1,J)=0.5*(TEMP+VPG(IM,NHEM,J))                       HANALV.67    
               VPG(IM,NHEM,J)=0.5*(TEMP-VPG(IM,NHEM,J))                    HANALV.68    
            ENDDO                                                          HANALV.69    
         ENDDO                                                             HANALV.70    
                                                                           HANALV.71    
         DO J=1,JG                                                         HANALV.72    
            DO IM=1,2*MMTyy(iRow)                                          HANALV.73    
               DO L=1,NLxx(iCol)                                           HANALV.74    
                  !---------------------------------------------------     HANALV.75    
                  ! Divergence tendency : energy term : symmetric.         HANALV.76    
                  !---------------------------------------------------     HANALV.77    
                  TEMP=EG(IM,1,J,L)                                        HANALV.78    
                  EG(IM,1,J,L)=0.5*(TEMP+EG(IM,NHEM,J,L))                  HANALV.79    
                  EG(IM,NHEM,J,L)=0.5*(TEMP-EG(IM,NHEM,J,L))               HANALV.80    
                  !---------------------------------------------------     HANALV.81    
                  ! Temperature tendency : main + d/dx part : symmetric    HANALV.82    
                  !---------------------------------------------------     HANALV.83    
                  TEMP=TNLG(IM,1,J,L)                                      HANALV.84    
                  TNLG(IM,1,J,L)=0.5*(TEMP+TNLG(IM,NHEM,J,L))              HANALV.85    
                  TNLG(IM,NHEM,J,L)=0.5*(TEMP-TNLG(IM,NHEM,J,L))           HANALV.86    
                  !---------------------------------------------------     HANALV.87    
                  ! Divergence tendency : d/dx part : symmetric.           HANALV.88    
                  !---------------------------------------------------     HANALV.89    
                  TEMP=FUG(IM,1,J,L)                                       HANALV.90    
                  FUG(IM,1,J,L)=0.5*(TEMP+FUG(IM,NHEM,J,L))                HANALV.91    
                  FUG(IM,NHEM,J,L)=0.5*(TEMP-FUG(IM,NHEM,J,L))             HANALV.92    
                  !---------------------------------------------------     HANALV.93    
                  ! Vorticity tendency : d/dx part : anti-symmetric.       HANALV.94    
                  !---------------------------------------------------     HANALV.95    
                  TEMP=FVG(IM,1,J,L)                                       HANALV.96    
                  FVG(IM,1,J,L)=0.5*(TEMP-FVG(IM,NHEM,J,L))                HANALV.97    
                  FVG(IM,NHEM,J,L)=0.5*(TEMP+FVG(IM,NHEM,J,L))             HANALV.98    
                  !---------------------------------------------------     HANALV.99    
                  ! Temperature tendency : d/dy part : anti-symmetric.     HANALV.100   
                  !---------------------------------------------------     HANALV.101   
                  TEMP=VTG(IM,1,J,L)                                       HANALV.102   
                  VTG(IM,1,J,L)=0.5*(TEMP-VTG(IM,NHEM,J,L))                HANALV.103   
                  VTG(IM,NHEM,J,L)=0.5*(TEMP+VTG(IM,NHEM,J,L))             HANALV.104   
                  !---------------------------------------------------     HANALV.105   
                  ! Divergence tendency : d/dy part : anti-symmetric.      HANALV.106   
                  !---------------------------------------------------     HANALV.107   
                  TEMP=FVGT(IM,1,J,L)                                      HANALV.108   
                  FVGT(IM,1,J,L)=0.5*(TEMP-FVGT(IM,NHEM,J,L))              HANALV.109   
                  FVGT(IM,NHEM,J,L)=0.5*(TEMP+FVGT(IM,NHEM,J,L))           HANALV.110   
                  !---------------------------------------------------     HANALV.111   
                  ! Vorticity tendency : d/dy part : symmetric.            HANALV.112   
                  !---------------------------------------------------     HANALV.113   
                  TEMP=FUGT(IM,1,J,L)                                      HANALV.114   
                  FUGT(IM,1,J,L)=0.5*(TEMP+FUGT(IM,NHEM,J,L))              HANALV.115   
                  FUGT(IM,NHEM,J,L)=0.5*(TEMP-FUGT(IM,NHEM,J,L))           HANALV.116   
*IF DEF,ABOVE_V1                                                           HANALV.117   
                  !---------------------------------------------------     HANALV.118   
                  ! Tracer tendencies                                      HANALV.119   
                  !---------------------------------------------------     HANALV.120   
                  DO ITRAC=1,NTRAC                                         HANALV.121   
                     !------------------------------------------------     HANALV.122   
                     ! main + d/dx part : symmetric.                       HANALV.123   
                     !------------------------------------------------     HANALV.124   
                     TEMP=TRANLG(IM,1,J,L,ITRAC)                           HANALV.125   
                     TRANLG(IM,1,J,L,ITRAC)=                               HANALV.126   
     &                    0.5*(TEMP+TRANLG(IM,NHEM,J,L,ITRAC))             HANALV.127   
                     TRANLG(IM,NHEM,J,L,ITRAC)=                            HANALV.128   
     &                    0.5*(TEMP-TRANLG(IM,NHEM,J,L,ITRAC))             HANALV.129   
                     !------------------------------------------------     HANALV.130   
                     ! d/dy part : anti-symmetric.                         HANALV.131   
                     !------------------------------------------------     HANALV.132   
                     TEMP=VTRAG(IM,1,J,L,ITRAC)                            HANALV.133   
                     VTRAG(IM,1,J,L,ITRAC)=                                HANALV.134   
     &                    0.5*(TEMP-VTRAG(IM,NHEM,J,L,ITRAC))              HANALV.135   
                     VTRAG(IM,NHEM,J,L,ITRAC)=                             HANALV.136   
     &                    0.5*(TEMP+VTRAG(IM,NHEM,J,L,ITRAC))              HANALV.137   
                  ENDDO                                                    HANALV.138   
*ENDIF                                                                     HANALV.139   
               ENDDO                                                       HANALV.140   
            ENDDO                                                          HANALV.141   
         ENDDO                                                             HANALV.142   
      ENDIF                                                                HANALV.143   
!-----------------------------------------------------                     HANALV.144   
! Loop over all latitudes                                                  HANALV.145   
!-----------------------------------------------------                     HANALV.146   
      DO J=1,JG                                                            HANALV.147   
         !-----------------------------------------------------            HANALV.148   
         ! Set up the appropriate Gaussian weight for the current          HANALV.149   
         ! latitude, dependent on transform type.                          HANALV.150   
         !-----------------------------------------------------            HANALV.151   
         AW1256=AW(J,1)*CSSQ(J,1)                                          HANALV.152   
         AW3478=-AW(J,1)                                                   HANALV.153   
         !-----------------------------------------------------            HANALV.154   
         ! Calculate POLY array in a vector loop before the main           HANALV.155   
         ! transforms, for the required Legendre Function types.           HANALV.156   
         ! Both even and odd functions are required, irrespective of       HANALV.157   
         ! NHEM.                                                           HANALV.158   
         !-----------------------------------------------------            HANALV.159   
         DO IHEM=1,2                                                       HANALV.160   
            DO IM=1,MMTyy(iRow)                                            HANALV.161   
               DO IP=1,NNT                                                 HANALV.162   
                  POLY(IP,IM,IHEM,1)=AW1256*ALP(IP,IM,IHEM,J)              HANALV.163   
                  POLY(IP,IM,IHEM,2)=AW3478*DALP(IP,IM,IHEM,J)             HANALV.164   
               ENDDO                                                       HANALV.165   
            ENDDO                                                          HANALV.166   
         ENDDO                                                             HANALV.167   
         !-----------------------------------------------------            HANALV.168   
         ! Transform single-level fields.                                  HANALV.169   
         ! Vectorisation is over total wavenumber for each zonal           HANALV.170   
         ! wavenumber.                                                     HANALV.171   
         !-----------------------------------------------------            HANALV.172   
         IF (iCol.EQ.1) THEN                                               HANALV.173   
            DO nT=1,2                                                      HANALV.174   
               DO IM=1,MMTyy(iRow)                                         HANALV.175   
                  MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                      HANALV.176   
                  DO IP=mTwin2(nT,IM)+1,mTwin2(nT+1,IM)                    HANALV.177   
                     !------------------------------------------------     HANALV.178   
                     ! Surface pressure          : type 2.                 HANALV.179   
                     !------------------------------------------------     HANALV.180   
                     SPA2(IP,IM,1)=SPA2(IP,IM,1) +                         HANALV.181   
     &                    POLY(IP,IM,1,1)*SPG(MP,1,J)                      HANALV.182   
                     !------------------------------------------------     HANALV.183   
                     ! Surface pressure tendency : type 2.                 HANALV.184   
                     !------------------------------------------------     HANALV.185   
                     VP2 (IP,IM,1)=VP2 (IP,IM,1) +                         HANALV.186   
     &                    POLY(IP,IM,1,1)*VPG(MP,1,J)                      HANALV.187   
                     IF (NHEM.EQ.2) THEN                                   HANALV.188   
                        !---------------------------------------------     HANALV.189   
                        ! Surface pressure          : type 2.              HANALV.190   
                        !---------------------------------------------     HANALV.191   
                        SPA2(IP,IM,NHEM)=SPA2(IP,IM,NHEM) +                HANALV.192   
     &                       POLY(IP,IM,2,1)*SPG(MP,NHEM,J)                HANALV.193   
                        !---------------------------------------------     HANALV.194   
                        ! Surface pressure tendency : type 2.              HANALV.195   
                        !---------------------------------------------     HANALV.196   
                        VP2 (IP,IM,NHEM)=VP2 (IP,IM,NHEM) +                HANALV.197   
     &                       POLY(IP,IM,2,1)*VPG(MP,NHEM,J)                HANALV.198   
                     ENDIF                                                 HANALV.199   
                  ENDDO                                                    HANALV.200   
               ENDDO                                                       HANALV.201   
            ENDDO                                                          HANALV.202   
         ENDIF                                                             HANALV.203   
         !-----------------------------------------------------            HANALV.204   
         ! Transform multi-level fields.                                   HANALV.205   
         ! Inner loop vectorisation is over total wavenumber, to access    HANALV.206   
         ! spectral memory sequentially, avoiding skip distances being     HANALV.207   
         ! multiple of 8 (which causes memory bank conflicts on Cray       HANALV.208   
         ! vector machines).                                               HANALV.209   
         !-----------------------------------------------------            HANALV.210   
         DO L=1,NLxx(iCol)                                                 HANALV.211   
            DO nT=1,2                                                      HANALV.212   
               DO IM=1,MMTyy(iRow)                                         HANALV.213   
                  MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                      HANALV.214   
                  DO IP=mTwin2(nT,IM)+1,mTwin2(nT+1,IM)                    HANALV.215   
                     !------------------------------------------------     HANALV.216   
                     ! Divergence tendency  : energy term     : type 2.    HANALV.217   
                     !------------------------------------------------     HANALV.218   
                     DTE2(IP,IM,1,L)=DTE2(IP,IM,1,L) +                     HANALV.219   
     &                    POLY(IP,IM,1,1)*EG  (MP,1,J,L)                   HANALV.220   
                     !------------------------------------------------     HANALV.221   
                     ! Temperature tendency :main + d/dx part : type 2.    HANALV.222   
                     ! Temperature tendency :d/dy part        : type 4.    HANALV.223   
                     !------------------------------------------------     HANALV.224   
                     TT2 (IP,IM,1,L)=TT2 (IP,IM,1,L) + POLY(IP,IM,1,1)*    HANALV.225   
     &                    TNLG(MP,1,J,L)+ POLY(IP,IM,1,2)*                 HANALV.226   
     &                    VTG (MP,1,J,L)                                   HANALV.227   
                     !------------------------------------------------     HANALV.228   
                     ! Divergence tendency  : d/dx part       : type 2.    HANALV.229   
                     ! Divergence tendency  : d/dy part       : type 4.    HANALV.230   
                     !------------------------------------------------     HANALV.231   
                     DT2 (IP,IM,1,L)=DT2 (IP,IM,1,L) + POLY(IP,IM,1,1)*    HANALV.232   
     &                    FUG (MP,1,J,L)+POLY(IP,IM,1,2)*                  HANALV.233   
     &                    FVGT(MP,1,J,L)                                   HANALV.234   
                     !------------------------------------------------     HANALV.235   
                     ! Vorticity tendency   : d/dx part       : type 1.    HANALV.236   
                     ! Vorticity tendency   : d/dy part       : type 3.    HANALV.237   
                     !------------------------------------------------     HANALV.238   
                     ZT2 (IP,IM,1,L)=ZT2 (IP,IM,1,L) + POLY(IP,IM,2,1)*    HANALV.239   
     &                    FVG (MP,1,J,L)+POLY(IP,IM,2,2)*                  HANALV.240   
     &                    FUGT(MP,1,J,L)                                   HANALV.241   
*IF DEF,ABOVE_V1                                                           HANALV.242   
                     !------------------------------------------------     HANALV.243   
                     ! Tracer tendency   : d/dy part        : type 4.      HANALV.244   
                     !------------------------------------------------     HANALV.245   
                     DO ITRAC=1,NTRAC                                      HANALV.246   
                        TRAT2(IP,IM,1,L,ITRAC)=TRAT2(IP,IM,1,L,ITRAC)+     HANALV.247   
     &                       POLY(IP,IM,1,1)*TRANLG(MP,1,J,L,ITRAC)+       HANALV.248   
     &                       POLY(IP,IM,1,2)*VTRAG(MP,1,J,L,ITRAC)         HANALV.249   
                     ENDDO                                                 HANALV.250   
*ENDIF                                                                     HANALV.251   
                     IF (NHEM.EQ.2) THEN                                   HANALV.252   
                        !---------------------------------------------     HANALV.253   
                        ! Divergence tendency  : energy term  : type 2.    HANALV.254   
                        !---------------------------------------------     HANALV.255   
                        DTE2(IP,IM,NHEM,L)=DTE2(IP,IM,NHEM,L) +            HANALV.256   
     &                       POLY(IP,IM,2,1)*EG(MP,NHEM,J,L)               HANALV.257   
                        !---------------------------------------------     HANALV.258   
                        ! Temperature tendency: main+d/dx part: type 2.    HANALV.259   
                        ! Temperature tendency: d/dy part     : type 4.    HANALV.260   
                        !---------------------------------------------     HANALV.261   
                        TT2 (IP,IM,NHEM,L)=TT2 (IP,IM,NHEM,L) +            HANALV.262   
     &                       POLY(IP,IM,2,1)*TNLG(MP,NHEM,J,L) +           HANALV.263   
     &                       POLY(IP,IM,2,2)*VTG (MP,NHEM,J,L)             HANALV.264   
                        !---------------------------------------------     HANALV.265   
                        ! Divergence tendency  : d/dx part    : type 2.    HANALV.266   
                        ! Divergence tendency  : d/dy part    : type 4.    HANALV.267   
                        !---------------------------------------------     HANALV.268   
                        DT2 (IP,IM,NHEM,L)=DT2 (IP,IM,NHEM,L) +            HANALV.269   
     &                       POLY(IP,IM,2,1)*FUG (MP,NHEM,J,L) +           HANALV.270   
     &                       POLY(IP,IM,2,2)*FVGT(MP,NHEM,J,L)             HANALV.271   
                        !---------------------------------------------     HANALV.272   
                        ! Vorticity tendency   : d/dx part    : type 1.    HANALV.273   
                        ! Vorticity tendency   : d/dy part    : type 3.    HANALV.274   
                        !---------------------------------------------     HANALV.275   
                        ZT2 (IP,IM,NHEM,L)=ZT2 (IP,IM,NHEM,L) +            HANALV.276   
     &                       POLY(IP,IM,1,1)*FVG (MP,NHEM,J,L) +           HANALV.277   
     &                       POLY(IP,IM,1,2)*FUGT(MP,NHEM,J,L)             HANALV.278   
*IF DEF,ABOVE_V1                                                           HANALV.279   
                        !---------------------------------------------     HANALV.280   
                        ! Tracer tendency   : d/dy part       : type 4.    HANALV.281   
                        !---------------------------------------------     HANALV.282   
                        DO ITRAC=1,NTRAC                                   HANALV.283   
                           TRAT2(IP,IM,NHEM,L,ITRAC)=                      HANALV.284   
     &                          TRAT2(IP,IM,NHEM,L,ITRAC)+                 HANALV.285   
     &                          POLY(IP,IM,2,1)*                           HANALV.286   
     &                          TRANLG(MP,NHEM,J,L,ITRAC)+                 HANALV.287   
     &                          POLY(IP,IM,2,2)*                           HANALV.288   
     &                          VTRAG(MP,NHEM,J,L,ITRAC)                   HANALV.289   
                        ENDDO                                              HANALV.290   
*ENDIF                                                                     HANALV.291   
                    ENDIF                                                  HANALV.292   
                  ENDDO                                                    HANALV.293   
               ENDDO                                                       HANALV.294   
            ENDDO                                                          HANALV.295   
         ENDDO                                                             HANALV.296   
      ENDDO                                                                HANALV.297   
      RETURN                                                               HANALV.298   
      END                                                                  HANALV.299   
*DECK HANALVICT                                                            HANALVICT.1     
*IF DEF,ABOVE_V1                                                           HANALVICT.2     
!=====================================================                     HANALVICT.3     
! Same as HANALV but only for tracer variable                              HANALVICT.4     
!=====================================================                     HANALVICT.5     
*IF DEF,ONLY_V2                                                            HANALVICT.6     
      SUBROUTINE HANALVICT(NtracLow, NtracUp)                              HANALVICT.7     
*ELSE                                                                      HANALVICT.8     
      SUBROUTINE HANALVICT                                                 HANALVICT.9     
*ENDIF                                                                     HANALVICT.10    
      IMPLICIT NONE                                                        HANALVICT.11    
*CALL PARAM1                                                               HANALVICT.12    
*CALL PARAM2                                                               HANALVICT.13    
*CALL PARAM3                                                               HANALVICT.14    
*CALL BLANK                                                                HANALVICT.15    
*CALL LEGAU                                                                HANALVICT.16    
*CALL POLYNO                                                               HANALVICT.17    
*CALL GRIDPA                                                               HANALVICT.18    
*CALL GRIDPB                                                               HANALVICT.19    
*CALL SPECTR2                                                              HANALVICT.20    
*CALL MPIDECK                                                              HANALVICT.21    
*IF DEF,ONLY_V2                                                            HANALVICT.22    
!-----------------------------------------------------                     HANALVICT.23    
! Passed variables                                                         HANALVICT.24    
!-----------------------------------------------------                     HANALVICT.25    
! Lower index for the tracer that will be calculated here                  HANALVICT.26    
      INTEGER :: NtracLow                                                  HANALVICT.27    
! Upper index for the tracer that will be calculated here                  HANALVICT.28    
      INTEGER :: NtracUp                                                   HANALVICT.29    
*ENDIF                                                                     HANALVICT.30    
!-----------------------------------------------------                     HANALVICT.31    
! Local variables                                                          HANALVICT.32    
!-----------------------------------------------------                     HANALVICT.33    
      REAL :: AW1256                                                       HANALVICT.34    
      REAL :: AW3478                                                       HANALVICT.35    
      INTEGER :: IP, IPM, MP                                               HANALVICT.36    
      COMPLEX :: TEMP                                                      HANALVICT.37    
! Loop variables                                                           HANALVICT.38    
      INTEGER :: IHEM, IM, ITRAC, J, L, M, N, nT                           HANALVICT.39    
!-----------------------------------------------------                     HANALVICT.40    
! For a global run, sum and difference the complete Fourier                HANALVICT.41    
! transforms at the northern and southern latitude rows to give            HANALVICT.42    
! the even and odd contributions : E=(N+S)/2, O=(N-S)/2.                   HANALVICT.43    
! For Fourier fields symmetric about equator  : even precedes odd.         HANALVICT.44    
! For Fourier fields asymmetric about equator : odd precedes even.         HANALVICT.45    
!-----------------------------------------------------                     HANALVICT.46    
      IF (NHEM.EQ.2) THEN                                                  HANALVICT.47    
         DO J=1,JG                                                         HANALVICT.48    
            DO IM=1,2*MMTyy(iRow)                                          HANALVICT.49    
               DO L=1,NLxx(iCol)                                           HANALVICT.50    
                  !---------------------------------------------------     HANALVICT.51    
                  ! Tracer tendencies                                      HANALVICT.52    
                  !---------------------------------------------------     HANALVICT.53    
*IF DEF,ONLY_V2                                                            HANALVICT.54    
                  DO ITRAC=NtracLow,NtracUp                                HANALVICT.55    
*ELSE                                                                      HANALVICT.56    
                  DO ITRAC=1,NTRAC                                         HANALVICT.57    
*ENDIF                                                                     HANALVICT.58    
                     !------------------------------------------------     HANALVICT.59    
                     ! main + d/dx part : symmetric.                       HANALVICT.60    
                     !------------------------------------------------     HANALVICT.61    
                     TEMP=TRANLG(IM,1,J,L,ITRAC)                           HANALVICT.62    
                     TRANLG(IM,1,J,L,ITRAC)=                               HANALVICT.63    
     &                    0.5*(TEMP+TRANLG(IM,NHEM,J,L,ITRAC))             HANALVICT.64    
                     TRANLG(IM,NHEM,J,L,ITRAC)=                            HANALVICT.65    
     &                    0.5*(TEMP-TRANLG(IM,NHEM,J,L,ITRAC))             HANALVICT.66    
                  ENDDO                                                    HANALVICT.67    
               ENDDO                                                       HANALVICT.68    
            ENDDO                                                          HANALVICT.69    
         ENDDO                                                             HANALVICT.70    
      ENDIF                                                                HANALVICT.71    
!-----------------------------------------------------                     HANALVICT.72    
! Loop over all latitudes                                                  HANALVICT.73    
!-----------------------------------------------------                     HANALVICT.74    
      DO J=1,JG                                                            HANALVICT.75    
         !-----------------------------------------------------            HANALVICT.76    
         ! Set up the appropriate Gaussian weight for the current          HANALVICT.77    
         ! latitude, dependent on transform type.                          HANALVICT.78    
         !-----------------------------------------------------            HANALVICT.79    
         AW1256=AW(J,1)*CSSQ(J,1)                                          HANALVICT.80    
         AW3478=-AW(J,1)                                                   HANALVICT.81    
         !-----------------------------------------------------            HANALVICT.82    
         ! Calculate POLY array in a vector loop before the main           HANALVICT.83    
         ! transforms, for the required Legendre Function types.           HANALVICT.84    
         ! Both even and odd functions are required, irrespective of       HANALVICT.85    
         ! NHEM.                                                           HANALVICT.86    
         !-----------------------------------------------------            HANALVICT.87    
         DO IHEM=1,2                                                       HANALVICT.88    
            DO IM=1,MMTyy(iRow)                                            HANALVICT.89    
               DO IP=1,NNT                                                 HANALVICT.90    
                  POLY(IP,IM,IHEM,1)=AW1256*ALP(IP,IM,IHEM,J)              HANALVICT.91    
                  POLY(IP,IM,IHEM,2)=AW3478*DALP(IP,IM,IHEM,J)             HANALVICT.92    
               ENDDO                                                       HANALVICT.93    
            ENDDO                                                          HANALVICT.94    
         ENDDO                                                             HANALVICT.95    
         !-----------------------------------------------------            HANALVICT.96    
         ! Transform multi-level fields.                                   HANALVICT.97    
         ! Inner loop vectorisation is over total wavenumber, to access    HANALVICT.98    
         ! spectral memory sequentially, avoiding skip distances being     HANALVICT.99    
         ! multiple of 8 (which causes memory bank conflicts on Cray       HANALVICT.100   
         ! vector machines).                                               HANALVICT.101   
         !-----------------------------------------------------            HANALVICT.102   
         DO L=1,NLxx(iCol)                                                 HANALVICT.103   
            DO nT=1,2                                                      HANALVICT.104   
               DO IM=1,MMTyy(iRow)                                         HANALVICT.105   
                  MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                      HANALVICT.106   
                  DO IP=mTwin2(nT,IM)+1,mTwin2(nT+1,IM)                    HANALVICT.107   
                     !------------------------------------------------     HANALVICT.108   
                     ! Tracer tendency   : d/dy part        : type 4.      HANALVICT.109   
                     !------------------------------------------------     HANALVICT.110   
*IF DEF,ONLY_V2                                                            HANALVICT.111   
                     DO ITRAC=NtracLow,NtracUp                             HANALVICT.112   
*ELSE                                                                      HANALVICT.113   
                     DO ITRAC=1,NTRAC                                      HANALVICT.114   
*ENDIF                                                                     HANALVICT.115   
                        TRAT2(IP,IM,1,L,ITRAC)=TRAT2(IP,IM,1,L,ITRAC)+     HANALVICT.116   
     &                       POLY(IP,IM,1,1)*TRANLG(MP,1,J,L,ITRAC)        HANALVICT.117   
                     ENDDO                                                 HANALVICT.118   
                     IF (NHEM.EQ.2) THEN                                   HANALVICT.119   
                        !---------------------------------------------     HANALVICT.120   
                        ! Tracer tendency   : d/dy part       : type 4.    HANALVICT.121   
                        !---------------------------------------------     HANALVICT.122   
*IF DEF,ONLY_V2                                                            HANALVICT.123   
                        DO ITRAC=NtracLow,NtracUp                          HANALVICT.124   
*ELSE                                                                      HANALVICT.125   
                        DO ITRAC=1,NTRAC                                   HANALVICT.126   
*ENDIF                                                                     HANALVICT.127   
                           TRAT2(IP,IM,NHEM,L,ITRAC)=                      HANALVICT.128   
     &                          TRAT2(IP,IM,NHEM,L,ITRAC)+                 HANALVICT.129   
     &                          POLY(IP,IM,2,1)*                           HANALVICT.130   
     &                          TRANLG(MP,NHEM,J,L,ITRAC)                  HANALVICT.131   
                        ENDDO                                              HANALVICT.132   
                    ENDIF                                                  HANALVICT.133   
                  ENDDO                                                    HANALVICT.134   
               ENDDO                                                       HANALVICT.135   
            ENDDO                                                          HANALVICT.136   
         ENDDO                                                             HANALVICT.137   
      ENDDO                                                                HANALVICT.138   
                                                                           HANALVICT.139   
      RETURN                                                               HANALVICT.140   
      END                                                                  HANALVICT.141   
*ENDIF                                                                     HANALVICT.142   
*DECK HEXPV                                                                HEXPV.1     
!=====================================================                     HEXPV.2     
! Perform all the indirect Legendre transforms for the adiabatic           HEXPV.3     
! part of the timestep at the current latitude (pair), in place            HEXPV.4     
! of separate calls to HEXP for individual transform types.                HEXPV.5     
!                                                                          HEXPV.6     
! An even/odd value of ITYPE denotes a spectral field of even/odd          HEXPV.7     
! symmetry.                                                                HEXPV.8     
!                                                                          HEXPV.9     
! Maximum vector efficiency is achieved by chaining all multi-level        HEXPV.10    
! transforms in one loop and by chaining all single-level transform        HEXPV.11    
! in a second loop.                                                        HEXPV.12    
!                                                                          HEXPV.13    
! All dummy argument arrays are declared complex.                          HEXPV.14    
! All array dimensions are parameters.                                     HEXPV.15    
! Multi-level arrays are 3-dimensional.                                    HEXPV.16    
!                                                                          HEXPV.17    
! Version for RSGUP3.                     Mike Blackburn,  12.01.95        HEXPV.18    
!=====================================================                     HEXPV.19    
      SUBROUTINE HEXPV                                                     HEXPV.20    
      IMPLICIT NONE                                                        HEXPV.21    
*CALL PARAM1                                                               HEXPV.22    
*CALL PARAM2                                                               HEXPV.23    
*CALL PARAM3                                                               HEXPV.24    
*CALL BLANK                                                                HEXPV.25    
*CALL LEGAU                                                                HEXPV.26    
*CALL MPIDECK                                                              HEXPV.27    
*CALL SPECTR2                                                              HEXPV.28    
*CALL GRIDPA                                                               HEXPV.29    
*CALL GRIDPB                                                               HEXPV.30    
!-----------------------------------------------------                     HEXPV.31    
! Local variables                                                          HEXPV.32    
!-----------------------------------------------------                     HEXPV.33    
      COMPLEX :: TEMP                                                      HEXPV.34    
      INTEGER :: MP                                                        HEXPV.35    
! Loop variables                                                           HEXPV.36    
      INTEGER :: IM, IP, ITRAC, J, L, M, N, nT                             HEXPV.37    
!-----------------------------------------------------                     HEXPV.38    
! Transform multi-level fields to create even and odd contributions        HEXPV.39    
! to the Fourier coefficients at the northern hemisphere latitude.         HEXPV.40    
!-----------------------------------------------------                     HEXPV.41    
      DO L=1,NLxx(iCol)                                                    HEXPV.42    
         DO J=1,JG                                                         HEXPV.43    
            DO nT=1,2                                                      HEXPV.44    
               DO IM=1,MMTyy(iRow)                                         HEXPV.45    
                  MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                      HEXPV.46    
                  DO IP=mTwin2(nT,IM)+1,mTwin2(nT+1,IM)                    HEXPV.47    
                     !------------------------------------------------     HEXPV.48    
                     ! Velocity potential    : type 6.                     HEXPV.49    
                     !------------------------------------------------     HEXPV.50    
                     CHIG(MP,1,J,L)=CHIG(MP,1,J,L) +                       HEXPV.51    
     &                    RLP(IP,IM,1,J)*D2(IP,IM,1,L)                     HEXPV.52    
                     !------------------------------------------------     HEXPV.53    
                     ! Streamfunction        : type 5.                     HEXPV.54    
                     !------------------------------------------------     HEXPV.55    
                     SFG (MP,1,J,L)=SFG (MP,1,J,L) +                       HEXPV.56    
     &                    RLP(IP,IM,2,J)*Z2(IP,IM,1,L)                     HEXPV.57    
                     !------------------------------------------------     HEXPV.58    
                     ! Zonal (rot) wind      : type 7.                     HEXPV.59    
                     !------------------------------------------------     HEXPV.60    
                     UG  (MP,1,J,L)=UG  (MP,1,J,L) +                       HEXPV.61    
     &                    RDLP(IP,IM,2,J)*Z2(IP,IM,1,L)                    HEXPV.62    
                     !------------------------------------------------     HEXPV.63    
                     ! Merid (div) wind      : type 8.                     HEXPV.64    
                     !------------------------------------------------     HEXPV.65    
                     VG  (MP,1,J,L)=VG  (MP,1,J,L) +                       HEXPV.66    
     &                    RDLP(IP,IM,1,J)*D2(IP,IM,1,L)                    HEXPV.67    
                     !------------------------------------------------     HEXPV.68    
                     ! (Relative) vorticity  : type 1.                     HEXPV.69    
                     !------------------------------------------------     HEXPV.70    
                     ZG  (MP,1,J,L)=ZG  (MP,1,J,L) +                       HEXPV.71    
     &                    ALP(IP,IM,2,J)*Z2(IP,IM,1,L)                     HEXPV.72    
                     !------------------------------------------------     HEXPV.73    
                     ! Divergence            : type 2.                     HEXPV.74    
                     !------------------------------------------------     HEXPV.75    
                     DG  (MP,1,J,L)=DG  (MP,1,J,L) +                       HEXPV.76    
     &                    ALP(IP,IM,1,J)*D2(IP,IM,1,L)                     HEXPV.77    
                     !------------------------------------------------     HEXPV.78    
                     ! Temperature           : type 2.                     HEXPV.79    
                     !------------------------------------------------     HEXPV.80    
                     TG  (MP,1,J,L)=TG  (MP,1,J,L) +                       HEXPV.81    
     &                    ALP(IP,IM,1,J)*T2(IP,IM,1,L)                     HEXPV.82    
*IF DEF,ABOVE_V1                                                           HEXPV.83    
                     !------------------------------------------------     HEXPV.84    
                     ! Tracers               : type 2.                     HEXPV.85    
                     !------------------------------------------------     HEXPV.86    
                     DO ITRAC=1,NTRAC                                      HEXPV.87    
                        TRAG(MP,1,J,L,ITRAC)=TRAG(MP,1,J,L,ITRAC)+         HEXPV.88    
     &                       ALP(IP,IM,1,J)*TRA2(IP,IM,1,L,ITRAC)          HEXPV.89    
                     ENDDO                                                 HEXPV.90    
*ENDIF                                                                     HEXPV.91    
                     IF (NHEM.EQ.2) THEN                                   HEXPV.92    
                        !---------------------------------------------     HEXPV.93    
                        ! Velocity potential    : type 6.                  HEXPV.94    
                        !---------------------------------------------     HEXPV.95    
                        CHIG(MP,NHEM,J,L)=CHIG(MP,NHEM,J,L) +              HEXPV.96    
     &                       RLP(IP,IM,NHEM,J)*D2(IP,IM,NHEM,L)            HEXPV.97    
                        !---------------------------------------------     HEXPV.98    
                        ! Streamfunction        : type 5.                  HEXPV.99    
                        !---------------------------------------------     HEXPV.100   
                        SFG (MP,NHEM,J,L)=SFG (MP,NHEM,J,L) +              HEXPV.101   
     &                       RLP(IP,IM,1,J)*Z2(IP,IM,NHEM,L)               HEXPV.102   
                        !---------------------------------------------     HEXPV.103   
                        ! Zonal (rot) wind      : type 7.                  HEXPV.104   
                        !---------------------------------------------     HEXPV.105   
                        UG  (MP,NHEM,J,L)=UG  (MP,NHEM,J,L) +              HEXPV.106   
     &                       RDLP(IP,IM,1,J)*Z2(IP,IM,NHEM,L)              HEXPV.107   
                        !---------------------------------------------     HEXPV.108   
                        ! Merid (div) wind      : type 8.                  HEXPV.109   
                        !---------------------------------------------     HEXPV.110   
                        VG  (MP,NHEM,J,L)=VG  (MP,NHEM,J,L) +              HEXPV.111   
     &                       RDLP(IP,IM,NHEM,J)*D2(IP,IM,NHEM,L)           HEXPV.112   
                        !---------------------------------------------     HEXPV.113   
                        ! (Relative) vorticity  : type 1.                  HEXPV.114   
                        !---------------------------------------------     HEXPV.115   
                        ZG  (MP,NHEM,J,L)=ZG  (MP,NHEM,J,L) +              HEXPV.116   
     &                       ALP(IP,IM,1,J)*Z2(IP,IM,NHEM,L)               HEXPV.117   
                        !---------------------------------------------     HEXPV.118   
                        ! Divergence            : type 2.                  HEXPV.119   
                        !---------------------------------------------     HEXPV.120   
                        DG  (MP,NHEM,J,L)=DG  (MP,NHEM,J,L) +              HEXPV.121   
     &                       ALP(IP,IM,NHEM,J)*D2(IP,IM,NHEM,L)            HEXPV.122   
                        !---------------------------------------------     HEXPV.123   
                        ! Temperature           : type 2.                  HEXPV.124   
                        !---------------------------------------------     HEXPV.125   
                        TG  (MP,NHEM,J,L)=TG  (MP,NHEM,J,L) +              HEXPV.126   
     &                       ALP(IP,IM,NHEM,J)*T2(IP,IM,NHEM,L)            HEXPV.127   
*IF DEF,ABOVE_V1                                                           HEXPV.128   
                        !---------------------------------------------     HEXPV.129   
                        ! Tracers           : type 2.                      HEXPV.130   
                        !---------------------------------------------     HEXPV.131   
                        DO ITRAC=1,NTRAC                                   HEXPV.132   
                           TRAG(MP,NHEM,J,L,ITRAC)=                        HEXPV.133   
     &                          TRAG(MP,NHEM,J,L,ITRAC)+ALP(IP,IM,2,J)     HEXPV.134   
     &                          *TRA2(IP,IM,NHEM,L,ITRAC)                  HEXPV.135   
                        ENDDO                                              HEXPV.136   
*ENDIF                                                                     HEXPV.137   
                     ENDIF                                                 HEXPV.138   
                  ENDDO                                                    HEXPV.139   
               ENDDO                                                       HEXPV.140   
            ENDDO                                                          HEXPV.141   
         ENDDO                                                             HEXPV.142   
      ENDDO                                                                HEXPV.143   
!-----------------------------------------------------                     HEXPV.144   
! Transform single-level fields to create even and odd contribution        HEXPV.145   
! to the Fourier coefficients at the northern hemisphere latitude.         HEXPV.146   
! Vectorisation is over total wavenumber for each zonal wavenumber.        HEXPV.147   
!-----------------------------------------------------                     HEXPV.148   
      IF (iCol.EQ.1) THEN                                                  HEXPV.149   
         DO J=1,JG                                                         HEXPV.150   
            DO nT=1,2                                                      HEXPV.151   
               DO IM=1,MMTyy(iRow)                                         HEXPV.152   
                  MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                      HEXPV.153   
                  DO IP=mTwin2(nT,IM)+1,mTwin2(nT+1,IM)                    HEXPV.154   
                     !------------------------------------------------     HEXPV.155   
                     ! Log (surface pressure)    : type 2.                 HEXPV.156   
                     !------------------------------------------------     HEXPV.157   
                     PLG(MP,1,J)=PLG(MP,1,J) +                             HEXPV.158   
     &                    ALP(IP,IM,1,J)*SP2(IP,IM,1)                      HEXPV.159   
                     !------------------------------------------------     HEXPV.160   
                     ! Merid gradient of ln (ps) : type 4.                 HEXPV.161   
                     !------------------------------------------------     HEXPV.162   
                     PJG(MP,1,J)=PJG(MP,1,J) +                             HEXPV.163   
     &                    DALP(IP,IM,1,J)*SP2(IP,IM,1)                     HEXPV.164   
                     IF (NHEM.EQ.2) THEN                                   HEXPV.165   
                        !---------------------------------------------     HEXPV.166   
                        ! Log (surface pressure)    : type 2.              HEXPV.167   
                        !---------------------------------------------     HEXPV.168   
                        PLG(MP,NHEM,J)=PLG(MP,NHEM,J) +                    HEXPV.169   
     &                       ALP(IP,IM,NHEM,J)*SP2(IP,IM,NHEM)             HEXPV.170   
                        !---------------------------------------------     HEXPV.171   
                        ! Merid gradient of ln (ps) : type 4.              HEXPV.172   
                        !---------------------------------------------     HEXPV.173   
                        PJG(MP,NHEM,J)=PJG(MP,NHEM,J) +                    HEXPV.174   
     &                       DALP(IP,IM,NHEM,J)*SP2(IP,IM,NHEM)            HEXPV.175   
                     ENDIF                                                 HEXPV.176   
                  ENDDO                                                    HEXPV.177   
               ENDDO                                                       HEXPV.178   
            ENDDO                                                          HEXPV.179   
         ENDDO                                                             HEXPV.180   
      ENDIF                                                                HEXPV.181   
!-----------------------------------------------------                     HEXPV.182   
! For a global run, sum and difference even and odd contributions          HEXPV.183   
! to give the complete Fourier transforms at the northern and              HEXPV.184   
! southern latitude rows: N=E+O, S=E-O.                                    HEXPV.185   
! For symmetric Fourier fields, even (IM,1) precedes odd (IM,2).           HEXPV.186   
! For asymmetric Fourier fields, odd (IM,1) precedes even (IM,2).          HEXPV.187   
!-----------------------------------------------------                     HEXPV.188   
      IF (NHEM.EQ.2) THEN                                                  HEXPV.189   
         DO L=1,NLxx(iCol)                                                 HEXPV.190   
            DO J=1,JG                                                      HEXPV.191   
               DO MP=1,2*MMTyy(iRow)                                       HEXPV.192   
                  !---------------------------------------------------     HEXPV.193   
                  ! Velocity potential : symmetric.                        HEXPV.194   
                  !---------------------------------------------------     HEXPV.195   
                  TEMP=CHIG(MP,1,J,L)                                      HEXPV.196   
                  CHIG(MP,1,J,L)=TEMP+CHIG(MP,NHEM,J,L)                    HEXPV.197   
                  CHIG(MP,NHEM,J,L)=TEMP-CHIG(MP,NHEM,J,L)                 HEXPV.198   
                  !---------------------------------------------------     HEXPV.199   
                  ! Streamfunction : anti-symmetric.                       HEXPV.200   
                  !---------------------------------------------------     HEXPV.201   
                  TEMP=SFG(MP,1,J,L)                                       HEXPV.202   
                  SFG(MP,1,J,L)=SFG(MP,NHEM,J,L)+TEMP                      HEXPV.203   
                  SFG(MP,NHEM,J,L)=SFG(MP,NHEM,J,L)-TEMP                   HEXPV.204   
                  !---------------------------------------------------     HEXPV.205   
                  ! Zonal (rotational) wind : symmetric.                   HEXPV.206   
                  !---------------------------------------------------     HEXPV.207   
                  TEMP=UG(MP,1,J,L)                                        HEXPV.208   
                  UG(MP,1,J,L)=TEMP+UG(MP,NHEM,J,L)                        HEXPV.209   
                  UG(MP,NHEM,J,L)=TEMP-UG(MP,NHEM,J,L)                     HEXPV.210   
                  !---------------------------------------------------     HEXPV.211   
                  ! Meridional (divergent) wind : anti-symmetric.          HEXPV.212   
                  !---------------------------------------------------     HEXPV.213   
                  TEMP=VG(MP,1,J,L)                                        HEXPV.214   
                  VG(MP,1,J,L)=VG(MP,NHEM,J,L)+TEMP                        HEXPV.215   
                  VG(MP,NHEM,J,L)=VG(MP,NHEM,J,L)-TEMP                     HEXPV.216   
                  !---------------------------------------------------     HEXPV.217   
                  ! Vorticity : anti-symmetric.                            HEXPV.218   
                  !---------------------------------------------------     HEXPV.219   
                  TEMP=ZG(MP,1,J,L)                                        HEXPV.220   
                  ZG(MP,1,J,L)=ZG(MP,NHEM,J,L)+TEMP                        HEXPV.221   
                  ZG(MP,NHEM,J,L)=ZG(MP,NHEM,J,L)-TEMP                     HEXPV.222   
                  !---------------------------------------------------     HEXPV.223   
                  ! Divergence : symmetric.                                HEXPV.224   
                  !---------------------------------------------------     HEXPV.225   
                  TEMP=DG(MP,1,J,L)                                        HEXPV.226   
                  DG(MP,1,J,L)=TEMP+DG(MP,NHEM,J,L)                        HEXPV.227   
                  DG(MP,NHEM,J,L)=TEMP-DG(MP,NHEM,J,L)                     HEXPV.228   
                  !---------------------------------------------------     HEXPV.229   
                  ! Temperature : symmetric.                               HEXPV.230   
                  !---------------------------------------------------     HEXPV.231   
                  TEMP=TG(MP,1,J,L)                                        HEXPV.232   
                  TG(MP,1,J,L)=TEMP+TG(MP,NHEM,J,L)                        HEXPV.233   
                  TG(MP,NHEM,J,L)=TEMP-TG(MP,NHEM,J,L)                     HEXPV.234   
*IF DEF,ABOVE_V1                                                           HEXPV.235   
                  !---------------------------------------------------     HEXPV.236   
                  ! Tracers : symmetric.                                   HEXPV.237   
                  !---------------------------------------------------     HEXPV.238   
                  DO ITRAC=1,NTRAC                                         HEXPV.239   
                     TEMP=TRAG(MP,1,J,L,ITRAC)                             HEXPV.240   
                     TRAG(MP,1,J,L,ITRAC)=TEMP+TRAG(MP,NHEM,J,L,ITRAC)     HEXPV.241   
                     TRAG(MP,NHEM,J,L,ITRAC)=                              HEXPV.242   
     &                    TEMP-TRAG(MP,NHEM,J,L,ITRAC)                     HEXPV.243   
                  ENDDO                                                    HEXPV.244   
*ENDIF                                                                     HEXPV.245   
               ENDDO                                                       HEXPV.246   
            ENDDO                                                          HEXPV.247   
         ENDDO                                                             HEXPV.248   
                                                                           HEXPV.249   
         IF (iCol.EQ.1) THEN                                               HEXPV.250   
            DO J=1,JG                                                      HEXPV.251   
               DO MP=1,2*MMTyy(iRow)                                       HEXPV.252   
                  !---------------------------------------------------     HEXPV.253   
                  ! Log (surface pressure) : symmetric.                    HEXPV.254   
                  !---------------------------------------------------     HEXPV.255   
                  TEMP=PLG(MP,1,J)                                         HEXPV.256   
                  PLG(MP,1,J)=TEMP+PLG(MP,NHEM,J)                          HEXPV.257   
                  PLG(MP,NHEM,J)=TEMP-PLG(MP,NHEM,J)                       HEXPV.258   
                  !---------------------------------------------------     HEXPV.259   
                  ! Meridional gradient of ln(ps) : anti-symmetric.        HEXPV.260   
                  !---------------------------------------------------     HEXPV.261   
                  TEMP=PJG(MP,1,J)                                         HEXPV.262   
                  PJG(MP,1,J)=PJG(MP,NHEM,J)+TEMP                          HEXPV.263   
                  PJG(MP,NHEM,J)=PJG(MP,NHEM,J)-TEMP                       HEXPV.264   
               ENDDO                                                       HEXPV.265   
            ENDDO                                                          HEXPV.266   
         ENDIF                                                             HEXPV.267   
      ENDIF                                                                HEXPV.268   
                                                                           HEXPV.269   
      RETURN                                                               HEXPV.270   
      END                                                                  HEXPV.271   
*DECK HEXPVDT                                                              HEXPVDT.1     
*IF DEF,ABOVE_V1                                                           HEXPVDT.2     
!=====================================================                     HEXPVDT.3     
! Very similar to HEXPV but used from subroutine ICTRAC                    HEXPVDT.4     
!=====================================================                     HEXPVDT.5     
      SUBROUTINE HEXPVDT                                                   HEXPVDT.6     
      IMPLICIT NONE                                                        HEXPVDT.7     
*CALL PARAM1                                                               HEXPVDT.8     
*CALL PARAM2                                                               HEXPVDT.9     
*CALL PARAM3                                                               HEXPVDT.10    
*CALL BLANK                                                                HEXPVDT.11    
*CALL LEGAU                                                                HEXPVDT.12    
*CALL MPIDECK                                                              HEXPVDT.13    
*CALL SPECTR2                                                              HEXPVDT.14    
*CALL GRIDPA                                                               HEXPVDT.15    
*CALL GRIDPB                                                               HEXPVDT.16    
!-----------------------------------------------------                     HEXPVDT.17    
! Local variables                                                          HEXPVDT.18    
!-----------------------------------------------------                     HEXPVDT.19    
      COMPLEX :: TEMP                                                      HEXPVDT.20    
      INTEGER :: MP                                                        HEXPVDT.21    
! Loop variables                                                           HEXPVDT.22    
      INTEGER :: IM, IP, ITRAC, J, L, M, N, nT                             HEXPVDT.23    
!-----------------------------------------------------                     HEXPVDT.24    
! Transform multi-level fields to create even and odd contributions        HEXPVDT.25    
! to the Fourier coefficients at the northern hemisphere latitude.         HEXPVDT.26    
!-----------------------------------------------------                     HEXPVDT.27    
      DO L=1,NLxx(iCol)                                                    HEXPVDT.28    
         DO J=1,JG                                                         HEXPVDT.29    
            DO nT=1,2                                                      HEXPVDT.30    
               DO IM=1,MMTyy(iRow)                                         HEXPVDT.31    
                  MP=(nT-1)*(2*(MMTyy(iRow)-IM)+1)+IM                      HEXPVDT.32    
                  DO IP=mTwin2(nT,IM)+1,mTwin2(nT+1,IM)                    HEXPVDT.33    
                     !------------------------------------------------     HEXPVDT.34    
                     ! X-derivative of temperature field: type 2.          HEXPVDT.35    
                     !------------------------------------------------     HEXPVDT.36    
                     CHIG  (MP,1,J,L)=CHIG  (MP,1,J,L) +                   HEXPVDT.37    
     &                    ALP(IP,IM,1,J)*T2(IP,IM,1,L)                     HEXPVDT.38    
                     !------------------------------------------------     HEXPVDT.39    
                     ! Y-derivative of temperature field: type 4.          HEXPVDT.40    
                     !------------------------------------------------     HEXPVDT.41    
                     SFG  (MP,1,J,L)=SFG  (MP,1,J,L) +                     HEXPVDT.42    
     &                    DALP(IP,IM,1,J)*T2(IP,IM,1,L)                    HEXPVDT.43    
                     IF (NHEM.EQ.2) THEN                                   HEXPVDT.44    
                        !---------------------------------------------     HEXPVDT.45    
                        ! X-derivative of temperature field: type 2.       HEXPVDT.46    
                        !---------------------------------------------     HEXPVDT.47    
                        CHIG  (MP,NHEM,J,L)=CHIG  (MP,NHEM,J,L) +          HEXPVDT.48    
     &                       ALP(IP,IM,NHEM,J)*T2(IP,IM,NHEM,L)            HEXPVDT.49    
                        !---------------------------------------------     HEXPVDT.50    
                        ! Y-derivative of temperature field: type 4.       HEXPVDT.51    
                        !---------------------------------------------     HEXPVDT.52    
                        SFG  (MP,NHEM,J,L)=SFG  (MP,NHEM,J,L) +            HEXPVDT.53    
     &                       DALP(IP,IM,NHEM,J)*T2(IP,IM,NHEM,L)           HEXPVDT.54    
                     ENDIF                                                 HEXPVDT.55    
                  ENDDO                                                    HEXPVDT.56    
               ENDDO                                                       HEXPVDT.57    
            ENDDO                                                          HEXPVDT.58    
         ENDDO                                                             HEXPVDT.59    
      ENDDO                                                                HEXPVDT.60    
!-----------------------------------------------------                     HEXPVDT.61    
! For a global run, sum and difference even and odd contributions          HEXPVDT.62    
! to give the complete Fourier transforms at the northern and              HEXPVDT.63    
! southern latitude rows: N=E+O, S=E-O.                                    HEXPVDT.64    
! For symmetric Fourier fields, even (IM,1) precedes odd (IM,2).           HEXPVDT.65    
! For asymmetric Fourier fields, odd (IM,1) precedes even (IM,2).          HEXPVDT.66    
!-----------------------------------------------------                     HEXPVDT.67    
      IF (NHEM.EQ.2) THEN                                                  HEXPVDT.68    
         DO L=1,NLxx(iCol)                                                 HEXPVDT.69    
            DO J=1,JG                                                      HEXPVDT.70    
               DO MP=1,2*MMTyy(iRow)                                       HEXPVDT.71    
                  !---------------------------------------------------     HEXPVDT.72    
                  ! X-derivative of temperature field: symmetric           HEXPVDT.73    
                  !---------------------------------------------------     HEXPVDT.74    
                  TEMP=CHIG(MP,1,J,L)                                      HEXPVDT.75    
                  CHIG(MP,1,J,L)=TEMP+CHIG(MP,NHEM,J,L)                    HEXPVDT.76    
                  CHIG(MP,NHEM,J,L)=TEMP-CHIG(MP,NHEM,J,L)                 HEXPVDT.77    
                  !---------------------------------------------------     HEXPVDT.78    
                  ! Y-derivative of temperature field: symmetric           HEXPVDT.79    
                  !---------------------------------------------------     HEXPVDT.80    
                  TEMP=SFG(MP,1,J,L)                                       HEXPVDT.81    
                  SFG(MP,1,J,L)=TEMP+SFG(MP,NHEM,J,L)                      HEXPVDT.82    
                  SFG(MP,NHEM,J,L)=TEMP-SFG(MP,NHEM,J,L)                   HEXPVDT.83    
               ENDDO                                                       HEXPVDT.84    
            ENDDO                                                          HEXPVDT.85    
         ENDDO                                                             HEXPVDT.86    
      ENDIF                                                                HEXPVDT.87    
                                                                           HEXPVDT.88    
      RETURN                                                               HEXPVDT.89    
      END                                                                  HEXPVDT.90    
*ENDIF                                                                     HEXPVDT.91    
*DECK INTERP                                                               INTERP.1     
*IF DEF,ONLY_V3                                                            INTERP.2     
!=====================================================                     INTERP.3     
! This subroutine takes in a profile from climatology (15 levels)          INTERP.4     
! and interpolates to model vertical grid (nl.gt.15), passing back         INTERP.5     
! profile fmod.                                                            INTERP.6     
! N.B. The fclim profile must correspond to the climatology pressure       INTERP.7     
! levels given in this routine (ocliml(15)).                               INTERP.8     
!  SMR 03-06-97                                                            INTERP.9     
!=====================================================                     INTERP.10    
      subroutine interpf(fclim,fmod,ps)                                    INTERP.11    
      IMPLICIT NONE                                                        INTERP.12    
*CALL PARAM1                                                               INTERP.13    
*CALL PARAM2                                                               INTERP.14    
*CALL PARAM3                                                               INTERP.15    
*CALL BLANK                                                                INTERP.16    
*CALL LEGAU                                                                INTERP.17    
*CALL BATS                                                                 INTERP.18    
*CALL PHYSCA                                                               INTERP.19    
!-----------------------------------------------------                     INTERP.20    
! Passed variables                                                         INTERP.21    
!-----------------------------------------------------                     INTERP.22    
! Climatology profile. Must correspond to pressure levels                  INTERP.23    
! given below!                                                             INTERP.24    
      real :: fclim(15)                                                    INTERP.25    
! Model (interpolated) profile.                                            INTERP.26    
      real :: fmod(nl)                                                     INTERP.27    
! Surface pressure.                                                        INTERP.28    
      REAL :: ps                                                           INTERP.29    
!-----------------------------------------------------                     INTERP.30    
! Local variables                                                          INTERP.31    
!-----------------------------------------------------                     INTERP.32    
! Model level counter.                                                     INTERP.33    
      integer :: l                                                         INTERP.34    
! climatology level counter.                                               INTERP.35    
      integer :: lo                                                        INTERP.36    
! pressure in mb of current level being interpolated.                      INTERP.37    
      real :: pressu                                                       INTERP.38    
! ozone climatology levels in mb.                                          INTERP.39    
      real :: ocliml(15)                                                   INTERP.40    
!-----------------------------------------------------                     INTERP.41    
! Store data for oclim1                                                    INTERP.42    
!-----------------------------------------------------                     INTERP.43    
      save                                                                 INTERP.44    
      data ocliml/1.0,3.0,10.0,30.0,50.0,70.0,100.0,150.0,200.0,           INTERP.45    
     &              250.0,300.0,400.0,500.0,700.0,850.0/                   INTERP.46    
!-----------------------------------------------------                     INTERP.47    
! Start of interpolation.                                                  INTERP.48    
! Loop over model levels.                                                  INTERP.49    
!-----------------------------------------------------                     INTERP.50    
      do l=1,nl                  ! Loop over model levels.                 INTERP.51    
         !-----------------------------------------------------            INTERP.52    
         ! Pressure in mb of model level where ozone required.             INTERP.53    
         !-----------------------------------------------------            INTERP.54    
         pressu=sigma(l)*ps/100.0                                          INTERP.55    
         !-----------------------------------------------------            INTERP.56    
         ! Loop over climatology levels.                                   INTERP.57    
         !-----------------------------------------------------            INTERP.58    
         do lo=1,14                                                        INTERP.59    
            !-----------------------------------------------------         INTERP.60    
            ! Top                                                          INTERP.61    
            !-----------------------------------------------------         INTERP.62    
            if (pressu.lt.1.0) then                                        INTERP.63    
               fmod(l)=fclim(1)                                            INTERP.64    
            elseif (pressu.eq.ocliml(lo)) then                             INTERP.65    
               !-----------------------------------------------------      INTERP.66    
               ! If on a climatology level.                                INTERP.67    
               !-----------------------------------------------------      INTERP.68    
               fmod(l)=fclim(lo)                                           INTERP.69    
            elseif (pressu.gt.ocliml(lo).and.pressu.lt.ocliml(lo+1))       INTERP.70    
     &        then                                                         INTERP.71    
               !-----------------------------------------------------      INTERP.72    
               ! Need to interpolate                                       INTERP.73    
               !-----------------------------------------------------      INTERP.74    
               fmod(l)=exp(                                                INTERP.75    
     &              log(fclim(lo)) +                                       INTERP.76    
     &              (log(fclim(lo+1)) -                                    INTERP.77    
     &              log(fclim(lo)))*                                       INTERP.78    
     &              (log(pressu) - log(ocliml(lo))) /                      INTERP.79    
     &              (log(ocliml(lo+1)) - log(ocliml(lo))))                 INTERP.80    
            elseif (pressu.ge.850.0) then                                  INTERP.81    
               !-----------------------------------------------------      INTERP.82    
               ! Bottom                                                    INTERP.83    
               !-----------------------------------------------------      INTERP.84    
               fmod(l)=fclim(15)                                           INTERP.85    
            endif                                                          INTERP.86    
         ENDDO                  ! End of loop over climatology.            INTERP.87    
      ENDDO                     ! End of loop over model levels.           INTERP.88    
c                                                                          INTERP.89    
c --------------------------- End of interpolation                         INTERP.90    
c                                                                          INTERP.91    
      return                                                               INTERP.92    
      end                                                                  INTERP.93    
*ENDIF                                                                     INTERP.94    
*DECK LGNDRE                                                               LGNDRE.1     
!=====================================================                     LGNDRE.2     
! Calculates legendre polynomials (ALPJ) and their derivatives             LGNDRE.3     
! (DALPJ) at the JL'th latitude (JL is in LEGAU) using                     LGNDRE.4     
! recurrence relationships.                                                LGNDRE.5     
!=====================================================                     LGNDRE.6     
      SUBROUTINE LGNDRE(NN,MM,MOCT,ALPJ,DALPJ,NWJ2,SIJ,CSJ)                LGNDRE.7     
      IMPLICIT NONE                                                        LGNDRE.8     
!-----------------------------------------------------                     LGNDRE.9     
! Passed variables                                                         LGNDRE.10    
!-----------------------------------------------------                     LGNDRE.11    
      INTEGER :: NN                                                        LGNDRE.12    
      INTEGER :: MM                                                        LGNDRE.13    
      INTEGER :: MOCT                                                      LGNDRE.14    
! Legendre polynomials                                                     LGNDRE.15    
      REAL :: ALPJ(2*NWJ2)                                                 LGNDRE.16    
! Derivatives of Legendre polynomials                                      LGNDRE.17    
      REAL :: DALPJ(2*NWJ2)                                                LGNDRE.18    
      INTEGER :: NWJ2                                                      LGNDRE.19    
      REAL :: SIJ                                                          LGNDRE.20    
      REAL :: CSJ                                                          LGNDRE.21    
!-----------------------------------------------------                     LGNDRE.22    
! Local variables                                                          LGNDRE.23    
!-----------------------------------------------------                     LGNDRE.24    
      REAL :: F1M, F2M                                                     LGNDRE.25    
      REAL :: E1, E2                                                       LGNDRE.26    
      REAL :: ANM2                                                         LGNDRE.27    
      INTEGER :: JFM, LM, K                                                LGNDRE.28    
! Loop variables                                                           LGNDRE.29    
      INTEGER :: I, M, N                                                   LGNDRE.30    
!-----------------------------------------------------                     LGNDRE.31    
! Set P(0,0) and P(0,1)                                                    LGNDRE.32    
!-----------------------------------------------------                     LGNDRE.33    
      ALPJ(1)=SQRT(.5)                                                     LGNDRE.34    
      F1M=SQRT(1.5)                                                        LGNDRE.35    
      ALPJ(2)=F1M*SIJ                                                      LGNDRE.36    
      DALPJ(1)=0.                                                          LGNDRE.37    
!-----------------------------------------------------                     LGNDRE.38    
! Loop over wavenumbers                                                    LGNDRE.39    
!-----------------------------------------------------                     LGNDRE.40    
      LM=0                                                                 LGNDRE.41    
      DO M=0,MM-1,MOCT                                                     LGNDRE.42    
         LM=LM+2                                                           LGNDRE.43    
         IF (M.GT.0) THEN                                                  LGNDRE.44    
            DO I=1-MOCT,0                                                  LGNDRE.45    
               F2M=-F1M*CSJ/SQRT(2.0*(M+I))                                LGNDRE.46    
               F1M=F2M*SQRT(2.0*(M+I)+3.)                                  LGNDRE.47    
            ENDDO                                                          LGNDRE.48    
            E2=SQRT(2.0*M+3.)                                              LGNDRE.49    
            ALPJ(LM-1)=F2M                                                 LGNDRE.50    
            ALPJ(LM)=F1M*SIJ                                               LGNDRE.51    
            DALPJ(LM-1)=-M*ALPJ(LM)/E2                                     LGNDRE.52    
         ENDIF                                                             LGNDRE.53    
         JFM=NN-MOD(NN-M+1,2)                                              LGNDRE.54    
         IF (JFM.GE.(M+2)) THEN                                            LGNDRE.55    
            K=LM-M-1                                                       LGNDRE.56    
            !-----------------------------------------------------         LGNDRE.57    
            ! Loop over degree N                                           LGNDRE.58    
            !-----------------------------------------------------         LGNDRE.59    
            DO N=M+2,JFM                                                   LGNDRE.60    
               ANM2=1.0*(N-1)*(N-1)                                        LGNDRE.61    
               E1=SQRT((ANM2-1.0*M*M)/(4.*ANM2-1.))                        LGNDRE.62    
               E2=SQRT((4.*N*N-1.)/(1.0*N*N-1.0*M*M))                      LGNDRE.63    
               ALPJ(K+N)=E2*(SIJ*ALPJ(K+N-1)-E1*ALPJ(K+N-2))               LGNDRE.64    
               DALPJ(K+N-1)=(1.-N)*ALPJ(K+N)/E2+N*E1*ALPJ(K+N-2)           LGNDRE.65    
            ENDDO                                                          LGNDRE.66    
            LM=LM+JFM-M-1                                                  LGNDRE.67    
         ENDIF                                                             LGNDRE.68    
         DALPJ(LM)=-(N-1.)*SIJ*ALPJ(LM)+(N+N-1.0)*ALPJ(LM-1)/E2            LGNDRE.69    
       ENDDO                                                               LGNDRE.70    
      RETURN                                                               LGNDRE.71    
      END                                                                  LGNDRE.72    
*DECK LSCRN                                                                LSCRN.1     
*IF DEF,ABOVE_V1                                                           LSCRN.2     
!=====================================================                     LSCRN.3     
! GRID SCALE CONDENSATION TO SATURATION FOR PRESENT LATITUDE.              LSCRN.4     
! The cloud diagnostic scheme is based on Slingo (1987).                   LSCRN.5     
! Cloud fractions computed for Low (sigma>0.7),                            LSCRN.6     
! mid(0.7>sigma>0.35) and  high (0.35>sigma>0.12) cloud                    LSCRN.7     
! types. Shallow convective and deep convective cloud fractions            LSCRN.8     
! computed in CUBM and LBADJ respectively.                                 LSCRN.9     
!=====================================================                     LSCRN.10    
      SUBROUTINE LSCRN(JH)                                                 LSCRN.11    
      IMPLICIT NONE                                                        LSCRN.12    
*CALL PARAM1                                                               LSCRN.13    
*CALL PARAM2                                                               LSCRN.14    
*CALL PARAM3                                                               LSCRN.15    
*CALL BLANK                                                                LSCRN.16    
*CALL LEGAU                                                                LSCRN.17    
*CALL GRIDPA3                                                              LSCRN.18    
*CALL GRIDPC                                                               LSCRN.19    
*CALL PHYSCA                                                               LSCRN.20    
*CALL CPIERS                                                               LSCRN.21    
*CALL MPIDECK                                                              LSCRN.22    
!-----------------------------------------------------                     LSCRN.23    
! Passed arguments                                                         LSCRN.24    
!-----------------------------------------------------                     LSCRN.25    
! Index for latitudes                                                      LSCRN.26    
      INTEGER :: JH                                                        LSCRN.27    
*IF DEF,ONLY_V3                                                            LSCRN.28    
!-----------------------------------------------------                     LSCRN.29    
! External function                                                        LSCRN.30    
!-----------------------------------------------------                     LSCRN.31    
      REAL, EXTERNAL :: PQSAT                                              LSCRN.32    
*ENDIF                                                                     LSCRN.33    
!-----------------------------------------------------                     LSCRN.34    
! Local variables                                                          LSCRN.35    
!-----------------------------------------------------                     LSCRN.36    
      REAL :: ESCON                                                        LSCRN.37    
      REAL :: QS                                                           LSCRN.38    
      REAL :: RH                                                           LSCRN.39    
      REAL :: CFR                                                          LSCRN.40    
      REAL :: QEXS                                                         LSCRN.41    
      REAL :: CTQUSE                                                       LSCRN.42    
      REAL :: QEX                                                          LSCRN.43    
      REAL :: DQDT(NL)                                                     LSCRN.44    
      REAL :: CONVMULT(NL)                                                 RAD_CL_SEBAL.53    
      REAL :: SDOTP                                                        LSCRN.45    
      REAL :: DTHDP1, DTHDP2                                               RAD_CL_SEBAL.16    
! Loop variables                                                           LSCRN.46    
      INTEGER :: I, IHEM, L                                                LSCRN.47    
!-----------------------------------------------------                     LSCRN.48    
! LAYER CLOUD , High, middle, low.                                         LSCRN.49    
! Picks level (within low, mid, high) with largest RH                      LSCRN.50    
! and puts cloud there                                                     LSCRN.51    
!-----------------------------------------------------                     LSCRN.52    
      DO IHEM=1,NHEM                                                       LSCRN.53    
         DO I=1,MGxx(iCol)                                                 LSCRN.54    
*IF DEF,ONLY_V2                                                            LSCRN.55    
            ESCON=ESCONA/PLG3(I,IHEM,JH)                                   LSCRN.56    
*ELSE                                                                      LSCRN.57    
            ESCON=1./PLG3(I,IHEM,JH)                                       LSCRN.58    
C Calculate d theta/dP at low levels                                       RAD_CL_SEBAL.17    
                                                                           RAD_CL_SEBAL.18    
            DTHDP1 = ((TG3(I,IHEM,JH,NL)/SKAP(NL))-                        RAD_CL_SEBAL.19    
     &               (TG3(I,IHEM,JH,NL-1)/SKAP(NL-1)))/                    RAD_CL_SEBAL.20    
     &               (P0*PLG3(I,IHEM,JH)*(SIGMA(NL)-SIGMA(NL-1)))          RAD_CL_SEBAL.21    
                                                                           RAD_CL_SEBAL.22    
            DTHDP2 = ((TSTAR(I,IHEM,JH))-                                  RAD_CL_SEBAL.23    
     &               (TG3(I,IHEM,JH,NL)/SKAP(NL)))/                        RAD_CL_SEBAL.24    
     &               (P0*PLG3(I,IHEM,JH)*(1.0-SIGMA(NL)))                  RAD_CL_SEBAL.25    
C Dimensionalise by CT and turn Pa into hPa                                RAD_CL_SEBAL.26    
                                                                           RAD_CL_SEBAL.27    
            DTHDP1 = DTHDP1*752.015*1.0E2                                  RAD_CL_SEBAL.28    
            DTHDP2 = DTHDP2*752.015*1.0E2                                  RAD_CL_SEBAL.29    
*ENDIF                                                                     LSCRN.59    
            DO L=1,NL                                                      RAD_CL_SEBAL.54    
              CONVMULT(L)=1.0                                              RAD_CL_SEBAL.55    
            END DO                                                         RAD_CL_SEBAL.56    
C Check for deep convective cloud                                          RAD_CL_SEBAL.57    
            IF(CFRAC(I,IHEM,5).GT.1.0E-8)THEN                              RAD_CL_SEBAL.58    
              DO L=ICFLAG(I,IHEM,5,2),ICFLAG(I,IHEM,5,1)                   RAD_CL_SEBAL.59    
                CONVMULT(L)=0.0                                            RAD_CL_SEBAL.60    
              END DO                                                       RAD_CL_SEBAL.61    
            ENDIF                                                          RAD_CL_SEBAL.62    
C Check for shallow convective cloud                                       RAD_CL_SEBAL.63    
            IF(CFRAC(I,IHEM,4).GT.1.0E-8)THEN                              RAD_CL_SEBAL.64    
              DO L=ICFLAG(I,IHEM,4,2),ICFLAG(I,IHEM,4,1)                   RAD_CL_SEBAL.65    
                CONVMULT(L)=0.0                                            RAD_CL_SEBAL.66    
              END DO                                                       RAD_CL_SEBAL.67    
            ENDIF                                                          RAD_CL_SEBAL.68    
            DO L=1,NL                                                      LSCRN.60    
*IF DEF,ONLY_V2                                                            LSCRN.61    
               QS=ESCON*EXP(-ESCONB/TG3(I,IHEM,JH,L))/SIGMA(L)             LSCRN.62    
*ELSE                                                                      LSCRN.63    
               QS=ESCON*PQSAT(TG3(I,IHEM,JH,L))/SIGMA(L)                   LSCRN.64    
               !-----------------------------------------------------      LSCRN.65    
               ! Relative humidity                                         LSCRN.66    
               !-----------------------------------------------------      LSCRN.67    
               RH=TRAG3(I,IHEM,JH,L,1)/QS ! relative humidity              LSCRN.68    
               IF (RH.GT.0.8) THEN                                         LSCRN.69    
                  !---------------------------------------------------     LSCRN.70    
                  ! Cloud fraction mid/low/high cloud                      LSCRN.71    
                  !---------------------------------------------------     LSCRN.72    
                  CFR=((RH-0.8)/0.2)**2                                    LSCRN.73    
                  IF (CFR.GT.1.0) CFR=1.0                                  LSCRN.74    
                  !---------------------------------------------------     LSCRN.75    
                  ! High cloud                                             LSCRN.76    
                  !---------------------------------------------------     LSCRN.77    
                  IF (SIGMA(L).GT.0.12.AND.SIGMA(L).LE.0.35) THEN          LSCRN.78    
                     IF (CFR.GT.CFRAC(I,IHEM,3)) THEN                      LSCRN.79    
                        ICFLAG(I,IHEM,3,1)=L                               LSCRN.80    
                        ICFLAG(I,IHEM,3,2)=L                               LSCRN.81    
                        CFRAC(I,IHEM,3)=CFR                                LSCRN.82    
                     ENDIF                                                 LSCRN.83    
                  ENDIF                                                    LSCRN.84    
                  !---------------------------------------------------     LSCRN.85    
                  ! Mid cloud                                              LSCRN.86    
                  !---------------------------------------------------     LSCRN.87    
                  IF (SIGMA(L).GT.0.35.AND.SIGMA(L).LE.0.70) THEN          LSCRN.88    
                     IF (CFR.GT.CFRAC(I,IHEM,2)) THEN                      LSCRN.89    
                        ICFLAG(I,IHEM,2,1)=L                               LSCRN.90    
                        ICFLAG(I,IHEM,2,2)=L                               LSCRN.91    
                        CFRAC(I,IHEM,2)=CFR*CONVMULT(L)                    RAD_CL_SEBAL.69    
                     ENDIF                                                 LSCRN.93    
                  ENDIF                                                    LSCRN.94    
                  !---------------------------------------------------     LSCRN.95    
                  ! Low cloud not in level nl                              LSCRN.96    
                  !---------------------------------------------------     LSCRN.97    
                  IF (SIGMA(L).GT.0.70.AND.L.LT.NL) THEN                   LSCRN.98    
                     IF (CFR.GT.CFRAC(I,IHEM,1)) THEN                      LSCRN.99    
                        ICFLAG(I,IHEM,1,1)=L                               LSCRN.100   
                        ICFLAG(I,IHEM,1,2)=L                               LSCRN.101   
                        CFRAC(I,IHEM,1)=CFR*CONVMULT(L)                    RAD_CL_SEBAL.70    
                     ENDIF                                                 LSCRN.103   
                  ENDIF                                                    LSCRN.104   
               ENDIF                                                       LSCRN.105   
*ENDIF                                                                     LSCRN.106   
               QEXS=TRAG3(I,IHEM,JH,L,1)-QS                                LSCRN.107   
*IF DEF,ONLY_V2                                                            LSCRN.108   
               QEX=QEXS/(1.0+CTQ*QS*ESCONB/(TG3(I,IHEM,JH,L)*              LSCRN.109   
     &              TG3(I,IHEM,JH,L)))                                     LSCRN.110   
*ELSE                                                                      LSCRN.111   
               !-----------------------------------------------------      LSCRN.112   
               ! Choose appropriate value of latent heat based on          LSCRN.113   
               ! ground T ie, we assume it snows if the ground is          LSCRN.114   
               ! colder than 273.15K                                       LSCRN.115   
               !-----------------------------------------------------      LSCRN.116   
               if (tstar(i,ihem,jh).gt.0.363224029) then                   LSCRN.117   
                  ctquse=ctq                                               LSCRN.118   
               else                                                        LSCRN.119   
                  ctquse=ctqi                                              LSCRN.120   
               endif                                                       LSCRN.121   
               QEX=QEXS/(1.0+CTQUSE*QS*ESCONB/(TG3(I,IHEM,JH,L)*           LSCRN.122   
     &              TG3(I,IHEM,JH,L)))                                     LSCRN.123   
*ENDIF                                                                     LSCRN.124   
               IF (QEXS.LT.0.0) THEN                                       LSCRN.125   
                  QEX=0.0                                                  LSCRN.126   
               END IF                                                      LSCRN.127   
               IF (QEXS.GE.0.0) THEN                                       LSCRN.128   
                  CTLR(L,IHEM)=CTLR(L,IHEM)+1.0                            LSCRN.129   
               END IF                                                      LSCRN.130   
               DQDT(L)=-QEX/DELT2C                                         LSCRN.131   
*IF DEF,ONLY_V2                                                            LSCRN.132   
               QTLR(I,IHEM,L)=DQDT(L)                                      LSCRN.133   
               TTLR(I,IHEM,L)=-CTQ*DQDT(L)                                 LSCRN.134   
*ELSE                                                                      LSCRN.135   
               QTLR(I,IHEM,L)=QTLR(I,IHEM,L)+DQDT(L)                       LSCRN.136   
               TTLR(I,IHEM,L)=-CTQUSE*DQDT(L)                              LSCRN.137   
*ENDIF                                                                     LSCRN.138   
               TRAG3(I,IHEM,JH,L,1)=TRAG3(I,IHEM,JH,L,1)-QEX               LSCRN.139   
*IF DEF,ONLY_V2                                                            LSCRN.140   
               TG3(I,IHEM,JH,L)=TG3(I,IHEM,JH,L)+CTQ*QEX                   LSCRN.141   
*ELSE                                                                      LSCRN.142   
               TG3(I,IHEM,JH,L)=TG3(I,IHEM,JH,L)+CTQUSE*QEX                LSCRN.143   
*ENDIF                                                                     LSCRN.144   
            ENDDO                                                          LSCRN.145   
C Marine stratocumulus conditions (for cloud in layer NL-1)                RAD_CL_SEBAL.30    
C Cloud top dth/dp < -0.03 K/hPa, near-surface dth/dp > -0.01 K/hPa        RAD_CL_SEBAL.31    
C no low cloud already diagnosed and ocean gridpoint                       RAD_CL_SEBAL.32    
C From Kawai and Inoue (SOLAS) 2006 with changed threshold                 RAD_CL_SEBAL.33    
C due to relatively coarse IGCM vertical resolution                        RAD_CL_SEBAL.34    
                                                                           RAD_CL_SEBAL.35    
              IF ((SVEGE(I,IHEM,JH).EQ.1).AND.DTHDP2 .gt. -0.01            RAD_CL_SEBAL.36    
     &        .AND.(CFRAC(I,IHEM,1).LT.1.0E-5))                            RAD_CL_SEBAL.37    
     &        THEN                                                         RAD_CL_SEBAL.38    
                ICFLAG(I,IHEM,1,1)=NL-1                                    RAD_CL_SEBAL.39    
                ICFLAG(I,IHEM,1,2)=NL-1                                    RAD_CL_SEBAL.40    
                CFRAC(I,IHEM,1)=MAX(MIN(-12.0*(DTHDP1+0.03),1.0),0.0)      RAD_CL_SEBAL.41    
              ENDIF                                                        RAD_CL_SEBAL.42    
            !-----------------------------------------------------         LSCRN.146   
            ! Dot product                                                  LSCRN.147   
            !-----------------------------------------------------         LSCRN.148   
            SDOTP=0.0                                                      LSCRN.149   
            DO L=1,NL                                                      LSCRN.150   
               SDOTP=SDOTP+DQDT(L)*CLR(L)                                  LSCRN.151   
            ENDDO                                                          LSCRN.152   
            RRLR(I,IHEM,JH)=-SDOTP*PLG3(I,IHEM,JH)                         LSCRN.153   
         ENDDO                                                             LSCRN.154   
      ENDDO                                                                LSCRN.155   
      RETURN                                                               LSCRN.156   
      END                                                                  LSCRN.157   
*ENDIF                                                                     LSCRN.158   
*DECK LTD                                                                  LTD.1     
!=====================================================                     LTD.2     
! Direct Legendre transform for the adiabatic part of the timestep.        LTD.3     
! Transforms from Fourier to spectral space at the current latitude        LTD.4     
! (pair).  In a global run the input arrays are complete (even+odd)        LTD.5     
! Fourier coefficients at the northern & southern hemisphere rows.         LTD.6     
!                                                                          LTD.7     
! Version for RSGUP3.                     Mike Blackburn,  12.01.95        LTD.8     
! ANSI work arrays for HANAL,SPDEL2.      Mike Blackburn,  04.09.96        LTD.9     
!=====================================================                     LTD.10    
      SUBROUTINE LTD                                                       LTD.11    
      IMPLICIT NONE                                                        LTD.12    
*CALL PARAM1                                                               LTD.13    
*CALL PARAM2                                                               LTD.14    
*CALL PARAM3                                                               LTD.15    
*CALL BLANK                                                                LTD.16    
*CALL GRIDPA                                                               LTD.17    
*CALL GRIDPB                                                               LTD.18    
*CALL LEGAU                                                                LTD.19    
*CALL POLYNO                                                               LTD.20    
*CALL MPIDECK                                                              LTD.21    
!-----------------------------------------------------                     LTD.22    
! Local variables                                                          LTD.23    
!-----------------------------------------------------                     LTD.24    
      COMPLEX :: GWORK(MGPP/2,NHEM,3*NL+2)                                 LTD.25    
*IF DEF,ONLY_V3                                                            LTD.26    
      REAL :: AFAC                                                         LTD.27    
*ENDIF                                                                     LTD.28    
! Loop variables                                                           LTD.29    
      INTEGER :: I, IHEM, ITRAC, J, L                                      LTD.30    
!-----------------------------------------------------                     LTD.31    
! Prepare Fourier arrays:                                                  LTD.32    
!  - change sign of terms which contribute negatively to tendency,         LTD.33    
!  - apply (1-mu**2) weighting,                                            LTD.34    
!  - take zonal derivatives,                                               LTD.35    
!  - make copies of effective momentum tendencies.                         LTD.36    
!-----------------------------------------------------                     LTD.37    
      DO L=1,NLxx(iCol)                                                    LTD.38    
         DO J=1,JG                                                         LTD.39    
            DO IHEM=1,NHEM                                                 LTD.40    
               DO I=1,2*MMTyy(iRow)                                        LTD.41    
                  EG(I,IHEM,J,L)=-0.5*EG(I,IHEM,J,L)/CSSQ(J,IHEM)          LTD.42    
                  VTG(I,IHEM,J,L)=-VTG(I,IHEM,J,L)                         LTD.43    
                  TNLG(I,IHEM,J,L)=TNLG(I,IHEM,J,L)-                       LTD.44    
     &                 CMPA(I,IHEM)*UTG(I,IHEM,J,L)/CSSQ(J,IHEM)           LTD.45    
                  FVGT(I,IHEM,J,L)=FVG(I,IHEM,J,L)                         LTD.46    
                  FUGT(I,IHEM,J,L)=-FUG(I,IHEM,J,L)                        LTD.47    
                  FUG(I,IHEM,J,L)=CMPA(I,IHEM)*FUG(I,IHEM,J,L)/            LTD.48    
     &                 CSSQ(J,IHEM)                                        LTD.49    
                  FVG(I,IHEM,J,L)=CMPA(I,IHEM)*FVG(I,IHEM,J,L)/            LTD.50    
     &                 CSSQ(J,IHEM)                                        LTD.51    
               ENDDO                                                       LTD.52    
            ENDDO                                                          LTD.53    
         ENDDO                                                             LTD.54    
      ENDDO                                                                LTD.55    
*IF DEF,ABOVE_V1                                                           LTD.56    
!-----------------------------------------------------                     LTD.57    
! Tracer transforms depend on the form of advection used.                  LTD.58    
!-----------------------------------------------------                     LTD.59    
*IF DEF,ONLY_V3                                                            LTD.60    
      IF (LFLUX) THEN                                                      LTD.61    
         AFAC=-1.0                                                         LTD.62    
      ELSE                                                                 LTD.63    
         AFAC=1.0                                                          LTD.64    
      ENDIF                                                                LTD.65    
*ENDIF                                                                     LTD.66    
      DO ITRAC=1,NTRAC                                                     LTD.67    
         DO L=1,NLxx(iCol)                                                 LTD.68    
            DO J=1,JG                                                      LTD.69    
               DO IHEM=1,NHEM                                              LTD.70    
                  DO I=1,2*MMTyy(iRow)                                     LTD.71    
*IF DEF,ONLY_V2                                                            LTD.72    
                     TRANLG(I,IHEM,J,L,ITRAC)=                             LTD.73    
*ELSE                                                                      LTD.74    
                     TRANLG(I,IHEM,J,L,ITRAC)=AFAC*                        LTD.75    
*ENDIF                                                                     LTD.76    
     &                    TRANLG(I,IHEM,J,L,ITRAC)-CMPA(I,IHEM)*           LTD.77    
     &                    UTRAG(I,IHEM,J,L,ITRAC)/CSSQ(J,IHEM)             LTD.78    
                     VTRAG(I,IHEM,J,L,ITRAC)=-VTRAG(I,IHEM,J,L,ITRAC)      LTD.79    
                  ENDDO                                                    LTD.80    
               ENDDO                                                       LTD.81    
            ENDDO                                                          LTD.82    
         ENDDO                                                             LTD.83    
      ENDDO                                                                LTD.84    
*ENDIF                                                                     LTD.85    
!-----------------------------------------------------                     LTD.86    
! Call single routine to perform all transforms with maximum               LTD.87    
! vector efficiency.                                                       LTD.88    
! *** NOTE : THE INPUT FOURIER FIELDS ARE MODIFIED IF                      LTD.89    
! GLOBAL ***                                                               LTD.90    
!-----------------------------------------------------                     LTD.91    
      CALL HANALV                                                          LTD.92    
      RETURN                                                               LTD.93    
      END                                                                  LTD.94    
*DECK LTDDIA                                                               LTDDIA.1     
*IF DEF,ABOVE_V1                                                           LTDDIA.2     
!=====================================================                     LTDDIA.3     
! Direct Legendre transform for the diabatic part of the timestep.         LTDDIA.4     
! Only transform the required fields: forcing of temperature and           LTDDIA.5     
! tracers and spatial derivatives of the momentum forcing.                 LTDDIA.6     
!                                                                          LTDDIA.7     
! Transforms from Fourier to spectral space at the current latitude        LTDDIA.8     
! (pair).  In a global run the input arrays are complete (even+odd)        LTDDIA.9     
! Fourier coefficients at the northern & southern hemisphere rows.         LTDDIA.10    
!                                                                          LTDDIA.11    
! Original version in IGCM2.              Piers Forster,   25.10.96.       LTDDIA.12    
! Optimisation (/CSSQ to *SECSQ).         Mike Blackburn,  22.12.99.       LTDDIA.13    
!=====================================================                     LTDDIA.14    
      SUBROUTINE LTDDIA                                                    LTDDIA.15    
      IMPLICIT NONE                                                        LTDDIA.16    
*CALL PARAM1                                                               LTDDIA.17    
*CALL PARAM2                                                               LTDDIA.18    
*CALL PARAM3                                                               LTDDIA.19    
*CALL BLANK                                                                LTDDIA.20    
*CALL GRIDPA                                                               LTDDIA.21    
*CALL GRIDPB                                                               LTDDIA.22    
*CALL LEGAU                                                                LTDDIA.23    
*CALL POLYNO                                                               LTDDIA.24    
*CALL MPIDECK                                                              LTDDIA.25    
!-----------------------------------------------------                     LTDDIA.26    
! Local variables                                                          LTDDIA.27    
!-----------------------------------------------------                     LTDDIA.28    
! Loop variables                                                           LTDDIA.29    
      INTEGER :: I, IHEM, ITRAC, J, L                                      LTDDIA.30    
!-----------------------------------------------------                     LTDDIA.31    
! Prepare Fourier arrays:                                                  LTDDIA.32    
!  - change sign of terms which contribute negatively to tendency,         LTDDIA.33    
!  - apply (1-mu**2) weighting,                                            LTDDIA.34    
!  - take zonal derivatives,                                               LTDDIA.35    
!  - make copies of effective momentum tendencies.                         LTDDIA.36    
!-----------------------------------------------------                     LTDDIA.37    
      DO L=1,NLxx(iCol)                                                    LTDDIA.38    
         DO J=1,JG                                                         LTDDIA.39    
            DO IHEM=1,NHEM                                                 LTDDIA.40    
               DO I=1,2*MMTyy(iRow)                                        LTDDIA.41    
                  FVGT(I,IHEM,J,L)=FVG(I,IHEM,J,L)                         LTDDIA.42    
                  FUGT(I,IHEM,J,L)=-FUG(I,IHEM,J,L)                        LTDDIA.43    
                  FUG(I,IHEM,J,L)=CMPA(I,IHEM)*FUG(I,IHEM,J,L)/            LTDDIA.44    
     &                 CSSQ(J,IHEM)                                        LTDDIA.45    
                  FVG(I,IHEM,J,L)=CMPA(I,IHEM)*FVG(I,IHEM,J,L)/            LTDDIA.46    
     &                 CSSQ(J,IHEM)                                        LTDDIA.47    
               ENDDO                                                       LTDDIA.48    
            ENDDO                                                          LTDDIA.49    
         ENDDO                                                             LTDDIA.50    
      ENDDO                                                                LTDDIA.51    
!-----------------------------------------------------                     LTDDIA.52    
! Call single routine to perform all transforms with maximum               LTDDIA.53    
! vector efficiency.                                                       LTDDIA.54    
! *** NOTE : THE INPUT FOURIER FIELDS ARE MODIFIED IF                      LTDDIA.55    
! GLOBAL ***                                                               LTDDIA.56    
!-----------------------------------------------------                     LTDDIA.57    
      CALL DANALV                                                          LTDDIA.58    
      RETURN                                                               LTDDIA.59    
      END                                                                  LTDDIA.60    
*ENDIF                                                                     LTDDIA.61    
*DECK LTI                                                                  LTI.1     
!=====================================================                     LTI.2     
! Inverse Legendre transform for the adiabatic part of the timestep        LTI.3     
! Transforms from spectral to Fourier space at the current latitude        LTI.4     
! (pair).  In a global run the resulting arrays are complete               LTI.5     
! (i.e. even+odd) Fourier coefficients at the northern & southern          LTI.6     
! hemisphere rows.                                                         LTI.7     
!                                                                          LTI.8     
! Version for RSGUP3.                     Mike Blackburn,  12.01.95        LTI.9     
!=====================================================                     LTI.10    
      SUBROUTINE LTI                                                       LTI.11    
      IMPLICIT NONE                                                        LTI.12    
*CALL PARAM1                                                               LTI.13    
*CALL PARAM2                                                               LTI.14    
*CALL PARAM3                                                               LTI.15    
*CALL BLANK                                                                LTI.16    
*CALL GRIDPA                                                               LTI.17    
*CALL GRIDPB                                                               LTI.18    
*CALL LEGAU                                                                LTI.19    
*CALL POLYNO                                                               LTI.20    
*CALL SPECTR2                                                              LTI.21    
*CALL MPIDECK                                                              LTI.22    
!-----------------------------------------------------                     LTI.23    
! Local variables                                                          LTI.24    
!-----------------------------------------------------                     LTI.25    
      COMPLEX :: CEZN                                                      LTI.26    
! Loop variables                                                           LTI.27    
      INTEGER :: I, IHEM, J, L                                             LTI.28    
!-----------------------------------------------------                     LTI.29    
! Preset Fourier arrays.                                                   LTI.30    
!-----------------------------------------------------                     LTI.31    
      CHIG(:,:,:,:)=0.                                                     LTI.32    
      SFG(:,:,:,:)=0.                                                      LTI.33    
      UG(:,:,:,:)=0.                                                       LTI.34    
      VG(:,:,:,:)=0.                                                       LTI.35    
      ZG(:,:,:,:)=0.                                                       LTI.36    
      DG(:,:,:,:)=0.                                                       LTI.37    
      TG(:,:,:,:)=0.                                                       LTI.38    
*IF DEF,ABOVE_V1                                                           LTI.39    
      TRAG(:,:,:,:,:)=0.                                                   LTI.40    
*ENDIF                                                                     LTI.41    
!-----------------------------------------------------                     LTI.42    
! Zero the half transforms on one level                                    LTI.43    
!-----------------------------------------------------                     LTI.44    
      PLG(:,:,:)=0.                                                        LTI.45    
      PJG(:,:,:)=0.                                                        LTI.46    
      PMG(:,:,:)=0.                                                        LTI.47    
!-----------------------------------------------------                     LTI.48    
! Remove planetary vorticity in spectral space, so all transforms          LTI.49    
! use relative vorticity.                                                  LTI.50    
!-----------------------------------------------------                     LTI.51    
      IF (iRow.EQ.1) THEN                                                  LTI.52    
         DO L=1,NLxx(iRow)                                                 LTI.53    
            Z2(1,1,1,L)=Z2(1,1,1,L)-EZ                                     LTI.54    
         ENDDO                                                             LTI.55    
      ENDIF                                                                LTI.56    
!-----------------------------------------------------                     LTI.57    
! Call single routine to perform all transforms with maximum               LTI.58    
! vector efficiency.                                                       LTI.59    
!-----------------------------------------------------                     LTI.60    
      CALL HEXPV                                                           LTI.61    
!-----------------------------------------------------                     LTI.62    
! 1st zonal wavenumber is stored on row 1                                  LTI.63    
!-----------------------------------------------------                     LTI.64    
      IF (iRow.EQ.1) THEN                                                  LTI.65    
         !-----------------------------------------------------            LTI.66    
         ! Restore planetary vorticity in spectral space.                  LTI.67    
         !-----------------------------------------------------            LTI.68    
         DO L=1,NLxx(1)                                                    LTI.69    
            Z2(1,1,1,L)=Z2(1,1,1,L)+EZ                                     LTI.70    
         ENDDO                                                             LTI.71    
         !-----------------------------------------------------            LTI.72    
         ! Convert from relative to absolute vorticity in Fourier space    LTI.73    
         ! (real part of) m=0 coefficient only.                            LTI.74    
         !-----------------------------------------------------            LTI.75    
         DO J=1,JG                                                         LTI.76    
            CEZN=CMPLX(2.0*SI(J,1),0.0)                                    LTI.77    
            DO L=1,NLxx(1)                                                 LTI.78    
               ZG(1,1,J,L)=ZG(1,1,J,L)+CEZN                                LTI.79    
               IF (NHEM.EQ.2) THEN                                         LTI.80    
                  ZG(1,NHEM,J,L)=ZG(1,NHEM,J,L)-CEZN                       LTI.81    
               ENDIF                                                       LTI.82    
            ENDDO                                                          LTI.83    
         ENDDO                                                             LTI.84    
      ENDIF                                                                LTI.85    
!-----------------------------------------------------                     LTI.86    
! Sum to give total winds.  CMPA takes x-derivative.                       LTI.87    
!-----------------------------------------------------                     LTI.88    
       DO L=1,NLxx(iCol)                                                   LTI.89    
         DO J=1,JG                                                         LTI.90    
            DO IHEM=1,NHEM                                                 LTI.91    
               DO I=1,2*MMTyy(iRow)                                        LTI.92    
                  UG(I,IHEM,J,L)=CMPA(I,IHEM)*CHIG(I,IHEM,J,L)             LTI.93    
     &                 -UG(I,IHEM,J,L)                                     LTI.94    
                  VG(I,IHEM,J,L)=CMPA(I,IHEM)* SFG(I,IHEM,J,L)             LTI.95    
     &                 +VG(I,IHEM,J,L)                                     LTI.96    
               ENDDO                                                       LTI.97    
            ENDDO                                                          LTI.98    
         ENDDO                                                             LTI.99    
      ENDDO                                                                LTI.100   
!-----------------------------------------------------                     LTI.101   
! Zonal gradient of ln(ps).                                                LTI.102   
!-----------------------------------------------------                     LTI.103   
      IF (iCol.EQ.1) THEN                                                  LTI.104   
         DO J=1,JG                                                         LTI.105   
            DO IHEM=1,NHEM                                                 LTI.106   
               DO I=1,2*MMTyy(iRow)                                        LTI.107   
                  PMG(I,IHEM,J)=CMPA(I,IHEM)*PLG(I,IHEM,J)                 LTI.108   
               ENDDO                                                       LTI.109   
            ENDDO                                                          LTI.110   
         ENDDO                                                             LTI.111   
      ENDIF                                                                LTI.112   
      RETURN                                                               LTI.113   
      END                                                                  LTI.114   
*DECK LTIDT                                                                LTIDT.1     
*IF DEF,ABOVE_V1                                                           LTIDT.2     
!=====================================================                     LTIDT.3     
! Inverse Legendre transform for the adiabatic part of the timestep        LTIDT.4     
! Transforms from spectral to Fourier space at the current latitude        LTIDT.5     
! (pair).  In a global run the resulting arrays are complete               LTIDT.6     
! (i.e. even+odd) Fourier coefficients at the northern & southern          LTIDT.7     
! hemisphere rows.                                                         LTIDT.8     
!                                                                          LTIDT.9     
! Version for RSGUP3.                     Mike Blackburn,  12.01.95        LTIDT.10    
!=====================================================                     LTIDT.11    
      SUBROUTINE LTIDT                                                     LTIDT.12    
      IMPLICIT NONE                                                        LTIDT.13    
*CALL PARAM1                                                               LTIDT.14    
*CALL PARAM2                                                               LTIDT.15    
*CALL PARAM3                                                               LTIDT.16    
*CALL BLANK                                                                LTIDT.17    
*CALL GRIDPB                                                               LTIDT.18    
*CALL LEGAU                                                                LTIDT.19    
*CALL POLYNO                                                               LTIDT.20    
*CALL SPECTR2                                                              LTIDT.21    
*CALL MPIDECK                                                              LTIDT.22    
!-----------------------------------------------------                     LTIDT.23    
! Local variables                                                          LTIDT.24    
!-----------------------------------------------------                     LTIDT.25    
! Loop variables                                                           LTIDT.26    
      INTEGER :: I, IHEM, J, L                                             LTIDT.27    
!-----------------------------------------------------                     LTIDT.28    
! Preset Fourier arrays.                                                   LTIDT.29    
!-----------------------------------------------------                     LTIDT.30    
      CHIG(:,:,:,:)=0.                                                     LTIDT.31    
      SFG(:,:,:,:)=0.                                                      LTIDT.32    
!-----------------------------------------------------                     LTIDT.33    
! Calculate the x-derivative, CHIG, and y-derivative of                    LTIDT.34    
! temperature field                                                        LTIDT.35    
!-----------------------------------------------------                     LTIDT.36    
      CALL HEXPVDT                                                         LTIDT.37    
!-----------------------------------------------------                     LTIDT.38    
! Sum to give total winds.  CMPA takes x-derivative.                       LTIDT.39    
!-----------------------------------------------------                     LTIDT.40    
      DO L=1,NLxx(iCol)                                                    LTIDT.41    
         DO J=1,JG                                                         LTIDT.42    
            DO IHEM=1,NHEM                                                 LTIDT.43    
               DO I=1,2*MMTyy(iRow)                                        LTIDT.44    
                   CHIG(I,IHEM,J,L)=CMPA(I,IHEM)* CHIG(I,IHEM,J,L)         LTIDT.45    
               ENDDO                                                       LTIDT.46    
            ENDDO                                                          LTIDT.47    
         ENDDO                                                             LTIDT.48    
      ENDDO                                                                LTIDT.49    
      RETURN                                                               LTIDT.50    
      END                                                                  LTIDT.51    
*ENDIF                                                                     LTIDT.52    
*DECK LTIDIA                                                               LTIDIA.1     
*IF DEF,ABOVE_V1                                                           LTIDIA.2     
!=====================================================                     LTIDIA.3     
! Inverse Legendre transform for the adiabatic part of the timestep        LTIDIA.4     
! Transforms from spectral to Fourier space at the current latitude        LTIDIA.5     
! (pair).  In a global run the resulting arrays are complete               LTIDIA.6     
! (i.e. even+odd) Fourier coefficients at the northern & southern          LTIDIA.7     
! hemisphere rows.                                                         LTIDIA.8     
!                                                                          LTIDIA.9     
! Version for RSGUP3.                     Mike Blackburn,  12.01.95        LTIDIA.10    
!=====================================================                     LTIDIA.11    
      SUBROUTINE LTIDIA                                                    LTIDIA.12    
      IMPLICIT NONE                                                        LTIDIA.13    
*CALL PARAM1                                                               LTIDIA.14    
*CALL PARAM2                                                               LTIDIA.15    
*CALL PARAM3                                                               LTIDIA.16    
*CALL BLANK                                                                LTIDIA.17    
*CALL GRIDPA                                                               LTIDIA.18    
*CALL GRIDPB                                                               LTIDIA.19    
*CALL LEGAU                                                                LTIDIA.20    
*CALL POLYNO                                                               LTIDIA.21    
*CALL SPECTR2                                                              LTIDIA.22    
*CALL MPIDECK                                                              LTIDIA.23    
!-----------------------------------------------------                     LTIDIA.24    
! Local variables                                                          LTIDIA.25    
!-----------------------------------------------------                     LTIDIA.26    
      COMPLEX :: CEZN                                                      LTIDIA.27    
! Loop variables                                                           LTIDIA.28    
      INTEGER :: I, IHEM, J, L                                             LTIDIA.29    
!-----------------------------------------------------                     LTIDIA.30    
! Preset Fourier arrays.                                                   LTIDIA.31    
!-----------------------------------------------------                     LTIDIA.32    
      CHIG(:,:,:,:)=0.                                                     LTIDIA.33    
      SFG(:,:,:,:)=0.                                                      LTIDIA.34    
      UG(:,:,:,:)=0.                                                       LTIDIA.35    
      VG(:,:,:,:)=0.                                                       LTIDIA.36    
      TG(:,:,:,:)=0.                                                       LTIDIA.37    
      TRAG(:,:,:,:,:)=0.                                                   LTIDIA.38    
!-----------------------------------------------------                     LTIDIA.39    
! Zero the half transforms on one level                                    LTIDIA.40    
!-----------------------------------------------------                     LTIDIA.41    
      PLG(:,:,:)=0.                                                        LTIDIA.42    
!-----------------------------------------------------                     LTIDIA.43    
! Remove planetary vorticity in spectral space, so all transforms          LTIDIA.44    
! use relative vorticity.                                                  LTIDIA.45    
!-----------------------------------------------------                     LTIDIA.46    
      IF (iRow.EQ.1) THEN                                                  LTIDIA.47    
         DO L=1,NLxx(iRow)                                                 LTIDIA.48    
            Z2(1,1,1,L)=Z2(1,1,1,L)-EZ                                     LTIDIA.49    
         ENDDO                                                             LTIDIA.50    
      ENDIF                                                                LTIDIA.51    
!-----------------------------------------------------                     LTIDIA.52    
! Call single routine to perform all transforms with maximum               LTIDIA.53    
! vector efficiency.                                                       LTIDIA.54    
!-----------------------------------------------------                     LTIDIA.55    
      CALL DEXPV                                                           LTIDIA.56    
!-----------------------------------------------------                     LTIDIA.57    
! Restore planetary vorticity in spectral space.                           LTIDIA.58    
!-----------------------------------------------------                     LTIDIA.59    
      IF (iRow.EQ.1) THEN                                                  LTIDIA.60    
         DO L=1,NLxx(1)                                                    LTIDIA.61    
            Z2(1,1,1,L)=Z2(1,1,1,L)+EZ                                     LTIDIA.62    
         ENDDO                                                             LTIDIA.63    
      ENDIF                                                                LTIDIA.64    
!-----------------------------------------------------                     LTIDIA.65    
! Sum to give total winds.  CMPA takes x-derivative.                       LTIDIA.66    
!-----------------------------------------------------                     LTIDIA.67    
       DO L=1,NLxx(iCol)                                                   LTIDIA.68    
         DO J=1,JG                                                         LTIDIA.69    
            DO IHEM=1,NHEM                                                 LTIDIA.70    
               DO I=1,2*MMTyy(iRow)                                        LTIDIA.71    
                  UG(I,IHEM,J,L)=CMPA(I,IHEM)*CHIG(I,IHEM,J,L)             LTIDIA.72    
     &                 -UG(I,IHEM,J,L)                                     LTIDIA.73    
                  VG(I,IHEM,J,L)=CMPA(I,IHEM)* SFG(I,IHEM,J,L)             LTIDIA.74    
     &                 +VG(I,IHEM,J,L)                                     LTIDIA.75    
               ENDDO                                                       LTIDIA.76    
            ENDDO                                                          LTIDIA.77    
         ENDDO                                                             LTIDIA.78    
      ENDDO                                                                LTIDIA.79    
      RETURN                                                               LTIDIA.80    
      END                                                                  LTIDIA.81    
*ENDIF                                                                     LTIDIA.82    
*DECK MASCOR                                                               MASCOR.1     
*IF DEF,ABOVE_V1                                                           MASCOR.2     
!=====================================================                     MASCOR.3     
! MASCOR - Correction of global average surface pressure.                  MASCOR.4     
! No longer requires KOUNTE=1 to work correctly.                           MASCOR.5     
!                                                                          MASCOR.6     
! Mike Blackburn  15/05/2000.  Original version for IGCM2.                 MASCOR.7     
!                                                                          MASCOR.8     
! Purpose.                                                                 MASCOR.9     
! --------                                                                 MASCOR.10    
!                                                                          MASCOR.11    
!   This subroutine modifies the m=0,n=0 coefficient of ln(ps)             MASCOR.12    
! to correct the mean surface pressure (total mass) at that at the         MASCOR.13    
! start of the run, preventing drift in extended integrations.             MASCOR.14    
!                                                                          MASCOR.15    
! Interface.                                                               MASCOR.16    
! ----------                                                               MASCOR.17    
!                                                                          MASCOR.18    
! MASCOR is called from the main program MLTRI.                            MASCOR.19    
! Timestep counters are stored in common BATS.                             MASCOR.20    
! Mean surface pressures and switches are stored in common STATS.          MASCOR.21    
! Spectral arrays SP,SPA are stored in common SPECTR.                      MASCOR.22    
!                                                                          MASCOR.23    
! Method.                                                                  MASCOR.24    
! -------                                                                  MASCOR.25    
!                                                                          MASCOR.26    
!   Rescale the global mean surface pressure to its initial value          MASCOR.27    
! by adding the required constant to the m=0,n=0 ln(ps) coefficient.       MASCOR.28    
! Use the time-lagged mean pressure to avoid numerical instability.        MASCOR.29    
!                                                                          MASCOR.30    
!   It is assumed there are no sources or sinks in the mass                MASCOR.31    
! continuity equation (i.e. will not work if SPA changes in the diab       MASCOR.32    
! part of the time step).                                                  MASCOR.33    
! The correction should be applied to the                                  MASCOR.34    
! mass of dry air if precip/evap mass variations were included.            MASCOR.35    
!=====================================================                     MASCOR.36    
      SUBROUTINE MASCOR                                                    MASCOR.37    
      IMPLICIT NONE                                                        MASCOR.38    
*CALL PARAM1                                                               MASCOR.39    
*CALL PARAM2                                                               MASCOR.40    
*CALL PARAM3                                                               MASCOR.41    
*CALL BATS                                                                 MASCOR.42    
*CALL SPECTR                                                               MASCOR.43    
*CALL STATS                                                                MASCOR.44    
*CALL MPIDECK                                                              MASCOR.45    
!-----------------------------------------------------                     MASCOR.46    
! Local variables                                                          MASCOR.47    
!-----------------------------------------------------                     MASCOR.48    
      REAL :: GMSP                                                         MASCOR.49    
      REAL :: ZSPRAT                                                       MASCOR.50    
      REAL :: ZLNRAT                                                       MASCOR.51    
      INTEGER :: KTEMP                                                     MASCOR.52    
      REAL :: ZSPDIF                                                       MASCOR.53    
!-----------------------------------------------------                     MASCOR.54    
! Extract the global mass.                                                 MASCOR.55    
!-----------------------------------------------------                     MASCOR.56    
      GMSP=1.0+REAL(SPA(1,1,1))/SQRT(2.0)                                  MASCOR.57    
!-----------------------------------------------------                     MASCOR.58    
! Preserve the mass at (re)start as required.                              MASCOR.59    
! Note that the timestep counter has already been incremented.             MASCOR.60    
! Pressure at start of initial run. Otherwise read in from restart file.   MASCOR.61    
!-----------------------------------------------------                     MASCOR.62    
      IF ((KOUNT.EQ.KSTART+1).AND.GMSP0.EQ.0.0) THEN                       MASCOR.63    
         GMSP0=GMSP                                                        MASCOR.64    
         GMSPMI=GMSP                                                       MASCOR.65    
         WRITE(2,6900) GMSP                                                MASCOR.66    
      ENDIF                                                                MASCOR.67    
!-----------------------------------------------------                     MASCOR.68    
! Compute correction.                                                      MASCOR.69    
!-----------------------------------------------------                     MASCOR.70    
      ZSPRAT=GMSPMI/GMSP0                                                  MASCOR.71    
      ZLNRAT=LOG(ZSPRAT)                                                   MASCOR.72    
      SP(1,1,1)=SP(1,1,1)-SQRT(2.)*CMPLX(ZLNRAT,0.)                        MASCOR.73    
!-----------------------------------------------------                     MASCOR.74    
! Print diagnostics, correcting for (KITS-1) offset.                       MASCOR.75    
!-----------------------------------------------------                     MASCOR.76    
      IF (KITS.GT.0) THEN                                                  MASCOR.77    
         KTEMP=KOUNT+1-KITS                                                MASCOR.78    
      ELSE                                                                 MASCOR.79    
         KTEMP=KOUNT                                                       MASCOR.80    
      ENDIF                                                                MASCOR.81    
      IF (LMASPRT.AND.                                                     MASCOR.82    
     :    (KTEMP.LE.(KSTART+ITSPD).OR.MOD(KTEMP,ITSPD).EQ.0)) THEN         MASCOR.83    
         ZSPDIF=GMSPMI-GMSP0                                               MASCOR.84    
*IF DEF,ONLY_V2                                                            MASCOR.85    
         WRITE(2,6901) GMSPMI,ZSPDIF,ZLNRAT,REAL(SP(1,1,1))                MASCOR.86    
*ELSE                                                                      MASCOR.87    
         WRITE(2,6901) GMSPMI,GMSP0,ZSPDIF,ZLNRAT,REAL(SP(1,1,1))          MASCOR.88    
*ENDIF                                                                     MASCOR.89    
      ENDIF                                                                MASCOR.90    
!-----------------------------------------------------                     MASCOR.91    
! Update the time-lagged mass.                                             MASCOR.92    
!-----------------------------------------------------                     MASCOR.93    
      GMSPMI=GMSP                                                          MASCOR.94    
!-----------------------------------------------------                     MASCOR.95    
! Formats.                                                                 MASCOR.96    
!-----------------------------------------------------                     MASCOR.97    
*IF DEF,ONLY_V2                                                            MASCOR.98    
 6900 FORMAT(' GLOBAL MASS RESET TO CURRENT RESTART VALUE =',1PE17.10)     MASCOR.99    
 6901 FORMAT('  PMLAG=',1PE17.10,' (LAG-REF)=',1PE17.10                    MASCOR.100   
     :      ,' LN(PS) CORR=',1PE17.10,' LN(PS)=',1PE17.10)                 MASCOR.101   
*ELSE                                                                      MASCOR.102   
 6900 FORMAT(' GLOBAL MASS RESET TO CURRENT RESTART VALUE =',1PE15.8)      MASCOR.103   
 6901 FORMAT('  PMEAN=',1PE15.8,' PM0=',1PE15.8                            MASCOR.104   
     :,' DIFF=',1PE15.8,' LN(PS) CORR=',1PE15.8,' LN(PS)=',1PE15.8)        MASCOR.105   
*ENDIF                                                                     MASCOR.106   
      RETURN                                                               MASCOR.107   
      END                                                                  MASCOR.108   
*ENDIF                                                                     MASCOR.109   
*DECK MATINV                                                               MATINV.1     
!=====================================================                     MATINV.2     
! This subroutine calculates the inverse of NxN array A.                   MATINV.3     
!                                                                          MATINV.4     
! Arguements:                                                              MATINV.5     
!                                                                          MATINV.6     
!   A     - Array of dimension (LDA,N). Contains inverse                   MATINV.7     
!           of A on exit.                                                  MATINV.8     
!   N     - Number of rows and columns of A.                               MATINV.9     
!   LDA   - Leading dimension of A.                                        MATINV.10    
!   IWORK - Integer array contains the pivot indices of A.                 MATINV.11    
!   WORK  - Real array used as workspace for SGETRI.                       MATINV.12    
!                                                                          MATINV.13    
! This subroutine replaces the Cray specific subroutine                    MATINV.14    
! MINV with portable LAPACK subroutines SGETRF and SGETRI.                 MATINV.15    
!=====================================================                     MATINV.16    
      SUBROUTINE MATINV(A,N,LDA,IWORK,WORK)                                MATINV.17    
      IMPLICIT NONE                                                        MATINV.18    
*CALL PARAM1                                                               MATINV.19    
*CALL PARAM3                                                               MATINV.20    
*CALL MPIDECK                                                              MATINV.21    
!-----------------------------------------------------                     MATINV.22    
! Local variables                                                          MATINV.23    
!-----------------------------------------------------                     MATINV.24    
      INTEGER N,LDA,IWORK(N),INFO                                          MATINV.25    
      REAL A(LDA,N),WORK(N)                                                MATINV.26    
                                                                           MATINV.27    
      CALL SGETRF(N,N,A,LDA,IWORK,INFO)                                    MATINV.28    
      IF (INFO.NE.0) THEN                                                  MATINV.29    
         IF (MYPE.EQ.0)                                                    MATINV.30    
     &        WRITE(*,*) 'Error: SGETRF returned INFO = ',INFO             MATINV.31    
         STOP                                                              MATINV.32    
      ENDIF                                                                MATINV.33    
      CALL SGETRI(N,A,LDA,IWORK,WORK,N,INFO)                               MATINV.34    
      IF (INFO.NE.0) THEN                                                  MATINV.35    
         IF (MYPE.EQ.0)                                                    MATINV.36    
     &        WRITE(*,*) 'Error: SGETRI returned INFO = ',INFO             MATINV.37    
         STOP                                                              MATINV.38    
      ENDIF                                                                MATINV.39    
C                                                                          MATINV.40    
      END                                                                  MATINV.41    
*DECK MGRMLT                                                               MGRMLT.1     
!=====================================================                     MGRMLT.2     
! Computes nonlinear tendencies in grid point space                        MGRMLT.3     
! for the present latitude                                                 MGRMLT.4     
!=====================================================                     MGRMLT.5     
      SUBROUTINE MGRMLT                                                    MGRMLT.6     
      IMPLICIT NONE                                                        MGRMLT.7     
*CALL PARAM1                                                               MGRMLT.8     
*CALL PARAM2                                                               MGRMLT.9     
*CALL PARAM3                                                               MGRMLT.10    
*CALL BLANK                                                                MGRMLT.11    
*CALL LEGAU                                                                MGRMLT.12    
*CALL GRIDPA3                                                              MGRMLT.13    
*CALL GRIDPB3                                                              MGRMLT.14    
*IF DEF,ONLY_V2                                                            MGRMLT.15    
*CALL BATS                                                                 MGRMLT.16    
*ENDIF                                                                     MGRMLT.17    
*CALL MPIDECK                                                              MGRMLT.18    
!-----------------------------------------------------                     MGRMLT.19    
! Local variables                                                          MGRMLT.20    
!-----------------------------------------------------                     MGRMLT.21    
*IF DEF,ONLY_V2                                                            MGRMLT.22    
      REAL :: SDOTP(MGx,0:NL-1)                                            MGRMLT.23    
      REAL :: SUMK(MGx)                                                    MGRMLT.24    
      REAL :: VGPG(MGx,NL)                                                 MGRMLT.25    
*ELSE                                                                      MGRMLT.26    
      REAL :: SDOTP(MGx,NL-1)                                              MGRMLT.27    
      REAL :: VGPG                                                         MGRMLT.28    
*ENDIF                                                                     MGRMLT.29    
      REAL :: SUMD(MGx)                                                    MGRMLT.30    
      REAL :: TPTA(MGx),TPTB(MGx)                                          MGRMLT.31    
      INTEGER :: K                                                         MGRMLT.32    
      REAL :: FAC, FAC2                                                    MGRMLT.33    
      REAL :: TSUM                                                         MGRMLT.34    
      REAL :: SUMD1                                                        MGRMLT.35    
! Loop variables                                                           MGRMLT.36    
      INTEGER :: I, IHEM, ITRAC, J, L, LL                                  MGRMLT.37    
*IF DEF,ONLY_V2                                                            MGRMLT.38    
      INTEGER :: KK                                                        MGRMLT.39    
*ENDIF                                                                     MGRMLT.40    
!-----------------------------------------------------                     MGRMLT.41    
! Zero VPG3                                                                MGRMLT.42    
!-----------------------------------------------------                     MGRMLT.43    
      VPG3(:,:,:)=0.0                                                      MGRMLT.44    
!-----------------------------------------------------                     MGRMLT.45    
! Loop over latitudes and hemispheres                                      MGRMLT.46    
!-----------------------------------------------------                     MGRMLT.47    
      DO J=1,JGyy(iRow)                                                    MGRMLT.48    
         DO IHEM=1,NHEM                                                    MGRMLT.49    
            !-----------------------------------------------------         MGRMLT.50    
            ! Zero arrays                                                  MGRMLT.51    
            !-----------------------------------------------------         MGRMLT.52    
            DO I=1,MGxx(iCol)                                              MGRMLT.53    
               SUMD(I)=0.0                                                 MGRMLT.54    
*IF DEF,ONLY_V2                                                            MGRMLT.55    
               SUMK(I)=0.0                                                 MGRMLT.56    
               SDOTP(I,0)=0.0                                              MGRMLT.57    
*ENDIF                                                                     MGRMLT.58    
            ENDDO                                                          MGRMLT.59    
            !-----------------------------------------------------         MGRMLT.60    
            ! Change from Ln(PSTAR) to PSTAR                               MGRMLT.61    
            !-----------------------------------------------------         MGRMLT.62    
            DO I=1,MGxx(iCol)                                              MGRMLT.63    
               SPG3(I,IHEM,J)=EXP(PLG3(I,IHEM,J))-1.0                      MGRMLT.64    
            ENDDO                                                          MGRMLT.65    
            !-----------------------------------------------------         MGRMLT.66    
            ! Set VPG3 and SDOTP                                           MGRMLT.67    
            !-----------------------------------------------------         MGRMLT.68    
*IF DEF,ONLY_V2                                                            MGRMLT.69    
            DO L=1,NL                                                      MGRMLT.70    
*ELSE                                                                      MGRMLT.71    
            DO L=1,NL-1                                                    MGRMLT.72    
*ENDIF                                                                     MGRMLT.73    
               DO I=1,MGxx(iCol)                                           MGRMLT.74    
                  SUMD(I)=SUMD(I)+DSIGMA(L)*DG3(I,IHEM,J,L)                MGRMLT.75    
*IF DEF,ONLY_V2                                                            MGRMLT.76    
                  VGPG(I,L)=SECSQ(JJ1(iRow)+J,IHEM)*                       MGRMLT.77    
     &                 (UG3(I,IHEM,J,L)*PMG3(I,IHEM,J)+                    MGRMLT.78    
     &                 VG3(I,IHEM,J,L)*PJG3(I,IHEM,J))                     MGRMLT.79    
                  VPG3(I,IHEM,J)=VPG3(I,IHEM,J)+DSIGMA(L)*                 MGRMLT.80    
     &                 VGPG(I,L)                                           MGRMLT.81    
*ELSE                                                                      MGRMLT.82    
                  VPG3(I,IHEM,J)=VPG3(I,IHEM,J)+DSIGMA(L)*                 MGRMLT.83    
     &                 SECSQ(JJ1(iRow)+J,IHEM)*                            MGRMLT.84    
     &                 (UG3(I,IHEM,J,L)*PMG3(I,IHEM,J)+                    MGRMLT.85    
     &                 VG3(I,IHEM,J,L)*PJG3(I,IHEM,J))                     MGRMLT.86    
                  SDOTP(I,L)=SUMD(I)+VPG3(I,IHEM,J)                        MGRMLT.87    
*ENDIF                                                                     MGRMLT.88    
               ENDDO                                                       MGRMLT.89    
            ENDDO                                                          MGRMLT.90    
*IF DEF,ONLY_V2                                                            MGRMLT.91    
*ELSE                                                                      MGRMLT.92    
            !-----------------------------------------------------         MGRMLT.93    
            ! Set VPG3 and SDOTP at NL                                     MGRMLT.94    
            !-----------------------------------------------------         MGRMLT.95    
            DO I=1,MGxx(iCol)                                              MGRMLT.96    
               SUMD(I)=SUMD(I)+DSIGMA(NL)*DG3(I,IHEM,J,NL)                 MGRMLT.97    
               VPG3(I,IHEM,J)=VPG3(I,IHEM,J)+DSIGMA(NL)*                   MGRMLT.98    
     &              SECSQ(JJ1(iRow)+J,IHEM)*                               MGRMLT.99    
     &              (UG3(I,IHEM,J,NL)*PMG3(I,IHEM,J)+                      MGRMLT.100   
     &              VG3(I,IHEM,J,NL)*PJG3(I,IHEM,J))                       MGRMLT.101   
            ENDDO                                                          MGRMLT.102   
*ENDIF                                                                     MGRMLT.103   
            !-----------------------------------------------------         MGRMLT.104   
            ! Set SDOTP                                                    MGRMLT.105   
            !-----------------------------------------------------         MGRMLT.106   
            DO L=1,NL-1                                                    MGRMLT.107   
               DO I=1,MGxx(iCol)                                           MGRMLT.108   
*IF DEF,ONLY_V2                                                            MGRMLT.109   
                  SUMK(I)=SUMK(I)+DSIGMA(L)*(VGPG(I,L)+DG3(I,IHEM,J,L))    MGRMLT.110   
                  SDOTP(I,L)=SIGMAH(L)*(SUMD(I)+VPG3(I,IHEM,J))-           MGRMLT.111   
     &                 SUMK(I)                                             MGRMLT.112   
*ELSE                                                                      MGRMLT.113   
                  SDOTP(I,L)=SIGMAH(L)*(SUMD(I)+VPG3(I,IHEM,J))-           MGRMLT.114   
     &                 SDOTP(I,L)                                          MGRMLT.115   
*ENDIF                                                                     MGRMLT.116   
               ENDDO                                                       MGRMLT.117   
            ENDDO                                                          MGRMLT.118   
            !-----------------------------------------------------         MGRMLT.119   
            ! Zero SUMD                                                    MGRMLT.120   
            !-----------------------------------------------------         MGRMLT.121   
            DO I=1,MGxx(iCol)                                              MGRMLT.122   
               SUMD(I)=0.0                                                 MGRMLT.123   
            ENDDO                                                          MGRMLT.124   
            !-----------------------------------------------------         MGRMLT.125   
            ! Loop over layers                                             MGRMLT.126   
            !-----------------------------------------------------         MGRMLT.127   
            DO L=1,NL                                                      MGRMLT.128   
               !-----------------------------------------------------      MGRMLT.129   
               ! Zero TPTA and TPTB                                        MGRMLT.130   
               !-----------------------------------------------------      MGRMLT.131   
               DO I=1,MGxx(iCol)                                           MGRMLT.132   
                  TPTA(I)=0.0                                              MGRMLT.133   
                  TPTB(I)=0.0                                              MGRMLT.134   
               ENDDO                                                       MGRMLT.135   
               !-----------------------------------------------------      MGRMLT.136   
               !                                                           MGRMLT.137   
               !-----------------------------------------------------      MGRMLT.138   
               DO LL=1,L                                                   MGRMLT.139   
                  DO I=1,MGxx(iCol)                                        MGRMLT.140   
*IF DEF,ONLY_V2                                                            MGRMLT.141   
                     TPTA(I)=TPTA(I)+C(LL,L)*VGPG(I,LL)                    MGRMLT.142   
                     TPTB(I)=TPTB(I)+C(LL,L)*                              MGRMLT.143   
     &                    (VGPG(I,LL)+DG3(I,IHEM,J,LL))                    MGRMLT.144   
*ELSE                                                                      MGRMLT.145   
                     VGPG=SECSQ(JJ1(iRow)+J,IHEM)*(UG3(I,IHEM,J,LL)*       MGRMLT.146   
     &                    PMG3(I,IHEM,J)+                                  MGRMLT.147   
     &                    VG3(I,IHEM,J,LL)*PJG3(I,IHEM,J))                 MGRMLT.148   
                     TPTA(I)=TPTA(I)+C(LL,L)*VGPG                          MGRMLT.149   
                     TPTB(I)=TPTB(I)+C(LL,L)*(VGPG+DG3(I,IHEM,J,LL))       MGRMLT.150   
*ENDIF                                                                     MGRMLT.151   
                  ENDDO                                                    MGRMLT.152   
               ENDDO                                                       MGRMLT.153   
               !-----------------------------------------------------      MGRMLT.154   
               !                                                           MGRMLT.155   
               !-----------------------------------------------------      MGRMLT.156   
               DO I=1,MGxx(iCol)                                           MGRMLT.157   
                  UTG3(I,IHEM,J,L)=UG3(I,IHEM,J,L)*TG3(I,IHEM,J,L)         MGRMLT.158   
                  VTG3(I,IHEM,J,L)=VG3(I,IHEM,J,L)*TG3(I,IHEM,J,L)         MGRMLT.159   
                  EG3(I,IHEM,J,L)=UG3(I,IHEM,J,L)*UG3(I,IHEM,J,L)+         MGRMLT.160   
     &                 VG3(I,IHEM,J,L)*VG3(I,IHEM,J,L)                     MGRMLT.161   
               ENDDO                                                       MGRMLT.162   
*IF DEF,ONLY_V3                                                            MGRMLT.163   
               !-----------------------------------------------------      MGRMLT.164   
               ! UTRAC and VTRAC tracer terms                              MGRMLT.165   
               !-----------------------------------------------------      MGRMLT.166   
               DO ITRAC=1,NTRAC                                            MGRMLT.167   
                  DO I=1,MGxx(iCol)                                        MGRMLT.168   
                     UTRAG3(I,IHEM,J,L,ITRAC)=UG3(I,IHEM,J,L)*             MGRMLT.169   
     &                    TRAG3(I,IHEM,J,L,ITRAC)                          MGRMLT.170   
                     VTRAG3(I,IHEM,J,L,ITRAC)=VG3(I,IHEM,J,L)*             MGRMLT.171   
     &                    TRAG3(I,IHEM,J,L,ITRAC)                          MGRMLT.172   
                  ENDDO                                                    MGRMLT.173   
               ENDDO                                                       MGRMLT.174   
*ENDIF                                                                     MGRMLT.175   
               !-----------------------------------------------------      MGRMLT.176   
               ! Treat top and bottom differently                          MGRMLT.177   
               !-----------------------------------------------------      MGRMLT.178   
               IF (L.GT.1.AND.L.LT.NL) THEN                                MGRMLT.179   
                  DO I=1,MGxx(iCol)                                        MGRMLT.180   
*IF DEF,ONLY_V2                                                            MGRMLT.181   
                     SUMD(I)=SUMD(I)+VGPG(I,L)*DSIGMA(L)                   MGRMLT.182   
*ELSE                                                                      MGRMLT.183   
                     TSUM=SECSQ(JJ1(iRow)+J,IHEM)*(UG3(I,IHEM,J,L)*        MGRMLT.184   
     &                    PMG3(I,IHEM,J)+                                  MGRMLT.185   
     &                    VG3(I,IHEM,J,L)*PJG3(I,IHEM,J))                  MGRMLT.186   
                     SUMD(I)=SUMD(I)+TSUM*DSIGMA(L)                        MGRMLT.187   
*ENDIF                                                                     MGRMLT.188   
                     TNLG3(I,IHEM,J,L)=TG3(I,IHEM,J,L)*DG3(I,IHEM,J,L)+    MGRMLT.189   
*IF DEF,ONLY_V2                                                            MGRMLT.190   
     1                 AKAP*TG3(I,IHEM,J,L)*(VGPG(I,L)-TPTB(I))+           MGRMLT.191   
     2                    TKP(L)*(VGPG(I,L)-TPTA(I))-RDSIG(L)*             MGRMLT.192   
*ELSE                                                                      MGRMLT.193   
     1                 AKAP*TG3(I,IHEM,J,L)*(TSUM-TPTB(I))+                MGRMLT.194   
     2                    TKP(L)*(TSUM-TPTA(I))-RDSIG(L)*                  MGRMLT.195   
*ENDIF                                                                     MGRMLT.196   
     3                 (SDOTP(I,L)*(TG3(I,IHEM,J,L+1)-TG3(I,IHEM,J,L))+    MGRMLT.197   
     4                    SDOTP(I,L-1)*(TG3(I,IHEM,J,L)-                   MGRMLT.198   
     5                    TG3(I,IHEM,J,L-1))+VPG3(I,IHEM,J)*               MGRMLT.199   
     6                    (T01S2(L)*SIGMAH(L)+T01S2(L-1)*SIGMAH(L-1))-     MGRMLT.200   
     7                    SUMD(I)*(T01S2(L-1)+T01S2(L))+                   MGRMLT.201   
*IF DEF,ONLY_V2                                                            MGRMLT.202   
     8                    VGPG(I,L)*DSIGMA(L)*T01S2(L-1))                  MGRMLT.203   
*ELSE                                                                      MGRMLT.204   
     8                    TSUM*DSIGMA(L)*T01S2(L-1))                       MGRMLT.205   
*ENDIF                                                                     MGRMLT.206   
                     FVG3(I,IHEM,J,L)=-UG3(I,IHEM,J,L)*ZG3(I,IHEM,J,L)-    MGRMLT.207   
     1                    PJG3(I,IHEM,J)*TG3(I,IHEM,J,L)-                  MGRMLT.208   
     2                    RDSIG(L)*(SDOTP(I,L)*                            MGRMLT.209   
     3                    (VG3(I,IHEM,J,L+1)-VG3(I,IHEM,J,L))+             MGRMLT.210   
     4                    SDOTP(I,L-1)*(VG3(I,IHEM,J,L)-                   MGRMLT.211   
     5                    VG3(I,IHEM,J,L-1)))                              MGRMLT.212   
                     FUG3(I,IHEM,J,L)=VG3(I,IHEM,J,L)*ZG3(I,IHEM,J,L)-     MGRMLT.213   
     1                    PMG3(I,IHEM,J)*TG3(I,IHEM,J,L)-RDSIG(L)*         MGRMLT.214   
     2                    (SDOTP(I,L)*(UG3(I,IHEM,J,L+1)-                  MGRMLT.215   
     3                    UG3(I,IHEM,J,L))+SDOTP(I,L-1)*                   MGRMLT.216   
     4                    (UG3(I,IHEM,J,L)-UG3(I,IHEM,J,L-1)))             MGRMLT.217   
                  ENDDO                                                    MGRMLT.218   
*IF DEF,ONLY_V3                                                            MGRMLT.219   
                  !---------------------------------------------------     MGRMLT.220   
                  ! TRANLG tracer term                                     MGRMLT.221   
                  !---------------------------------------------------     MGRMLT.222   
                  IF (.NOT.LFLUX) THEN                                     MGRMLT.223   
                     DO ITRAC=1,NTRAC                                      MGRMLT.224   
                        DO I=1,MGxx(iCol)                                  MGRMLT.225   
                           TRANLG3(I,IHEM,J,L,ITRAC)=                      MGRMLT.226   
     1                          TRAG3(I,IHEM,J,L,ITRAC)*DG3(I,IHEM,J,L)    MGRMLT.227   
     2                          -RDSIG(L)*(SDOTP(I,L)*                     MGRMLT.228   
     3                          (TRAG3(I,IHEM,J,L+1,ITRAC)-                MGRMLT.229   
     4                          TRAG3(I,IHEM,J,L,ITRAC))+SDOTP(I,L-1)*(    MGRMLT.230   
     5                          TRAG3(I,IHEM,J,L,ITRAC)-                   MGRMLT.231   
     6                          TRAG3(I,IHEM,J,L-1,ITRAC)))                MGRMLT.232   
                        ENDDO                                              MGRMLT.233   
                     ENDDO                                                 MGRMLT.234   
                  ELSE                                                     MGRMLT.235   
                     DO ITRAC=1,NTRAC                                      MGRMLT.236   
                        DO I=1,MGxx(iCol)                                  MGRMLT.237   
                           TRANLG3(I,IHEM,J,L,ITRAC)=RDSIG(L)*(            MGRMLT.238   
     1                          SDOTP(I,L)*(TRAG3(I,IHEM,J,L+1,ITRAC)+     MGRMLT.239   
     2                          TRAG3(I,IHEM,J,L,ITRAC))-SDOTP(I,L-1)*(    MGRMLT.240   
     3                          TRAG3(I,IHEM,J,L,ITRAC)+                   MGRMLT.241   
     4                          TRAG3(I,IHEM,J,L-1,ITRAC)))                MGRMLT.242   
                        ENDDO                                              MGRMLT.243   
                     ENDDO                                                 MGRMLT.244   
                  ENDIF                                                    MGRMLT.245   
*ENDIF                                                                     MGRMLT.246   
               ELSE                                                        MGRMLT.247   
                  !---------------------------------------------------     MGRMLT.248   
                  ! Top and bottom layers                                  MGRMLT.249   
                  !---------------------------------------------------     MGRMLT.250   
                  FAC=1.0                                                  MGRMLT.251   
                  FAC2=1.                                                  MGRMLT.252   
                  K=L                                                      MGRMLT.253   
                  IF (L.EQ.NL) THEN                                        MGRMLT.254   
                     K=L-1                                                 MGRMLT.255   
                     FAC=0.0                                               MGRMLT.256   
                     FAC2=-1.                                              MGRMLT.257   
                  ENDIF                                                    MGRMLT.258   
                  DO I=1,MGxx(iCol)                                        MGRMLT.259   
*IF DEF,ONLY_V2                                                            MGRMLT.260   
                     SUMD(I)=SUMD(I)+VGPG(I,L)*DSIGMA(L)*FAC               MGRMLT.261   
*ELSE                                                                      MGRMLT.262   
                     TSUM=SECSQ(JJ1(iRow)+J,IHEM)*(UG3(I,IHEM,J,L)*        MGRMLT.263   
     &                    PMG3(I,IHEM,J)+                                  MGRMLT.264   
     &                    VG3(I,IHEM,J,L)*PJG3(I,IHEM,J))                  MGRMLT.265   
                     SUMD(I)=SUMD(I)+TSUM*DSIGMA(L)*FAC                    MGRMLT.266   
*ENDIF                                                                     MGRMLT.267   
                     TNLG3(I,IHEM,J,L)=TG3(I,IHEM,J,L)*DG3(I,IHEM,J,L)+    MGRMLT.268   
*IF DEF,ONLY_V2                                                            MGRMLT.269   
     1                    AKAP*TG3(I,IHEM,J,L)*(VGPG(I,L)-TPTB(I))+        MGRMLT.270   
     2                    TKP(L)*(VGPG(I,L)-TPTA(I))-RDSIG(L)*             MGRMLT.271   
*ELSE                                                                      MGRMLT.272   
     1                    AKAP*TG3(I,IHEM,J,L)*(TSUM-TPTB(I))+             MGRMLT.273   
     2                    TKP(L)*(TSUM-TPTA(I))-RDSIG(L)*                  MGRMLT.274   
*ENDIF                                                                     MGRMLT.275   
     3                    (SDOTP(I,K)*(TG3(I,IHEM,J,K+1)-                  MGRMLT.276   
     4                    TG3(I,IHEM,J,K))+T01S2(K)*                       MGRMLT.277   
     5                    (SIGMAH(K)*VPG3(I,IHEM,J)-SUMD(I)))              MGRMLT.278   
                     FVG3(I,IHEM,J,L)=-UG3(I,IHEM,J,L)*ZG3(I,IHEM,J,L)-    MGRMLT.279   
     &                    PJG3(I,IHEM,J)*TG3(I,IHEM,J,L)-RDSIG(L)*         MGRMLT.280   
     &                    (SDOTP(I,K)*(VG3(I,IHEM,J,K+1)-                  MGRMLT.281   
     &                    VG3(I,IHEM,J,K)))                                MGRMLT.282   
                     FUG3(I,IHEM,J,L)=VG3(I,IHEM,J,L)*ZG3(I,IHEM,J,L)-     MGRMLT.283   
     &                    PMG3(I,IHEM,J)*TG3(I,IHEM,J,L)-                  MGRMLT.284   
     &                    RDSIG(L)*(SDOTP(I,K)*                            MGRMLT.285   
     &                    (UG3(I,IHEM,J,K+1)-UG3(I,IHEM,J,K)))             MGRMLT.286   
                  ENDDO                                                    MGRMLT.287   
*IF DEF,ONLY_V3                                                            MGRMLT.288   
                  !---------------------------------------------------     MGRMLT.289   
                  ! TRANLG tracer term                                     MGRMLT.290   
                  !---------------------------------------------------     MGRMLT.291   
                  IF (.NOT.LFLUX) THEN                                     MGRMLT.292   
                     DO ITRAC=1,NTRAC                                      MGRMLT.293   
                        DO I=1,MGxx(iCol)                                  MGRMLT.294   
                           TRANLG3(I,IHEM,J,L,ITRAC)=                      MGRMLT.295   
     1                          TRAG3(I,IHEM,J,L,ITRAC)*DG3(I,IHEM,J,L)    MGRMLT.296   
     2                          -RDSIG(L)*SDOTP(I,K)*                      MGRMLT.297   
     3                          (TRAG3(I,IHEM,J,K+1,ITRAC)-                MGRMLT.298   
     4                          TRAG3(I,IHEM,J,K,ITRAC))                   MGRMLT.299   
                        ENDDO                                              MGRMLT.300   
                     ENDDO                                                 MGRMLT.301   
                  ELSE                                                     MGRMLT.302   
                     DO ITRAC=1,NTRAC                                      MGRMLT.303   
                        DO I=1,MGxx(iCol)                                  MGRMLT.304   
                           TRANLG3(I,IHEM,J,L,ITRAC)=RDSIG(L)*FAC2*        MGRMLT.305   
     1                          SDOTP(I,K)*(TRAG3(I,IHEM,J,K+1,ITRAC)+     MGRMLT.306   
     2                          TRAG3(I,IHEM,J,K,ITRAC))                   MGRMLT.307   
                       ENDDO                                               MGRMLT.308   
                     ENDDO                                                 MGRMLT.309   
                  ENDIF                                                    MGRMLT.310   
*ENDIF                                                                     MGRMLT.311   
               ENDIF                                                       MGRMLT.312   
            ENDDO                                                          MGRMLT.313   
*IF DEF,ONLY_V2                                                            MGRMLT.314   
            !---------------------------------------------------           MGRMLT.315   
            ! Tracer vertical advection or flux.                           MGRMLT.316   
            !---------------------------------------------------           MGRMLT.317   
            IF (NTRVAD.EQ.1) THEN                                          MGRMLT.318   
               CALL VADV1(TRAG3,TRANLG3,SDOTP,NTRAC,IHEM,J)                MGRMLT.319   
            ELSE IF (NTRVAD.EQ.2) THEN                                     MGRMLT.320   
               CALL VADV2(TRAG3,TRAGMI3,TRANLG3,SDOTP,NTRAC,IHEM,J)        MGRMLT.321   
            ELSE IF (NTRVAD.EQ.3) THEN                                     MGRMLT.322   
               CALL VADV3(TRAG3,TRAGMI3,TRANLG3,SDOTP,NTRAC,IHEM,J)        MGRMLT.323   
            ELSE                                                           MGRMLT.324   
               WRITE(2,'('' ***ABORT: NTRVAD INVALID'')')                  MGRMLT.325   
               CALL ABORT                                                  MGRMLT.326   
            ENDIF                                                          MGRMLT.327   
            !---------------------------------------------------           MGRMLT.328   
            ! Remaining tracer advection or flux terms.                    MGRMLT.329   
            ! Update time-lagged tracers for next step, avoiding           MGRMLT.330   
            ! initial short steps, when the lagged state is not updated,   MGRMLT.331   
            ! and the final step, before writing the final restart         MGRMLT.332   
            ! state.                                                       MGRMLT.333   
            !---------------------------------------------------           MGRMLT.334   
            DO KK=1,NTRAC                                                  MGRMLT.335   
               DO L=1,NL                                                   MGRMLT.336   
                  IF (.NOT.LFLUX) THEN                                     MGRMLT.337   
                     DO I=1,MGxx(iCol)                                     MGRMLT.338   
                        TRANLG3(I,IHEM,J,L,KK)=TRANLG3(I,IHEM,J,L,KK)+     MGRMLT.339   
     &                       TRAG3(I,IHEM,J,L,KK)*DG3(I,IHEM,J,L)          MGRMLT.340   
                     ENDDO                                                 MGRMLT.341   
                  ENDIF                                                    MGRMLT.342   
                  DO I=1,MGxx(iCol)                                        MGRMLT.343   
                     UTRAG3(I,IHEM,J,L,KK)=UG3(I,IHEM,J,L)*                MGRMLT.344   
     &                    TRAG3(I,IHEM,J,L,KK)                             MGRMLT.345   
                     VTRAG3(I,IHEM,J,L,KK)=VG3(I,IHEM,J,L)*                MGRMLT.346   
     &                    TRAG3(I,IHEM,J,L,KK)                             MGRMLT.347   
                  ENDDO                                                    MGRMLT.348   
                  IF (NTRVAD.GT.1                                          MGRMLT.349   
     &                 .AND.KOUNT.GE.KITS.AND.KOUNT.NE.KTOTAL) THEN        MGRMLT.350   
                     DO I=1,MGxx(iCol)                                     MGRMLT.351   
                        TRAGMI3(I,IHEM,J,L,KK)=TRAG3(I,IHEM,J,L,KK)        MGRMLT.352   
                     ENDDO                                                 MGRMLT.353   
                  ENDIF                                                    MGRMLT.354   
               ENDDO                                                       MGRMLT.355   
            ENDDO                                                          MGRMLT.356   
*ENDIF                                                                     MGRMLT.357   
         ENDDO                                                             MGRMLT.358   
      ENDDO                                                                MGRMLT.359   
      RETURN                                                               MGRMLT.360   
      END                                                                  MGRMLT.361   
*DECK NOISE                                                                NOISE.1     
!=====================================================                     NOISE.2     
! Adds white noise perturbation to ln(surface pressure)                    NOISE.3     
! balanced initial state at T=0.                                           NOISE.4     
!=====================================================                     NOISE.5     
      SUBROUTINE NOISE                                                     NOISE.6     
      IMPLICIT NONE                                                        NOISE.7     
*CALL PARAM1                                                               NOISE.8     
*CALL PARAM2                                                               NOISE.9     
*CALL PARAM3                                                               NOISE.10    
*CALL SPECTR                                                               NOISE.11    
*CALL OUTCON                                                               NOISE.12    
*CALL MPIDECK                                                              NOISE.13    
!-----------------------------------------------------                     NOISE.14    
! External function                                                        NOISE.15    
!-----------------------------------------------------                     NOISE.16    
      REAL, EXTERNAL :: RANF                                               NOISE.17    
!-----------------------------------------------------                     NOISE.18    
! Local variables                                                          NOISE.19    
!-----------------------------------------------------                     NOISE.20    
      REAL :: EPS                                                          NOISE.21    
      REAL :: SCALE                                                        NOISE.22    
      INTEGER :: IDUM                                                      NOISE.23    
      COMPLEX, ALLOCATABLE :: RanNumbers(:,:,:)                            NOISE.24    
      COMPLEX :: HoldVar(NNTx, MMTy, NHEM)                                 NOISE.25    
      INTEGER, PARAMETER :: TagRef=700                                     NOISE.26    
      INTEGER :: iCol2, iRow2                                              NOISE.27    
      INTEGER :: IN1                                                       NOISE.28    
      REAL :: RAN1, RAN2                                                   NOISE.29    
! Loop variables                                                           NOISE.30    
      INTEGER :: IHEM, IM, IN, iPe                                         NOISE.31    
  200 FORMAT(' WHITE NOISE SURFACE PRESSURE PERTURBATION AT T=0'/)         NOISE.32    
!-----------------------------------------------------                     NOISE.33    
! Generate all the random numbers on PE 0                                  NOISE.34    
!-----------------------------------------------------                     NOISE.35    
      IF (MYPE.EQ.0) THEN                                                  NOISE.36    
         WRITE (2,200)                                                     NOISE.37    
         ALLOCATE(RanNumbers(NNT,MMT,NHEM))                                NOISE.38    
         EPS=1.E-4                                                         NOISE.39    
         SCALE=EPS/SQRT(2.0)                                               NOISE.40    
         IDUM=-1                                                           NOISE.41    
         !-----------------------------------------------------            NOISE.42    
         ! Don't add random number for first zonal wavenumber              NOISE.43    
         !-----------------------------------------------------            NOISE.44    
         RanNumbers(1:IDM,1,:)=0.0                                         NOISE.45    
         !-----------------------------------------------------            NOISE.46    
         ! Generate random number for the other zonal wavenumbers          NOISE.47    
         !-----------------------------------------------------            NOISE.48    
         DO IHEM=1,NHEM                                                    NOISE.49    
            DO IM=1,MMT                                                    NOISE.50    
               IF (IM.EQ.1) THEN                                           NOISE.51    
                  IN1=IDM                                                  NOISE.52    
               ELSE                                                        NOISE.53    
                  IN1=1                                                    NOISE.54    
               ENDIF                                                       NOISE.55    
               DO IN=IN1,NNT                                               NOISE.56    
                  CALL RANDOM_NUMBER(RAN1)                                 NOISE.57    
                  CALL RANDOM_NUMBER(RAN2)                                 NOISE.58    
                  RanNumbers(IN,IM,IHEM)=SCALE*                            NOISE.59    
     &                 CMPLX(RAN1-0.5,RAN2-0.5)                            NOISE.60    
               ENDDO                                                       NOISE.61    
            ENDDO                                                          NOISE.62    
         ENDDO                                                             NOISE.63    
         !-----------------------------------------------------            NOISE.64    
         ! Add the randon numbers intended for PE 0                        NOISE.65    
         !-----------------------------------------------------            NOISE.66    
         DO IHEM=1,NHEM                                                    NOISE.67    
            DO IM=1,MMTyy(iRow)                                            NOISE.68    
               DO IN=1,NNTxx(iCol)                                         NOISE.69    
                  SP(IN,IM,IHEM)=SP(IN,IM,IHEM)+RanNumbers(IN,IM,IHEM)     NOISE.70    
               ENDDO                                                       NOISE.71    
            ENDDO                                                          NOISE.72    
         ENDDO                                                             NOISE.73    
         !-----------------------------------------------------            NOISE.74    
         ! Send random number to other PEs                                 NOISE.75    
         !-----------------------------------------------------            NOISE.76    
         IF (NPE.GT.1) THEN                                                NOISE.77    
            DO iPe=1,NPE-1                                                 NOISE.78    
               !-----------------------------------------------------      NOISE.79    
               ! Store data for PE iPe in HoldVar                          NOISE.80    
               !-----------------------------------------------------      NOISE.81    
               iCol2=GRID(1,iPe)                                           NOISE.82    
               iRow2=GRID(2,iPe)                                           NOISE.83    
               DO IHEM=1,NHEM                                              NOISE.84    
                  DO IM=1,MMTyy(iRow2)                                     NOISE.85    
                     DO IN=1,NNTxx(iCol2)                                  NOISE.86    
                        HoldVar(IN,IM,IHEM)=                               NOISE.87    
     &                    RanNumbers(NNT1(iCol2)+IN,MMT1(iRow2)+IM,IHEM)   NOISE.88    
                     ENDDO                                                 NOISE.89    
                  ENDDO                                                    NOISE.90    
               ENDDO                                                       NOISE.91    
               !-----------------------------------------------------      NOISE.92    
               ! Send random number to other PEs                           NOISE.93    
               !-----------------------------------------------------      NOISE.94    
               iRecv=iPe                                                   NOISE.95    
               nBuffSize=NNTx*MMTy*NHEM                                    NOISE.96    
               iTag=TagRef+iPe                                             NOISE.97    
               CALL MPI_BSEND(HoldVar, nBuffSize, ParaCom, iRecv,          NOISE.98    
     &              iTag, MPI_COMM_WORLD, ierr)                            NOISE.99    
            ENDDO                                                          NOISE.100   
         ENDIF                                                             NOISE.101   
         DEALLOCATE(RanNumbers)                                            NOISE.102   
      ELSE                                                                 NOISE.103   
         !-----------------------------------------------------            NOISE.104   
         ! Receive data from PE 0                                          NOISE.105   
         !-----------------------------------------------------            NOISE.106   
         iSend=0                                                           NOISE.107   
         nBuffSize=NNTx*MMTy*NHEM                                          NOISE.108   
         iTag=TagRef+MyPe                                                  NOISE.109   
         CALL MPI_RECV(HoldVar, nBuffSize, ParaCom, iSend,                 NOISE.110   
     &        iTag, MPI_COMM_WORLD, istat, ierr)                           NOISE.111   
         !-----------------------------------------------------            NOISE.112   
         ! Add random numbers to surface pressure                          NOISE.113   
         !-----------------------------------------------------            NOISE.114   
         DO IHEM=1,NHEM                                                    NOISE.115   
            DO IM=1,MMTyy(iRow)                                            NOISE.116   
               DO IN=1,NNTxx(iCol)                                         NOISE.117   
                  SP(IN,IM,IHEM)=SP(IN,IM,IHEM)+HoldVar(IN,IM,IHEM)        NOISE.118   
               ENDDO                                                       NOISE.119   
            ENDDO                                                          NOISE.120   
         ENDDO                                                             NOISE.121   
      ENDIF                                                                NOISE.122   
!-----------------------------------------------------                     NOISE.123   
! The old log of surface pressure is set the new surface pressure for      NOISE.124   
! every zonal wavenumber except the first.                                 NOISE.125   
!-----------------------------------------------------                     NOISE.126   
      DO IHEM=1,NHEM                                                       NOISE.127   
         DO IM=1,MMTyy(iRow)                                               NOISE.128   
            IF ( (iRow.EQ.1).AND.(IM.EQ.1) ) THEN                          NOISE.129   
               IN1=MAX(1,IDM-NNT1(iCol))                                   NOISE.130   
            ELSE                                                           NOISE.131   
               IN1=1                                                       NOISE.132   
            ENDIF                                                          NOISE.133   
            DO IN=IN1,NNTxx(iCol)                                          NOISE.134   
               SPMI(IN,IM,IHEM)=SP(IN,IM,IHEM)                             NOISE.135   
            ENDDO                                                          NOISE.136   
         ENDDO                                                             NOISE.137   
      ENDDO                                                                NOISE.138   
C                                                                          NOISE.139   
      RETURN                                                               NOISE.140   
      END                                                                  NOISE.141   
*DECK NOMPI                                                                NOMPI.1     
*IF DEF,NOMPI                                                              NOMPI.2     
!=====================================================                     NOMPI.3     
! Fortran stubs for MPI routines. These routines should never              NOMPI.4     
! be called, they are purely to enable the code to compile.                NOMPI.5     
!=====================================================                     NOMPI.6     
      subroutine MPI_INIT(ierr)                                            NOMPI.7     
!=====================================================                     NOMPI.8     
*CALL NOMPIVAR                                                             NOMPI.9     
!-----------------------------------------------------                     NOMPI.10    
! Error message                                                            NOMPI.11    
!-----------------------------------------------------                     NOMPI.12    
      print*,'ERROR: this routine (MPI_INIT) should ',                     NOMPI.13    
     &     'never be called for single PE run.'                            NOMPI.14    
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.15    
     &     'run.'                                                          NOMPI.16    
      CALL ABORT                                                           NOMPI.17    
      end                                                                  NOMPI.18    
!=====================================================                     NOMPI.19    
      subroutine MPI_COMM_SIZE(MPI_COMM_WORLD, size, ierr)                 NOMPI.20    
!=====================================================                     NOMPI.21    
*CALL NOMPIVAR                                                             NOMPI.22    
!-----------------------------------------------------                     NOMPI.23    
! Error message                                                            NOMPI.24    
!-----------------------------------------------------                     NOMPI.25    
      print*,'ERROR: this routine (MPI_COMM_SIZE) should ',                NOMPI.26    
     &     'never be called for single PE run.'                            NOMPI.27    
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.28    
     &     'run.'                                                          NOMPI.29    
      CALL ABORT                                                           NOMPI.30    
      end                                                                  NOMPI.31    
!=====================================================                     NOMPI.32    
      subroutine MPI_COMM_RANK(MPI_COMM_WORLD, MyPe, ierr)                 NOMPI.33    
!=====================================================                     NOMPI.34    
*CALL NOMPIVAR                                                             NOMPI.35    
!-----------------------------------------------------                     NOMPI.36    
! Error message                                                            NOMPI.37    
!-----------------------------------------------------                     NOMPI.38    
      print*,'ERROR: this routine (MPI_COMM_RANK) should ',                NOMPI.39    
     &     'never be called for single PE run.'                            NOMPI.40    
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.41    
     &     'run.'                                                          NOMPI.42    
      CALL ABORT                                                           NOMPI.43    
      end                                                                  NOMPI.44    
!=====================================================                     NOMPI.45    
      subroutine MPI_BUFFER_ATTACH(BsendBuffer, BufferSize, ierr)          NOMPI.46    
!=====================================================                     NOMPI.47    
*CALL NOMPIVAR                                                             NOMPI.48    
!-----------------------------------------------------                     NOMPI.49    
! Error message                                                            NOMPI.50    
!-----------------------------------------------------                     NOMPI.51    
      print*,'ERROR: this routine (MPI_BUFFER_ATTACH) should ',            NOMPI.52    
     &     'never be called for single PE run.'                            NOMPI.53    
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.54    
     &     'run.'                                                          NOMPI.55    
      CALL ABORT                                                           NOMPI.56    
      end                                                                  NOMPI.57    
!=====================================================                     NOMPI.58    
      subroutine MPI_BCAST(Buffer, nBuffSize, ParaType, iSend,             NOMPI.59    
     &     MPI_COMM_WORLD, ierr)                                           NOMPI.60    
!=====================================================                     NOMPI.61    
*CALL NOMPIVAR                                                             NOMPI.62    
!-----------------------------------------------------                     NOMPI.63    
! Error message                                                            NOMPI.64    
!-----------------------------------------------------                     NOMPI.65    
      print*,'ERROR: this routine (MPI_BCAST) should ',                    NOMPI.66    
     &     'never be called for single PE run.'                            NOMPI.67    
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.68    
     &     'run.'                                                          NOMPI.69    
      CALL ABORT                                                           NOMPI.70    
      end                                                                  NOMPI.71    
!=====================================================                     NOMPI.72    
      subroutine MPI_BARRIER(MPI_COMM_WORLD, ierr)                         NOMPI.73    
!=====================================================                     NOMPI.74    
      print*,'ERROR: this routine (MPI_BARRIER) should ',                  NOMPI.75    
     &     'never be called for single PE run.'                            NOMPI.76    
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.77    
     &     'run.'                                                          NOMPI.78    
      CALL ABORT                                                           NOMPI.79    
      end                                                                  NOMPI.80    
!=====================================================                     NOMPI.81    
      subroutine MPI_BSEND(array, nBuffSize, ParaType, iRecv, iTag,        NOMPI.82    
     &     MPI_COMM_WORLD, ierr)                                           NOMPI.83    
!=====================================================                     NOMPI.84    
*CALL NOMPIVAR                                                             NOMPI.85    
      REAL :: array(nBuffSize)                                             NOMPI.86    
!-----------------------------------------------------                     NOMPI.87    
! Error message                                                            NOMPI.88    
!-----------------------------------------------------                     NOMPI.89    
      print*,'ERROR: this routine (MPI_BSEND) should ',                    NOMPI.90    
     &     'never be called for single PE run.'                            NOMPI.91    
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.92    
     &     'run.'                                                          NOMPI.93    
      CALL ABORT                                                           NOMPI.94    
      end                                                                  NOMPI.95    
!=====================================================                     NOMPI.96    
      subroutine MPI_RECV(array, nBuffSize, ParaType, iSend, iTag,         NOMPI.97    
     &     MPI_COMM_WORLD, istat, ierr)                                    NOMPI.98    
!=====================================================                     NOMPI.99    
*CALL NOMPIVAR                                                             NOMPI.100   
      REAL :: array(nBuffSize)                                             NOMPI.101   
!-----------------------------------------------------                     NOMPI.102   
! Error message                                                            NOMPI.103   
!-----------------------------------------------------                     NOMPI.104   
      print*,'ERROR: this routine (MPI_RECV) should ',                     NOMPI.105   
     &     'never be called for single PE run.'                            NOMPI.106   
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.107   
     &     'run.'                                                          NOMPI.108   
      CALL ABORT                                                           NOMPI.109   
      end                                                                  NOMPI.110   
!=====================================================                     NOMPI.111   
      subroutine MPI_ALLREDUCE(array, array2, nBuffSize, ParaType,         NOMPI.112   
     &     Op, MPI_COMM_WORLD, ierr)                                       NOMPI.113   
!=====================================================                     NOMPI.114   
*CALL NOMPIVAR                                                             NOMPI.115   
      REAL :: array(nBuffSize)                                             NOMPI.116   
      REAL :: array2(nBuffSize)                                            NOMPI.117   
!-----------------------------------------------------                     NOMPI.118   
! Error message                                                            NOMPI.119   
!-----------------------------------------------------                     NOMPI.120   
      print*,'ERROR: this routine (MPI_ALLREDUCE) should ',                NOMPI.121   
     &     'never be called for single PE run.'                            NOMPI.122   
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.123   
     &     'run.'                                                          NOMPI.124   
      CALL ABORT                                                           NOMPI.125   
      end                                                                  NOMPI.126   
!=====================================================                     NOMPI.127   
      subroutine MPI_FINALIZE(ierr)                                        NOMPI.128   
!=====================================================                     NOMPI.129   
*CALL NOMPIVAR                                                             NOMPI.130   
!-----------------------------------------------------                     NOMPI.131   
! Error message                                                            NOMPI.132   
!-----------------------------------------------------                     NOMPI.133   
      print*,'ERROR: this routine (MPI_FINALIZE) should ',                 NOMPI.134   
     &     'never be called for single PE run.'                            NOMPI.135   
      print*,'Remove *IF DEF,NOMPI if this is a multi-processor ',         NOMPI.136   
     &     'run.'                                                          NOMPI.137   
      CALL ABORT                                                           NOMPI.138   
      end                                                                  NOMPI.139   
*ENDIF                                                                     NOMPI.140   
*DECK O3INTERP                                                             O3INTERP.1     
*IF DEF,ONLY_V3                                                            O3INTERP.2     
!=====================================================                     O3INTERP.3     
! This subroutine takes in a profile from climatology (o3clim) and         O3INTERP.4     
! interpolates to the model vertical grid (nl.gt.15), computing the        O3INTERP.5     
! model profile by constraining its column to agree with climatology.      O3INTERP.6     
! The model profile is passed back in o3mod.                               O3INTERP.7     
! N.B. The o3clim passed to the routine must be on the pressure levels     O3INTERP.8     
! defined in the routine (ocliml).                                         O3INTERP.9     
!=====================================================                     O3INTERP.10    
      SUBROUTINE O3INTERP(o3clim,o3mod,ps)                                 O3INTERP.11    
      IMPLICIT NONE                                                        O3INTERP.12    
*CALL PARAM1                                                               O3INTERP.13    
*CALL PARAM2                                                               O3INTERP.14    
*CALL BLANK                                                                O3INTERP.15    
!-----------------------------------------------------                     O3INTERP.16    
! Passed variables                                                         O3INTERP.17    
!-----------------------------------------------------                     O3INTERP.18    
      REAL :: o3clim(15)                                                   O3INTERP.19    
      REAL :: o3mod(nl)                                                    O3INTERP.20    
      REAL :: ps                                                           O3INTERP.21    
!-----------------------------------------------------                     O3INTERP.22    
! Local variables                                                          O3INTERP.23    
!-----------------------------------------------------                     O3INTERP.24    
      REAL :: rhoo3                                                        O3INTERP.25    
      REAL :: GR                                                           O3INTERP.26    
      REAL :: col                                                          O3INTERP.27    
      REAL :: sumrdp                                                       O3INTERP.28    
      real :: ocliml(15),halflev(14),deltap(15),ohdcol(15)                 O3INTERP.29    
      real :: dpmod(nl),modcol(nl)                                         O3INTERP.30    
      real :: pressu                                                       O3INTERP.31    
      REAL :: fraction                                                     O3INTERP.32    
      logical :: ifirst                                                    O3INTERP.33    
! Loop variables                                                           O3INTERP.34    
      INTEGER :: L, LO                                                     O3INTERP.35    
!-----------------------------------------------------                     O3INTERP.36    
! Store data                                                               O3INTERP.37    
!-----------------------------------------------------                     O3INTERP.38    
      save                                                                 O3INTERP.39    
      data ocliml/1.0,3.0,10.0,30.0,50.0,70.0,100.0,150.0,200.0,           O3INTERP.40    
     &              250.0,300.0,400.0,500.0,700.0,850.0/                   O3INTERP.41    
      data ifirst/.true./                                                  O3INTERP.42    
!-----------------------------------------------------                     O3INTERP.43    
! rhoo3 is density of O3 at STP, GR is g*density of O3 at STP              O3INTERP.44    
!-----------------------------------------------------                     O3INTERP.45    
      rhoo3=2.14                                                           O3INTERP.46    
      GR=GA*rhoo3                                                          O3INTERP.47    
!-----------------------------------------------------                     O3INTERP.48    
! First time through                                                       O3INTERP.49    
!-----------------------------------------------------                     O3INTERP.50    
      if (ifirst) then                                                     O3INTERP.51    
         ifirst=.false.                                                    O3INTERP.52    
         !-----------------------------------------------------            O3INTERP.53    
         ! Halvlev is in mb                                                O3INTERP.54    
         !-----------------------------------------------------            O3INTERP.55    
         do l=1,14                                                         O3INTERP.56    
            halflev(l)=(ocliml(l+1)+ocliml(l))/2.0                         O3INTERP.57    
         enddo                                                             O3INTERP.58    
         !-----------------------------------------------------            O3INTERP.59    
         ! Top                                                             O3INTERP.60    
         !-----------------------------------------------------            O3INTERP.61    
         deltap(1)=halflev(1)                                              O3INTERP.62    
         !-----------------------------------------------------            O3INTERP.63    
         ! In between                                                      O3INTERP.64    
         !-----------------------------------------------------            O3INTERP.65    
         do l=2,14                                                         O3INTERP.66    
            deltap(l)=halflev(l)-halflev(l-1) ! In between                 O3INTERP.67    
         enddo                                                             O3INTERP.68    
         !-----------------------------------------------------            O3INTERP.69    
         ! Bottom                                                          O3INTERP.70    
         !-----------------------------------------------------            O3INTERP.71    
         deltap(15)=1.0e3-halflev(14)                                      O3INTERP.72    
         !-----------------------------------------------------            O3INTERP.73    
         ! Convert all to Pa                                               O3INTERP.74    
         !-----------------------------------------------------            O3INTERP.75    
         do l=1,15                                                         O3INTERP.76    
            deltap(l)=deltap(l)*100.0                                      O3INTERP.77    
         enddo                                                             O3INTERP.78    
      endif                                                                O3INTERP.79    
!-----------------------------------------------------                     O3INTERP.80    
! Compute overhead column of climatology for this particular               O3INTERP.81    
! profile.                                                                 O3INTERP.82    
!-----------------------------------------------------                     O3INTERP.83    
      col=0.0                                                              O3INTERP.84    
      do l=1,15                                                            O3INTERP.85    
         col=col+o3clim(l)*deltap(l)                                       O3INTERP.86    
         ohdcol(l)=col*1.0e5/(GR)      ! In DU                             O3INTERP.87    
      enddo                                                                O3INTERP.88    
!-----------------------------------------------------                     O3INTERP.89    
! model delta pressure in Pa                                               O3INTERP.90    
!-----------------------------------------------------                     O3INTERP.91    
      do l=1,nl                                                            O3INTERP.92    
         dpmod(l)=dsigma(l)*ps                                             O3INTERP.93    
      enddo                                                                O3INTERP.94    
!-----------------------------------------------------                     O3INTERP.95    
! MMR*dp summed down column                                                O3INTERP.96    
!-----------------------------------------------------                     O3INTERP.97    
      sumrdp=0.0                                                           O3INTERP.98    
       DO l=1,nl                                                           O3INTERP.99    
         IF (l.LT.NL)THEN                                                  O3INTERP.100   
            pressu=sigmah(l)*ps/100.0 ! in mb                              O3INTERP.101   
         ELSE                                                              O3INTERP.102   
            pressu=ps/100.0                                                O3INTERP.103   
         ENDIF                                                             O3INTERP.104   
         DO lo=1,14                                                        O3INTERP.105   
            if (pressu.lt.halflev(1)) then                                 O3INTERP.106   
               !-----------------------------------------------------      O3INTERP.107   
               ! Model column (DU) forced from climatology                 O3INTERP.108   
               !-----------------------------------------------------      O3INTERP.109   
               modcol(l)=(pressu/halflev(1))*ohdcol(1)                     O3INTERP.110   
               o3mod(l)=(modcol(l)*GR/1.0e5-sumrdp)/dpmod(l)               O3INTERP.111   
               goto 271                                                    O3INTERP.112   
            elseif (pressu.eq.halflev(lo)) then                            O3INTERP.113   
               modcol(l)=ohdcol(lo)                                        O3INTERP.114   
               o3mod(l)=(modcol(l)*GR/1.0e5-sumrdp)/dpmod(l)               O3INTERP.115   
               goto 271                                                    O3INTERP.116   
            elseif (pressu.gt.halflev(lo).and.pressu.lt.halflev(lo+1))     O3INTERP.117   
     &              then                                                   O3INTERP.118   
               fraction=(pressu-halflev(lo))/(halflev(lo+1)-halflev(lo))   O3INTERP.119   
               modcol(l)=ohdcol(lo)+fraction*(ohdcol(lo+1)-ohdcol(lo))     O3INTERP.120   
               o3mod(l)=(modcol(l)*GR/1.0e5-sumrdp)/dpmod(l)               O3INTERP.121   
               goto 271                                                    O3INTERP.122   
            elseif (pressu.ge.halflev(14)) then                            O3INTERP.123   
               fraction=(pressu-halflev(14))/(1.0e3-halflev(14))           O3INTERP.124   
               modcol(l)=ohdcol(14)+fraction*(ohdcol(15)-ohdcol(14))       O3INTERP.125   
               o3mod(l)=(modcol(l)*GR/1.0e5-sumrdp)/dpmod(l)               O3INTERP.126   
               goto 271                                                    O3INTERP.127   
            endif                                                          O3INTERP.128   
         ENDDO                                                             O3INTERP.129   
 271     sumrdp=sumrdp+o3mod(l)*dpmod(l)                                   O3INTERP.130   
      ENDDO                                                                O3INTERP.131   
      RETURN                                                               O3INTERP.132   
      END                                                                  O3INTERP.133   
*ENDIF                                                                     O3INTERP.134   
*DECK PVCR                                                                 PVCR.1     
*IF DEF,ABOVE_V1                                                           PVCR.2     
!=====================================================                     PVCR.3     
! Calculate potential temperature and Ertel potential vorticity            PVCR.4     
! on model levels.                                                         PVCR.5     
!=====================================================                     PVCR.6     
      SUBROUTINE PVCR(JH,TFIELD,TTYPE)                                     PVCR.7     
      IMPLICIT NONE                                                        PVCR.8     
*CALL PARAM1                                                               PVCR.9     
*CALL PARAM2                                                               PVCR.10    
*CALL PARAM3                                                               PVCR.11    
*CALL BLANK                                                                PVCR.12    
*CALL COMGRM                                                               PVCR.13    
*CALL GRIDPA3                                                              PVCR.14    
*CALL GRIDPB3                                                              PVCR.15    
*CALL LEGAU                                                                PVCR.16    
*CALL MPIDECK                                                              PVCR.17    
!-----------------------------------------------------                     PVCR.18    
! Passed arguments                                                         PVCR.19    
!-----------------------------------------------------                     PVCR.20    
! Index for latitudes                                                      PVCR.21    
      INTEGER :: JH                                                        PVCR.22    
      REAL :: TFIELD(MGx,NHEM,NL)                                          PVCR.23    
      INTEGER :: TTYPE                                                     PVCR.24    
!-----------------------------------------------------                     PVCR.25    
! Local variables                                                          PVCR.26    
!-----------------------------------------------------                     PVCR.27    
      REAL :: PSG(MGx,NHEM,NL)                                             PVCR.28    
      REAL :: PMKG                                                         PVCR.29    
      REAL :: PM1KG                                                        PVCR.30    
      REAL :: AKT                                                          PVCR.31    
      REAL :: TXP                                                          PVCR.32    
      REAL :: TYP                                                          PVCR.33    
! Loop variables                                                           PVCR.34    
      INTEGER :: I, IHEM, L                                                PVCR.35    
!-----------------------------------------------------                     PVCR.36    
! Calculate pressure on model levels.                                      PVCR.37    
!-----------------------------------------------------                     PVCR.38    
      DO L=1,NL                                                            PVCR.39    
         DO IHEM=1,NHEM                                                    PVCR.40    
            DO I=1,MGxx(iCol)                                              PVCR.41    
               PSG(I,IHEM,L)=SIGMA(L)*PLG3(I,IHEM,JH)                      PVCR.42    
            ENDDO                                                          PVCR.43    
         ENDDO                                                             PVCR.44    
      ENDDO                                                                PVCR.45    
!-----------------------------------------------------                     PVCR.46    
! Calculate potential temperature and PV on model levels.                  PVCR.47    
! Generalised formula using array of model level pressures is used         PVCR.48    
! to calculate potential temperature.  But note that the reference         PVCR.49    
! pressure for adiabatic processes is assumed to be P0, the non-           PVCR.50    
! dimensionalising pressure.                                               PVCR.51    
!                                                                          PVCR.52    
! TFIELD is the tracer field to be initialised.                            PVCR.53    
! TTYPE=1   : Initialise tracer as potential temperature.                  PVCR.54    
! TTYPE=2   : Initialise tracer as Ertel PV.                               PVCR.55    
!                                                                          PVCR.56    
! Remember that at this point:-                                            PVCR.57    
! CHIGG3 contains the x-derivative of T.                                   PVCR.58    
! SFGG3  contains the y-derivative of T.                                   PVCR.59    
!-----------------------------------------------------                     PVCR.60    
      DO IHEM=1,NHEM                                                       PVCR.61    
         DO L=1,NL                                                         PVCR.62    
            DO I=1,MGxx(iCol)                                              PVCR.63    
               PMKG=PSG(I,IHEM,L)**(-AKAP)                                 PVCR.64    
               PM1KG=PMKG/PSG(I,IHEM,L)                                    PVCR.65    
               AKT=AKAP*TG3(I,IHEM,JH,L)                                   PVCR.66    
               TXP=CHIG3(I,IHEM,JH,L)-AKT*PMG3(I,IHEM,JH)                  PVCR.67    
               TYP=SFG3(I,IHEM,JH,L)-AKT*PJG3(I,IHEM,JH)                   PVCR.68    
               IF(TTYPE.EQ.1) THEN                                         PVCR.69    
                  TFIELD(I,IHEM,L)=TG3(I,IHEM,JH,L)*PMKG                   PVCR.70    
               ELSE                                                        PVCR.71    
                  TFIELD(I,IHEM,L)=PM1KG*(ZG3(I,IHEM,JH,L)*                PVCR.72    
     &                 (-DTDLSG(I,IHEM,L)+AKT)+SECSQ(JJ1(iRow)+JH,IHEM)*   PVCR.73    
     &                 (-DUDLSG(I,IHEM,L)*TYP+DVDLSG(I,IHEM,L)*TXP))       PVCR.74    
               ENDIF                                                       PVCR.75    
            ENDDO                                                          PVCR.76    
         ENDDO                                                             PVCR.77    
      ENDDO                                                                PVCR.78    
      RETURN                                                               PVCR.79    
      END                                                                  PVCR.80    
*ENDIF                                                                     PVCR.81    
*DECK RADN                                                                 RADN.1     
*IF DEF,ONLY_V2                                                            RADN.2     
!=====================================================                     RADN.3     
! RADIATION SCHEME. UNIFORM COOLING BELOW 200MB.                           RADN.4     
!=====================================================                     RADN.5     
      SUBROUTINE RADN(JH)                                                  RADN.6     
      IMPLICIT NONE                                                        RADN.7     
*CALL PARAM1                                                               RADN.8     
*CALL PARAM2                                                               RADN.9     
*CALL PARAM3                                                               RADN.10    
*CALL BATS                                                                 RADN.11    
*CALL BLANK                                                                RADN.12    
*CALL GRIDPA3                                                              RADN.13    
*CALL GRIDPC                                                               RADN.14    
*CALL PHYSCA                                                               RADN.15    
*CALL MPIDECK                                                              RADN.16    
!-----------------------------------------------------                     RADN.17    
! Passed arguments                                                         RADN.18    
!-----------------------------------------------------                     RADN.19    
! Index for latitudes                                                      RADN.20    
      INTEGER :: JH                                                        RADN.21    
!-----------------------------------------------------                     RADN.22    
! Local variables.                                                         RADN.23    
!-----------------------------------------------------                     RADN.24    
      REAL :: FRADJ                                                        RADN.25    
! Loop variables                                                           RADN.26    
      INTEGER :: I, IHEM, L                                                RADN.27    
!-----------------------------------------------------                     RADN.28    
! Local variables.                                                         RADN.29    
!-----------------------------------------------------                     RADN.30    
      DO IHEM=1,NHEM                                                       RADN.31    
         FRADJ=FRAD(JH,IHEM)                                               RADN.32    
         DO L=1,NL                                                         RADN.33    
            IF(SIGMA(L).GE.0.2)THEN                                        RADN.34    
               DO I=1,MGxx(iCol)                                           RADN.35    
                  TTRD(I,IHEM,L)=FRADJ                                     RADN.36    
                  TG3(I,IHEM,JH,L)=TG3(I,IHEM,JH,L)+                       RADN.37    
     &                 DELT2*TTRD(I,IHEM,L)                                RADN.38    
               ENDDO                                                       RADN.39    
            ENDIF                                                          RADN.40    
         ENDDO                                                             RADN.41    
      ENDDO                                                                RADN.42    
      RETURN                                                               RADN.43    
      END                                                                  RADN.44    
*ENDIF                                                                     RADN.45    
*DECK MORC                                                                 MORC.1     
*IF DEF,ONLY_V3                                                            MORC.2     
!=====================================================                     MORC.3     
! RADIATION SCHEME. MORCRETTE PMF 13/5/97                                  MORC.4     
! It passes the pressure of the                                            MORC.5     
! full sigma levels and the surface                                        MORC.6     
! to the Radiation scheme                                                  MORC.7     
! (So the morcrette code has one more level than NL)                       MORC.8     
! water vapour values come from QG and QSTAR                               MORC.9     
! and temperatures from TG and TSTAR                                       MORC.10    
!                                                                          MORC.11    
! Dingmin's changes to morcrette                                           MORC.12    
! combine bottom levels                                                    MORC.13    
! and set bottom level heating rate to zero as                             MORC.14    
! this is now the ground and is not a layer                                MORC.15    
!=====================================================                     MORC.16    
      SUBROUTINE RADN(JH,TROPHT)                                           MORC.17    
      IMPLICIT NONE                                                        MORC.18    
*CALL PARAM1                                                               MORC.19    
*CALL PARAM2                                                               MORC.20    
*CALL PARAM3                                                               MORC.21    
*CALL BLANK                                                                MORC.22    
*CALL LEGAU                                                                MORC.23    
*CALL GRIDPA3                                                              MORC.24    
*CALL GRIDPC                                                               MORC.25    
*CALL BATS                                                                 MORC.26    
*CALL PHYSCA                                                               MORC.27    
*CALL CPIERS                                                               MORC.28    
*CALL OROG_G                                                               MORC.29    
*CALL RADHT                                                                MORC.30    
*CALL MPIDECK                                                              MORC.31    
*CALL MORCGAS                                                              UPDMORCMB.9     
!-----------------------------------------------------                     MORC.32    
! Passed arguments                                                         MORC.33    
!-----------------------------------------------------                     MORC.34    
! Index for latitudes                                                      MORC.35    
      INTEGER :: JH                                                        MORC.36    
! tropopause height                                                        MORC.37    
      REAL :: tropht(MGx,NHEM,JGy)                                         MORC.38    
!-----------------------------------------------------                     MORC.39    
! Local variables.                                                         MORC.40    
!-----------------------------------------------------                     MORC.41    
      REAL :: RHSCL                                                        MORC.42    
      REAL :: CHRF                                                         MORC.43    
      INTEGER :: NTSTEP                                                    MORC.44    
! If =1, first time reading o3 and h2o (2 months' worth).                  MORC.45    
      INTEGER :: ifirst                                                    MORC.46    
      INTEGER :: MTH1                                                      MORC.47    
! Fraction through month                                                   MORC.48    
      REAL :: AMFRAC                                                       MORC.49    
! Current month counter. = month. number +1 'cos have 13 months            MORC.50    
! (dec in twice)                                                           MORC.51    
      INTEGER :: CMTH                                                      MORC.52    
      REAL :: adum                                                         MORC.53    
! Month names. 13 to enable wrap-around.                                   MORC.54    
      CHARACTER*3 :: MN(13)                                                MORC.55    
! =1 when in process of month change                                       MORC.56    
!      integer ichange                                                     MORC.57    
! Filenames of o3 and h2o climatology read in. 1=current,                  MORC.58    
! 2=next.                                                                  MORC.59    
      CHARACTER*31 :: o3file1, h2ofile1, o3file2, h2ofile2                 MORC.60    
! Levels for *clim variables                                               MORC.61    
      INTEGER, PARAMETER :: ClimLevs=15                                    MORC.62    
! Store the data read in from file                                         MORC.63    
      REAL :: HoldClim(ClimLevs)                                           MORC.64    
! Climatology ozone and water values. '1' is current month, '2' is         MORC.65    
! the next month. (SMR 30-05-97)                                           MORC.66    
! 11-03-97 i.e. nl=15 read in from climatology. Interpolated to            MORC.67    
! nl.gt.15 in subroutine interpo3.                                         MORC.68    
      REAL :: o3clim1(ClimLevs,MGx,nhem,JGy)                               MORC.69    
      REAL :: h2oclim1(ClimLevs,MGx,nhem,JGy)                              MORC.70    
      REAL :: o3clim2(ClimLevs,MGx,nhem,JGy)                               MORC.71    
      REAL :: h2oclim2(ClimLevs,MGx,nhem,JGy)                              MORC.72    
! Ozone interpolated to model levels. Current month.                       MORC.73    
      REAL :: o3mod1(nl,MGx,nhem,JGy)                                      MORC.74    
! Water interpolated to model levels. Current month.                       MORC.75    
      REAL :: h2omod1(nl,MGx,nhem,JGy)                                     MORC.76    
! Ozone interpolated to model levels. Next month.                          MORC.77    
      REAL :: o3mod2(nl,MGx,nhem,JGy)                                      MORC.78    
! Water interpolated to model levels. Next month.                          MORC.79    
      REAL :: h2omod2(nl,MGx,nhem,JGy)                                     MORC.80    
! Dummy profile for skipping to the right part of the                      MORC.81    
! climatology                                                              MORC.82    
      REAL :: rdummy(15)                                                   MORC.83    
! sfc pressure (used in interpolation from climatology                     MORC.84    
! to model).                                                               MORC.85    
      REAL :: ps                                                           MORC.86    
      INTEGER :: MTH2                                                      MORC.87    
! Morcrette profiles (have extra level).                                   MORC.88    
      REAL :: PR(NL+1),T(NL+1),h2o(nl+1)                                   MORC.89    
      REAL :: o3(nl+1),htlw(nl+1),htsw(nl+1)                               MORC.90    
      REAL :: ALAT1                                                        MORC.91    
! Cloud fraction,lwp deep,high,mid,low                                     MORC.92    
      REAL :: cf(4,2)                                                      MORC.93    
! Cloud positions (deep,h,m,l;bottom,top)                                  MORC.94    
      INTEGER :: ic(4,2)                                                   MORC.95    
      REAL :: SWALB                                                        MORC.96    
      REAL :: ALON                                                         MORC.97    
! Array to hold fluxes at top and bottom of atmosphere                     MORC.98    
! 1st index - flux 1=SW, 2=LW                                              MORC.99    
! 2nd index - Direction 1=DN, 2=UP                                         MORC.100   
! 3rd index - Where 1=TOP, 2=SURFACE                                       MORC.101   
      REAL :: fluxes(2,2,2)                                                MORC.102   
      REAL :: fhtot,fhcorr                                                 RAD_CL_SEBAL.99    
      REAL :: A                                                            MORC.103   
      REAL :: B                                                            MORC.104   
      REAL :: HTNETO                                                       MORC.105   
      REAL :: ACCON                                                        UPDMORCMB.89    
      REAL :: BCCON                                                        UPDMORCMB.90    
      REAL :: CH4BETA                                                      UPDMORCMB.91    
! Loop variables                                                           MORC.106   
      INTEGER :: I, IHEM, J, K, L, LD                                      MORC.107   
!-----------------------------------------------------                     MORC.108   
! To avoid reading in the climatology data more than once                  MORC.109   
! save the variable that store the information                             MORC.110   
!-----------------------------------------------------                     MORC.111   
      SAVE                                                                 MORC.112   
!-----------------------------------------------------                     MORC.113   
! Set starting values                                                      MORC.114   
!-----------------------------------------------------                     MORC.115   
      data mn/'dec','jan','feb','mar','apr','may','jun','jul',             MORC.116   
     &          'aug','sep','oct','nov','dec'/                             MORC.117   
      DATA IFIRST/1/                                                       MORC.118   
!-----------------------------------------------------                     MORC.119   
! Set some variables.                                                      MORC.120   
! CHRF is factor to non-dimensionalise heating rates.                      MORC.121   
!-----------------------------------------------------                     MORC.122   
      RHSCL=288.0*GASCON/GA                                                MORC.123   
      CHRF=86400.*WW*CT                                                    MORC.124   
!-----------------------------------------------------                     MORC.125   
! ntstep is the number of timesteps to skip.                               MORC.126   
!                                                                          MORC.127   
! N.B. No point any more frequent as Morcrette doing diurnal               MORC.128   
! averages anyway.                                                         MORC.129   
!-----------------------------------------------------                     MORC.130   
      ntstep=itspd                                                         MORC.131   
!-----------------------------------------------------                     MORC.132   
! This sets the non-dimensional gridpoint temperature tendency (TTRD)      MORC.133   
! to get to TTRD from K/day divide the K/day heating rate by               MORC.134   
!     (86400*WW*CT)                                                        MORC.135   
!     TTRD(non-dim)=HTRT(k/day)/(86400*WW*CT)                              MORC.136   
!                                                                          MORC.137   
! Reads in bogus ozone and water vapour on first call                      MORC.138   
! other data such as albedo and number of levels is in the include file    MORC.139   
!-----------------------------------------------------                     MORC.140   
! Read in required ozone and water vapour from climatology                 MORC.141   
! First time through (read in two months of o3 and h2o if                  MORC.142   
! lperpet .false. or just one if lperpet .true.).                          MORC.143   
!-----------------------------------------------------                     MORC.144   
      IF (ifirst.eq.1) then                                                MORC.145   
         !-----------------------------------------------------            MORC.146   
         ! First time around need to read in climatology data              MORC.147   
         !-----------------------------------------------------            MORC.148   
         IF (JH.EQ.1) THEN                                                 MORC.149   
            CALL CALNDR(DOY,MTH1,AMFRAC)                                   MORC.150   
            IF (MyPe.EQ.0) THEN                                            MORC.151   
               CMTH=MTH1+1                                                 MORC.152   
               !-----------------------------------------------------      MORC.153   
               ! Wrap-around to January.                                   MORC.154   
               !-----------------------------------------------------      MORC.155   
               IF(cmth.eq.13) cmth=1                                       MORC.156   
               !-----------------------------------------------------      MORC.157   
               ! Make the filenames and open the files:                    MORC.158   
               ! N.B. Read in from global climatology.                     MORC.159   
               !-----------------------------------------------------      MORC.160   
               write(o3file1,'(a,i3.3,a,i3.3,a)')                          MORC.161   
     &              'ozone_'//mn(cmth)//'_jg',jg,'_mg',mg,'_nhem2.dat'     MORC.162   
               write(h2ofile1,'(a,i3.3,a,i3.3,a)')                         MORC.163   
     &              'water_'//mn(cmth)//'_jg',jg,'_mg',mg,'_nhem2.dat'     MORC.164   
               write(o3file2,'(a,i3.3,a,i3.3,a)')                          MORC.165   
     &              'ozone_'//mn(cmth+1)//'_jg',jg,'_mg',mg,'_nhem2.dat'   MORC.166   
               write(h2ofile2,'(a,i3.3,a,i3.3,a)')                         MORC.167   
     &              'water_'//mn(cmth+1)//'_jg',jg,'_mg',mg,'_nhem2.dat'   MORC.168   
            ENDIF                                                          MORC.169   
            !-----------------------------------------------------         MORC.170   
            ! Read in climatology data                                     MORC.171   
            !-----------------------------------------------------         MORC.172   
            CALL READCLIM(o3file1,ClimLevs,.FALSE.,o3clim1)                MORC.173   
            CALL READCLIM(h2ofile1,ClimLevs,.FALSE.,h2oclim1)              MORC.174   
            CALL READCLIM(o3file2,ClimLevs,.FALSE.,o3clim2)                MORC.175   
            CALL READCLIM(h2ofile2,ClimLevs,.FALSE.,h2oclim2)              MORC.176   
            !-----------------------------------------------------         MORC.177   
            ! Wont need to read in the data next time                      MORC.178   
            !-----------------------------------------------------         MORC.179   
            ifirst=0                                                       MORC.180   
            !-----------------------------------------------------         MORC.181   
            ! Loop over all grid points                                    MORC.182   
            !-----------------------------------------------------         MORC.183   
            DO J=1,JGyy(iRow)                                              MORC.184   
               DO ihem=1,nhem                                              MORC.185   
                  DO i=1,MGxx(iCol)                                        MORC.186   
                     !-------------------------------------------------    MORC.187   
                     ! Interpolate to model vertical grid.                 MORC.188   
                     !-------------------------------------------------    MORC.189   
C O3 climatology interpolation fix: ps variable                            RAD_CL_SEBAL.4     
                     ps=PLG3(I,IHEM,J)*P0                                  RAD_CL_SEBAL.5     
                     call interpf(h2oclim1(1,i,ihem,J),                    MORC.191   
     &                 h2omod1(1,i,ihem,J),ps)                             MORC.192   
                     call O3INTERP(o3clim1(1,i,ihem,J),                    MORC.193   
     &                    o3mod1(1,i,ihem,J),ps)                           MORC.194   
                     call interpf(h2oclim2(1,i,ihem,J),                    MORC.195   
     &                    h2omod2(1,i,ihem,J),ps)                          MORC.196   
                     call O3INTERP(o3clim2(1,i,ihem,J),                    MORC.197   
     &                    o3mod2(1,i,ihem,J),ps)                           MORC.198   
                  ENDDO                                                    MORC.199   
               ENDDO                                                       MORC.200   
            ENDDO                                                          MORC.201   
         ENDIF                                                             MORC.202   
      ENDIF                                                                MORC.203   
!-----------------------------------------------------                     MORC.204   
! There's new climatology data for each month, see if this is a            MORC.205   
! new month.                                                               MORC.206   
!-----------------------------------------------------                     MORC.207   
      IF (JH.EQ.1) THEN                                                    MORC.208   
         !-----------------------------------------------------            MORC.209   
         ! Find out which month we're in now                               MORC.210   
         !-----------------------------------------------------            MORC.211   
         CALL CALNDR(DOY,MTH2,AMFRAC)                                      MORC.212   
         !-----------------------------------------------------            MORC.213   
         ! Check if a new month a climatology data is needed               MORC.214   
         !-----------------------------------------------------            MORC.215   
         IF ( (.not. lperpet).AND.(MTH1.NE.MTH2) ) THEN                    MORC.216   
            !-----------------------------------------------------         MORC.217   
            ! Copy 'next' to 'current'.                                    MORC.218   
            !-----------------------------------------------------         MORC.219   
            do J=1,JGyy(iRow)                                              MORC.220   
               do ihem=1,nhem                                              MORC.221   
                  do i=1,MGxx(iCol)                                        MORC.222   
                     do l=1,nl                                             MORC.223   
                        o3mod1(l,i,ihem,j)=o3mod2(l,i,ihem,j)              MORC.224   
                        h2omod1(l,i,ihem,j)=h2omod2(l,i,ihem,j)            MORC.225   
                     enddo                                                 MORC.226   
                  enddo                                                    MORC.227   
               enddo                                                       MORC.228   
            enddo                                                          MORC.229   
            !-----------------------------------------------------         MORC.230   
            ! Move on month and wrap-around to January.                    MORC.231   
            !-----------------------------------------------------         MORC.232   
            IF (MyPe.EQ.0) THEN                                            MORC.233   
               CMTH=MTH2+1                                                 MORC.234   
               IF (cmth.eq.13) cmth=1                                      MORC.235   
               !-----------------------------------------------------      MORC.236   
               ! And fetch new 'next':                                     MORC.237   
               !-----------------------------------------------------      MORC.238   
               write(o3file2,'(a,i3.3,a,i3.3,a)')                          MORC.239   
     &              'ozone_'//mn(cmth+1)//'_jg',jg,'_mg',mg,'_nhem2.dat'   MORC.240   
               write(h2ofile2,'(a,i3.3,a,i3.3,a)')                         MORC.241   
     &              'water_'//mn(cmth+1)//'_jg',jg,'_mg',mg,'_nhem2.dat'   MORC.242   
            ENDIF                                                          MORC.243   
            !-----------------------------------------------------         MORC.244   
            ! Read in the climatology                                      MORC.245   
            !-----------------------------------------------------         MORC.246   
            CALL READCLIM(o3file2,ClimLevs,.FALSE.,o3clim2)                MORC.247   
            CALL READCLIM(h2ofile2,ClimLevs,.FALSE.,h2oclim2)              MORC.248   
            !-----------------------------------------------------         MORC.249   
            ! Loop over all grid points                                    MORC.250   
            !-----------------------------------------------------         MORC.251   
            DO J=1,JGyy(iRow)                                              MORC.253   
               do ihem=1,nhem                                              MORC.254   
                  do i=1,MGxx(iCol)                                        MORC.255   
C O3 climatology interpolation fix: ps variable                            RAD_CL_SEBAL.6     
                     ps=PLG3(I,IHEM,J)*P0                                  RAD_CL_SEBAL.7     
                     call interpf(h2oclim2(1,i,ihem,J),                    MORC.256   
     &                    h2omod2(1,i,ihem,J),ps)                          MORC.257   
                     call O3INTERP(o3clim2(1,i,ihem,J),                    MORC.258   
     &                    o3mod2(1,i,ihem,J),ps)                           MORC.259   
                  ENDDO                                                    MORC.260   
               ENDDO                                                       MORC.261   
            ENDDO                                                          MORC.262   
            !-----------------------------------------------------         MORC.263   
            ! Stop loop repeating                                          MORC.264   
            !-----------------------------------------------------         MORC.265   
            MTH1=MTH2                                                      MORC.266   
         ENDIF                                                             MORC.267   
      ENDIF                                                                MORC.268   
!-----------------------------------------------------                     MORC.269   
! Now start the radiation bit.                                             MORC.270   
!-----------------------------------------------------                     MORC.271   
      DO ihem=1,nhem                                                       MORC.272   
         !-----------------------------------------------------            MORC.273   
         ! Calculates heating rates every ntstep time steps                MORC.274   
         !-----------------------------------------------------            MORC.275   
         IF (mod(kount,ntstep).eq.1) then                                  MORC.276   
            !-----------------------------------------------------         MORC.277   
            ! Radn scheme                                                  MORC.278   
            !-----------------------------------------------------         MORC.279   
            DO i=1,MGxx(iCol)                                              MORC.280   
               !---------------------------------------------------        MORC.281   
               ! First set SURFACE VALUES.                                 MORC.282   
               ! Pressure, units of Pa                                     MORC.283   
               ! T, units of K                                             MORC.284   
               ! water, units of mmr                                       MORC.285   
               !---------------------------------------------------        MORC.286   
               PR(1)=PLG3(I,IHEM,JH)*P0                                    MORC.287   
               T(1)=TSTAR(I,IHEM,JH)*CT                                    MORC.288   
               IF (lclim) then                                             MORC.289   
                  !------------------------------------------------        MORC.290   
                  ! Using h2o from climatology.                            MORC.291   
                  !------------------------------------------------        MORC.292   
                  h2o(1)=AMFRAC*h2omod2(NL,i,ihem,JH)+                     MORC.293   
     &                 (1.0-AMFRAC)*h2omod1(NL,i,ihem,JH)                  MORC.294   
               ELSE                                                        MORC.295   
                  !------------------------------------------------        MORC.296   
                  ! Using h2o from model.                                  MORC.297   
                  !------------------------------------------------        MORC.298   
                  h2o(1)=QSTAR(I,IHEM,JH)                                  MORC.299   
               ENDIF                                                       MORC.300   
               o3(1)=AMFRAC*o3mod2(NL,i,ihem,JH)+                          MORC.301   
     &              (1.0-AMFRAC)*o3mod1(NL,i,ihem,JH)                      MORC.302   
               !---------------------------------------------------        MORC.303   
               ! Now set rest of column.                                   MORC.304   
               ! Start of loop over column. Reverse index (Morc goes       MORC.305   
               ! bottom up).                                               MORC.306   
               !---------------------------------------------------        MORC.307   
               DO LD=1,NL                                                  MORC.308   
                  L=NL+2-LD                                                MORC.309   
                  PR(L)=SIGMA(LD)*PR(1) ! Pressure                         MORC.310   
                  T(L)=TG3(I,IHEM,JH,ld)*CT ! Temperature                  MORC.311   
                  !------------------------------------------------        MORC.312   
                  ! Water vapour, including dealing with minimum           MORC.313   
                  ! values.                                                MORC.314   
                  !------------------------------------------------        MORC.315   
                  IF (lclim) then                                          MORC.316   
                     !---------------------------------------------        MORC.317   
                     ! Use h2o from climatology.                           MORC.318   
                     !---------------------------------------------        MORC.319   
                     h2o(l)=AMFRAC*h2omod2(ld,i,ihem,JH)+                  MORC.320   
     &                    (1.0-AMFRAC)*h2omod1(ld,i,ihem,JH)               MORC.321   
                     !---------------------------------------------        UPDMORCMB.92    
                     ! FIX WATER VAPOUR FOR LEVELS ABOVE CLIMATOLOGICAL    UPDMORCMB.93    
                     ! TROPOPAUSE TO VALUE OF RH2OS. M. Bourqui Nov.       UPDMORCMB.94    
                     ! 2001- fix to MMR- MMJ Jul 08                        UPDMORCMB.95    
                     !---------------------------------------------        UPDMORCMB.96    
                     H2O(L)=MAX(RH2OS,H2O(L))                              UPDMORCMB.97    
                     !---------------------------------------------        MORC.323   
                     ! Fix water vapour for levels above climatological    MORC.324   
                     ! tropopause to be 6e-6 ppmv.                         MORC.325   
                     !---------------------------------------------        MORC.326   
                     IF (PR(L).LE.TROPHT(i,ihem,JH))THEN                   MORC.327   
                        !---------------------------------------------     UPDMORCMB.98    
                        ! Add methane oxidation term onto minimum water    UPDMORCMB.99    
                        ! From the calculations of Stefan Fueglistahler    UPDMORCMB.100   
                        !---------------------------------------------     UPDMORCMB.101   
                        accon=1.5-0.9*(CS(JJ1(iRow)+JH,IHEM)**3)           UPDMORCMB.102   
                        bccon=0.9+0.2*(CS(JJ1(iRow)+JH,IHEM)**3)           UPDMORCMB.103   
                        CH4BETA =0.46*(1.0+                                UPDMORCMB.104   
     &                       tanh((accon-log10(pr(l)/1.0e2))*bccon))       UPDMORCMB.105   
                        H2O(L)=RH2OS+VMRCH4*CH4BETA*2.*18./29.             UPDMORCMB.106   
                     ENDIF      ! end of strat. water vapour fix           MORC.330   
                  ELSE                                                     MORC.331   
                     !---------------------------------------------        MORC.332   
                     ! Use h2o from model                                  MORC.333   
                     !---------------------------------------------        MORC.334   
                     H2O(L)=MAX(RH2OS,TRAG3(I,IHEM,JH,LD,1))               UPDMORCMB.107   
                     !---------------------------------------------        MORC.336   
                     ! Fix water vapour for levels above climatological    MORC.337   
                     ! tropopause                                          MORC.338   
                     !---------------------------------------------        MORC.339   
                     IF(PR(L).LE.TROPHT(i,ihem,JH))THEN                    MORC.340   
                        !---------------------------------------------     UPDMORCMB.108   
                        ! Add methane oxidation term onto minimum water    UPDMORCMB.109   
                        ! From the calculations of Stefan Fueglistahler    UPDMORCMB.110   
                        !---------------------------------------------     UPDMORCMB.111   
                        accon=1.5-0.9*(CS(JJ1(iRow)+JH,IHEM)**3)           UPDMORCMB.112   
                        bccon=0.9+0.2*(CS(JJ1(iRow)+JH,IHEM)**3)           UPDMORCMB.113   
                        CH4BETA = 0.46*(1.0+                               UPDMORCMB.114   
     &                       tanh((accon-log10(pr(l)/1.0e2))*bccon))       UPDMORCMB.115   
                        H2O(L)=RH2OS+VMRCH4*CH4BETA*2.*18./29.             UPDMORCMB.116   
                     ENDIF      ! end of strat. water vapour fix           MORC.342   
                  ENDIF                                                    MORC.343   
                  !------------------------------------------------        MORC.344   
                  ! Ozone                                                  MORC.345   
                  !------------------------------------------------        MORC.346   
                  o3(l)=AMFRAC*o3mod2(ld,i,ihem,JH)+                       MORC.347   
     &                 (1.0-AMFRAC)*o3mod1(ld,i,ihem,JH)                   MORC.348   
               ENDDO            ! End of loop over column.                 MORC.349   
               !---------------------------------------------------        MORC.350   
               ! And alat1                                                 MORC.351   
               !---------------------------------------------------        MORC.352   
               alat1=alat(JJ1(iRow)+JH,IHEM)                               MORC.353   
               !---------------------------------------------------        MORC.354   
               ! 9-7-97 Piers' clouds.                                     MORC.355   
               ! Deep and shallow                                          MORC.356   
               !---------------------------------------------------        MORC.357   
               cf(1,1)=max(cfrac(I,IHEM,5),cfrac(I,IHEM,4))                MORC.358   
               !---------------------------------------------------        MORC.359   
               ! High cloud fraction                                       MORC.360   
               !---------------------------------------------------        MORC.361   
               cf(2,1)=cfrac(I,IHEM,3)                                     MORC.362   
               !---------------------------------------------------        MORC.363   
               ! Mid cloud fraction                                        MORC.364   
               !---------------------------------------------------        MORC.365   
               cf(3,1)=cfrac(I,IHEM,2)                                     MORC.366   
               !---------------------------------------------------        MORC.367   
               ! Low cloud fraction                                        MORC.368   
               !---------------------------------------------------        MORC.369   
               cf(4,1)=cfrac(I,IHEM,1)                                     MORC.370   
               !---------------------------------------------------        MORC.371   
               ! Cloud levels reversed.                                    MORC.372   
               ! Choose lowest level for bottom (bottom deep/shallow)      MORC.373   
               !---------------------------------------------------        MORC.374   
               ic(1,1)=max(icflag(I,IHEM,4,1),icflag(I,IHEM,5,1))          MORC.375   
               !---------------------------------------------------        MORC.376   
               ! Choose hightest level for top (top deep/shallow)          MORC.377   
               !---------------------------------------------------        MORC.378   
               ic(1,2)=min(icflag(I,IHEM,4,2),icflag(I,IHEM,5,2))          MORC.379   
               !---------------------------------------------------        MORC.380   
               ! Reverse                                                   MORC.381   
               !---------------------------------------------------        MORC.382   
               ic(1,1)=NL-ic(1,1)+2                                        MORC.383   
               ic(1,2)=NL-ic(1,2)+2                                        MORC.384   
               !---------------------------------------------------        MORC.385   
               ! Makes sure bottom cloud isn't in bottom level             MORC.386   
               !---------------------------------------------------        MORC.387   
               if (ic(1,1).eq.2) ic(1,1)=3                                 MORC.388   
               if (ic(1,2).eq.2) ic(1,1)=3                                 MORC.389   
               !---------------------------------------------------        MORC.390   
               ! High pos, one height needed                               MORC.391   
               !---------------------------------------------------        MORC.392   
               ic(2,1)=NL-icflag(I,IHEM,3,1)+2                             MORC.393   
               !---------------------------------------------------        MORC.394   
               ! Mid pos                                                   MORC.395   
               !---------------------------------------------------        MORC.396   
               ic(3,1)=NL-icflag(I,IHEM,2,1)+2                             MORC.397   
               !---------------------------------------------------        MORC.398   
               ! Low pos                                                   MORC.399   
               !---------------------------------------------------        MORC.400   
               ic(4,1)=NL-icflag(I,IHEM,1,1)+2                             MORC.401   
                                                                           MORC.402   
               SWALB=SALB(I,IHEM,JH)                                       MORC.403   
               !---------------------------------------------------        MORC.404   
               ! Cloud cf and ic passed. Fluxes returned which is net      MORC.405   
               ! flux at TOA in profile.                                   MORC.406   
               ! Call radiation scheme                                     MORC.407   
               !---------------------------------------------------        MORC.408   
               alon=REAL(II1(iCol)+I-1)/REAL(mg)*360.0                     MORC.409   
               call morcigcm(pr,t,h2o,o3,alat1,htlw,htsw,DOY,cf,ic,        REPLNIKOS.1     
     &              fluxes,swalb,alon)                                     REPLNIKOS.2     
               !---------------------------------------------------        MORC.412   
               ! Store net flux in PNET                                    MORC.413   
               !---------------------------------------------------        MORC.414   
               PNET(I,IHEM,JH)=fluxes(1,1,1)-fluxes(1,2,1)+                MORC.415   
     &              fluxes(2,1,1)-fluxes(2,2,1)                            MORC.416   
               SNET(I,IHEM,JH)=fluxes(1,1,2)-fluxes(1,2,2)+                MORC.417   
     &              fluxes(2,1,2)-fluxes(2,2,2)                            MORC.418   
               rrflux(I,IHEM,JH,1)=fluxes(1,1,2)                           MORC.419   
               rrflux(I,IHEM,JH,2)=fluxes(1,2,2)                           MORC.420   
               rrflux(I,IHEM,JH,3)=fluxes(2,1,2)                           MORC.421   
               rrflux(I,IHEM,JH,4)=fluxes(2,2,2)                           MORC.422   
               rrflux(I,IHEM,JH,5)=fluxes(1,1,1)-fluxes(1,2,1)             MORC.423   
               rrflux(I,IHEM,JH,6)=fluxes(2,2,1)                           MORC.424   
               fhtot=0.0                                                   RAD_CL_SEBAL.100   
               DO l=nl,1,-1                                                MORC.425   
                  !------------------------------------------------        MORC.426   
                  ! Bottom heating rate is zero in morecrette              MORC.427   
                  !------------------------------------------------        MORC.428   
                  LD=NL+1-L                                                MORC.429   
                  HTNETO=HTNET(IHem,JH,I,LD)                               MORC.430   
                  htnet(ihem,jh,i,ld)=htlw(l+1)+htsw(l+1)                  MORC.431   
                  !------------------------------------------------        MORC.432   
                  ! Sets this heating rate                                 MORC.433   
                  !------------------------------------------------        MORC.434   
                  TTRD(I,IHEM,LD)=(HTNETO                                  MORC.435   
     &                 +HTNET(IHEM,JH,I,LD))/(CHRF*2.)                     MORC.436   
                 fhtot=fhtot+htnet(ihem,jh,i,ld)*1.0*                      RAD_CL_SEBAL.101   
     :           dsigma(LD)*pr(1)*(GASCON/AKAP/GA)/86400.                  RAD_CL_SEBAL.102   
               ENDDO                                                       MORC.437   
               fhcorr=PNET(I,IHEM,JH)-SNET(I,IHEM,JH)-fhtot                RAD_CL_SEBAL.103   
               fluxes(2,2,1)=fluxes(2,2,1)+fhcorr                          RAD_CL_SEBAL.104   
               rrflux(I,IHEM,JH,6)=rrflux(I,IHEM,JH,6)+fhcorr              RAD_CL_SEBAL.105   
               PNET(I,IHEM,JH)=PNET(I,IHEM,JH)-fhcorr                      RAD_CL_SEBAL.106   
            ENDDO                                                          MORC.438   
         ELSE                                                              MORC.439   
            !-----------------------------------------------------         MORC.440   
            ! Doesn't do rad scheme (simply uses old heating rates)        MORC.441   
            !-----------------------------------------------------         MORC.442   
            DO i=1,MGxx(iCol)                                              MORC.443   
               DO LD=1,NL                                                  MORC.444   
                  TTRD(I,IHEM,LD)=htnet(ihem,jh,i,ld)/CHRF                 MORC.445   
               ENDDO                                                       MORC.446   
            ENDDO                                                          MORC.447   
         ENDIF                                                             MORC.448   
      ENDDO                     ! end of loop over hemispheres             MORC.449   
                                                                           MORC.450   
      IF (LSHORT.AND.(KOUNT.eq.1)) then                                    MORC.451   
         DO l=1,nl                                                         MORC.452   
            DO IHEM=1,NHEM                                                 MORC.453   
               DO i=1,MGxx(iCol)                                           MORC.454   
                  ttrd(I,IHEM,l)=ttrd(I,IHEM,l)*2.                         MORC.455   
               ENDDO                                                       MORC.456   
            ENDDO                                                          MORC.457   
         ENDDO                                                             MORC.458   
      ENDIF                                                                MORC.459   
                                                                           MORC.460   
      RETURN                                                               MORC.461   
      END                                                                  MORC.462   
*ENDIF                                                                     MORC.463   
*DECK READCLIM                                                             READCLIM.1     
*IF DEF,ONLY_V3                                                            READCLIM.2     
!=====================================================                     READCLIM.3     
! Read climatology data                                                    READCLIM.4     
!=====================================================                     READCLIM.5     
      SUBROUTINE READCLIM(FileName,ClimLevs,lTropWrite,ClimArray)          READCLIM.6     
      IMPLICIT NONE                                                        READCLIM.7     
*CALL PARAM1                                                               READCLIM.8     
*CALL PARAM2                                                               READCLIM.9     
*CALL PARAM3                                                               READCLIM.10    
*CALL MPIDECK                                                              READCLIM.11    
!-----------------------------------------------------                     READCLIM.12    
! Passed variables                                                         READCLIM.13    
!-----------------------------------------------------                     READCLIM.14    
! Name of file                                                             READCLIM.15    
      CHARACTER*(31), INTENT(IN) :: FileName                               READCLIM.16    
! Number of levels in file                                                 READCLIM.17    
      INTEGER, INTENT(IN) :: ClimLevs                                      READCLIM.18    
! Require the tropopause height to be written for first call from          READCLIM.19    
! subroutine SFCT for TROPHT data.                                         READCLIM.20    
      LOGICAL :: lTropWrite                                                READCLIM.21    
! Output array                                                             READCLIM.22    
      REAL :: ClimArray(ClimLevs,MGx,NHEM,JGy)                             READCLIM.23    
!-----------------------------------------------------                     READCLIM.24    
! Local variables                                                          READCLIM.25    
!-----------------------------------------------------                     READCLIM.26    
      REAL :: RDUMMY(ClimLevs)                                             READCLIM.27    
      REAL, ALLOCATABLE :: HoldClim(:,:,:,:)                               READCLIM.28    
      INTEGER, PARAMETER :: TagRef=800                                     READCLIM.29    
      INTEGER :: iCol2, iRow2                                              READCLIM.30    
! Loop variables                                                           READCLIM.31    
      INTEGER :: I, IHEM, iPe, J, L                                        READCLIM.32    
!-----------------------------------------------------                     READCLIM.33    
! Open file                                                                READCLIM.34    
!-----------------------------------------------------                     READCLIM.35    
      IF (NPE.EQ.1) THEN                                                   READCLIM.36    
         OPEN(UNIT=47,FILE='climdata/'//TRIM(FileName),                    READCLIM.37    
     &        FORM='FORMATTED',STATUS='OLD')                               READCLIM.38    
         !-----------------------------------------------------            READCLIM.39    
         ! Loop over hemisphere and longitudes                             READCLIM.40    
         !-----------------------------------------------------            READCLIM.41    
         DO J=1,JG                                                         READCLIM.42    
            DO IHEM=1,NHEM                                                 READCLIM.43    
               DO I=1,MG                                                   READCLIM.44    
                  READ(47,*)(ClimArray(L,I,IHEM,J),L=1,ClimLevs)           READCLIM.45    
               ENDDO                                                       READCLIM.46    
               !---------------------------------------------------        READCLIM.47    
               ! For one hemisphere runs, the climatology data for         READCLIM.48    
               ! other hemisphere is not needed                            READCLIM.49    
               !---------------------------------------------------        READCLIM.50    
               IF (NHEM.EQ.1) THEN                                         READCLIM.51    
                  READ(47,*) (RDUMMY(L),L=1,ClimLevs)                      READCLIM.52    
               ENDIF                                                       READCLIM.53    
            ENDDO                                                          READCLIM.54    
         ENDDO                                                             READCLIM.55    
         !-----------------------------------------------------            READCLIM.56    
         ! Close file                                                      READCLIM.57    
         !-----------------------------------------------------            READCLIM.58    
         CLOSE(47)                                                         READCLIM.59    
         !-----------------------------------------------------            READCLIM.60    
         ! Write tropopause height to file                                 READCLIM.61    
         !-----------------------------------------------------            READCLIM.62    
         IF (lTropWrite) THEN                                              READCLIM.63    
            WRITE(2,*)'CLIMATOLOGICAL TROPOPAUSE HEIGHT'                   READCLIM.64    
            DO IHEM=1,NHEM                                                 READCLIM.65    
               WRITE(2,*)(ClimArray(5,1,IHEM,J),J=1,JG)                    READCLIM.66    
            ENDDO                                                          READCLIM.67    
         ENDIF                                                             READCLIM.68    
      ELSE                                                                 READCLIM.69    
         !-----------------------------------------------------            READCLIM.70    
         ! Need to read in the data on PE 0 before passing to              READCLIM.71    
         ! other PEs.                                                      READCLIM.72    
         !-----------------------------------------------------            READCLIM.73    
         IF (MyPe.eq.0) THEN                                               READCLIM.74    
            OPEN(UNIT=47,FILE='climdata/'//TRIM(FileName),                 READCLIM.75    
     &           FORM='FORMATTED',STATUS='OLD')                            READCLIM.76    
            ALLOCATE(HoldClim(ClimLevs,MG,NHEM,JG))                        READCLIM.77    
            DO J=1,JG                                                      READCLIM.78    
               DO IHEM=1,NHEM                                              READCLIM.79    
                  DO I=1,MG                                                READCLIM.80    
                     READ(47,*) (HoldClim(L,I,IHEM,J),L=1,ClimLevs)        READCLIM.81    
                  ENDDO                                                    READCLIM.82    
                  !---------------------------------------------------     READCLIM.83    
                  ! For one hemisphere runs, the climatology data for      READCLIM.84    
                  ! other hemisphere is not needed                         READCLIM.85    
                  !---------------------------------------------------     READCLIM.86    
                  IF (NHEM.EQ.1) THEN                                      READCLIM.87    
                     READ(47,*) (RDUMMY(L),L=1,ClimLevs)                   READCLIM.88    
                  ENDIF                                                    READCLIM.89    
               ENDDO                                                       READCLIM.90    
            ENDDO                                                          READCLIM.91    
            !-----------------------------------------------------         READCLIM.92    
            ! Close file                                                   READCLIM.93    
            !-----------------------------------------------------         READCLIM.94    
            CLOSE(47)                                                      READCLIM.95    
            !-----------------------------------------------------         READCLIM.96    
            ! Write tropopause height to file                              READCLIM.97    
            !-----------------------------------------------------         READCLIM.98    
            IF (lTropWrite) THEN                                           READCLIM.99    
               WRITE(2,*)'CLIMATOLOGICAL TROPOPAUSE HEIGHT'                READCLIM.100   
               DO IHEM=1,NHEM                                              READCLIM.101   
                  WRITE(2,*)(HoldClim(5,1,IHEM,J),J=1,JG)                  READCLIM.102   
               ENDDO                                                       READCLIM.103   
            ENDIF                                                          READCLIM.104   
            !-----------------------------------------------------         READCLIM.105   
            ! Need to send data                                            READCLIM.106   
            !-----------------------------------------------------         READCLIM.107   
            DO iPe=NPE-1,0,-1                                              READCLIM.108   
               iCol2=GRID(1,iPe)                                           READCLIM.109   
               iRow2=GRID(2,iPe)                                           READCLIM.110   
               DO J=1,JGyy(iRow2)                                          READCLIM.111   
                  DO IHEM=1,NHEM                                           READCLIM.112   
                     DO I=1,MGxx(iCol2)                                    READCLIM.113   
                        DO L=1,ClimLevs                                    READCLIM.114   
                           ClimArray(L,I,IHEM,J)=                          READCLIM.115   
     &                       HoldClim(L,II1(iCol2)+I,IHEM,JJ1(iRow2)+J)    READCLIM.116   
                        ENDDO                                              READCLIM.117   
                     ENDDO                                                 READCLIM.118   
                  ENDDO                                                    READCLIM.119   
               ENDDO                                                       READCLIM.120   
               !-----------------------------------------------------      READCLIM.121   
               ! Need to send data                                         READCLIM.122   
               !-----------------------------------------------------      READCLIM.123   
               IF (iPe.GT.0) THEN                                          READCLIM.124   
                  iRecv=iPe                                                READCLIM.125   
                  nBuffSize=ClimLevs*JGy*NHEM*MGx                          READCLIM.126   
                  iTag=TagRef+iPe                                          READCLIM.127   
                  CALL MPI_BSEND(ClimArray, nBuffSize, ParaReal, iRecv,    READCLIM.128   
     &                 iTag, MPI_COMM_WORLD, ierr)                         READCLIM.129   
               ENDIF                                                       READCLIM.130   
            ENDDO                                                          READCLIM.131   
            DEALLOCATE(HoldClim)                                           READCLIM.132   
         ENDIF                                                             READCLIM.133   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            READCLIM.134   
         IF (MyPe.GT.0) THEN                                               READCLIM.135   
            !-----------------------------------------------------         READCLIM.136   
            ! Receive data from PE 0                                       READCLIM.137   
            !-----------------------------------------------------         READCLIM.138   
            iSend=0                                                        READCLIM.139   
            nBuffSize=ClimLevs*JGy*NHEM*MGx                                READCLIM.140   
            iTag=TagRef+MyPe                                               READCLIM.141   
            CALL MPI_RECV(ClimArray, nBuffSize, ParaReal, iSend,           READCLIM.142   
     &           iTag, MPI_COMM_WORLD, istat, ierr)                        READCLIM.143   
         ENDIF                                                             READCLIM.144   
      ENDIF                                                                READCLIM.145   
      END                                                                  READCLIM.146   
*ENDIF                                                                     READCLIM.147   
*DECK READCOEF                                                             READCOEF.1     
!=====================================================                     READCOEF.2     
! Routine to read in the spectral data. Using a binary code                READCOEF.3     
! for iType to decide which variables are needed:                          READCOEF.4     
!  - +1: Z, D, T, TRA (if used) and SP are wanted                          READCOEF.5     
!  - +2: ZMI, DMI, TRAMI (if used) and SPMI are wanted                     READCOEF.6     
!  - +4: TTRES is wanted                                                   READCOEF.7     
!  - +32: HTNET is wanted (HTNET is a grid-space variable)                 READCOEF.8     
! e.g. For version above 1, to write out RKOUNT, RNTAPE, DAY, DOY,         READCOEF.9     
! Z, D, T, TRA, SP, RNTAPE, ZMI, DMI, TMI, TRAMI, SPMI, RNTAPE,            READCOEF.10    
! HTNET and RNTAPE iType needs to be 35 (1+2+32).                          READCOEF.11    
!=====================================================                     READCOEF.12    
      SUBROUTINE READCOEF(ID, iType, lRestart, DAYNEAR, RKOUNT,            READCOEF.13    
     &     RM1TAPE, DAY)                                                   READCOEF.14    
      IMPLICIT NONE                                                        READCOEF.15    
*CALL PARAM1                                                               READCOEF.16    
*CALL PARAM2                                                               READCOEF.17    
*CALL PARAM3                                                               READCOEF.18    
*CALL RESTIJ                                                               READCOEF.19    
*CALL BATS                                                                 READCOEF.20    
*CALL SPECTR                                                               READCOEF.21    
*CALL MPIDECK                                                              READCOEF.22    
*IF DEF,ONLY_V3                                                            READCOEF.23    
*CALL RADHT                                                                READCOEF.24    
*ENDIF                                                                     READCOEF.25    
*IF DEF,ABOVE_V1                                                           READCOEF.26    
*CALL STATS                                                                READCOEF.27    
*ENDIF                                                                     READCOEF.28    
!-----------------------------------------------------                     READCOEF.29    
! Passed variables                                                         READCOEF.30    
!-----------------------------------------------------                     READCOEF.31    
! Unit file number                                                         READCOEF.32    
      INTEGER :: ID                                                        READCOEF.33    
! The list of variables to write out is deterimed by choice of iType       READCOEF.34    
      INTEGER :: iType                                                     READCOEF.35    
! For restart the input data is binary                                     READCOEF.36    
      LOGICAL :: lRestart                                                  READCOEF.37    
! Time of day that is expected                                             READCOEF.38    
      REAL :: DAYNEAR                                                      READCOEF.39    
! Starting count for input data                                            READCOEF.40    
      REAL :: RKOUNT                                                       READCOEF.41    
! Run number                                                               READCOEF.42    
      REAL :: RM1TAPE                                                      READCOEF.43    
! Time of day for input data                                               READCOEF.44    
      REAL :: DAY                                                          READCOEF.45    
!-----------------------------------------------------                     READCOEF.46    
! Local variables                                                          READCOEF.47    
!-----------------------------------------------------                     READCOEF.48    
      REAL :: RM2TAPE, RM3TAPE                                             READCOEF.49    
      INTEGER :: nLevels                                                   READCOEF.50    
      COMPLEX, ALLOCATABLE :: AllSpec(:,:,:)                               READCOEF.51    
      COMPLEX, ALLOCATABLE :: HoldVar(:,:,:,:)                             READCOEF.52    
*IF DEF,ONLY_V3                                                            READCOEF.53    
      REAL, ALLOCATABLE :: HtnetFull(:,:,:,:)                              READCOEF.54    
      LOGICAL :: lAllocHtnet                                               READCOEF.55    
*ENDIF                                                                     READCOEF.56    
      INTEGER :: LL                                                        READCOEF.57    
*IF DEF,ABOVE_V1                                                           READCOEF.58    
      REAL :: RK, RREC                                                     READCOEF.59    
      REAL :: RMT1, RMT2                                                   READCOEF.60    
      REAL :: RDAY                                                         READCOEF.61    
*ENDIF                                                                     READCOEF.62    
! Loop variables                                                           READCOEF.63    
      INTEGER :: IHEM, IM, IN, KK, L                                       READCOEF.64    
!-----------------------------------------------------                     READCOEF.65    
! Format statments                                                         READCOEF.66    
!-----------------------------------------------------                     READCOEF.67    
 2010 FORMAT(/' ***ABORT*** THE HISTORY RECORDS READ FROM CHANNEL '        READCOEF.68    
     & ,I3,/' ARE NOT IN CORRECT FORMAT ')                                 READCOEF.69    
 2020 FORMAT(/' ***ABORT*** THE RUN NUMBER IN THE HISTORY RECORD'/         READCOEF.70    
     & ' IS NOT THE SAME AS RNTAPE ENTERED IN NAMELIST')                   READCOEF.71    
 2031 FORMAT(/' ***ABORT*** CANNOT FIND THE CORRECT RESTART RECORD.'/      NEWRESTART.14    
     & ' LOOKING FOR DAY',F10.2/,' BUT THE NEAREST RECORD FOUND',          NEWRESTART.15    
     & ' IS FOR DAY',F10.2)                                                NEWRESTART.16    
C                                                                          NEWRESTART.17    
*IF DEF,ABOVE_V1                                                           READCOEF.75    
 2110 FORMAT(/' ***ABORT: MASS RESTART RECORD HAS WRONG LENGTH')           READCOEF.76    
*ENDIF                                                                     READCOEF.77    
!-----------------------------------------------------                     READCOEF.78    
! Check the type makes sense                                               READCOEF.79    
!-----------------------------------------------------                     READCOEF.80    
      IF ( (iType.NE.1).AND.(iType.NE.3).AND.(iType.NE.4)                  READCOEF.81    
     &     .AND.(iType.NE.8).AND.(iType.NE.35) ) THEN                      READCOEF.82    
         !-----------------------------------------------------            READCOEF.83    
         ! This type is not currently allowed                              READCOEF.84    
         !-----------------------------------------------------            READCOEF.85    
         IF (MyPe.EQ.0) WRITE(6,*) 'ERROR: this type is not currently ',   READCOEF.86    
     &        'allowed: iType=', iType                                     READCOEF.87    
         CALL ABORT                                                        READCOEF.88    
      ENDIF                                                                READCOEF.89    
!-----------------------------------------------------                     READCOEF.90    
! Work out the number of levels                                            READCOEF.91    
!-----------------------------------------------------                     READCOEF.92    
      nLevels=0                                                            READCOEF.93    
      IF (MOD(iType,2).EQ.1) THEN                                          READCOEF.94    
         nLevels=nLevels+(3+NTRACO)*NL+1                                   READCOEF.95    
      ENDIF                                                                READCOEF.96    
      IF (MOD(iType,4).GE.2) THEN                                          READCOEF.97    
         nLevels=nLevels+(3+NTRACO)*NL+1                                   READCOEF.98    
      ENDIF                                                                READCOEF.99    
      IF (MOD(iType,8).GE.4) THEN                                          READCOEF.100   
         nLevels=nLevels+NL                                                READCOEF.101   
      ENDIF                                                                READCOEF.102   
!-----------------------------------------------------                     READCOEF.103   
! Data is read in through PE 0                                             READCOEF.104   
!-----------------------------------------------------                     READCOEF.105   
      IF (MyPe.EQ.0) THEN                                                  READCOEF.106   
         !-----------------------------------------------------            READCOEF.107   
         ! Allocate size of spectral arrays                                READCOEF.108   
         !-----------------------------------------------------            READCOEF.109   
         ALLOCATE(AllSpec(NWJ2,NHEM,nLevels))                              READCOEF.110   
         !-----------------------------------------------------            READCOEF.111   
         ! Read in the data                                                READCOEF.112   
         !-----------------------------------------------------            READCOEF.113   
*IF DEF,ONLY_V3                                                            READCOEF.114   
         lAllocHtnet=.FALSE.                                               READCOEF.115   
*ENDIF                                                                     READCOEF.116   
 180     CONTINUE                                                          READCOEF.117   
         IF (lRestart) THEN                                                READCOEF.118   
*IF DEF,ONLY_V3                                                            READCOEF.119   
            IF (iType.EQ.3) THEN                                           READCOEF.120   
               READ(ID,END=1001) RKOUNT,RM1TAPE,DAY,DOY,                   READCOEF.121   
     &              AllSpec(:,:,1:nLevels/2),RM2TAPE,                      READCOEF.122   
     &              AllSpec(:,:,nLevels/2+1:nLevels),RM3TAPE               READCOEF.123   
            ELSE IF (iType.EQ.35) THEN                                     READCOEF.124   
               IF (.NOT.lAllocHtnet) THEN                                  READCOEF.125   
                  ALLOCATE(HtnetFull(NHEM,JG,MG,NL))                       READCOEF.126   
                  lAllocHtnet=.TRUE.                                       READCOEF.127   
               ENDIF                                                       READCOEF.128   
               READ(ID,END=1001) RKOUNT,RM1TAPE,DAY,DOY,                   READCOEF.129   
     &              AllSpec(:,:,1:nLevels/2),RM2TAPE,                      READCOEF.130   
     &              AllSpec(:,:,nLevels/2+1:nLevels),HtnetFull,            READCOEF.131   
     &              RM3TAPE                                                READCOEF.132   
            ELSE                                                           READCOEF.133   
               READ(ID,END=1001) RKOUNT,RM1TAPE,DAY,DOY,AllSpec,           READCOEF.134   
     &              RM2TAPE                                                READCOEF.135   
            ENDIF                                                          READCOEF.136   
            !-----------------------------------------------------         READCOEF.137   
            ! Extra read if restart record contains mass correction.       READCOEF.138   
            !-----------------------------------------------------         READCOEF.139   
            IF (LMASOLD) THEN                                              READCOEF.140   
               READ(ID,END=1001) RK,RMT1,RDAY,RREC,GMSP0,GMSPMI,RMT2       READCOEF.141   
               !-----------------------------------------------------      READCOEF.142   
               ! Check this data makes sense                               READCOEF.143   
               !-----------------------------------------------------      READCOEF.144   
               IF (RMT2.NE.RMT1) THEN                                      READCOEF.145   
                  WRITE(2,2110)                                            READCOEF.146   
                  CALL ABORT                                               READCOEF.147   
               ENDIF                                                       READCOEF.148   
            ENDIF                                                          READCOEF.149   
*ELSE                                                                      READCOEF.150   
            IF (iType.EQ.3) THEN                                           READCOEF.151   
               READ(ID,END=1001) RKOUNT,RM1TAPE,DAY,                       READCOEF.152   
     &              AllSpec(:,:,1:nLevels/2),RM2TAPE,                      READCOEF.153   
     &              AllSpec(:,:,nLevels/2+1:nLevels),RM3TAPE               READCOEF.154   
            ELSE                                                           READCOEF.155   
               READ(ID,END=1001) RKOUNT,RM1TAPE,DAY,AllSpec,               READCOEF.156   
     &              RM2TAPE                                                READCOEF.157   
            ENDIF                                                          READCOEF.158   
*ENDIF                                                                     READCOEF.159   
         ELSE                                                              READCOEF.160   
*IF DEF,ONLY_V3                                                            READCOEF.161   
            IF (iType.EQ.3) THEN                                           READCOEF.162   
               READ(ID, '(4E20.12)',END=1001) RKOUNT,RM1TAPE,DAY,DOY,      READCOEF.163   
     &              AllSpec(:,:,1:nLevels/2),RM2TAPE,                      READCOEF.164   
     &              AllSpec(:,:,nLevels/2+1:nLevels),RM3TAPE               READCOEF.165   
            ELSE IF (iType.EQ.35) THEN                                     READCOEF.166   
               IF (.NOT.lAllocHtnet) THEN                                  READCOEF.167   
                  ALLOCATE(HtnetFull(NHEM,JG,MG,NL))                       READCOEF.168   
                  lAllocHtnet=.TRUE.                                       READCOEF.169   
               ENDIF                                                       READCOEF.170   
               READ(ID, '(4E20.12)',END=1001) RKOUNT,RM1TAPE,DAY,DOY,      READCOEF.171   
     &              AllSpec(:,:,1:nLevels/2),RM2TAPE,                      READCOEF.172   
     &              AllSpec(:,:,nLevels/2+1:nLevels),HtnetFull,RM3TAPE     READCOEF.173   
            ELSE                                                           READCOEF.174   
               READ(ID, '(4E20.12)',END=1001) RKOUNT,RM1TAPE,DAY,          READCOEF.175   
     &              AllSpec,RM2TAPE                                        READCOEF.176   
            ENDIF                                                          READCOEF.177   
*ELSE                                                                      READCOEF.178   
            IF (iType.EQ.3) THEN                                           READCOEF.179   
               READ(ID, '(4E20.12)',END=1001) RKOUNT,RM1TAPE,DAY,          READCOEF.180   
     &              AllSpec(:,:,1:nLevels/2),RM2TAPE,                      READCOEF.181   
     &              AllSpec(:,:,nLevels/2+1:nLevels),RM3TAPE               READCOEF.182   
            ELSE                                                           READCOEF.183   
               READ(ID, '(4E20.12)',END=1001) RKOUNT,RM1TAPE,DAY,          READCOEF.184   
     &              AllSpec,RM2TAPE                                        READCOEF.185   
            ENDIF                                                          READCOEF.186   
*ENDIF                                                                     READCOEF.187   
         ENDIF                                                             READCOEF.188   
         !-----------------------------------------------------            READCOEF.189   
         ! Check the RM?TAPE variables are consistent                      READCOEF.190   
         !-----------------------------------------------------            READCOEF.191   
         IF (ABS(RM1TAPE-RM2TAPE) .GT. 1.0E-03) THEN                       READCOEF.192   
            WRITE(2,2010) ID                                               READCOEF.193   
            CALL ABORT                                                     READCOEF.194   
         ENDIF                                                             READCOEF.195   
         IF (MOD(iType,4).GE.2) THEN                                       READCOEF.196   
            IF (ABS(RM2TAPE-RM3TAPE) .GT. 1.0E-03) THEN                    READCOEF.197   
               WRITE(2,2020)                                               READCOEF.198   
               CALL ABORT                                                  READCOEF.199   
            ENDIF                                                          READCOEF.200   
         ENDIF                                                             READCOEF.201   
         !-----------------------------------------------------            READCOEF.202   
         ! Check we have right time of day                                 READCOEF.203   
         !-----------------------------------------------------            READCOEF.204   
         IF (ABS(DAY-BEGDAY) .GT. 1.0E-02) THEN                            READCOEF.205   
            IF (ABS(DAY-BEGDAY) .LT. ABS(DAYNEAR-BEGDAY)) THEN             READCOEF.206   
               DAYNEAR = DAY                                               READCOEF.207   
            ENDIF                                                          READCOEF.208   
            GOTO 180                                                       READCOEF.209   
         ENDIF                                                             READCOEF.210   
      ENDIF                                                                READCOEF.211   
!-----------------------------------------------------                     READCOEF.212   
! Share the coefficients across the other PEs                              READCOEF.213   
!-----------------------------------------------------                     READCOEF.214   
      ALLOCATE(HoldVar(NNTx,MMTy,NHEM,nLevels))                            READCOEF.215   
      HoldVar(:,:,:,:)=(0.0, 0.0)                                          READCOEF.216   
      CALL SHARECOEF(.TRUE.,(NHEM*nLevels),AllSpec,HoldVar)                READCOEF.217   
      IF (MyPe.EQ.0) DEALLOCATE(AllSpec)                                   READCOEF.218   
!-----------------------------------------------------                     READCOEF.219   
! Write the spectral data into spectral arrays                             READCOEF.220   
!-----------------------------------------------------                     READCOEF.221   
      LL=0                                                                 READCOEF.222   
      IF (MOD(iType,2).EQ.1) THEN                                          READCOEF.223   
         Z(1:NNTxx(iCol),1:MMTyy(iRow),:,:)=                               READCOEF.224   
     &        HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1:LL+NL)            READCOEF.225   
         LL=LL+NL                                                          READCOEF.226   
         D(1:NNTxx(iCol),1:MMTyy(iRow),:,:)=                               READCOEF.227   
     &        HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1:LL+NL)            READCOEF.228   
         LL=LL+NL                                                          READCOEF.229   
         T(1:NNTxx(iCol),1:MMTyy(iRow),:,:)=                               READCOEF.230   
     &        HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1:LL+NL)            READCOEF.231   
         LL=LL+NL                                                          READCOEF.232   
*IF DEF,ABOVE_V1                                                           READCOEF.233   
         IF (NTRACO.GT.0) THEN                                             READCOEF.234   
            DO KK=1,NTRACO                                                 READCOEF.235   
               TRA(1:NNTxx(iCol),1:MMTyy(iRow),:,:,KK)=                    READCOEF.236   
     &              HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1:LL+NL)      READCOEF.237   
               LL=LL+NL                                                    READCOEF.238   
            ENDDO                                                          READCOEF.239   
         ENDIF                                                             READCOEF.240   
*ENDIF                                                                     READCOEF.241   
         SP(1:NNTxx(iCol),1:MMTyy(iRow),:)=                                READCOEF.242   
     &        HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1)                  READCOEF.243   
         LL=LL+1                                                           READCOEF.244   
      ENDIF                                                                READCOEF.245   
      IF (MOD(iType,4).GE.2) THEN                                          READCOEF.246   
         ZMI(1:NNTxx(iCol),1:MMTyy(iRow),:,:)=                             READCOEF.247   
     &        HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1:LL+NL)            READCOEF.248   
         LL=LL+NL                                                          READCOEF.249   
         DMI(1:NNTxx(iCol),1:MMTyy(iRow),:,:)=                             READCOEF.250   
     &        HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1:LL+NL)            READCOEF.251   
         LL=LL+NL                                                          READCOEF.252   
         TMI(1:NNTxx(iCol),1:MMTyy(iRow),:,:)=                             READCOEF.253   
     &        HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1:LL+NL)            READCOEF.254   
         LL=LL+NL                                                          READCOEF.255   
*IF DEF,ABOVE_V1                                                           READCOEF.256   
         IF (NTRACO.GT.0) THEN                                             READCOEF.257   
            DO KK=1,NTRACO                                                 READCOEF.258   
               TRAMI(1:NNTxx(iCol),1:MMTyy(iRow),:,:,KK)=                  READCOEF.259   
     &              HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1:LL+NL)      READCOEF.260   
               LL=LL+NL                                                    READCOEF.261   
            ENDDO                                                          READCOEF.262   
         ENDIF                                                             READCOEF.263   
*ENDIF                                                                     READCOEF.264   
         SPMI(1:NNTxx(iCol),1:MMTyy(iRow),:)=                              READCOEF.265   
     &        HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,LL+1)                  READCOEF.266   
      ENDIF                                                                READCOEF.267   
      IF (MOD(iType,8).GE.4) THEN                                          READCOEF.268   
         TTRES(1:NNTxx(iCol),1:MMTyy(iRow),:,:)=                           READCOEF.269   
     &        HoldVar(1:NNTxx(iCol),1:MMTyy(iRow),:,1:NL)                  READCOEF.270   
      ENDIF                                                                READCOEF.271   
*IF DEF,ONLY_V3                                                            READCOEF.272   
      IF (MOD(iType,64).GE.32) THEN                                        READCOEF.273   
         !-----------------------------------------------------            READCOEF.274   
         ! Share HTNET across the PEs                                      READCOEF.275   
         !-----------------------------------------------------            READCOEF.276   
         CALL SHAREGRID2(.TRUE.,NL,HtnetFull,HTNET)                        READCOEF.277   
         IF (MyPe.EQ.0) DEALLOCATE(HtnetFull)                              READCOEF.278   
      ENDIF                                                                READCOEF.279   
*ENDIF                                                                     READCOEF.280   
!-----------------------------------------------------                     READCOEF.281   
! Variables that need passing to all PEs                                   READCOEF.282   
!-----------------------------------------------------                     READCOEF.283   
      IF (NPE.GT.1) THEN                                                   READCOEF.284   
         CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)                             READCOEF.285   
         iSend=0                                                           READCOEF.286   
         nBuffSize=1                                                       READCOEF.287   
         CALL MPI_BCAST(RKOUNT,nBuffSize,ParaReal,iSend,                   READCOEF.288   
     &        MPI_COMM_WORLD,ierr)                                         READCOEF.289   
         CALL MPI_BCAST(DAY,nBuffSize,ParaReal,iSend,                      READCOEF.290   
     &        MPI_COMM_WORLD,ierr)                                         READCOEF.291   
*IF DEF,ABOVE_V1                                                           READCOEF.292   
         CALL MPI_BCAST(DOY,nBuffSize,ParaReal,iSend,                      READCOEF.293   
     &        MPI_COMM_WORLD,ierr)                                         READCOEF.294   
*ENDIF                                                                     READCOEF.295   
         CALL MPI_BCAST(DAYNEAR,nBuffSize,ParaReal,iSend,                  READCOEF.296   
     &              MPI_COMM_WORLD,ierr)                                   READCOEF.297   
      ENDIF                                                                READCOEF.298   
!-----------------------------------------------------                     READCOEF.299   
! Deallocate arrays                                                        READCOEF.300   
!-----------------------------------------------------                     READCOEF.301   
      DEALLOCATE(HoldVar)                                                  READCOEF.302   
!-----------------------------------------------------                     READCOEF.303   
! Leave routine                                                            READCOEF.304   
!-----------------------------------------------------                     READCOEF.305   
      RETURN                                                               READCOEF.306   
!-----------------------------------------------------                     READCOEF.307   
! Error if we get to hear - reached end of file before reading in          READCOEF.308   
! all the data                                                             READCOEF.309   
!-----------------------------------------------------                     READCOEF.310   
 1001 WRITE(2,2031) BEGDAY,DAYNEAR                                         READCOEF.311   
      CALL ABORT                                                           READCOEF.312   
      END                                                                  READCOEF.313   
*DECK SETRES                                                               SETRES.1     
!=====================================================                     SETRES.2     
! Set up restoration state from the KOUNT=0 zonally averaged               SETRES.3     
! state and write this to FT13 for future use.                             SETRES.4     
! This is only done when KOUNT=0 and DAMP.GT.0.0.                          SETRES.5     
!=====================================================                     SETRES.6     
      SUBROUTINE SETRES                                                    SETRES.7     
      IMPLICIT NONE                                                        SETRES.8     
*CALL PARAM1                                                               SETRES.9     
*CALL PARAM2                                                               SETRES.10    
*CALL PARAM3                                                               SETRES.11    
*CALL SPECTR                                                               SETRES.12    
*CALL RESTOR                                                               SETRES.13    
*CALL MPIDECK                                                              SETRES.14    
!-----------------------------------------------------                     SETRES.15    
! Local variables                                                          SETRES.16    
!-----------------------------------------------------                     SETRES.17    
      REAL :: HoldVar(NNTx,NHEM,3*NL+1)                                    SETRES.18    
      REAL, ALLOCATABLE :: AllRes(:,:,:)                                   SETRES.19    
      INTEGER, PARAMETER :: TagRef=900                                     SETRES.20    
      INTEGER :: iCol2                                                     SETRES.21    
! Loop variables                                                           SETRES.22    
      INTEGER :: IHEM, J, L                                                SETRES.23    
!-----------------------------------------------------                     SETRES.24    
! Format statment                                                          SETRES.25    
!-----------------------------------------------------                     SETRES.26    
 2200 FORMAT(/' RESTORATION RECORD WRITTEN TO CHANNEL ',I3)                SETRES.27    
!-----------------------------------------------------                     SETRES.28    
! Only continue with code if DAMP > 0.                                     SETRES.29    
!-----------------------------------------------------                     SETRES.30    
      IF (DAMP.LE.0) RETURN                                                SETRES.31    
!-----------------------------------------------------                     SETRES.32    
! First zonal wavenumber is only stored on iRow=1                          SETRES.33    
!-----------------------------------------------------                     SETRES.34    
      IF (iRow.EQ.1) THEN                                                  SETRES.35    
         DO IHEM=1,NHEM                                                    SETRES.36    
            DO J=mTwin1(1,1)+1,mTwin1(2,1)                                 SETRES.37    
               SPRES(J,IHEM)=SP(J,1,IHEM)                                  SETRES.38    
            ENDDO                                                          SETRES.39    
            DO L=1,NL                                                      SETRES.40    
               DO J=mTwin1(1,1)+1,mTwin1(2,1)                              SETRES.41    
                  ZRES(J,IHEM,L)=Z(J,1,IHEM,L)                             SETRES.42    
                  DRES(J,IHEM,L)=D(J,1,IHEM,L)                             SETRES.43    
                  TRES(J,IHEM,L)=T(J,1,IHEM,L)                             SETRES.44    
               ENDDO                                                       SETRES.45    
            ENDDO                                                          SETRES.46    
         ENDDO                                                             SETRES.47    
                                                                           SETRES.48    
         !-----------------------------------------------------            SETRES.49    
         ! Store all the data that needs passing to PE 0                   SETRES.50    
         !-----------------------------------------------------            SETRES.51    
         DO L=1,NL                                                         SETRES.52    
            DO IHEM=1,NHEM                                                 SETRES.53    
               DO J=mTwin1(1,1)+1,mTwin1(2,1)                              SETRES.54    
                  HoldVar(J,IHEM,L)=ZRES(J,IHEM,L)                         SETRES.55    
                  HoldVar(J,IHEM,NL+L)=DRES(J,IHEM,L)                      SETRES.56    
                  HoldVar(J,IHEM,2*NL+L)=TRES(J,IHEM,L)                    SETRES.57    
               ENDDO                                                       SETRES.58    
            ENDDO                                                          SETRES.59    
         ENDDO                                                             SETRES.60    
         DO IHEM=1,NHEM                                                    SETRES.61    
            DO J=mTwin1(1,1)+1,mTwin1(2,1)                                 SETRES.62    
               HoldVar(J,IHEM,3*NL+1)=SPRES(J,IHEM)                        SETRES.63    
            ENDDO                                                          SETRES.64    
         ENDDO                                                             SETRES.65    
         !-----------------------------------------------------            SETRES.66    
         ! Send ZRES, etc to PE 0                                          SETRES.67    
         !-----------------------------------------------------            SETRES.68    
         IF (MYPE.GT.0) THEN                                               SETRES.69    
            iRecv=0                                                        SETRES.70    
            nBuffSize=NNTx*NHEM*(3*NL+1)                                   SETRES.71    
            iTag=TagRef+MyPe                                               SETRES.72    
            CALL MPI_BSEND(HoldVar,nBuffSize,ParaReal,iRecv,iTag,          SETRES.73    
     &           MPI_COMM_WORLD,ierr)                                      SETRES.74    
         ELSE                                                              SETRES.75    
            !-----------------------------------------------------         SETRES.76    
            ! Loop through PEs on row 1                                    SETRES.77    
            !-----------------------------------------------------         SETRES.78    
            ALLOCATE(AllRes(NNT,NHEM,3*NL+1))                              SETRES.79    
            DO iCol2=1,Px                                                  SETRES.80    
               !-----------------------------------------------------      SETRES.81    
               ! Receive the data                                          SETRES.82    
               !-----------------------------------------------------      SETRES.83    
               IF (iCol2.GT.1) THEN                                        SETRES.84    
                  iSend=PeGrid(iCol2,1)                                    SETRES.85    
                  nBuffSize=NNTx*NHEM*(3*NL+1)                             SETRES.86    
                  iTag=TagRef+iSend                                        SETRES.87    
                  CALL MPI_RECV(HoldVar,nBuffSize,ParaReal,iSend,          SETRES.88    
     &                 iTag,MPI_COMM_WORLD,istat,ierr)                     SETRES.89    
               ENDIF                                                       SETRES.90    
               !-----------------------------------------------------      SETRES.91    
               ! Write data into array                                     SETRES.92    
               !-----------------------------------------------------      SETRES.93    
               DO L=1,3*NL+1                                               SETRES.94    
                  DO IHEM=1,NHEM                                           SETRES.95    
                     DO J=mTwin1(1,1)+1,mTwin1(2,1)                        SETRES.96    
                        AllRes(NNT1(iCol2)+J,IHEM,L)=HoldVar(J,IHEM,L)     SETRES.97    
                     ENDDO                                                 SETRES.98    
                  ENDDO                                                    SETRES.99    
               ENDDO                                                       SETRES.100   
            ENDDO                                                          SETRES.101   
            !-----------------------------------------------------         SETRES.102   
            ! Write data to restoration file                               SETRES.103   
            !-----------------------------------------------------         SETRES.104   
            WRITE(13) AllRes                                               SETRES.105   
            DEALLOCATE(AllRes)                                             SETRES.106   
            WRITE(2,2200)13                                                SETRES.107   
         ENDIF                                                             SETRES.108   
      ENDIF                                                                SETRES.109   
      END                                                                  SETRES.110   
*DECK SETTEE                                                               SETTEE.1     
!=====================================================                     SETTEE.2     
! Subroutine to give annual cycle of TRES if wanted                        SETTEE.3     
!=====================================================                     SETTEE.4     
      SUBROUTINE SETTEE                                                    SETTEE.5     
      IMPLICIT NONE                                                        SETTEE.6     
*CALL PARAM1                                                               SETTEE.7     
*CALL PARAM2                                                               SETTEE.8     
*CALL PARAM3                                                               SETTEE.9     
*CALL OUTCON                                                               SETTEE.10    
*CALL RESTIJ                                                               SETTEE.11    
*CALL MPIDECK                                                              SETTEE.12    
!-----------------------------------------------------                     SETTEE.13    
! Local variables                                                          SETTEE.14    
!-----------------------------------------------------                     SETTEE.15    
      REAL :: YPHS                                                         SETTEE.16    
! Loop variables                                                           SETTEE.17    
      INTEGER :: L                                                         SETTEE.18    
!-----------------------------------------------------                     SETTEE.19    
! If YRLEN is zero then no seasonal cycle.                                 SETTEE.20    
!-----------------------------------------------------                     SETTEE.21    
      IF (NINT(YRLEN) .EQ. 0) THEN                                         SETTEE.22    
         YPHS = (1./SQRT(6.))                                              SETTEE.23    
      ELSE                                                                 SETTEE.24    
         YPHS=(1./SQRT(6.))*SIN(PI2*DAY/YRLEN)                             SETTEE.25    
      ENDIF                                                                SETTEE.26    
!-----------------------------------------------------                     SETTEE.27    
! NOT SURE THIS IS RIGHT. Seems consistent with old code                   SETTEE.28    
! (commented out below), but I don't understand why it should              SETTEE.29    
! depend on the number of hemispheres. Marc July 2009.                     SETTEE.30    
!      IADB=NWJ2+1                                                         SETTEE.31    
!      DO 10 L=1,NL                                                        SETTEE.32    
!        IAD=IADB+(L-1)*IGA                                                SETTEE.33    
!        TTRES(IAD)=FAC(L)*DTNS*YPHS                                       SETTEE.34    
!10    CONTINUE                                                            SETTEE.35    
!-----------------------------------------------------                     SETTEE.36    
      IF (MyPe.EQ.0) THEN                                                  SETTEE.37    
         IF (NHEM.EQ.1) THEN                                               SETTEE.38    
            DO L=2,NL                                                      SETTEE.39    
               TTRES(1,1,1,L)=FAC(L)*DTNS*YPHS                             SETTEE.40    
            ENDDO                                                          SETTEE.41    
         ELSE                                                              SETTEE.42    
            DO L=1,NL                                                      SETTEE.43    
               TTRES(1,1,NHEM,L)=FAC(L)*DTNS*YPHS                          SETTEE.44    
            ENDDO                                                          SETTEE.45    
         ENDIF                                                             SETTEE.46    
      ENDIF                                                                SETTEE.47    
      RETURN                                                               SETTEE.48    
      END                                                                  SETTEE.49    
!=====================================================                     SETTEE.50    
! This subroutine sets up restoration temperature field.                   SETTEE.51    
! The temperature at SIGMA = 1 is TGR, entered in Kelvin.                  SETTEE.52    
! a lapse rate of ALR k/m is assumed under the tropopause and              SETTEE.53    
! zero above. The actual profile tends to this away from the               SETTEE.54    
! tropopause, with smooth interpolation depending on DTTRP                 SETTEE.55    
! at the model tropopause. The height of                                   SETTEE.56    
! the tropopause is given as ZTROP m.                                      SETTEE.57    
!=====================================================                     SETTEE.58    
      SUBROUTINE SETZT                                                     SETTEE.59    
      IMPLICIT NONE                                                        SETTEE.60    
*CALL PARAM1                                                               SETTEE.61    
*CALL PARAM2                                                               SETTEE.62    
*CALL PARAM3                                                               SETTEE.63    
*CALL BLANK                                                                SETTEE.64    
*CALL RESTIJ                                                               SETTEE.65    
*CALL BATS                                                                 SETTEE.66    
*CALL MPIDECK                                                              SETTEE.67    
!-----------------------------------------------------                     SETTEE.68    
! Local variables                                                          SETTEE.69    
!-----------------------------------------------------                     SETTEE.70    
      REAL :: SIGPREV                                                      SETTEE.71    
      REAL :: TPREV                                                        SETTEE.72    
      REAL :: ZPREV                                                        SETTEE.73    
      REAL :: ZP, TP                                                       SETTEE.74    
      REAL :: TPM                                                          SETTEE.75    
      REAL :: ZPP, TPP                                                     SETTEE.76    
! Loop variables                                                           SETTEE.77    
      INTEGER :: IHEM, IM, IN, L                                           SETTEE.78    
!-----------------------------------------------------                     SETTEE.79    
! Zero TTRES array                                                         SETTEE.80    
!-----------------------------------------------------                     SETTEE.81    
      DO L=1,NL                                                            SETTEE.82    
         DO IHEM=1,NHEM                                                    SETTEE.83    
            DO IM=1,MMTyy(iRow)                                            SETTEE.84    
               DO IN=1,NNTxx(iCol)                                         SETTEE.85    
                  TTRES(IN,IM,IHEM,L)=(0.0,0.0)                            SETTEE.86    
               ENDDO                                                       SETTEE.87    
            ENDDO                                                          SETTEE.88    
         ENDDO                                                             SETTEE.89    
      ENDDO                                                                SETTEE.90    
!-----------------------------------------------------                     SETTEE.91    
! Calculate TRS                                                            SETTEE.92    
!-----------------------------------------------------                     SETTEE.93    
      DTTRP=DTTRP*CT                                                       SETTEE.94    
      SIGPREV=1.                                                           SETTEE.95    
      TPREV=TGR                                                            SETTEE.96    
      ZPREV=0.                                                             SETTEE.97    
      DO L=NL,1,-1                                                         SETTEE.98    
         ZP=ZPREV+(GASCON*TPREV/GA)*LOG(SIGPREV/SIGMA(L))                  SETTEE.99    
         TP=TGR-ZTROP*ALR                                                  SETTEE.100   
         TP=TP+SQRT((.5*ALR*(ZP-ZTROP))**2+DTTRP**2)                       SETTEE.101   
         TP=TP-.5*ALR*(ZP-ZTROP)                                           SETTEE.102   
         TPM=.5*(TPREV+TP)                                                 SETTEE.103   
         ZPP=ZPREV+(GASCON*TPM/GA)*LOG(SIGPREV/SIGMA(L))                   SETTEE.104   
         TPP=TGR-ZTROP*ALR                                                 SETTEE.105   
         TPP=TPP+SQRT((.5*ALR*(ZPP-ZTROP))**2+DTTRP**2)                    SETTEE.106   
         TPP=TPP-.5*ALR*(ZPP-ZTROP)                                        SETTEE.107   
         TRS(L)=TPP                                                        SETTEE.108   
         ZPREV=ZPREV+(.5*(TPP+TPREV)*GASCON/GA)*LOG(SIGPREV/SIGMA(L))      SETTEE.109   
         TPREV=TPP                                                         SETTEE.110   
         SIGPREV=SIGMA(L)                                                  SETTEE.111   
      ENDDO                                                                SETTEE.112   
                                                                           SETTEE.113   
      IF (MYPE.EQ.0) THEN                                                  SETTEE.114   
         WRITE(2,2000)                                                     SETTEE.115   
         WRITE(2,2010) TRS                                                 SETTEE.116   
      ENDIF                                                                SETTEE.117   
 2000 FORMAT(/' RESTORATION TEMPERATURE STRATIFICATION IN K ')             SETTEE.118   
 2010 FORMAT(10F7.2)                                                       SETTEE.119   
C                                                                          SETTEE.120   
      DO L=1,NL                                                            SETTEE.121   
         TRS(L)=TRS(L)/CT                                                  SETTEE.122   
      ENDDO                                                                SETTEE.123   
!-----------------------------------------------------                     SETTEE.124   
! Now the latitudinal variation in TTRES is set up                         SETTEE.125   
! (this being in terms of a deviation from T0 which                        SETTEE.126   
! is usually constant with height)                                         SETTEE.127   
!-----------------------------------------------------                     SETTEE.128   
      IF (MyPe.EQ.0) THEN                                                  SETTEE.129   
         DO L=1,NL                                                         SETTEE.130   
            TTRES(1,1,1,L)=SQRT(2.)*(TRS(L)-T0(L))                         SETTEE.131   
            TTRES(2,1,1,L)=-2./3.*SQRT(0.4)*DTEP*FAC(L)                    SETTEE.132   
         ENDDO                                                             SETTEE.133   
         IF (NHEM.EQ.2) THEN                                               SETTEE.134   
            DO L=1,NL                                                      SETTEE.135   
               TTRES(1,1,NHEM,L)=(1./SQRT(6.))*DTNS*FAC(L)                 SETTEE.136   
            ENDDO                                                          SETTEE.137   
         ENDIF                                                             SETTEE.138   
      ENDIF                                                                SETTEE.139   
      DTTRP=DTTRP/CT                                                       SETTEE.140   
      END                                                                  SETTEE.141   
*DECK SFCT                                                                 SFCT.1     
*IF DEF,ONLY_V3                                                            SFCT.2     
!=====================================================                     SFCT.3     
! Subroutine to find new T and Q based on DOY and climatology              SFCT.4     
!=====================================================                     SFCT.5     
      SUBROUTINE SFCT(IFIRST, TROPHT)                                      SFCT.6     
      IMPLICIT NONE                                                        SFCT.7     
*CALL PARAM1                                                               SFCT.8     
*CALL PARAM2                                                               SFCT.9     
*CALL PARAM3                                                               SFCT.10    
*CALL BATS                                                                 SFCT.11    
*CALL GRIDPA3                                                              SFCT.12    
*CALL PHYSCA                                                               SFCT.13    
*CALL OROG_G                                                               SFCT.14    
*CALL BLANK                                                                SFCT.15    
*CALL MPIDECK                                                              SFCT.16    
!-----------------------------------------------------                     SFCT.17    
! Subroutine arguments                                                     SFCT.18    
!-----------------------------------------------------                     SFCT.19    
      INTEGER :: IFIRST                                                    SFCT.20    
      REAL :: tropht(MGx,nhem,JGy)                                         SFCT.21    
!-----------------------------------------------------                     SFCT.22    
! External function                                                        SFCT.23    
!-----------------------------------------------------                     SFCT.24    
      REAL, EXTERNAL :: PQSAT                                              SFCT.25    
!-----------------------------------------------------                     SFCT.26    
! Local variables                                                          SFCT.27    
!-----------------------------------------------------                     SFCT.28    
      REAL :: TSTAR1(MGx,NHEM,JGy),TSTAR2(MGx,NHEM,JGy)                    SFCT.29    
      integer :: cmth                                                      SFCT.30    
      character*3 :: mn(13)                                                SFCT.31    
      character*31 :: sstfile                                              SFCT.32    
      integer :: mnlen(13)                                                 SFCT.33    
      INTEGER :: MTH1                                                      SFCT.34    
      REAL :: RHSCL                                                        SFCT.35    
      REAL :: AMFRAC                                                       SFCT.36    
      REAL :: ESCON                                                        SFCT.37    
      INTEGER :: MTH2                                                      SFCT.38    
      REAL :: ClimData(5,MGx,NHEM,JGy)                                     SFCT.39    
      REAL :: SST, SSQ, SSP, SHDUM                                         SFCT.40    
! Loop variables                                                           SFCT.41    
      INTEGER :: I, IHEM, J, K                                             SFCT.42    
!-----------------------------------------------------                     SFCT.43    
! Set and store some values                                                SFCT.44    
!-----------------------------------------------------                     SFCT.45    
      DATA MTH1/0/                                                         SFCT.46    
      SAVE MTH1, TSTAR1, TSTAR2                                            SFCT.47    
      data mn/'dec','jan','feb','mar','apr','may','jun','jul','aug'        SFCT.48    
     &        ,'sep','oct','nov','dec'/                                    SFCT.49    
*CALL PARAMH                                                               OAS_COMTILE.118   
!-----------------------------------------------------                     SFCT.50    
! Set constant and determine the current month                             SFCT.51    
!-----------------------------------------------------                     SFCT.52    
      RHSCL=288.0*GASCON/GA                                                SFCT.53    
      CALL CALNDR(DOY,MTH2,AMFRAC)                                         SFCT.54    
!-----------------------------------------------------                     SFCT.55    
! First time around need to read in climatology data                       SFCT.56    
!-----------------------------------------------------                     SFCT.57    
      IF (IFIRST.EQ.1) THEN                                                SFCT.58    
         IF (MyPe.EQ.0) THEN                                               SFCT.59    
            cmth=mth2+1                                                    SFCT.60    
            !-----------------------------------------------------         SFCT.61    
            ! Wrap-around to January.                                      SFCT.62    
            !-----------------------------------------------------         SFCT.63    
            IF (cmth.eq.13) cmth=1                                         SFCT.64    
            !-----------------------------------------------------         SFCT.65    
            ! Form the file name                                           SFCT.66    
            !-----------------------------------------------------         SFCT.67    
            write(sstfile,'(a,i3.3,a,i3.3,a)')                             SFCT.68    
     &           'tqpap_'//mn(cmth)//'_jg',jg,'_mg',mg,'_nhem2.dat'        SFCT.69    
         ENDIF                                                             SFCT.70    
         !-----------------------------------------------------            SFCT.71    
         ! Open file and read in the data                                  SFCT.72    
         !-----------------------------------------------------            SFCT.73    
         CALL READCLIM(sstfile,5,.FALSE.,ClimData)                         SFCT.74    
         !-----------------------------------------------------            SFCT.75    
         ! Loop over all grid points                                       SFCT.76    
         !-----------------------------------------------------            SFCT.77    
         DO J=1,JGyy(iRow)                                                 SFCT.78    
            DO IHEM=1,NHEM                                                 SFCT.79    
               DO I=1,MGxx(iCol)                                           SFCT.80    
                  tstar2(I,IHEM,J)=ClimData(1,I,IHEM,J)/ct                 SFCT.81    
                  tropht(I,IHEM,J)=ClimData(5,I,IHEM,J)                    SFCT.82    
               ENDDO                                                       SFCT.83    
            ENDDO                                                          SFCT.84    
         ENDDO                                                             SFCT.85    
         !-----------------------------------------------------            SFCT.86    
         ! Wont need to read in the data next time                         SFCT.87    
         !-----------------------------------------------------            SFCT.88    
         MTH1=CMTH                                                         SFCT.89    
      ENDIF  ! IFIRST                                                      SFCT.90    
!-----------------------------------------------------                     SFCT.91    
! Check if a new month a climatology data is needed                        SFCT.92    
!-----------------------------------------------------                     SFCT.93    
      IF (MTH1.NE.MTH2) THEN                                               SFCT.94    
         !-----------------------------------------------------            SFCT.95    
         ! Transfer tstar2 to tstar1                                       SFCT.96    
         !-----------------------------------------------------            SFCT.97    
         DO J=1,JGyy(iRow)                                                 SFCT.98    
            DO IHEM=1,NHEM                                                 SFCT.99    
               DO I=1,MGxx(iCol)                                           SFCT.100   
                  tstar1(I,IHEM,J)=tstar2(I,IHEM,J)                        SFCT.101   
               ENDDO                                                       SFCT.102   
            ENDDO                                                          SFCT.103   
         ENDDO                                                             SFCT.104   
         !-----------------------------------------------------            SFCT.105   
         ! Move on month and wrap-around to January.                       SFCT.106   
         !-----------------------------------------------------            SFCT.107   
         IF (MyPe.EQ.0) THEN                                               SFCT.108   
            cmth=mth2+1                                                    SFCT.109   
            !-----------------------------------------------------         SFCT.110   
            ! Wrap-around to January.                                      SFCT.111   
            !-----------------------------------------------------         SFCT.112   
            IF (cmth.eq.13) cmth=1                                         SFCT.113   
            !-----------------------------------------------------         SFCT.114   
            ! Form the file name                                           SFCT.115   
            !-----------------------------------------------------         SFCT.116   
            write(sstfile,'(a,i3.3,a,i3.3,a)')                             SFCT.117   
     &           'tqpap_'//mn(cmth+1)//'_jg',jg,'_mg',mg,'_nhem2.dat'      SFCT.118   
         ENDIF                                                             SFCT.119   
         !-----------------------------------------------------            SFCT.120   
         ! Open file and read in the data                                  SFCT.121   
         !-----------------------------------------------------            SFCT.122   
         CALL READCLIM(sstfile,5,.TRUE.,ClimData)                          SFCT.123   
         !-----------------------------------------------------            SFCT.124   
         ! Loop over all grid points                                       SFCT.125   
         !-----------------------------------------------------            SFCT.126   
         DO J=1,JGyy(iRow)                                                 SFCT.127   
            DO IHEM=1,NHEM                                                 SFCT.128   
               DO I=1,MGxx(iCol)                                           SFCT.129   
                  tstar2(I,IHEM,J)=ClimData(1,I,IHEM,J)/ct                 SFCT.130   
                  tropht(I,IHEM,J)=ClimData(5,I,IHEM,J)                    SFCT.131   
               ENDDO                                                       SFCT.132   
            ENDDO                                                          SFCT.133   
         ENDDO                                                             SFCT.134   
         !-----------------------------------------------------            SFCT.135   
         ! Set the old month to current month                              SFCT.136   
         !-----------------------------------------------------            SFCT.137   
         MTH1=MTH2                                                         SFCT.138   
      ENDIF                     ! MTH2.NE.MTH1                             SFCT.139   
!-----------------------------------------------------                     SFCT.140   
! Set TSTAR, QSTAR and SQSTAR                                              SFCT.141   
!-----------------------------------------------------                     SFCT.142   
      IF (.NOT.LSL) then                                                   SFCT.143   
         DO J=1,JGyy(iRow)                                                 SFCT.144   
            DO IHEM=1,NHEM                                                 SFCT.145   
               DO I=1,MGxx(iCol)                                           SFCT.146   
                  IF (gsg(I,IHEM,j).gt.0.) then                            SFCT.147   
                     tstar(I,IHEM,j)=tstar2(I,IHEM,j)*amfrac+              SFCT.148   
     &                    tstar1(I,IHEM,j)*(1.0-amfrac)                    SFCT.149   
                     IF (LPERPET) THEN                                     SFCT.150   
                        escon=1./exp(-gsg(I,IHEM,j)/RHSCL)                 SFCT.151   
                     ELSE                                                  SFCT.152   
                        escon=1./plg3(I,IHEM,J)                            SFCT.153   
                     ENDIF                                                 SFCT.154   
                     sqstar(I,IHEM,j)=escon*pqsat(tstar(I,IHEM,j))         SFCT.155   
                     qstar(I,IHEM,j)=sqstar(I,IHEM,j)*0.75                 SFCT.156   
                  endif                                                    SFCT.157   
               ENDDO                                                       SFCT.158   
            enddo                                                          SFCT.159   
         enddo                                                             SFCT.160   
      endif                                                                SFCT.161   
      RETURN                                                               SFCT.181   
      END                                                                  SFCT.182   
*ENDIF                                                                     SFCT.183   
*DECK SHARECOEF                                                            SHARECOEF.1     
!=====================================================                     SHARECOEF.2     
! Share coefficients between processor PE 0 and the other                  SHARECOEF.3     
! processors                                                               SHARECOEF.4     
!=====================================================                     SHARECOEF.5     
      SUBROUTINE SHARECOEF(lShare,nLevels,LargeArray,SmallArray)           SHARECOEF.6     
      IMPLICIT NONE                                                        SHARECOEF.7     
*CALL PARAM1                                                               SHARECOEF.8     
*CALL PARAM2                                                               SHARECOEF.9     
*CALL PARAM3                                                               SHARECOEF.10    
*CALL MPIDECK                                                              SHARECOEF.11    
!-----------------------------------------------------                     SHARECOEF.12    
! Passed variables                                                         SHARECOEF.13    
!-----------------------------------------------------                     SHARECOEF.14    
! lShare=TRUE: data is being shared from PE 0 to other PEs                 SHARECOEF.15    
! lShare=FALSE: all the data to sent to PE 0                               SHARECOEF.16    
      LOGICAL :: lShare                                                    SHARECOEF.17    
! Number of levels                                                         SHARECOEF.18    
      INTEGER :: nLevels                                                   SHARECOEF.19    
! Large array containing all the coefficients stored in the                SHARECOEF.20    
! original way                                                             SHARECOEF.21    
      COMPLEX :: LargeArray(NWJ2, nLevels)                                 SHARECOEF.22    
! Typically smaller array with coefficients stored for use                 SHARECOEF.23    
! in model and shared across PEs.                                          SHARECOEF.24    
      COMPLEX :: SmallArray(NNTx,MMTy,nLevels)                             SHARECOEF.25    
!-----------------------------------------------------                     SHARECOEF.26    
! Local variables                                                          SHARECOEF.27    
!-----------------------------------------------------                     SHARECOEF.28    
      COMPLEX :: SmallArray2(NNTx,MMTy,nLevels)                            SHARECOEF.29    
      INTEGER, PARAMETER :: TagRef=1000                                    SHARECOEF.30    
      INTEGER :: iCol2, iRow2                                              SHARECOEF.31    
! Loop variables                                                           SHARECOEF.32    
      INTEGER :: I, IM, IN, iPe, L                                         SHARECOEF.33    
!-----------------------------------------------------                     SHARECOEF.34    
! Determine if data is leaving PE 0 or coming to it                        SHARECOEF.35    
!-----------------------------------------------------                     SHARECOEF.36    
      IF (lShare) THEN                                                     SHARECOEF.37    
         !-----------------------------------------------------            SHARECOEF.38    
         ! Data will be sent from PE 0. Determine if this is PE 0          SHARECOEF.39    
         !-----------------------------------------------------            SHARECOEF.40    
         IF (MyPe.EQ.0) THEN                                               SHARECOEF.41    
            !-----------------------------------------------------         SHARECOEF.42    
            ! Loop through the PEs                                         SHARECOEF.43    
            !-----------------------------------------------------         SHARECOEF.44    
            DO iPe=NPE-1,0,-1                                              SHARECOEF.45    
               iCol2=GRID(1,iPe)                                           SHARECOEF.46    
               iRow2=GRID(2,iPe)                                           SHARECOEF.47    
               !-----------------------------------------------------      SHARECOEF.48    
               ! Rearrange the zonal wavenumbers                           SHARECOEF.49    
               !-----------------------------------------------------      SHARECOEF.50    
               DO L=1,nLevels                                              SHARECOEF.51    
                  DO IM=1,MMTyy(iRow2)                                     SHARECOEF.52    
                     DO IN=1,NNTxx(iCol2)                                  SHARECOEF.53    
                        SmallArray(IN,IM,L)=                               SHARECOEF.54    
     &                       LargeArray(CoefConv(IN,IM,iPe),L)             SHARECOEF.55    
                     ENDDO                                                 SHARECOEF.56    
                  ENDDO                                                    SHARECOEF.57    
               ENDDO                                                       SHARECOEF.58    
               !-----------------------------------------------------      SHARECOEF.59    
               ! Pass to PE iPe                                            SHARECOEF.60    
               !-----------------------------------------------------      SHARECOEF.61    
               IF (iPe.GT.0) THEN                                          SHARECOEF.62    
                  iRecv=iPe                                                SHARECOEF.63    
                  nBuffSize=NNTx*MMTy*nLevels                              SHARECOEF.64    
                  iTag=TagRef+iPe                                          SHARECOEF.65    
                  CALL MPI_BSEND(SmallArray, nBuffSize, ParaCom, iRecv,    SHARECOEF.66    
     &                 iTag, MPI_COMM_WORLD, ierr)                         SHARECOEF.67    
               ENDIF                                                       SHARECOEF.68    
            ENDDO                                                          SHARECOEF.69    
         ENDIF                                                             SHARECOEF.70    
         IF (NPE.GT.1) CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)              SHARECOEF.71    
         IF (MyPe.GT.0) THEN                                               SHARECOEF.72    
            !-----------------------------------------------------         SHARECOEF.73    
            ! Receive data from PE 0                                       SHARECOEF.74    
            !-----------------------------------------------------         SHARECOEF.75    
            iSend=0                                                        SHARECOEF.76    
            nBuffSize=NNTx*MMTy*nLevels                                    SHARECOEF.77    
            iTag=TagRef+MyPe                                               SHARECOEF.78    
            CALL MPI_RECV(SmallArray, nBuffSize, ParaCom, iSend,           SHARECOEF.79    
     &           iTag, MPI_COMM_WORLD, istat, ierr)                        SHARECOEF.80    
         ENDIF                                                             SHARECOEF.81    
      ELSE                                                                 SHARECOEF.82    
         !-----------------------------------------------------            SHARECOEF.83    
         ! Data will be sent to PE 0. Determine if this is PE 0            SHARECOEF.84    
         !-----------------------------------------------------            SHARECOEF.85    
         IF (MyPe.GT.0) THEN                                               SHARECOEF.86    
            !-----------------------------------------------------         SHARECOEF.87    
            ! Send data to PE 0                                            SHARECOEF.88    
            !-----------------------------------------------------         SHARECOEF.89    
            iRecv=0                                                        SHARECOEF.90    
            nBuffSize=NNTx*MMTy*nLevels                                    SHARECOEF.91    
            iTag=TagRef+MyPe                                               SHARECOEF.92    
            CALL MPI_BSEND(SmallArray, nBuffSize, ParaCom, iRecv,          SHARECOEF.93    
     &           iTag, MPI_COMM_WORLD, ierr)                               SHARECOEF.94    
         ENDIF                                                             SHARECOEF.95    
         IF (NPE.GT.1) CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)              SHARECOEF.96    
         IF (MyPe.EQ.0) THEN                                               SHARECOEF.97    
            !-----------------------------------------------------         SHARECOEF.98    
            ! Loop through the PEs                                         SHARECOEF.99    
            !-----------------------------------------------------         SHARECOEF.100   
            DO iPe=0,NPE-1                                                 SHARECOEF.101   
               IF (iPe.EQ.0) THEN                                          SHARECOEF.102   
                  !---------------------------------------------------     SHARECOEF.103   
                  ! This data is already contained on PE 0                 SHARECOEF.104   
                  !---------------------------------------------------     SHARECOEF.105   
                  DO L=1,nLevels                                           SHARECOEF.106   
                     DO IM=1,MMTyy(iRow)                                   SHARECOEF.107   
                        DO IN=1,NNTxx(iCol)                                SHARECOEF.108   
                           LargeArray(CoefConv(IN,IM,iPe),L)=              SHARECOEF.109   
     &                          SmallArray(IN,IM,L)                        SHARECOEF.110   
                        ENDDO                                              SHARECOEF.111   
                     ENDDO                                                 SHARECOEF.112   
                  ENDDO                                                    SHARECOEF.113   
               ELSE                                                        SHARECOEF.114   
                  !---------------------------------------------------     SHARECOEF.115   
                  ! Receive data from the other PEs                        SHARECOEF.116   
                  !---------------------------------------------------     SHARECOEF.117   
                  iSend=iPe                                                SHARECOEF.118   
                  nBuffSize=NNTx*MMTy*nLevels                              SHARECOEF.119   
                  iTag=TagRef+iPe                                          SHARECOEF.120   
                  CALL MPI_RECV(SmallArray2, nBuffSize, ParaCom, iSend,    SHARECOEF.121   
     &                 iTag, MPI_COMM_WORLD, istat, ierr)                  SHARECOEF.122   
                  !---------------------------------------------------     SHARECOEF.123   
                  ! Rearrange the zonal wavenumbers                        SHARECOEF.124   
                  !---------------------------------------------------     SHARECOEF.125   
                  iCol2=GRID(1,iPe)                                        SHARECOEF.126   
                  iRow2=GRID(2,iPe)                                        SHARECOEF.127   
                  DO L=1,nLevels                                           SHARECOEF.128   
                     DO IM=1,MMTyy(iRow2)                                  SHARECOEF.129   
                        DO IN=1,NNTxx(iCol2)                               SHARECOEF.130   
                           LargeArray(CoefConv(IN,IM,iPe),L)=              SHARECOEF.131   
     &                          SmallArray2(IN,IM,L)                       SHARECOEF.132   
                        ENDDO                                              SHARECOEF.133   
                     ENDDO                                                 SHARECOEF.134   
                  ENDDO                                                    SHARECOEF.135   
               ENDIF                                                       SHARECOEF.136   
            ENDDO                                                          SHARECOEF.137   
         ENDIF                                                             SHARECOEF.138   
      ENDIF                                                                SHARECOEF.139   
      END                                                                  SHARECOEF.140   
*DECK SHAREGRID                                                            SHAREGRID.1     
*IF DEF,ABOVE_V1                                                           SHAREGRID.2     
!=====================================================                     SHAREGRID.3     
! Share grid value between processor PE 0 and the other                    SHAREGRID.4     
! processors                                                               SHAREGRID.5     
!=====================================================                     SHAREGRID.6     
      SUBROUTINE SHAREGRID(lShare,xDim,nLevels,LargeArray,SmallArray)      SHAREGRID.7     
      IMPLICIT NONE                                                        SHAREGRID.8     
*CALL PARAM1                                                               SHAREGRID.9     
*CALL PARAM2                                                               SHAREGRID.10    
*CALL PARAM3                                                               SHAREGRID.11    
*CALL MPIDECK                                                              SHAREGRID.12    
!-----------------------------------------------------                     SHAREGRID.13    
! Passed variables                                                         SHAREGRID.14    
!-----------------------------------------------------                     SHAREGRID.15    
! lShare=TRUE: data is being shared from PE 0 to other PEs                 SHAREGRID.16    
! lShare=FALSE: all the data to sent to PE 0                               SHAREGRID.17    
      LOGICAL :: lShare                                                    SHAREGRID.18    
! Length of x-axis for LargeArray (should be MG or MGPP)                   SHAREGRID.19    
      INTEGER :: xDim                                                      SHAREGRID.20    
! Number of levels                                                         SHAREGRID.21    
      INTEGER :: nLevels                                                   SHAREGRID.22    
! Large array containing all the coefficients stored in the                SHAREGRID.23    
! original way                                                             SHAREGRID.24    
      REAL :: LargeArray(xDim, NHEM, JG, nLevels)                          SHAREGRID.25    
! Typically smaller array with coefficients stored for use                 SHAREGRID.26    
! in model and shared across PEs.                                          SHAREGRID.27    
      REAL :: SmallArray(MGx, NHEM, JGy, nLevels)                          SHAREGRID.28    
!-----------------------------------------------------                     SHAREGRID.29    
! Local variables                                                          SHAREGRID.30    
!-----------------------------------------------------                     SHAREGRID.31    
      REAL :: SmallArray2(MGx, NHEM, JGy, nLevels)                         SHAREGRID.32    
      INTEGER, PARAMETER :: TagRef=1100                                    SHAREGRID.33    
      INTEGER :: iCol2, iRow2                                              SHAREGRID.34    
! Loop variables                                                           SHAREGRID.35    
      INTEGER :: I, IHEM, iPe, J, L                                        SHAREGRID.36    
!-----------------------------------------------------                     SHAREGRID.37    
! No data need passing for one processor                                   SHAREGRID.38    
!-----------------------------------------------------                     SHAREGRID.39    
      IF (NPE.EQ.1) THEN                                                   SHAREGRID.40    
         IF (lShare) THEN                                                  SHAREGRID.41    
            DO L=1,nLevels                                                 SHAREGRID.42    
               DO J=1,JG                                                   SHAREGRID.43    
                  DO IHEM=1,NHEM                                           SHAREGRID.44    
                     DO I=1,MGx                                            SHAREGRID.45    
                        SmallArray(I,IHEM,J,L)=LargeArray(I,IHEM,J,L)      SHAREGRID.46    
                     ENDDO                                                 SHAREGRID.47    
                  ENDDO                                                    SHAREGRID.48    
               ENDDO                                                       SHAREGRID.49    
            ENDDO                                                          SHAREGRID.50    
         ELSE                                                              SHAREGRID.51    
            DO L=1,nLevels                                                 SHAREGRID.52    
               DO J=1,JG                                                   SHAREGRID.53    
                  DO IHEM=1,NHEM                                           SHAREGRID.54    
                     DO I=1,MGx                                            SHAREGRID.55    
                        LargeArray(I,IHEM,J,L)=SmallArray(I,IHEM,J,L)      SHAREGRID.56    
                     ENDDO                                                 SHAREGRID.57    
                  ENDDO                                                    SHAREGRID.58    
               ENDDO                                                       SHAREGRID.59    
            ENDDO                                                          SHAREGRID.60    
         ENDIF                                                             SHAREGRID.61    
      ELSE                                                                 SHAREGRID.62    
         !-----------------------------------------------------            SHAREGRID.63    
         ! Determine if data is leaving PE 0 or coming to it               SHAREGRID.64    
         !-----------------------------------------------------            SHAREGRID.65    
         IF (lShare) THEN                                                  SHAREGRID.66    
            !-----------------------------------------------------         SHAREGRID.67    
            ! Data will be sent from PE 0. Determine if this is PE 0       SHAREGRID.68    
            !-----------------------------------------------------         SHAREGRID.69    
            IF (MyPe.EQ.0) THEN                                            SHAREGRID.70    
               !-----------------------------------------------------      SHAREGRID.71    
               ! Loop through the PEs                                      SHAREGRID.72    
               !-----------------------------------------------------      SHAREGRID.73    
               DO iPe=NPE-1,0,-1                                           SHAREGRID.74    
                  iCol2=GRID(1,iPe)                                        SHAREGRID.75    
                  iRow2=GRID(2,iPe)                                        SHAREGRID.76    
                  !---------------------------------------------------     SHAREGRID.77    
                  ! Store the values needed for PE iPe                     SHAREGRID.78    
                  !---------------------------------------------------     SHAREGRID.79    
                  DO L=1,nLevels                                           SHAREGRID.80    
                     DO J=1,JGyy(iRow2)                                    SHAREGRID.81    
                        DO IHEM=1,NHEM                                     SHAREGRID.82    
                           DO I=1,MGxx(iCol2)                              SHAREGRID.83    
                              SmallArray(I,IHEM,J,L)=                      SHAREGRID.84    
     &                             LargeArray(II1(iCol2)+I,IHEM,           SHAREGRID.85    
     &                             JJ1(iRow2)+J,L)                         SHAREGRID.86    
                           ENDDO                                           SHAREGRID.87    
                        ENDDO                                              SHAREGRID.88    
                     ENDDO                                                 SHAREGRID.89    
                  ENDDO                                                    SHAREGRID.90    
                  !---------------------------------------------------     SHAREGRID.91    
                  ! Pass to PE iPe                                         SHAREGRID.92    
                  !---------------------------------------------------     SHAREGRID.93    
                  IF (iPe.GT.0) THEN                                       SHAREGRID.94    
                     iRecv=iPe                                             SHAREGRID.95    
                     nBuffSize=MGx*NHEM*JGy*nLevels                        SHAREGRID.96    
                     iTag=TagRef+iPe                                       SHAREGRID.97    
                     CALL MPI_BSEND(SmallArray, nBuffSize, ParaReal,       SHAREGRID.98    
     &                    iRecv, iTag, MPI_COMM_WORLD, ierr)               SHAREGRID.99    
                  ENDIF                                                    SHAREGRID.100   
               ENDDO                                                       SHAREGRID.101   
            ENDIF                                                          SHAREGRID.102   
            CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                         SHAREGRID.103   
            IF (MyPe.GT.0) THEN                                            SHAREGRID.104   
               !-----------------------------------------------------      SHAREGRID.105   
               ! Receive data from PE 0                                    SHAREGRID.106   
               !-----------------------------------------------------      SHAREGRID.107   
               iSend=0                                                     SHAREGRID.108   
               nBuffSize=MGx*NHEM*JGy*nLevels                              SHAREGRID.109   
               iTag=TagRef+MyPe                                            SHAREGRID.110   
               CALL MPI_RECV(SmallArray, nBuffSize, ParaReal, iSend,       SHAREGRID.111   
     &              iTag, MPI_COMM_WORLD, istat, ierr)                     SHAREGRID.112   
            ENDIF                                                          SHAREGRID.113   
         ELSE                                                              SHAREGRID.114   
            !-----------------------------------------------------         SHAREGRID.115   
            ! Data will be sent to PE 0. Determine if this is PE 0         SHAREGRID.116   
            !-----------------------------------------------------         SHAREGRID.117   
            IF (MyPe.GT.0) THEN                                            SHAREGRID.118   
               !-----------------------------------------------------      SHAREGRID.119   
               ! Send data to PE 0                                         SHAREGRID.120   
               !-----------------------------------------------------      SHAREGRID.121   
               iRecv=0                                                     SHAREGRID.122   
               nBuffSize=MGx*NHEM*JGy*nLevels                              SHAREGRID.123   
               iTag=TagRef+MyPe                                            SHAREGRID.124   
               CALL MPI_BSEND(SmallArray, nBuffSize, ParaReal, iRecv,      SHAREGRID.125   
     &              iTag, MPI_COMM_WORLD, ierr)                            SHAREGRID.126   
            ENDIF                                                          SHAREGRID.127   
            CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                         SHAREGRID.128   
            IF (MyPe.EQ.0) THEN                                            SHAREGRID.129   
               !-----------------------------------------------------      SHAREGRID.130   
               ! Loop through the PEs                                      SHAREGRID.131   
               !-----------------------------------------------------      SHAREGRID.132   
               DO iPe=0,NPE-1                                              SHAREGRID.133   
                  IF (iPe.EQ.0) THEN                                       SHAREGRID.134   
                     !------------------------------------------------     SHAREGRID.135   
                     ! Data already stored on PE 0                         SHAREGRID.136   
                     !------------------------------------------------     SHAREGRID.137   
                     DO L=1,nLevels                                        SHAREGRID.138   
                        DO J=1,JGyy(iRow)                                  SHAREGRID.139   
                           DO IHEM=1,NHEM                                  SHAREGRID.140   
                              DO I=1,MGxx(iCol)                            SHAREGRID.141   
                                 LargeArray(II1(iCol)+I,IHEM,              SHAREGRID.142   
     &                                JJ1(iRow)+J,L)=                      SHAREGRID.143   
     &                                SmallArray(I,IHEM,J,L)               SHAREGRID.144   
                              ENDDO                                        SHAREGRID.145   
                           ENDDO                                           SHAREGRID.146   
                        ENDDO                                              SHAREGRID.147   
                     ENDDO                                                 SHAREGRID.148   
                  ELSE                                                     SHAREGRID.149   
                     !------------------------------------------------     SHAREGRID.150   
                     ! Receive data from the other PEs                     SHAREGRID.151   
                     !------------------------------------------------     SHAREGRID.152   
                     iSend=iPe                                             SHAREGRID.153   
                     nBuffSize=MGx*NHEM*JGy*nLevels                        SHAREGRID.154   
                     iTag=TagRef+iPe                                       SHAREGRID.155   
                     CALL MPI_RECV(SmallArray2, nBuffSize, ParaReal,       SHAREGRID.156   
     &                    iSend, iTag, MPI_COMM_WORLD, istat, ierr)        SHAREGRID.157   
                     !------------------------------------------------     SHAREGRID.158   
                     ! Write values into large array                       SHAREGRID.159   
                     !------------------------------------------------     SHAREGRID.160   
                     iCol2=GRID(1,iPe)                                     SHAREGRID.161   
                     iRow2=GRID(2,iPe)                                     SHAREGRID.162   
                     DO L=1,nLevels                                        SHAREGRID.163   
                        DO J=1,JGyy(iRow2)                                 SHAREGRID.164   
                           DO IHEM=1,NHEM                                  SHAREGRID.165   
                              DO I=1,MGxx(iCol2)                           SHAREGRID.166   
                                 LargeArray(II1(iCol2)+I,IHEM,             SHAREGRID.167   
     &                                JJ1(iRow2)+J,L)=                     SHAREGRID.168   
     &                                SmallArray2(I,IHEM,J,L)              SHAREGRID.169   
                              ENDDO                                        SHAREGRID.170   
                           ENDDO                                           SHAREGRID.171   
                        ENDDO                                              SHAREGRID.172   
                     ENDDO                                                 SHAREGRID.173   
                  ENDIF                                                    SHAREGRID.174   
               ENDDO                                                       SHAREGRID.175   
            ENDIF                                                          SHAREGRID.176   
         ENDIF                                                             SHAREGRID.177   
      ENDIF                                                                SHAREGRID.178   
      END                                                                  SHAREGRID.179   
*ENDIF                                                                     SHAREGRID.180   
*DECK SHAREGRID2                                                           SHAREGRID2.1     
*IF DEF,ABOVE_V1                                                           SHAREGRID2.2     
!=====================================================                     SHAREGRID2.3     
! Like subroutine SHAREGRID but the order of the dimensions are            SHAREGRID2.4     
! different.                                                               SHAREGRID2.5     
!=====================================================                     SHAREGRID2.6     
      SUBROUTINE SHAREGRID2(lShare,nLevels,LargeArray,SmallArray)          SHAREGRID2.7     
      IMPLICIT NONE                                                        SHAREGRID2.8     
*CALL PARAM1                                                               SHAREGRID2.9     
*CALL PARAM2                                                               SHAREGRID2.10    
*CALL PARAM3                                                               SHAREGRID2.11    
*CALL MPIDECK                                                              SHAREGRID2.12    
!-----------------------------------------------------                     SHAREGRID2.13    
! Passed variables                                                         SHAREGRID2.14    
!-----------------------------------------------------                     SHAREGRID2.15    
! lShare=TRUE: data is being shared from PE 0 to other PEs                 SHAREGRID2.16    
! lShare=FALSE: all the data to sent to PE 0                               SHAREGRID2.17    
      LOGICAL :: lShare                                                    SHAREGRID2.18    
! Number of levels                                                         SHAREGRID2.19    
      INTEGER :: nLevels                                                   SHAREGRID2.20    
! Large array containing all the coefficients stored in the                SHAREGRID2.21    
! original way                                                             SHAREGRID2.22    
      REAL :: LargeArray(NHEM, JG, MG, nLevels)                            SHAREGRID2.23    
! Typically smaller array with coefficients stored for use                 SHAREGRID2.24    
! in model and shared across PEs.                                          SHAREGRID2.25    
      REAL :: SmallArray(NHEM, JGy, MGx, nLevels)                          SHAREGRID2.26    
!-----------------------------------------------------                     SHAREGRID2.27    
! Local variables                                                          SHAREGRID2.28    
!-----------------------------------------------------                     SHAREGRID2.29    
      INTEGER, PARAMETER :: TagRef=1200                                    SHAREGRID2.30    
      INTEGER :: iCol2, iRow2                                              SHAREGRID2.31    
      REAL :: SmallArray2(NHEM, JGy, MGx, nLevels)                         SHAREGRID2.32    
! Loop variables                                                           SHAREGRID2.33    
      INTEGER :: I, IHEM, iPe, J, L                                        SHAREGRID2.34    
!-----------------------------------------------------                     SHAREGRID2.35    
! No data need passing for one processor                                   SHAREGRID2.36    
!-----------------------------------------------------                     SHAREGRID2.37    
      IF (NPE.EQ.1) THEN                                                   SHAREGRID2.38    
         IF (lShare) THEN                                                  SHAREGRID2.39    
            DO L=1,nLevels                                                 SHAREGRID2.40    
               DO J=1,JG                                                   SHAREGRID2.41    
                  DO IHEM=1,NHEM                                           SHAREGRID2.42    
                     DO I=1,MGx                                            SHAREGRID2.43    
                        SmallArray(IHEM,J,I,L)=LargeArray(IHEM,J,I,L)      SHAREGRID2.44    
                     ENDDO                                                 SHAREGRID2.45    
                  ENDDO                                                    SHAREGRID2.46    
               ENDDO                                                       SHAREGRID2.47    
            ENDDO                                                          SHAREGRID2.48    
         ELSE                                                              SHAREGRID2.49    
            DO L=1,nLevels                                                 SHAREGRID2.50    
               DO J=1,JG                                                   SHAREGRID2.51    
                  DO IHEM=1,NHEM                                           SHAREGRID2.52    
                     DO I=1,MGx                                            SHAREGRID2.53    
                        LargeArray(IHEM,J,I,L)=SmallArray(IHEM,J,I,L)      SHAREGRID2.54    
                     ENDDO                                                 SHAREGRID2.55    
                  ENDDO                                                    SHAREGRID2.56    
               ENDDO                                                       SHAREGRID2.57    
            ENDDO                                                          SHAREGRID2.58    
         ENDIF                                                             SHAREGRID2.59    
      ELSE                                                                 SHAREGRID2.60    
         !-----------------------------------------------------            SHAREGRID2.61    
         ! Determine if data is leaving PE 0 or coming to it               SHAREGRID2.62    
         !-----------------------------------------------------            SHAREGRID2.63    
         IF (lShare) THEN                                                  SHAREGRID2.64    
            !-----------------------------------------------------         SHAREGRID2.65    
            ! Data will be sent from PE 0. Determine if this is PE 0       SHAREGRID2.66    
            !-----------------------------------------------------         SHAREGRID2.67    
            IF (MyPe.EQ.0) THEN                                            SHAREGRID2.68    
               !-----------------------------------------------------      SHAREGRID2.69    
               ! Loop through the PEs                                      SHAREGRID2.70    
               !-----------------------------------------------------      SHAREGRID2.71    
               DO iPe=NPE-1,0,-1                                           SHAREGRID2.72    
                  !---------------------------------------------------     SHAREGRID2.73    
                  ! Store the values needed for PE iPe                     SHAREGRID2.74    
                  !---------------------------------------------------     SHAREGRID2.75    
                  iCol2=GRID(1,iPe)                                        SHAREGRID2.76    
                  iRow2=GRID(2,iPe)                                        SHAREGRID2.77    
                  DO L=1,nLevels                                           SHAREGRID2.78    
                     DO J=1,JGyy(iRow2)                                    SHAREGRID2.79    
                        DO IHEM=1,NHEM                                     SHAREGRID2.80    
                           DO I=1,MGxx(iCol2)                              SHAREGRID2.81    
                              SmallArray(IHEM,J,I,L)=                      SHAREGRID2.82    
     &                             LargeArray(IHEM,JJ1(iRow2)+J,           SHAREGRID2.83    
     &                             II1(iCol2)+I,L)                         SHAREGRID2.84    
                           ENDDO                                           SHAREGRID2.85    
                        ENDDO                                              SHAREGRID2.86    
                     ENDDO                                                 SHAREGRID2.87    
                  ENDDO                                                    SHAREGRID2.88    
                  !---------------------------------------------------     SHAREGRID2.89    
                  ! Pass to PE iPe                                         SHAREGRID2.90    
                  !---------------------------------------------------     SHAREGRID2.91    
                  IF (iPe.GT.0) THEN                                       SHAREGRID2.92    
                     iRecv=iPe                                             SHAREGRID2.93    
                     nBuffSize=MGx*NHEM*JGy*nLevels                        SHAREGRID2.94    
                     iTag=TagRef+iPe                                       SHAREGRID2.95    
                     CALL MPI_BSEND(SmallArray, nBuffSize, ParaReal,       SHAREGRID2.96    
     &                    iRecv, iTag, MPI_COMM_WORLD, ierr)               SHAREGRID2.97    
                  ENDIF                                                    SHAREGRID2.98    
               ENDDO                                                       SHAREGRID2.99    
            ENDIF                                                          SHAREGRID2.100   
            CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                         SHAREGRID2.101   
            IF (MyPe.GT.0) THEN                                            SHAREGRID2.102   
               !-----------------------------------------------------      SHAREGRID2.103   
               ! Receive data from PE 0                                    SHAREGRID2.104   
               !-----------------------------------------------------      SHAREGRID2.105   
               iSend=0                                                     SHAREGRID2.106   
               nBuffSize=MGx*NHEM*JGy*nLevels                              SHAREGRID2.107   
               iTag=TagRef+MyPe                                            SHAREGRID2.108   
               CALL MPI_RECV(SmallArray, nBuffSize, ParaReal, iSend,       SHAREGRID2.109   
     &              iTag, MPI_COMM_WORLD, istat, ierr)                     SHAREGRID2.110   
            ENDIF                                                          SHAREGRID2.111   
         ELSE                                                              SHAREGRID2.112   
            !-----------------------------------------------------         SHAREGRID2.113   
            ! Data will be sent to PE 0. Determine if this is PE 0         SHAREGRID2.114   
            !-----------------------------------------------------         SHAREGRID2.115   
            IF (MyPe.GT.0) THEN                                            SHAREGRID2.116   
               !-----------------------------------------------------      SHAREGRID2.117   
               ! Send data to PE 0                                         SHAREGRID2.118   
               !-----------------------------------------------------      SHAREGRID2.119   
               iRecv=0                                                     SHAREGRID2.120   
               nBuffSize=MGx*NHEM*JGy*nLevels                              SHAREGRID2.121   
               iTag=TagRef+MyPe                                            SHAREGRID2.122   
               CALL MPI_BSEND(SmallArray, nBuffSize, ParaReal, iRecv,      SHAREGRID2.123   
     &              iTag, MPI_COMM_WORLD, ierr)                            SHAREGRID2.124   
            ENDIF                                                          SHAREGRID2.125   
            CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                         SHAREGRID2.126   
            IF (MyPe.EQ.0) THEN                                            SHAREGRID2.127   
               !-----------------------------------------------------      SHAREGRID2.128   
               ! Loop through the PEs                                      SHAREGRID2.129   
               !-----------------------------------------------------      SHAREGRID2.130   
               DO iPe=0,NPE-1                                              SHAREGRID2.131   
                  IF (iPe.EQ.0) THEN                                       SHAREGRID2.132   
                     !-------------------------------------------------    SHAREGRID2.133   
                     ! Data already stored on PE 0                         SHAREGRID2.134   
                     !-------------------------------------------------    SHAREGRID2.135   
                     DO L=1,nLevels                                        SHAREGRID2.136   
                        DO J=1,JGyy(iRow)                                  SHAREGRID2.137   
                           DO IHEM=1,NHEM                                  SHAREGRID2.138   
                              DO I=1,MGxx(iCol)                            SHAREGRID2.139   
                                 LargeArray(IHEM,JJ1(iRow)+J,              SHAREGRID2.140   
     &                                II1(iCol)+I,L)=                      SHAREGRID2.141   
     &                                SmallArray(IHEM,J,I,L)               SHAREGRID2.142   
                              ENDDO                                        SHAREGRID2.143   
                           ENDDO                                           SHAREGRID2.144   
                        ENDDO                                              SHAREGRID2.145   
                     ENDDO                                                 SHAREGRID2.146   
                  ELSE                                                     SHAREGRID2.147   
                     !-------------------------------------------------    SHAREGRID2.148   
                     ! Receive data from the other PEs                     SHAREGRID2.149   
                     !-------------------------------------------------    SHAREGRID2.150   
                     iSend=iPe                                             SHAREGRID2.151   
                     nBuffSize=MGx*NHEM*JGy*nLevels                        SHAREGRID2.152   
                     iTag=TagRef+iPe                                       SHAREGRID2.153   
                     CALL MPI_RECV(SmallArray2, nBuffSize, ParaReal,       SHAREGRID2.154   
     &                    iSend, iTag, MPI_COMM_WORLD, istat, ierr)        SHAREGRID2.155   
                     !-------------------------------------------------    SHAREGRID2.156   
                     ! Write values into large array                       SHAREGRID2.157   
                     !-------------------------------------------------    SHAREGRID2.158   
                     iCol2=GRID(1,iPe)                                     SHAREGRID2.159   
                     iRow2=GRID(2,iPe)                                     SHAREGRID2.160   
                     DO L=1,nLevels                                        SHAREGRID2.161   
                        DO J=1,JGyy(iRow2)                                 SHAREGRID2.162   
                           DO IHEM=1,NHEM                                  SHAREGRID2.163   
                              DO I=1,MGxx(iCol2)                           SHAREGRID2.164   
                                 LargeArray(IHEM,JJ1(iRow2)+J,             SHAREGRID2.165   
     &                                II1(iCol2)+I,L)=                     SHAREGRID2.166   
     &                                SmallArray2(IHEM,J,I,L)              SHAREGRID2.167   
                              ENDDO                                        SHAREGRID2.168   
                           ENDDO                                           SHAREGRID2.169   
                        ENDDO                                              SHAREGRID2.170   
                     ENDDO                                                 SHAREGRID2.171   
                  ENDIF                                                    SHAREGRID2.172   
               ENDDO                                                       SHAREGRID2.173   
            ENDIF                                                          SHAREGRID2.174   
         ENDIF                                                             SHAREGRID2.175   
      ENDIF                                                                SHAREGRID2.176   
      END                                                                  SHAREGRID2.177   
*ENDIF                                                                     SHAREGRID2.178   
*DECK SHAREGRID3                                                           SHAREGRID3.1     
*IF DEF,ABOVE_V1                                                           SHAREGRID3.2     
!=====================================================                     SHAREGRID3.3     
! Like subroutine SHAREGRID but the order of the dimensions are            SHAREGRID3.4     
! different and it only retrieves data from remote PEs for PE 0            SHAREGRID3.5     
! (in SHAREGRID this occurs when lShare is false).                         SHAREGRID3.6     
!=====================================================                     SHAREGRID3.7     
      SUBROUTINE SHAREGRID3(nLevels,SmallArray,LargeArray)                 SHAREGRID3.8     
      IMPLICIT NONE                                                        SHAREGRID3.9     
*CALL PARAM1                                                               SHAREGRID3.10    
*CALL PARAM2                                                               SHAREGRID3.11    
*CALL PARAM3                                                               SHAREGRID3.12    
*CALL MPIDECK                                                              SHAREGRID3.13    
!-----------------------------------------------------                     SHAREGRID3.14    
! Passed variables                                                         SHAREGRID3.15    
!-----------------------------------------------------                     SHAREGRID3.16    
! Number of levels                                                         SHAREGRID3.17    
      INTEGER :: nLevels                                                   SHAREGRID3.18    
! Typically smaller array with coefficients stored for use                 SHAREGRID3.19    
! in model and shared across PEs.                                          SHAREGRID3.20    
      REAL :: SmallArray(JGy, NHEM, nLevels)                               SHAREGRID3.21    
! Large array containing all the coefficients stored in the                SHAREGRID3.22    
! original way                                                             SHAREGRID3.23    
      REAL :: LargeArray(JG, NHEM, nLevels)                                SHAREGRID3.24    
!-----------------------------------------------------                     SHAREGRID3.25    
! Local variables                                                          SHAREGRID3.26    
!-----------------------------------------------------                     SHAREGRID3.27    
      INTEGER, PARAMETER :: TagRef=1300                                    SHAREGRID3.28    
      INTEGER :: iRow2                                                     SHAREGRID3.29    
      REAL :: SmallArray2(JGy, NHEM, nLevels)                              SHAREGRID3.30    
      INTEGER :: JPOS                                                      SHAREGRID3.31    
! Loop variables                                                           SHAREGRID3.32    
      INTEGER :: IHEM, iPe, J, L                                           SHAREGRID3.33    
!-----------------------------------------------------                     SHAREGRID3.34    
! No data need passing for one processor                                   SHAREGRID3.35    
!-----------------------------------------------------                     SHAREGRID3.36    
      IF (NPE.EQ.1) THEN                                                   SHAREGRID3.37    
         DO L=1,nLevels                                                    SHAREGRID3.38    
            DO IHEM=1,NHEM                                                 SHAREGRID3.39    
               DO J=1,JG                                                   SHAREGRID3.40    
                  LargeArray(J,IHEM,L)=SmallArray(J,IHEM,L)                SHAREGRID3.41    
               ENDDO                                                       SHAREGRID3.42    
            ENDDO                                                          SHAREGRID3.43    
         ENDDO                                                             SHAREGRID3.44    
      ELSE                                                                 SHAREGRID3.45    
         !-----------------------------------------------------            SHAREGRID3.46    
         ! Data will be sent to PE 0. Determine if this is PE 0            SHAREGRID3.47    
         !-----------------------------------------------------            SHAREGRID3.48    
         IF (MyPe.GT.0) THEN                                               SHAREGRID3.49    
            !-----------------------------------------------------         SHAREGRID3.50    
            ! Send data to PE 0                                            SHAREGRID3.51    
            !-----------------------------------------------------         SHAREGRID3.52    
            iRecv=0                                                        SHAREGRID3.53    
            nBuffSize=NHEM*JGy*nLevels                                     SHAREGRID3.54    
            iTag=TagRef+MyPe                                               SHAREGRID3.55    
            CALL MPI_BSEND(SmallArray, nBuffSize, ParaReal, iRecv,         SHAREGRID3.56    
     &           iTag, MPI_COMM_WORLD, ierr)                               SHAREGRID3.57    
         ENDIF                                                             SHAREGRID3.58    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            SHAREGRID3.59    
         IF (MyPe.EQ.0) THEN                                               SHAREGRID3.60    
            !-----------------------------------------------------         SHAREGRID3.61    
            ! Loop through the PEs                                         SHAREGRID3.62    
            !-----------------------------------------------------         SHAREGRID3.63    
            LargeArray(:,:,:)=0.0                                          SHAREGRID3.64    
            DO iPe=0,NPE-1                                                 SHAREGRID3.65    
                IF (iPe.EQ.0) THEN                                         SHAREGRID3.66    
                  !---------------------------------------------------     SHAREGRID3.67    
                  ! Data already stored on PE 0                            SHAREGRID3.68    
                  !---------------------------------------------------     SHAREGRID3.69    
                   DO L=1,nLevels                                          SHAREGRID3.70    
                      DO IHEM=1,NHEM                                       SHAREGRID3.71    
                         DO J=1,JGyy(iRow)                                 SHAREGRID3.72    
                            LargeArray(JJ1(iRow)+J,IHEM,L)=                SHAREGRID3.73    
     &                           SmallArray(J,IHEM,L)                      SHAREGRID3.74    
                         ENDDO                                             SHAREGRID3.75    
                      ENDDO                                                SHAREGRID3.76    
                   ENDDO                                                   SHAREGRID3.77    
                ELSE                                                       SHAREGRID3.78    
                  !---------------------------------------------------     SHAREGRID3.79    
                  ! Receive data from the other PEs                        SHAREGRID3.80    
                  !---------------------------------------------------     SHAREGRID3.81    
                  iSend=iPe                                                SHAREGRID3.82    
                  nBuffSize=NHEM*JGy*nLevels                               SHAREGRID3.83    
                  iTag=TagRef+iPe                                          SHAREGRID3.84    
                  CALL MPI_RECV(SmallArray2, nBuffSize, ParaReal,          SHAREGRID3.85    
     &                 iSend, iTag, MPI_COMM_WORLD, istat, ierr)           SHAREGRID3.86    
                  !---------------------------------------------------     SHAREGRID3.87    
                  ! Write values into large array                          SHAREGRID3.88    
                  !---------------------------------------------------     SHAREGRID3.89    
                  iRow2=GRID(2,iPe)                                        SHAREGRID3.90    
                  JPOS=JJ1(iRow2)                                          SHAREGRID3.91    
                  DO L=1,nLevels                                           SHAREGRID3.92    
                     DO IHEM=1,NHEM                                        SHAREGRID3.93    
                        DO J=1,JGyy(iRow2)                                 SHAREGRID3.94    
                           LargeArray(JPOS+J,IHEM,L)=                      SHAREGRID3.95    
     &                          LargeArray(JPOS+J,IHEM,L)+                 SHAREGRID3.96    
     &                          SmallArray2(J,IHEM,L)                      SHAREGRID3.97    
                        ENDDO                                              SHAREGRID3.98    
                     ENDDO                                                 SHAREGRID3.99    
                  ENDDO                                                    SHAREGRID3.100   
               ENDIF                                                       SHAREGRID3.101   
            ENDDO                                                          SHAREGRID3.102   
         ENDIF                                                             SHAREGRID3.103   
      ENDIF                                                                SHAREGRID3.104   
      END                                                                  SHAREGRID3.105   
*ENDIF                                                                     SHAREGRID3.106   
*DECK SHAREGRID4                                                           SHAREGRID4.1     
*IF DEF,ONLY_V2                                                            SHAREGRID4.2     
!=====================================================                     SHAREGRID4.3     
! Like subroutine SHAREGRID3 but the data is the same for PEs              SHAREGRID4.4     
! on the same row, so only need to loop across the rows                    SHAREGRID4.5     
!=====================================================                     SHAREGRID4.6     
      SUBROUTINE SHAREGRID4(JDIM,SmallArray,LargeArray)                    SHAREGRID4.7     
      IMPLICIT NONE                                                        SHAREGRID4.8     
*CALL PARAM1                                                               SHAREGRID4.9     
*CALL PARAM2                                                               SHAREGRID4.10    
*CALL PARAM3                                                               SHAREGRID4.11    
*CALL MPIDECK                                                              SHAREGRID4.12    
!-----------------------------------------------------                     SHAREGRID4.13    
! Passed variables                                                         SHAREGRID4.14    
!-----------------------------------------------------                     SHAREGRID4.15    
! JDIM equalS JG. It is passed to ensure that LargeArray is part of        SHAREGRID4.16    
! the dynamic memory                                                       SHAREGRID4.17    
      INTEGER :: JDIM                                                      SHAREGRID4.18    
! Typically smaller array with coefficients stored for use                 SHAREGRID4.19    
! in model and shared across PEs.                                          SHAREGRID4.20    
      REAL :: SmallArray(JGy, NHEM)                                        SHAREGRID4.21    
! Large array containing all the coefficients stored in the                SHAREGRID4.22    
! original way                                                             SHAREGRID4.23    
      REAL :: LargeArray(JDIM, NHEM)                                       SHAREGRID4.24    
!-----------------------------------------------------                     SHAREGRID4.25    
! Local variables                                                          SHAREGRID4.26    
!-----------------------------------------------------                     SHAREGRID4.27    
      INTEGER, PARAMETER :: TagRef=1400                                    SHAREGRID4.28    
      REAL :: SmallArray2(JGy, NHEM)                                       SHAREGRID4.29    
! Loop variables                                                           SHAREGRID4.30    
      INTEGER :: IHEM, iPe, iRow2, J                                       SHAREGRID4.31    
!-----------------------------------------------------                     SHAREGRID4.32    
! No data need passing for one processor                                   SHAREGRID4.33    
!-----------------------------------------------------                     SHAREGRID4.34    
      IF (Py.EQ.1) THEN                                                    SHAREGRID4.35    
         IF (MyPe.EQ.0) THEN                                               SHAREGRID4.36    
            DO IHEM=1,NHEM                                                 SHAREGRID4.37    
               DO J=1,JG                                                   SHAREGRID4.38    
                  LargeArray(J,IHEM)=SmallArray(J,IHEM)                    SHAREGRID4.39    
               ENDDO                                                       SHAREGRID4.40    
            ENDDO                                                          SHAREGRID4.41    
         ENDIF                                                             SHAREGRID4.42    
      ELSE                                                                 SHAREGRID4.43    
         !-----------------------------------------------------            SHAREGRID4.44    
         ! Only need data get data from one column of PEs                  SHAREGRID4.45    
         !-----------------------------------------------------            SHAREGRID4.46    
         IF (iCol.eq.1) THEN                                               SHAREGRID4.47    
            !-----------------------------------------------------         SHAREGRID4.48    
            ! Data will be sent to PE 0. Determine if this is PE 0         SHAREGRID4.49    
            !-----------------------------------------------------         SHAREGRID4.50    
            IF (MyPe.GT.0) THEN                                            SHAREGRID4.51    
               !-----------------------------------------------------      SHAREGRID4.52    
               ! Send data to PE 0                                         SHAREGRID4.53    
               !-----------------------------------------------------      SHAREGRID4.54    
               iRecv=0                                                     SHAREGRID4.55    
               nBuffSize=NHEM*JGy                                          SHAREGRID4.56    
               iTag=TagRef+MyPe                                            SHAREGRID4.57    
               CALL MPI_BSEND(SmallArray, nBuffSize, ParaReal, iRecv,      SHAREGRID4.58    
     &              iTag, MPI_COMM_WORLD, ierr)                            SHAREGRID4.59    
            ENDIF                                                          SHAREGRID4.60    
         ENDIF                                                             SHAREGRID4.61    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            SHAREGRID4.62    
         IF ( (iCol.EQ.1).AND.(MyPe.EQ.0) ) THEN                           SHAREGRID4.63    
            !-----------------------------------------------------         SHAREGRID4.64    
            ! Loop through the PEs                                         SHAREGRID4.65    
            !-----------------------------------------------------         SHAREGRID4.66    
            DO iRow2=1,Py                                                  SHAREGRID4.67    
               IF (iRow2.EQ.1) THEN                                        SHAREGRID4.68    
                  !-------------------------------------------------       SHAREGRID4.69    
                  ! Data already stored on PE 0                            SHAREGRID4.70    
                  !-------------------------------------------------       SHAREGRID4.71    
                  DO IHEM=1,NHEM                                           SHAREGRID4.72    
                     DO J=1,JGyy(iRow)                                     SHAREGRID4.73    
                        LargeArray(J,IHEM)=                                SHAREGRID4.74    
     &                       SmallArray(J,IHEM)                            SHAREGRID4.75    
                     ENDDO                                                 SHAREGRID4.76    
                  ENDDO                                                    SHAREGRID4.77    
               ELSE                                                        SHAREGRID4.78    
                  !-------------------------------------------------       SHAREGRID4.79    
                  ! Receive data from the other PEs on this column         SHAREGRID4.80    
                  !-------------------------------------------------       SHAREGRID4.81    
                  iSend=PeGrid(iCol,iRow2)                                 SHAREGRID4.82    
                  nBuffSize=NHEM*JGy                                       SHAREGRID4.83    
                  iTag=TagRef+iSend                                        SHAREGRID4.84    
                  CALL MPI_RECV(SmallArray2, nBuffSize, ParaReal,          SHAREGRID4.85    
     &                 iSend, iTag, MPI_COMM_WORLD, istat, ierr)           SHAREGRID4.86    
                  !-------------------------------------------------       SHAREGRID4.87    
                  ! Write values into large array                          SHAREGRID4.88    
                  !-------------------------------------------------       SHAREGRID4.89    
                  DO IHEM=1,NHEM                                           SHAREGRID4.90    
                     DO J=1,JGyy(iRow2)                                    SHAREGRID4.91    
                        LargeArray(JJ1(iRow2)+J,IHEM)=                     SHAREGRID4.92    
     &                       SmallArray2(J,IHEM)                           SHAREGRID4.93    
                     ENDDO                                                 SHAREGRID4.94    
                  ENDDO                                                    SHAREGRID4.95    
               ENDIF                                                       SHAREGRID4.96    
            ENDDO                                                          SHAREGRID4.97    
         ENDIF                                                             SHAREGRID4.98    
      ENDIF                                                                SHAREGRID4.99    
      END                                                                  SHAREGRID4.100   
*ENDIF                                                                     SHAREGRID4.101   
*DECK SPDEL2                                                               SPDEL2.1     
!=====================================================                     SPDEL2.2     
! Perform del**2 or del**(-2) operation on a spectral field.               SPDEL2.3     
! The input spectral array is assumed to use the jagged triangular         SPDEL2.4     
! truncation of the Reading baroclinic spectral models.  This is           SPDEL2.5     
! also used in the diagnostics program for fields from both Reading        SPDEL2.6     
! models and the UGCM.                                                     SPDEL2.7     
!=====================================================                     SPDEL2.8     
      SUBROUTINE SPDEL2(Z,FILT,MMTy,NNTx,NN,MM,NHEM,NL,IPAR,ITYPE,         SPDEL2.9     
     &     MMTyy,NNTxx,nWave)                                              SPDEL2.10    
      IMPLICIT NONE                                                        SPDEL2.11    
!-----------------------------------------------------                     SPDEL2.12    
! Input arguments:                                                         SPDEL2.13    
!-----------------------------------------------------                     SPDEL2.14    
! Z      - Complex array containing input spectral field.                  SPDEL2.15    
!          The truncation is assumed to be jagged triangular.              SPDEL2.16    
!          i.e. symmetric (even) coefficients are included up              SPDEL2.17    
!          to total wavenumber (NN-1), while anti-symmetric                SPDEL2.18    
!          (odd) coefficients are included up to wavenumber NN.            SPDEL2.19    
!          This gives equal numbers of even and odd coefficients           SPDEL2.20    
!          in the truncated series.  Ordering is of increasing             SPDEL2.21    
!          total wavenumber within increasing zonal wavenumber.            SPDEL2.22    
      COMPLEX :: Z(NNTx,MMTy,NHEM,NL)                                      SPDEL2.23    
! FILT   - Real array, unset, to receive filter coefficients.              SPDEL2.24    
      REAL :: FILT(0:NN)                                                   SPDEL2.25    
! NWJ2   - First dimension of Z: number of even or odd coeffs              SPDEL2.26    
!          at a single level in the jagged triangular truncation           SPDEL2.27    
!      INTEGER :: NWJ2                                                     SPDEL2.28    
      INTEGER :: NNTx                                                      SPDEL2.29    
      INTEGER :: MMTy                                                      SPDEL2.30    
! NN     - Highest total wavenumber of input truncation.                   SPDEL2.31    
      INTEGER :: NN                                                        SPDEL2.32    
! MM     - Highest zonal wavenumber of input truncation.                   SPDEL2.33    
      INTEGER :: MM                                                        SPDEL2.34    
! NHEM   - Symmetry in latitude: { 1 = hemispheric, only even or           SPDEL2.35    
!                                {     odd coefficients included           SPDEL2.36    
!                                { 2 = global, both even and odd           SPDEL2.37    
!                                {     coefficients included.              SPDEL2.38    
      INTEGER :: NHEM                                                      SPDEL2.39    
! NL     - Number of levels in vertical.                                   SPDEL2.40    
      INTEGER :: NL                                                        SPDEL2.41    
! IPAR   - Parity of field: { IPAR=even for even hem symmetry,             SPDEL2.42    
!                           { IPAR=odd  for  odd hem symmetry.             SPDEL2.43    
      INTEGER :: IPAR                                                      SPDEL2.44    
!                                                                          SPDEL2.45    
      INTEGER :: MMTyy                                                     SPDEL2.46    
      INTEGER :: NNTxx                                                     SPDEL2.47    
      INTEGER :: nWave(NNTx,MMTy)                                          SPDEL2.48    
! ITYPE  - Type of operation required: { +2, del**(+2),                    SPDEL2.49    
!                                      { -2, del**(-2).                    SPDEL2.50    
      INTEGER :: ITYPE                                                     SPDEL2.51    
!-----------------------------------------------------                     SPDEL2.52    
! Output arguments:                                                        SPDEL2.53    
!-----------------------------------------------------                     SPDEL2.54    
! Z      - Filtered spectral field.  Ordering of spectral                  SPDEL2.55    
!          coefficients is unchanged.                                      SPDEL2.56    
! FILT   - Real array of filter coefficients.                              SPDEL2.57    
! Other arguments unchanged.                                               SPDEL2.58    
!                                                                          SPDEL2.59    
! Method:                                                                  SPDEL2.60    
!   This routine can perform the following operations:                     SPDEL2.61    
! ITYPE=+2 : Del**(+2), in which the non-dimensional spectral              SPDEL2.62    
!            coefficient Z(n,m) is multiplied by -[n*(n+1)].               SPDEL2.63    
! ITYPE=-2 : Del**(-2), in which the non-dimensional spectral              SPDEL2.64    
!            coefficient Z(n,m) is divided by -[n*(n+1)].                  SPDEL2.65    
!                                                                          SPDEL2.66    
! Author:                                                                  SPDEL2.67    
!    Original version.                    Mike Blackburn,  25.11.94        SPDEL2.68    
!    FILT is now a dummy array, (0:NN).   Mike Blackburn,  04.09.96        SPDEL2.69    
!-----------------------------------------------------                     SPDEL2.70    
! Local variables                                                          SPDEL2.71    
!-----------------------------------------------------                     SPDEL2.72    
      INTEGER :: NOF                                                       SPDEL2.73    
      INTEGER :: N                                                         SPDEL2.74    
! Loop variables                                                           SPDEL2.75    
      INTEGER :: IHEM, IM, IN, L                                           SPDEL2.76    
!-----------------------------------------------------                     SPDEL2.77    
! Set up filter coefficients.                                              SPDEL2.78    
! Note that FILT(n)=-n*(n+1) (or its inverse).                             SPDEL2.79    
!-----------------------------------------------------                     SPDEL2.80    
      IF (ITYPE.EQ.2) THEN                                                 SPDEL2.81    
         DO N=0,NN                                                         SPDEL2.82    
            FILT(N)=-REAL(N*(N+1))                                         SPDEL2.83    
         ENDDO                                                             SPDEL2.84    
      ELSE IF (ITYPE.EQ.-2) THEN                                           SPDEL2.85    
         DO N=0,NN                                                         SPDEL2.86    
            FILT(N)=-1./REAL(N*(N+1))                                      SPDEL2.87    
         ENDDO                                                             SPDEL2.88    
      ELSE                                                                 SPDEL2.89    
         PRINT *,' ***SPDEL2: INVALID VALUE OF ITYPE SUPPLIED = '          SPDEL2.90    
     &          ,ITYPE,' : MUST BE +-2 FOR DEL**(+-2) OPERATION'           SPDEL2.91    
         CALL ABORT                                                        SPDEL2.92    
      ENDIF                                                                SPDEL2.93    
!-----------------------------------------------------                     SPDEL2.94    
! Del**(+-2) operation.                                                    SPDEL2.95    
! Counting for total wavenumber in inner loop is for even coeffs,          SPDEL2.96    
! NOF increases total wavenumber for odd coeffs.                           SPDEL2.97    
!-----------------------------------------------------                     SPDEL2.98    
      DO IHEM=1,NHEM                                                       SPDEL2.99    
         NOF=1-MOD(IHEM+IPAR,2)                                            SPDEL2.100   
         DO L=1,NL                                                         SPDEL2.101   
            DO IM=1,MMTyy                                                  SPDEL2.102   
               DO IN=1,NNTxx                                               SPDEL2.103   
                  N=nWave(IN,IM)                                           SPDEL2.104   
                  Z(IN,IM,IHEM,L)=Z(IN,IM,IHEM,L)*FILT(N+NOF)              SPDEL2.105   
               ENDDO                                                       SPDEL2.106   
            ENDDO                                                          SPDEL2.107   
         ENDDO                                                             SPDEL2.108   
      ENDDO                                                                SPDEL2.109   
      RETURN                                                               SPDEL2.110   
      END                                                                  SPDEL2.111   
*DECK SPOP                                                                 SPOP.1     
!=====================================================                     SPOP.2     
! Controls diagnostic output from model run.                               SPOP.3     
! Outputs spectral coefficients.                                           SPOP.4     
!=====================================================                     SPOP.5     
      SUBROUTINE SPOP                                                      SPOP.6     
      IMPLICIT NONE                                                        SPOP.7     
*CALL PARAM1                                                               SPOP.8     
*CALL PARAM2                                                               SPOP.9     
*CALL PARAM3                                                               SPOP.10    
*CALL BLANK                                                                SPOP.11    
*CALL SPECTR                                                               SPOP.12    
*CALL BATS                                                                 SPOP.13    
*CALL OUTCON                                                               SPOP.14    
*CALL MPIDECK                                                              SPOP.15    
!-----------------------------------------------------                     SPOP.16    
! Local variables                                                          SPOP.17    
!-----------------------------------------------------                     SPOP.18    
      CHARACTER*(80) :: DESCRIPTION                                        SPOP.19    
! Loop variables                                                           SPOP.20    
      INTEGER :: ITRAC, L                                                  SPOP.21    
!-----------------------------------------------------                     SPOP.22    
! Format statements                                                        SPOP.23    
!-----------------------------------------------------                     SPOP.24    
 200  FORMAT(/' NUMBER OF TIME STEPS COMPLETED =',I5)                      SPOP.25    
 202  FORMAT(' SPECTRAL COEFFICIENTS (COEFF ; AMPLITUDE ; PHASE)')         SPOP.26    
 204  FORMAT(' VORTICITY AT LEVEL',I2)                                     SPOP.27    
 206  FORMAT(' DIVERGENCE AT LEVEL',I2)                                    SPOP.28    
 208  FORMAT(' PERTURBATION TEMPERATURE AT LEVEL',I2)                      SPOP.29    
 211  FORMAT(' LOG(SURFACE PRESSURE)')                                     SPOP.30    
!-----------------------------------------------------                     SPOP.31    
! If NCOEFF=0 leave routine                                                SPOP.32    
!-----------------------------------------------------                     SPOP.33    
      IF (NCOEFF.EQ.0) RETURN                                              SPOP.34    
!-----------------------------------------------------                     SPOP.35    
! Spectral coeficients are wanted                                          SPOP.36    
!-----------------------------------------------------                     SPOP.37    
      WRITE (2,200) KOUNT                                                  SPOP.38    
      WRITE (2,202)                                                        SPOP.39    
!-----------------------------------------------------                     SPOP.40    
! Absolute vorticity                                                       SPOP.41    
!-----------------------------------------------------                     SPOP.42    
      WRITE(DESCRIPTION,'(a18)') 'VORTICITY AT LEVEL'                      SPOP.43    
      CALL WRSPA(DESCRIPTION,Z,1,NL)                                       SPOP.44    
!-----------------------------------------------------                     SPOP.45    
! Divergence                                                               SPOP.46    
!-----------------------------------------------------                     SPOP.47    
      WRITE(DESCRIPTION,'(a19)') 'DIVERGENCE AT LEVEL'                     SPOP.48    
      CALL WRSPA(DESCRIPTION,D,2,NL)                                       SPOP.49    
!-----------------------------------------------------                     SPOP.50    
! Temperature                                                              SPOP.51    
!-----------------------------------------------------                     SPOP.52    
      WRITE(DESCRIPTION,'(a33)') 'PERTURBATION TEMPERATURE AT LEVEL'       SPOP.53    
      CALL WRSPA(DESCRIPTION,T,2,NL)                                       SPOP.54    
*IF DEF,ABOVE_V1                                                           SPOP.55    
!-----------------------------------------------------                     SPOP.56    
! Tracers                                                                  SPOP.57    
!-----------------------------------------------------                     SPOP.58    
      DO ITRAC=1,NTRAC                                                     SPOP.59    
         WRITE(DESCRIPTION,'(a13,i4,a9)') 'TRACER FIELD ',                 SPOP.60    
     &        ITRAC, ' AT LEVEL'                                           SPOP.61    
         CALL WRSPA(DESCRIPTION,TRA(1,1,1,1,ITRAC),2,NL)                   SPOP.62    
      ENDDO                                                                SPOP.63    
*ENDIF                                                                     SPOP.64    
!-----------------------------------------------------                     SPOP.65    
! Log (Surface Pressure)                                                   SPOP.66    
!-----------------------------------------------------                     SPOP.67    
      WRITE(DESCRIPTION,'(a21)') 'LOG(SURFACE PRESSURE)'                   SPOP.68    
      CALL WRSPA(DESCRIPTION,SP,2,1)                                       SPOP.69    
                                                                           SPOP.70    
      RETURN                                                               SPOP.71    
      END                                                                  SPOP.72    
*DECK SURFM                                                                SURFM.1     
*IF DEF,ONLY_V3                                                            SURFM.2     
!=====================================================                     SURFM.3     
! Perform soil moisture / snow depth update for timestep                   SURFM.4     
! have to do this after the CONVEC and LSCRN subs                          SURFM.5     
!=====================================================                     SURFM.6     
      SUBROUTINE SURFM(JH)                                                 SURFM.7     
      IMPLICIT NONE                                                        SURFM.8     
*CALL PARAM1                                                               SURFM.9     
*CALL PARAM2                                                               SURFM.10    
*CALL PARAM3                                                               SURFM.11    
*CALL BLANK                                                                SURFM.12    
*CALL LEGAU                                                                SURFM.13    
*CALL GRIDPC                                                               SURFM.14    
*CALL BATS                                                                 SURFM.15    
*CALL PHYSCA                                                               SURFM.16    
*CALL CPIERS                                                               SURFM.17    
*CALL OROG_G                                                               SURFM.18    
*CALL MPIDECK                                                              SURFM.19    
*CALL PARAMH                                                               OAS_ACCUM_TILE.1     
*CALL AOfields                                                             OAS_ACCUM_TILE.2     
!-----------------------------------------------------                     SURFM.20    
! Passed arguments                                                         SURFM.21    
!-----------------------------------------------------                     SURFM.22    
! Index for latitudes                                                      SURFM.23    
      INTEGER :: JH                                                        SURFM.24    
!-----------------------------------------------------                     SURFM.25    
! Local variables.                                                         SURFM.26    
!-----------------------------------------------------                     SURFM.27    
      REAL :: SNOLOOK(24)                                                  SURFM.28    
      REAL, PARAMETER :: tzc=273.15                                        SURFM.29    
      REAL :: TP1                                                          SURFM.30    
      REAL :: TZ                                                           SURFM.31    
      REAL :: TM2                                                          SURFM.32    
      REAL :: TM3                                                          SURFM.33    
      REAL :: FRN                                                          SURFM.34    
      REAL :: FFL                                                          SURFM.35    
      REAL :: TSCUR                                                        SURFM.36    
      REAL :: CTQUSE                                                       SURFM.37    
      REAL :: DWATER                                                       SURFM.38    
      REAL :: SHSLOOK(24)                                                  SURF_TYPE_BL.20    
! Loop variables                                                           SURFM.39    
      INTEGER :: I, IHEM                                                   SURFM.40    
!-----------------------------------------------------                     SURFM.41    
! Snow covered lookup table                                                SURFM.42    
!-----------------------------------------------------                     SURFM.43    
                                                                           SURF_TYPE_BL.21    
C Snow-covered albedo as a function of land surface                        SURF_TYPE_BL.22    
                                                                           SURF_TYPE_BL.23    
       DATA SNOLOOK /0.8, 0.8, 0.8,                                        SURF_TYPE_BL.24    
     & 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7,                                  SURF_TYPE_BL.25    
     & 0.8, 0.8, 0.8, 0.8,                                                 SURF_TYPE_BL.26    
     & 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8,                                  SURF_TYPE_BL.27    
     & 0.8, 0.8, 0.8/                                                      SURF_TYPE_BL.28    
                                                                           SURF_TYPE_BL.29    
C The height at which albedo = (snow-free+SNOLOOK)/2                       SURF_TYPE_BL.30    
C should be dependent on land surface type (approximately done here)       SURF_TYPE_BL.31    
C Low values balance high IGCM snow density                                SURF_TYPE_BL.32    
                                                                           SURF_TYPE_BL.33    
       DATA SHSLOOK /0.05, 0.05, 0.05,                                     SURF_TYPE_BL.34    
     & 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,                                  SURF_TYPE_BL.35    
     & 0.1, 0.1, 0.1, 0.1,                                                 SURF_TYPE_BL.36    
     & 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,                                  SURF_TYPE_BL.37    
     & 0.05, 0.05, 0.05/                                                   SURF_TYPE_BL.38    
                                                                           SURFM.48    
      tp1=(tzc+1.)/ct                                                      SURFM.49    
      tz=tzc/ct                                                            SURFM.50    
      tm2=(tzc-1.9)/ct    ! Also done in T42.accum                         OAS_TEST.161   
      tm3=(tzc-3.)/ct                                                      SURFM.52    
                                                                           SURFM.53    
      FRN=SDW/(1000.*RADEA)                                                SURFM.54    
      FFL=AKAP*DELT                                                        SURFM.55    
                                                                           SURFM.56    
      if (LSL) then                                                        SURFM.57    
         do ihem=1,nhem                                                    SURFM.58    
            do i=1,MGxx(iCol)                                              SURFM.59    
               if (gsg(I,IHEM,jh).gt.0.) then                              SURFM.60    
                  TSCUR=TSTAR(I,IHEM,JH)   ! bug fix RF 10/4/2000          SURFM.61    
                  if (tscur.lt.tz) then                                    SURFM.62    
                     ctquse=ctqi                                           SURFM.63    
                  else                                                     SURFM.64    
                     ctquse=ctq                                            SURFM.65    
                  endif                                                    SURFM.66    
                  !---------------------------------------------------     SURFM.67    
                  ! amount of water change in time DELT                    SURFM.68    
                  !---------------------------------------------------     SURFM.69    
                  dwater=(rrcr(I,IHEM,JH)+rrlr(I,IHEM,JH)-                 OAS_ACCUM_TILE.3     
     $                   wathbl(I,IHEM,JH))*FRN                            OAS_ACCUM_TILE.4     
                                                                           SURFM.72    
                  if ((hsnow(I,IHEM,jh).gt.0.).or.                         SURFM.73    
     &                 ((tstar(I,IHEM,jh).lt.tz).and.(dwater.gt.0.)))      SURFM.74    
     &                 then                                                SURFM.75    
                     hsnow(I,IHEM,jh)=hsnow(I,IHEM,jh)+dwater/sdsn         SURFM.76    
                  else                                                     SURFM.77    
                     smstar(I,IHEM,jh)=smstar(I,IHEM,jh)+dwater/sdw        SURFM.78    
                  endif                                                    SURFM.79    
                                                                           SURFM.80    
C Soil bucket model: excess goes ito runoff                                OAS_ACCUM_TILE.5     
                  if (smstar(I,IHEM,jh).gt.ssmc)then                       OAS_ACCUM_TILE.6     
                    exwat(I,IHEM,jh)=                                      OAS_ACCUM_TILE.7     
     $              (smstar(I,IHEM,jh)-ssmc)*1000.*RADEA                   OAS_ACCUM_TILE.8     
                    smstar(I,IHEM,jh)=ssmc                                 OAS_ACCUM_TILE.9     
                  endif                                                    OAS_ACCUM_TILE.10    
                  if(smstar(I,IHEM,jh).lt.0.)smstar(I,IHEM,jh)=0.          OAS_ACCUM_TILE.11    
                  if (hsnow(I,IHEM,jh).le.0.) then                         SURFM.81    
                     if(ofrac(i,ihem,jh).lt.0.5)                           SURF_TYPE_BL.66    
     &               salb(I,IHEM,jh)=sbal(I,IHEM,jh)                       SURF_TYPE_BL.67    
                     hsnow(i,ihem,jh) = 0.0                                SURF_TYPE_BL.68    
                  else                                                     SURFM.83    
                     !------------------------------------------------     SURFM.84    
                     ! Snow-covered albedo depends on vegetation. This     SURFM.85    
                     ! includes a bug fix from the old surface.upd,        SURFM.86    
                     ! where SBAL replaces SALB.                           SURFM.87    
                     !------------------------------------------------     SURFM.88    
                     if(ofrac(i,ihem,jh).lt.0.5)                           SURF_TYPE_BL.69    
     &               salb(I,IHEM,jh)=sbal(I,IHEM,jh)+                      SURF_TYPE_BL.70    
                                                                           SURF_TYPE_BL.71    
     &                    (snolook(NINT(SVEGE(I,IHEM,JH)))-                SURFM.90    
     &                    sbal(I,IHEM,jh))*hsnow(I,IHEM,jh)/               SURFM.91    
     &                    (hsnow(I,IHEM,jh)+                               SURF_TYPE_BL.55    
     &                    shslook(NINT(SVEGE(I,IHEM,JH)))/radea)           SURF_TYPE_BL.56    
                  endif                                                    SURFM.93    
               endif                                                       SURFM.94    
            enddo                                                          SURFM.95    
         enddo                                                             SURFM.96    
      endif                                                                SURFM.97    
      end                                                                  SURFM.98    
*ENDIF                                                                     SURFM.99    
*DECK TBAL                                                                 TBAL.1     
!=====================================================                     TBAL.2     
! Relative vorticity is obtained from temperature and surface pressure     TBAL.3     
!=====================================================                     TBAL.4     
      SUBROUTINE TBAL                                                      TBAL.5     
      IMPLICIT NONE                                                        TBAL.6     
*CALL PARAM1                                                               TBAL.7     
*CALL PARAM2                                                               TBAL.8     
*CALL PARAM3                                                               TBAL.9     
*CALL BLANK                                                                TBAL.10    
*CALL SPECTR                                                               TBAL.11    
*CALL BATS                                                                 TBAL.12    
*CALL BALAN                                                                TBAL.13    
*CALL MPIDECK                                                              TBAL.14    
!-----------------------------------------------------                     TBAL.15    
! Local variables                                                          TBAL.16    
!-----------------------------------------------------                     TBAL.17    
      COMPLEX, ALLOCATABLE :: ERR(:,:,:,:)                                 TBAL.18    
      COMPLEX, ALLOCATABLE :: ZTBAL(:,:,:,:)                               TBAL.19    
      COMPLEX, ALLOCATABLE :: HOLDVAR(:,:,:,:,:)                           TBAL.20    
      COMPLEX :: VPS, GSI1, TA, SRGT                                       TBAL.21    
      INTEGER :: J2                                                        TBAL.22    
! J2H =J2 if IHEM=1 and =J2-1 if IHEM=2                                    TBAL.23    
      INTEGER :: J2H                                                       TBAL.24    
      INTEGER :: iSwitch                                                   TBAL.25    
      INTEGER :: ImLast(Py)                                                TBAL.26    
      INTEGER :: IDM2(MMTy,Px,Py)                                          TBAL.27    
      INTEGER :: MP, NP                                                    TBAL.28    
      COMPLEX :: SRGT2(NL)                                                 TBAL.29    
      INTEGER, PARAMETER :: TagRef=1500                                    TBAL.30    
      INTEGER :: iPe                                                       TBAL.31    
      INTEGER :: iCol2, iRow2                                              TBAL.32    
      INTEGER :: IN1                                                       TBAL.33    
! Loop variables                                                           TBAL.34    
      INTEGER :: I, IHEM, IM, IN, J, K, L, M                               TBAL.35    
!-----------------------------------------------------                     TBAL.36    
! NOTE: This scheme does not converge if wavenumbers M are                 TBAL.37    
! present for which there are only a small number of modes in the          TBAL.38    
! truncation. For a small number of iterations the problem is not          TBAL.39    
! serious but it may be removed altogether by limiting the range of        TBAL.40    
! the 20 and 80 loops. For a given M, 7 modes are sufficient and 3         TBAL.41    
! are insufficient. The loop terminator MFTBAL is set in INITAL.           TBAL.42    
!                                                                          TBAL.43    
! Find the number of zonal wavenumbers below MFTBAL for each               TBAL.44    
! row of PEs                                                               TBAL.45    
!-----------------------------------------------------                     TBAL.46    
      DO iRow2=1,Py                                                        TBAL.47    
         MP=MMT1(iRow2)*MOCT                                               TBAL.48    
         IF (MP.GE.MFTBAL) THEN                                            TBAL.49    
            ImLast(iRow2)=0                                                TBAL.50    
         ELSE                                                              TBAL.51    
            IM=0                                                           TBAL.52    
            DO WHILE ( (MP.LT.MFTBAL).AND.(IM.LT.MMTyy(iRow2)) )           TBAL.53    
               MP=MP+MOCT                                                  TBAL.54    
               IM=IM+1                                                     TBAL.55    
            ENDDO                                                          TBAL.56    
            ImLast(iRow2)=IM                                               TBAL.57    
         ENDIF                                                             TBAL.58    
         IF (ImLast(iRow2).GT.MMTyy(iRow2)) THEN                           TBAL.59    
            WRITE(6,*) 'ERROR: not expecting to use more than half ',      TBAL.60    
     &           'the zonal wavenumber for balancing, as yet'              TBAL.61    
            CALL ABORT                                                     TBAL.62    
         ENDIF                                                             TBAL.63    
      ENDDO                                                                TBAL.64    
!-----------------------------------------------------                     TBAL.65    
! Work out how many meridional wavenumbers are needed from each            TBAL.66    
! zonal wavenumber on each PE                                              TBAL.67    
!-----------------------------------------------------                     TBAL.68    
      DO iRow2=1,Py                                                        TBAL.69    
         DO IM=1,ImLast(iRow2)                                             TBAL.70    
            MP=(MMT1(iRow2)+IM-1)*MOCT                                     TBAL.71    
            DO iCol2=1,Px                                                  TBAL.72    
               IDM2(IM,iCol2,iRow2)=MAX(0,(NN-MP+1)/2-NNT1(iCol2))         TBAL.73    
               IF (IDM2(IM,iCol2,iRow2).GT.NNTxx(iCol2)) THEN              TBAL.74    
                  IDM2(IM,iCol2,iRow2)=NNTxx(iCol2)                        TBAL.75    
               ENDIF                                                       TBAL.76    
            ENDDO                                                          TBAL.77    
         ENDDO                                                             TBAL.78    
      ENDDO                                                                TBAL.79    
!-----------------------------------------------------                     TBAL.80    
! Calculate ERR and store the needed vorticity in ZTBAL.                   TBAL.81    
! Allocate the size of arrays needed.                                      TBAL.82    
!-----------------------------------------------------                     TBAL.83    
      IF (IDM2(1,iCol,iRow).GT.0) THEN                                     TBAL.84    
         ALLOCATE(HoldVar(NNTx,NL,NHEM,ImLast(iRow),2))                    TBAL.85    
      ENDIF                                                                TBAL.86    
!-----------------------------------------------------                     TBAL.87    
! Loop through zonal wavenumbers below MFTBAL                              TBAL.88    
!-----------------------------------------------------                     TBAL.89    
      DO IM=1,ImLast(iRow)                                                 TBAL.90    
         MP=mWave(1,IM)                                                    TBAL.91    
         DO IHEM=1,NHEM                                                    TBAL.92    
            IN=1                                                           TBAL.93    
            DO IN=1,IDM2(IM,iCol,iRow)                                     TBAL.94    
               NP=nWave(IN,IM,iCol)                                        TBAL.95    
               !-----------------------------------------------------      TBAL.96    
               ! Only skip code below when NP=0 & IHEM=1                   TBAL.97    
               !-----------------------------------------------------      TBAL.98    
               IF ((NP+IHEM).GT.1) THEN                                    TBAL.99    
                  VPS=VP(IN,IM,IHEM)                                       TBAL.100   
                  GSI1=GS(IN,IM,IHEM)                                      TBAL.101   
                  DO L=1,NL                                                TBAL.102   
                     TA=(0.0,0.0)                                          TBAL.103   
                     SRGT=(0.0,0.0)                                        TBAL.104   
                     DO M=1,NL                                             TBAL.105   
                        TA=TA+G(M,L)*TT(IN,IM,IHEM,M)                      TBAL.106   
                        SRGT=SRGT+G(M,L)*T(IN,IM,IHEM,M)                   TBAL.107   
                     ENDDO                                                 TBAL.108   
                     HoldVar(IN,L,IHEM,IM,2)=-DT(IN,IM,IHEM,L)-            TBAL.109   
     &                    SQ(NP+IHEM)*                                     TBAL.110   
     &                    (SRGT+GSI1+T0(L)*SP(IN,IM,IHEM)+                 TBAL.111   
     &                    DELT*(TA-T0(L)*VPS))                             TBAL.112   
                  ENDDO                                                    TBAL.113   
               ENDIF                                                       TBAL.114   
               !-----------------------------------------------------      TBAL.115   
               ! Store vorticity                                           TBAL.116   
               !-----------------------------------------------------      TBAL.117   
               DO L=1,NL                                                   TBAL.118   
                  HoldVar(IN,L,IHEM,IM,1)=Z(IN,IM,IHEM,L)                  TBAL.119   
               ENDDO                                                       TBAL.120   
            ENDDO                                                          TBAL.121   
         ENDDO                                                             TBAL.122   
      ENDDO                                                                TBAL.123   
!-----------------------------------------------------                     TBAL.124   
! Only PE 0 carries out the balancing                                      TBAL.125   
!-----------------------------------------------------                     TBAL.126   
      IF (MyPe.GT.0) THEN                                                  TBAL.127   
         IF (IDM2(1,iCol,iRow).GT.0) THEN                                  TBAL.128   
            !-----------------------------------------------------         TBAL.129   
            ! All the data needs passing to PE 0                           TBAL.130   
            !-----------------------------------------------------         TBAL.131   
            iTag=TagRef+2*MyPe                                             TBAL.132   
            iRecv=0                                                        TBAL.133   
            nBuffSize=NNTx*NL*NHEM*ImLast(iRow)*2                          TBAL.134   
            CALL MPI_BSEND(HoldVar,nBuffSize,ParaCom,                      TBAL.135   
     &           iRecv,iTag,MPI_COMM_WORLD,ierr)                           TBAL.136   
            !-----------------------------------------------------         TBAL.137   
            ! After PE 0 has calculated the balancing the data             TBAL.138   
            ! is sent back                                                 TBAL.139   
            !-----------------------------------------------------         TBAL.140   
            iSend=0                                                        TBAL.141   
            nBuffSize=NNTx*NL*NHEM*ImLast(iRow)                            TBAL.142   
            iTag=TagRef+2*MyPe+1                                           TBAL.143   
            CALL MPI_RECV(HoldVar, nBuffSize, ParaCom, iSend,              TBAL.144   
     &           iTag, MPI_COMM_WORLD, istat, ierr)                        TBAL.145   
            !-----------------------------------------------------         TBAL.146   
            ! Update vorticity with the balancing                          TBAL.147   
            !-----------------------------------------------------         TBAL.148   
            DO L=1,NL                                                      TBAL.149   
               DO IHEM=1,NHEM                                              TBAL.150   
                  DO IM=1,ImLast(iRow)                                     TBAL.151   
                     DO IN=1,IDM2(IM,iCol,iRow)                            TBAL.152   
                        Z(IN,IM,IHEM,L)=HoldVar(IN,L,IHEM,IM,1)            TBAL.153   
                     ENDDO                                                 TBAL.154   
                  ENDDO                                                    TBAL.155   
               ENDDO                                                       TBAL.156   
            ENDDO                                                          TBAL.157   
            DEALLOCATE(HoldVar)                                            TBAL.158   
         ENDIF                                                             TBAL.159   
      ELSE                                                                 TBAL.160   
         !-----------------------------------------------------            TBAL.161   
         ! Loop across PEs receiving the required data                     TBAL.162   
         !-----------------------------------------------------            TBAL.163   
         ALLOCATE(ERR(IDM,NL,NHEM,NFTBAL))                                 TBAL.164   
         ALLOCATE(ZTBAL(IDM,NL,NHEM,NFTBAL))                               TBAL.165   
         ERR(:,:,:,:)=(0.0, 0.0)                                           TBAL.166   
         ZTBAL(:,:,:,:)=(0.0, 0.0)                                         TBAL.167   
         !-----------------------------------------------------            TBAL.168   
         ! Loop across PEs receiving the required data                     TBAL.169   
         !-----------------------------------------------------            TBAL.170   
         DO iPe=0,NPE-1                                                    TBAL.171   
            iCol2=GRID(1,iPe)                                              TBAL.172   
            iRow2=GRID(2,iPe)                                              TBAL.173   
            IF ( (iPe.GT.0).AND.(IDM2(1,iCol2,iRow2).GT.0) ) THEN          TBAL.174   
               !-----------------------------------------------------      TBAL.175   
               ! Receive the data                                          TBAL.176   
               !-----------------------------------------------------      TBAL.177   
               iSend=iPe                                                   TBAL.178   
               nBuffSize=NNTx*NL*NHEM*ImLast(iRow2)*2                      TBAL.179   
               iTag=TagRef+2*iPe                                           TBAL.180   
               CALL MPI_RECV(HoldVar, nBuffSize, ParaCom, iSend,           TBAL.181   
     &              iTag, MPI_COMM_WORLD, istat, ierr)                     TBAL.182   
            ENDIF                                                          TBAL.183   
            !-----------------------------------------------------         TBAL.184   
            ! Write to ERR and ZTBAL                                       TBAL.185   
            !-----------------------------------------------------         TBAL.186   
            DO IM=1,ImLast(iRow2)                                          TBAL.187   
               DO IHEM=1,NHEM                                              TBAL.188   
                  IF ((IHEM.EQ.1).AND.(iCol2.EQ.1)) THEN                   TBAL.189   
                     IN1=2                                                 TBAL.190   
                  ELSE                                                     TBAL.191   
                     IN1=1                                                 TBAL.192   
                  ENDIF                                                    TBAL.193   
                  DO L=1,NL                                                TBAL.194   
                     DO IN=1,IDM2(IM,iCol2,iRow2)                          TBAL.195   
                        ZTBAL(NNT1(iCol2)+IN,L,IHEM,MMT1(iRow2)+IM)=       TBAL.196   
     &                       HoldVar(IN,L,IHEM,IM,1)                       TBAL.197   
                     ENDDO                                                 TBAL.198   
                     DO IN=IN1,IDM2(IM,iCol2,iRow2)                        TBAL.199   
                        ERR(NNT1(iCol2)+IN-2+IHEM,L,IHEM,                  TBAL.200   
     &                       MMT1(iRow2)+IM)=HoldVar(IN,L,IHEM,IM,2)       TBAL.201   
                     ENDDO                                                 TBAL.202   
                  ENDDO                                                    TBAL.203   
               ENDDO                                                       TBAL.204   
            ENDDO                                                          TBAL.205   
         ENDDO                                                             TBAL.206   
         !-----------------------------------------------------            TBAL.207   
         ! Loop over the zonal wavenumbers below MFTBAL                    TBAL.208   
         !-----------------------------------------------------            TBAL.209   
         DO IHEM=1,NHEM                                                    TBAL.210   
            DO MP=0,MFTBAL,MOCT                                            TBAL.211   
               IM=(MP/MOCT)+1                                              TBAL.212   
               J2=(NN-MP+1)/2                                              TBAL.213   
               J2H=J2+1-IHEM                                               TBAL.214   
               !-----------------------------------------------------      TBAL.215   
               ! Read the balance data file if IHEM=1 & MP>0 or            TBAL.216   
               ! IHEM=2 & MP=0.                                            TBAL.217   
               !-----------------------------------------------------      TBAL.218   
               iSwitch=MP*(2-IHEM)+(1-MP)*(IHEM-1)                         TBAL.219   
               IF (iSwitch.GT.0) THEN                                      TBAL.220   
                  !---------------------------------------------------     TBAL.221   
                  ! Modification due to PMNRE and ERR.                     TBAL.222   
                  !---------------------------------------------------     TBAL.223   
                  DO IN=1,J2H                                              TBAL.224   
                     DO L=1,NL                                             TBAL.225   
                        DO K=1,J2                                          TBAL.226   
                           ZTBAL(IN,L,IHEM,IM)=ZTBAL(IN,L,IHEM,IM)+        TBAL.227   
     &                          PMNRE(K,IN,IM)*ERR(IN,L,IHEM,IM)           TBAL.228   
                        ENDDO                                              TBAL.229   
                     ENDDO                                                 TBAL.230   
                  ENDDO                                                    TBAL.231   
               ELSE                                                        TBAL.232   
                  !---------------------------------------------------     TBAL.233   
                  ! Modification due to EP1 and EP2.                       TBAL.234   
                  !---------------------------------------------------     TBAL.235   
                  DO L=1,NL                                                TBAL.236   
                     SRGT=(0.0,0.0)                                        TBAL.237   
                     DO IN=J2+IHEM-2,1,-1                                  TBAL.238   
                        SRGT=(ERR(IN,L,IHEM,IM)-EP2(IN+2-IHEM,IM,IHEM)*    TBAL.239   
     &                       SRGT)/EP1(IN,IM,IHEM)                         TBAL.240   
                        ZTBAL(IN,L,IHEM,IM)=ZTBAL(IN,L,IHEM,IM)+SRGT       TBAL.241   
                     ENDDO                                                 TBAL.242   
                  ENDDO                                                    TBAL.243   
               ENDIF                                                       TBAL.244   
            ENDDO                                                          TBAL.245   
         ENDDO                                                             TBAL.246   
         !-----------------------------------------------------            TBAL.247   
         ! Send information to the other PEs                               TBAL.248   
         !-----------------------------------------------------            TBAL.249   
         DO iPe=1,NPE-1                                                    TBAL.250   
            iCol2=GRID(1,iPe)                                              TBAL.251   
            iRow2=GRID(2,iPe)                                              TBAL.252   
            !-----------------------------------------------------         TBAL.253   
            ! Store data in HoldVar                                        TBAL.254   
            !-----------------------------------------------------         TBAL.255   
            DO IM=1,ImLast(iRow2)                                          TBAL.256   
               DO IHEM=1,NHEM                                              TBAL.257   
                  DO L=1,NL                                                TBAL.258   
                     DO IN=1,IDM2(IM,iCol2,iRow2)                          TBAL.259   
                        HoldVar(IN,L,IHEM,IM,1)=                           TBAL.260   
     &                       ZTBAL(NNT1(iCol2)+IN,L,IHEM,MMT1(iRow2)+IM)   TBAL.261   
                     ENDDO                                                 TBAL.262   
                  ENDDO                                                    TBAL.263   
               ENDDO                                                       TBAL.264   
            ENDDO                                                          TBAL.265   
            !-----------------------------------------------------         TBAL.266   
            ! Pass the data to PE iPe                                      TBAL.267   
            !-----------------------------------------------------         TBAL.268   
            iTag=TagRef+2*iPe+1                                            TBAL.269   
            iRecv=iPe                                                      TBAL.270   
            nBuffSize=NNTx*NL*NHEM*ImLast(iRow2)                           TBAL.271   
            CALL MPI_BSEND(HoldVar,nBuffSize,ParaCom,                      TBAL.272   
     &           iRecv,iTag,MPI_COMM_WORLD,ierr)                           TBAL.273   
         ENDDO                                                             TBAL.274   
         !-----------------------------------------------------            TBAL.275   
         ! Store the data wanted on this PE                                TBAL.276   
         !-----------------------------------------------------            TBAL.277   
         DO L=1,NL                                                         TBAL.278   
            DO IHEM=1,NHEM                                                 TBAL.279   
               DO IM=1,ImLast(iRow)                                        TBAL.280   
                  DO IN=1,IDM2(IM,iCol,iRow)                               TBAL.281   
                     Z(IN,IM,IHEM,L)=ZTBAL(IN,L,IHEM,IM)                   TBAL.282   
                  ENDDO                                                    TBAL.283   
               ENDDO                                                       TBAL.284   
            ENDDO                                                          TBAL.285   
         ENDDO                                                             TBAL.286   
         DEALLOCATE(ZTBAL,ERR,HoldVar)                                     TBAL.287   
      ENDIF                                                                TBAL.288   
!-----------------------------------------------------                     TBAL.289   
! Copy current values into MI variables                                    TBAL.290   
!-----------------------------------------------------                     TBAL.291   
      IF(KOUNT.EQ.0)THEN                                                   TBAL.292   
         DO IHEM=1,NHEM                                                    TBAL.293   
            DO IM=1,MMTyy(iRow)                                            TBAL.294   
               DO IN=1,NNTxx(iCol)                                         TBAL.295   
                  SPMI(IN,IM,IHEM)=SP(IN,IM,IHEM)                          TBAL.296   
               ENDDO                                                       TBAL.297   
            ENDDO                                                          TBAL.298   
         ENDDO                                                             TBAL.299   
         DO L=1,NL                                                         TBAL.300   
            DO IHEM=1,NHEM                                                 TBAL.301   
               DO IM=1,MMTyy(iRow)                                         TBAL.302   
                  DO IN=1,NNTxx(iCol)                                      TBAL.303   
                     ZMI(IN,IM,IHEM,L)=Z(IN,IM,IHEM,L)                     TBAL.304   
                     DMI(IN,IM,IHEM,L)=D(IN,IM,IHEM,L)                     TBAL.305   
                     TMI(IN,IM,IHEM,L)=T(IN,IM,IHEM,L)                     TBAL.306   
                  ENDDO                                                    TBAL.307   
               ENDDO                                                       TBAL.308   
            ENDDO                                                          TBAL.309   
         ENDDO                                                             TBAL.310   
      ENDIF                                                                TBAL.311   
      RETURN                                                               TBAL.312   
      END                                                                  TBAL.313   
*DECK TRANS1                                                               TRANS1.1     
*IF DEF,NOMPI                                                              TRANS1.2     
*ELSE                                                                      TRANS1.3     
!=====================================================                     TRANS1.4     
! Transposing the spectral arrays so that the meriodonal wavenumbers       TRANS1.5     
! are complete, so that this dimension is read to be converted into        TRANS1.6     
! latitudes, using LTI and HEXPV, to form the half transforms.             TRANS1.7     
! Instead the levels are split across the columns of PEs.                  TRANS1.8     
!=====================================================                     TRANS1.9     
      SUBROUTINE TRANS1                                                    TRANS1.10    
      IMPLICIT NONE                                                        TRANS1.11    
*CALL PARAM1                                                               TRANS1.12    
*CALL PARAM3                                                               TRANS1.13    
*CALL SPECTR                                                               TRANS1.14    
*CALL SPECTR2                                                              TRANS1.15    
*CALL MPIDECK                                                              TRANS1.16    
!-----------------------------------------------------                     TRANS1.17    
! Local variables                                                          TRANS1.18    
!-----------------------------------------------------                     TRANS1.19    
      INTEGER, PARAMETER :: TagRef=2000                                    TRANS1.20    
      COMPLEX :: HoldVar1(NNTx,MMTy,NHEM,NLx,3+NTRAC)                      TRANS1.21    
      COMPLEX :: HoldVar2(NNTx,MMTy,NHEM)                                  TRANS1.22    
      INTEGER :: iCol2, iPe                                                TRANS1.23    
      INTEGER :: IMMAX, INMAX, LMAX                                        TRANS1.24    
      INTEGER :: IN1, IN2                                                  TRANS1.25    
      INTEGER :: L1, L2                                                    TRANS1.26    
! Loop variables                                                           TRANS1.27    
      INTEGER :: I, IHEM, IM, IN, ITRAC, L                                 TRANS1.28    
!-----------------------------------------------------                     TRANS1.29    
! Transpose                                                                TRANS1.30    
!-----------------------------------------------------                     TRANS1.31    
      IF (NPE.GT.1) THEN                                                   TRANS1.32    
         !-----------------------------------------------------            TRANS1.33    
         ! Loop over PEs on the same row to send them data                 TRANS1.34    
         !-----------------------------------------------------            TRANS1.35    
         DO iCol2=1,Px                                                     TRANS1.36    
            iPe=PeGrid(iCol2,iRow)                                         TRANS1.37    
            IF (iPe.NE.MyPe) THEN                                          TRANS1.38    
               !-----------------------------------------------------      TRANS1.39    
               ! Store multi-layer variables in HoldVar1                   TRANS1.40    
               !-----------------------------------------------------      TRANS1.41    
               INMAX=NNTxx(iCol)                                           TRANS1.42    
               IMMAX=MMTyy(iRow)                                           TRANS1.43    
               LMAX=NLxx(iCol2)                                            TRANS1.44    
               L1=KK1(iCol2)+1                                             TRANS1.45    
               L2=KK1(iCol2)+NLxx(iCol2)                                   TRANS1.46    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,1)=                       TRANS1.47    
     &              Z(1:INMAX,1:IMMAX,:,L1:L2)                             TRANS1.48    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,2)=                       TRANS1.49    
     &              D(1:INMAX,1:IMMAX,:,L1:L2)                             TRANS1.50    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,3)=                       TRANS1.51    
     &              T(1:INMAX,1:IMMAX,:,L1:L2)                             TRANS1.52    
*IF DEF,ABOVE_V1                                                           TRANS1.53    
               DO ITRAC=1,NTRAC                                            TRANS1.54    
                  HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,3+ITRAC)=              TRANS1.55    
     &                 TRA(1:INMAX,1:IMMAX,:,L1:L2,ITRAC)                  TRANS1.56    
               ENDDO                                                       TRANS1.57    
*ENDIF                                                                     TRANS1.58    
               !-----------------------------------------------------      TRANS1.59    
               ! Send message                                              TRANS1.60    
               !-----------------------------------------------------      TRANS1.61    
               iRecv=iPe                                                   TRANS1.62    
               nBuffSize=(3+NTRAC)*NNTx*MMTy*NHEM*NLx                      TRANS1.63    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS1.64    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaCom,iRecv,iTag,       TRANS1.65    
     &              MPI_COMM_WORLD,ierr)                                   TRANS1.66    
            ENDIF                                                          TRANS1.67    
         ENDDO                                                             TRANS1.68    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS1.69    
         !-----------------------------------------------------            TRANS1.70    
         ! Loop over PEs on the same row to receive data                   TRANS1.71    
         !-----------------------------------------------------            TRANS1.72    
         DO iCol2=1,Px                                                     TRANS1.73    
            iPe=PeGrid(iCol2,iRow)                                         TRANS1.74    
            IF (iPe.NE.MyPe) THEN                                          TRANS1.75    
               !-----------------------------------------------------      TRANS1.76    
               ! Receive message                                           TRANS1.77    
               !-----------------------------------------------------      TRANS1.78    
               iSend=iPe                                                   TRANS1.79    
               nBuffSize=(3+NTRAC)*NNTx*MMTy*NHEM*NLx                      TRANS1.80    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS1.81    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaCom,iSend,iTag,        TRANS1.82    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS1.83    
               !-----------------------------------------------------      TRANS1.84    
               ! Write to Z2 etc                                           TRANS1.85    
               !-----------------------------------------------------      TRANS1.86    
               INMAX=NNTxx(iCol2)                                          TRANS1.87    
               IMMAX=MMTyy(iRow)                                           TRANS1.88    
               LMAX=NLxx(iCol)                                             TRANS1.89    
               IN1=NNT1(iCol2)+1                                           TRANS1.90    
               IN2=NNT1(iCol2)+INMAX                                       TRANS1.91    
               L1=KK1(iCol)+1                                              TRANS1.92    
               L2=KK1(iCol)+NLxx(iCol)                                     TRANS1.93    
               Z2(IN1:IN2,1:IMMAX,:,1:LMAX)=                               TRANS1.94    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,1)                   TRANS1.95    
               D2(IN1:IN2,1:IMMAX,:,1:LMAX)=                               TRANS1.96    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,2)                   TRANS1.97    
               T2(IN1:IN2,1:IMMAX,:,1:LMAX)=                               TRANS1.98    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,3)                   TRANS1.99    
*IF DEF,ABOVE_V1                                                           TRANS1.100   
               DO ITRAC=1,NTRAC                                            TRANS1.101   
                  TRA2(IN1:IN2,1:IMMAX,:,1:LMAX,ITRAC)=                    TRANS1.102   
     &                 HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,3+ITRAC)          TRANS1.103   
               ENDDO                                                       TRANS1.104   
*ENDIF                                                                     TRANS1.105   
            ENDIF                                                          TRANS1.106   
         ENDDO                                                             TRANS1.107   
         !-----------------------------------------------------            TRANS1.108   
         ! Data is already contained on this PE                            TRANS1.109   
         !-----------------------------------------------------            TRANS1.110   
         INMAX=NNTxx(iCol)                                                 TRANS1.111   
         IMMAX=MMTyy(iRow)                                                 TRANS1.112   
         LMAX=NLxx(iCol)                                                   TRANS1.113   
         IN1=NNT1(iCol)+1                                                  TRANS1.114   
         IN2=NNT1(iCol)+NNTxx(iCol)                                        TRANS1.115   
         L1=KK1(iCol)+1                                                    TRANS1.116   
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS1.117   
         Z2(IN1:IN2,1:IMMAX,:,1:LMAX)=Z(1:INMAX,1:IMMAX,:,L1:L2)           TRANS1.118   
         D2(IN1:IN2,1:IMMAX,:,1:LMAX)=D(1:INMAX,1:IMMAX,:,L1:L2)           TRANS1.119   
         T2(IN1:IN2,1:IMMAX,:,1:LMAX)=T(1:INMAX,1:IMMAX,:,L1:L2)           TRANS1.120   
*IF DEF,ABOVE_V1                                                           TRANS1.121   
         DO ITRAC=1,NTRAC                                                  TRANS1.122   
            TRA2(IN1:IN2,1:IMMAX,:,1:LMAX,ITRAC)=                          TRANS1.123   
     &           TRA(1:INMAX,1:IMMAX,:,L1:L2,ITRAC)                        TRANS1.124   
         ENDDO                                                             TRANS1.125   
*ENDIF                                                                     TRANS1.126   
         !-----------------------------------------------------            TRANS1.127   
         ! Single layer variables will only stored on first                TRANS1.128   
         ! column of PEs                                                   TRANS1.129   
         !-----------------------------------------------------            TRANS1.130   
         IF (iCol.GT.1) THEN                                               TRANS1.131   
            INMAX=NNTxx(iCol)                                              TRANS1.132   
            IMMAX=MMTyy(iRow)                                              TRANS1.133   
            HoldVar2(1:INMAX,1:IMMAX,:)=SP(1:INMAX,1:IMMAX,:)              TRANS1.134   
            !-----------------------------------------------------         TRANS1.135   
            ! Send message                                                 TRANS1.136   
            !-----------------------------------------------------         TRANS1.137   
            iRecv=PeGrid(1,iRow)                                           TRANS1.138   
            nBuffSize=NNTx*MMTy*NHEM                                       TRANS1.139   
            iTag=TagRef+1010+100*iCol+iRow                                 TRANS1.140   
            CALL MPI_BSEND(HoldVar2,nBuffSize,ParaCom,iRecv,iTag,          TRANS1.141   
     &           MPI_COMM_WORLD,ierr)                                      TRANS1.142   
         ENDIF                                                             TRANS1.143   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS1.144   
         IF (iCol.EQ.1) THEN                                               TRANS1.145   
            !-----------------------------------------------------         TRANS1.146   
            ! Loop through the other PEs on this row                       TRANS1.147   
            !-----------------------------------------------------         TRANS1.148   
            DO iCol2=2,Px                                                  TRANS1.149   
               iPe=PeGrid(iCol2,iRow)                                      TRANS1.150   
               !-----------------------------------------------------      TRANS1.151   
               ! Receive messages                                          TRANS1.152   
               !-----------------------------------------------------      TRANS1.153   
               iSend=iPe                                                   TRANS1.154   
               nBuffSize=NNTx*MMTy*NHEM                                    TRANS1.155   
               iTag=TagRef+1010+100*iCol2+iRow                             TRANS1.156   
               CALL MPI_RECV(HoldVar2,nBuffSize,ParaCom,iSend,iTag,        TRANS1.157   
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS1.158   
               !-----------------------------------------------------      TRANS1.159   
               ! Write data to SP2                                         TRANS1.160   
               !-----------------------------------------------------      TRANS1.161   
               INMAX=NNTxx(iCol2)                                          TRANS1.162   
               IMMAX=MMTyy(iRow)                                           TRANS1.163   
               IN1=NNT1(iCol2)+1                                           TRANS1.164   
               IN2=NNT1(iCol2)+INMAX                                       TRANS1.165   
               SP2(IN1:IN2,1:IMMAX,:)=HoldVar2(1:INMAX,1:IMMAX,:)          TRANS1.166   
            ENDDO                                                          TRANS1.167   
            !-----------------------------------------------------         TRANS1.168   
            ! Store the data on this array                                 TRANS1.169   
            !-----------------------------------------------------         TRANS1.170   
            INMAX=NNTxx(iCol)                                              TRANS1.171   
            IMMAX=MMTyy(iRow)                                              TRANS1.172   
            IN1=NNT1(iCol)+1                                               TRANS1.173   
            IN2=NNT1(iCol)+NNTxx(iCol)                                     TRANS1.174   
            SP2(IN1:IN2,1:IMMAX,:)=SP(1:INMAX,1:IMMAX,:)                   TRANS1.175   
         ENDIF                                                             TRANS1.176   
      ELSE                                                                 TRANS1.177   
         !-----------------------------------------------------            TRANS1.178   
         ! One processor option, just copy one array into another          TRANS1.179   
         !-----------------------------------------------------            TRANS1.180   
         DO L=1,NL                                                         TRANS1.181   
            DO IHEM=1,NHEM                                                 TRANS1.182   
               DO IM=1,MMT                                                 TRANS1.183   
                  DO IN=1,NNT                                              TRANS1.184   
                     Z2(IN,IM,IHEM,L)=Z(IN,IM,IHEM,L)                      TRANS1.185   
                     D2(IN,IM,IHEM,L)=D(IN,IM,IHEM,L)                      TRANS1.186   
                     T2(IN,IM,IHEM,L)=T(IN,IM,IHEM,L)                      TRANS1.187   
*IF DEF,ABOVE_V1                                                           TRANS1.188   
                     DO ITRAC=1,NTRAC                                      TRANS1.189   
                        TRA2(IN,IM,IHEM,L,ITRAC)=                          TRANS1.190   
     &                       TRA(IN,IM,IHEM,L,ITRAC)                       TRANS1.191   
                     ENDDO                                                 TRANS1.192   
*ENDIF                                                                     TRANS1.193   
                  ENDDO                                                    TRANS1.194   
               ENDDO                                                       TRANS1.195   
            ENDDO                                                          TRANS1.196   
         ENDDO                                                             TRANS1.197   
         DO IHEM=1,NHEM                                                    TRANS1.198   
            DO IM=1,MMT                                                    TRANS1.199   
               DO IN=1,NNT                                                 TRANS1.200   
                  SP2(IN,IM,IHEM)=SP(IN,IM,IHEM)                           TRANS1.201   
               ENDDO                                                       TRANS1.202   
            ENDDO                                                          TRANS1.203   
         ENDDO                                                             TRANS1.204   
      ENDIF                                                                TRANS1.205   
      END                                                                  TRANS1.206   
*ENDIF                                                                     TRANS1.207   
*DECK TRANS2                                                               TRANS2.1     
*IF DEF,NOMPI                                                              TRANS2.2     
*ELSE                                                                      TRANS2.3     
!=====================================================                     TRANS2.4     
! Transposing the half transforms so that the zonal wavenumbers            TRANS2.5     
! are complete instead of the latitudes, so that the zonal                 TRANS2.6     
! wavenumber dimension is ready to be converted to longitudes              TRANS2.7     
! using FFT991 to produce grid space variables. Instead the                TRANS2.8     
! latitudes become split across the rows of PEs.                           TRANS2.9     
!=====================================================                     TRANS2.10    
*IF DEF,ABOVE_V1                                                           TRANS2.11    
      SUBROUTINE TRANS2(UG,VG,ZG,DG,TG,TRAG,PLG,PJG,PMG)                   TRANS2.12    
*ELSE                                                                      TRANS2.13    
      SUBROUTINE TRANS2(UG,VG,ZG,DG,TG,PLG,PJG,PMG)                        TRANS2.14    
*ENDIF                                                                     TRANS2.15    
      IMPLICIT NONE                                                        TRANS2.16    
*CALL PARAM1                                                               TRANS2.17    
*CALL PARAM2                                                               TRANS2.18    
*CALL PARAM3                                                               TRANS2.19    
*CALL GRIDPA2                                                              TRANS2.20    
*CALL GRIDPB2                                                              TRANS2.21    
*CALL MPIDECK                                                              TRANS2.22    
!-----------------------------------------------------                     TRANS2.23    
! Passed variables - these are the variables in common block               TRANS2.24    
! GRIDP but defined as REALs, instead of COMPLEXs.                         TRANS2.25    
!-----------------------------------------------------                     TRANS2.26    
      REAL :: UG(4*MMTy,NHEM,JG,NLx)                                       TRANS2.27    
      REAL :: VG(4*MMTy,NHEM,JG,NLx)                                       TRANS2.28    
      REAL :: ZG(4*MMTy,NHEM,JG,NLx)                                       TRANS2.29    
      REAL :: DG(4*MMTy,NHEM,JG,NLx)                                       TRANS2.30    
      REAL :: TG(4*MMTy,NHEM,JG,NLx)                                       TRANS2.31    
*IF DEF,ABOVE_V1                                                           TRANS2.32    
      REAL :: TRAG(4*MMTy,NHEM,JG,NLx,NTRAC)                               TRANS2.33    
*ENDIF                                                                     TRANS2.34    
      REAL :: PLG(4*MMTy,NHEM,JG)                                          TRANS2.35    
      REAL :: PJG(4*MMTy,NHEM,JG)                                          TRANS2.36    
      REAL :: PMG(4*MMTy,NHEM,JG)                                          TRANS2.37    
!-----------------------------------------------------                     TRANS2.38    
! Local variables                                                          TRANS2.39    
!-----------------------------------------------------                     TRANS2.40    
      INTEGER, PARAMETER :: TagRef=4000                                    TRANS2.41    
      REAL :: HoldVar1(4*MMTy,NHEM,JGy,NLx,5+NTRAC)                        TRANS2.42    
      REAL :: HoldVar2(4*MMTy,NHEM,JGy,3)                                  TRANS2.43    
      INTEGER :: iPe                                                       TRANS2.44    
      INTEGER :: iRow2                                                     TRANS2.45    
      INTEGER :: IMMAX, JMAX, LMAX                                         TRANS2.46    
      INTEGER :: IM1, IM2, IM3, IM4                                        TRANS2.47    
      INTEGER :: J1, J2                                                    TRANS2.48    
! Loop variables                                                           TRANS2.49    
      INTEGER :: I, IHEM, IM, ITRAC, J, L                                  TRANS2.50    
!-----------------------------------------------------                     TRANS2.51    
! Transpose                                                                TRANS2.52    
!-----------------------------------------------------                     TRANS2.53    
      IF (NPE.GT.1) THEN                                                   TRANS2.54    
         !-----------------------------------------------------            TRANS2.55    
         ! Zero arrays, before writing to them                             TRANS2.56    
         !-----------------------------------------------------            TRANS2.57    
         UG2(:,:,:,:)=0.0                                                  TRANS2.58    
         VG2(:,:,:,:)=0.0                                                  TRANS2.59    
         ZG2(:,:,:,:)=0.0                                                  TRANS2.60    
         DG2(:,:,:,:)=0.0                                                  TRANS2.61    
         TG2(:,:,:,:)=0.0                                                  TRANS2.62    
*IF DEF,ABOVE_V1                                                           TRANS2.63    
         TRAG2(:,:,:,:,:)=0.0                                              TRANS2.64    
*ENDIF                                                                     TRANS2.65    
         PLG2(:,:,:)=0.0                                                   TRANS2.66    
         PJG2(:,:,:)=0.0                                                   TRANS2.67    
         PMG2(:,:,:)=0.0                                                   TRANS2.68    
         !-----------------------------------------------------            TRANS2.69    
         ! Loop over PEs on the same column to send them data              TRANS2.70    
         !-----------------------------------------------------            TRANS2.71    
         DO iRow2=1,Py                                                     TRANS2.72    
            iPe=PeGrid(iCol,iRow2)                                         TRANS2.73    
            IF (iPe.NE.MyPe) THEN                                          TRANS2.74    
               !-----------------------------------------------------      TRANS2.75    
               ! Store multi-layer variables in HoldVar1                   TRANS2.76    
               !-----------------------------------------------------      TRANS2.77    
               IMMAX=4*MMTyy(iRow)                                         TRANS2.78    
               JMAX=JGyy(iRow2)                                            TRANS2.79    
               LMAX=NLxx(iCol)                                             TRANS2.80    
               J1=JJ1(iRow2)+1                                             TRANS2.81    
               J2=JJ1(iRow2)+JGyy(iRow2)                                   TRANS2.82    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,1)=                        TRANS2.83    
     &              UG(1:IMMAX,:,J1:J2,1:LMAX)                             TRANS2.84    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,2)=                        TRANS2.85    
     &              VG(1:IMMAX,:,J1:J2,1:LMAX)                             TRANS2.86    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,3)=                        TRANS2.87    
     &              ZG(1:IMMAX,:,J1:J2,1:LMAX)                             TRANS2.88    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,4)=                        TRANS2.89    
     &              DG(1:IMMAX,:,J1:J2,1:LMAX)                             TRANS2.90    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,5)=                        TRANS2.91    
     &              TG(1:IMMAX,:,J1:J2,1:LMAX)                             TRANS2.92    
*IF DEF,ABOVE_V1                                                           TRANS2.93    
               DO ITRAC=1,NTRAC                                            TRANS2.94    
                  HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,5+ITRAC)=               TRANS2.95    
     &                 TRAG(1:IMMAX,:,J1:J2,1:LMAX,ITRAC)                  TRANS2.96    
               ENDDO                                                       TRANS2.97    
*ENDIF                                                                     TRANS2.98    
               !-----------------------------------------------------      TRANS2.99    
               ! Send message                                              TRANS2.100   
               !-----------------------------------------------------      TRANS2.101   
               iRecv=iPe                                                   TRANS2.102   
               nBuffSize=(5+NTRAC)*4*MMTy*NHEM*JGy*NLx                     TRANS2.103   
               iTag=TagRef+100*iRow+10*iRow2+iCol                          TRANS2.104   
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS2.105   
     &              MPI_COMM_WORLD,ierr)                                   TRANS2.106   
            ENDIF                                                          TRANS2.107   
         ENDDO                                                             TRANS2.108   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS2.109   
         !-----------------------------------------------------            TRANS2.110   
         ! Loop over PEs on the same row to receive data                   TRANS2.111   
         !-----------------------------------------------------            TRANS2.112   
         DO iRow2=1,Py                                                     TRANS2.113   
            iPe=PeGrid(iCol,iRow2)                                         TRANS2.114   
            IF (iPe.NE.MyPe) THEN                                          TRANS2.115   
               !-----------------------------------------------------      TRANS2.116   
               ! Receive message                                           TRANS2.117   
               !-----------------------------------------------------      TRANS2.118   
               iSend=iPe                                                   TRANS2.119   
               nBuffSize=(5+NTRAC)*4*MMTy*NHEM*JGy*NLx                     TRANS2.120   
               iTag=TagRef+100*iRow2+10*iRow+iCol                          TRANS2.121   
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS2.122   
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS2.123   
               !-----------------------------------------------------      TRANS2.124   
               ! Write to UG2 etc                                          TRANS2.125   
               !-----------------------------------------------------      TRANS2.126   
               IMMAX=2*MMTyy(iRow2)                                        TRANS2.127   
               IM1=2*MMT1(iRow2)                                           TRANS2.128   
               IM3=4*MMT-2*(MMT1(iRow2)+MMTyy(iRow2))                      TRANS2.129   
               DO L=1,NLxx(iCol)                                           TRANS2.130   
                  DO J=1,JGyy(iRow)                                        TRANS2.131   
                     DO IHEM=1,NHEM                                        TRANS2.132   
                        DO I=1,IMMAX                                       TRANS2.133   
                           UG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,1)      TRANS2.134   
                        ENDDO                                              TRANS2.135   
                        DO I=1,IMMAX                                       TRANS2.136   
                           UG2(IM3+I,IHEM,J,L)=                            TRANS2.137   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,1)               TRANS2.138   
                        ENDDO                                              TRANS2.139   
                     ENDDO                                                 TRANS2.140   
                  ENDDO                                                    TRANS2.141   
               ENDDO                                                       TRANS2.142   
               DO L=1,NLxx(iCol)                                           TRANS2.143   
                  DO J=1,JGyy(iRow)                                        TRANS2.144   
                     DO IHEM=1,NHEM                                        TRANS2.145   
                        DO I=1,IMMAX                                       TRANS2.146   
                           VG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,2)      TRANS2.147   
                        ENDDO                                              TRANS2.148   
                        DO I=1,IMMAX                                       TRANS2.149   
                           VG2(IM3+I,IHEM,J,L)=                            TRANS2.150   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,2)               TRANS2.151   
                        ENDDO                                              TRANS2.152   
                     ENDDO                                                 TRANS2.153   
                  ENDDO                                                    TRANS2.154   
               ENDDO                                                       TRANS2.155   
               DO L=1,NLxx(iCol)                                           TRANS2.156   
                  DO J=1,JGyy(iRow)                                        TRANS2.157   
                     DO IHEM=1,NHEM                                        TRANS2.158   
                        DO I=1,IMMAX                                       TRANS2.159   
                           ZG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,3)      TRANS2.160   
                        ENDDO                                              TRANS2.161   
                        DO I=1,IMMAX                                       TRANS2.162   
                           ZG2(IM3+I,IHEM,J,L)=                            TRANS2.163   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,3)               TRANS2.164   
                        ENDDO                                              TRANS2.165   
                     ENDDO                                                 TRANS2.166   
                  ENDDO                                                    TRANS2.167   
               ENDDO                                                       TRANS2.168   
               DO L=1,NLxx(iCol)                                           TRANS2.169   
                  DO J=1,JGyy(iRow)                                        TRANS2.170   
                     DO IHEM=1,NHEM                                        TRANS2.171   
                        DO I=1,IMMAX                                       TRANS2.172   
                           DG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,4)      TRANS2.173   
                        ENDDO                                              TRANS2.174   
                        DO I=1,IMMAX                                       TRANS2.175   
                           DG2(IM3+I,IHEM,J,L)=                            TRANS2.176   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,4)               TRANS2.177   
                        ENDDO                                              TRANS2.178   
                     ENDDO                                                 TRANS2.179   
                  ENDDO                                                    TRANS2.180   
               ENDDO                                                       TRANS2.181   
               DO L=1,NLxx(iCol)                                           TRANS2.182   
                  DO J=1,JGyy(iRow)                                        TRANS2.183   
                     DO IHEM=1,NHEM                                        TRANS2.184   
                        DO I=1,IMMAX                                       TRANS2.185   
                           TG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,5)      TRANS2.186   
                        ENDDO                                              TRANS2.187   
                        DO I=1,IMMAX                                       TRANS2.188   
                           TG2(IM3+I,IHEM,J,L)=                            TRANS2.189   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,5)               TRANS2.190   
                        ENDDO                                              TRANS2.191   
                     ENDDO                                                 TRANS2.192   
                  ENDDO                                                    TRANS2.193   
               ENDDO                                                       TRANS2.194   
*IF DEF,ABOVE_V1                                                           TRANS2.195   
               DO ITRAC=1,NTRAC                                            TRANS2.196   
                  DO L=1,NLxx(iCol)                                        TRANS2.197   
                     DO J=1,JGyy(iRow)                                     TRANS2.198   
                        DO IHEM=1,NHEM                                     TRANS2.199   
                           DO I=1,IMMAX                                    TRANS2.200   
                              TRAG2(IM1+I,IHEM,J,L,ITRAC)=                 TRANS2.201   
     &                             HoldVar1(I,IHEM,J,L,5+ITRAC)            TRANS2.202   
                           ENDDO                                           TRANS2.203   
                           DO I=1,IMMAX                                    TRANS2.204   
                              TRAG2(IM3+I,IHEM,J,L,ITRAC)=                 TRANS2.205   
     &                             HoldVar1(IMMAX+I,IHEM,J,L,5+ITRAC)      TRANS2.206   
                           ENDDO                                           TRANS2.207   
                        ENDDO                                              TRANS2.208   
                     ENDDO                                                 TRANS2.209   
                  ENDDO                                                    TRANS2.210   
               ENDDO                                                       TRANS2.211   
*ENDIF                                                                     TRANS2.212   
            ENDIF                                                          TRANS2.213   
         ENDDO                                                             TRANS2.214   
         !-----------------------------------------------------            TRANS2.215   
         ! Data is already contained on this PE                            TRANS2.216   
         !-----------------------------------------------------            TRANS2.217   
         IMMAX=2*MMTyy(iRow)                                               TRANS2.218   
         IM1=2*MMT1(iRow)                                                  TRANS2.219   
         IM3=4*MMT-2*(MMT1(iRow)+MMTyy(iRow))                              TRANS2.220   
         J1=JJ1(iRow)                                                      TRANS2.221   
         DO L=1,NLxx(iCol)                                                 TRANS2.222   
            DO J=1,JGyy(iRow)                                              TRANS2.223   
               DO IHEM=1,NHEM                                              TRANS2.224   
                  DO I=1,IMMAX                                             TRANS2.225   
                     UG2(IM1+I,IHEM,J,L)=UG(I,IHEM,J1+J,L)                 TRANS2.226   
                  ENDDO                                                    TRANS2.227   
                  DO I=1,IMMAX                                             TRANS2.228   
                     UG2(IM3+I,IHEM,J,L)=UG(IMMAX+I,IHEM,J1+J,L)           TRANS2.229   
                  ENDDO                                                    TRANS2.230   
               ENDDO                                                       TRANS2.231   
            ENDDO                                                          TRANS2.232   
         ENDDO                                                             TRANS2.233   
         DO L=1,NLxx(iCol)                                                 TRANS2.234   
            DO J=1,JGyy(iRow)                                              TRANS2.235   
               DO IHEM=1,NHEM                                              TRANS2.236   
                  DO I=1,IMMAX                                             TRANS2.237   
                     VG2(IM1+I,IHEM,J,L)=VG(I,IHEM,J1+J,L)                 TRANS2.238   
                  ENDDO                                                    TRANS2.239   
                  DO I=1,IMMAX                                             TRANS2.240   
                     VG2(IM3+I,IHEM,J,L)=VG(IMMAX+I,IHEM,J1+J,L)           TRANS2.241   
                  ENDDO                                                    TRANS2.242   
               ENDDO                                                       TRANS2.243   
            ENDDO                                                          TRANS2.244   
         ENDDO                                                             TRANS2.245   
         DO L=1,NLxx(iCol)                                                 TRANS2.246   
            DO J=1,JGyy(iRow)                                              TRANS2.247   
               DO IHEM=1,NHEM                                              TRANS2.248   
                  DO I=1,IMMAX                                             TRANS2.249   
                     ZG2(IM1+I,IHEM,J,L)=ZG(I,IHEM,J1+J,L)                 TRANS2.250   
                  ENDDO                                                    TRANS2.251   
                  DO I=1,IMMAX                                             TRANS2.252   
                     ZG2(IM3+I,IHEM,J,L)=ZG(IMMAX+I,IHEM,J1+J,L)           TRANS2.253   
                  ENDDO                                                    TRANS2.254   
               ENDDO                                                       TRANS2.255   
            ENDDO                                                          TRANS2.256   
         ENDDO                                                             TRANS2.257   
         DO L=1,NLxx(iCol)                                                 TRANS2.258   
            DO J=1,JGyy(iRow)                                              TRANS2.259   
               DO IHEM=1,NHEM                                              TRANS2.260   
                  DO I=1,IMMAX                                             TRANS2.261   
                     DG2(IM1+I,IHEM,J,L)=DG(I,IHEM,J1+J,L)                 TRANS2.262   
                  ENDDO                                                    TRANS2.263   
                  DO I=1,IMMAX                                             TRANS2.264   
                     DG2(IM3+I,IHEM,J,L)=DG(IMMAX+I,IHEM,J1+J,L)           TRANS2.265   
                  ENDDO                                                    TRANS2.266   
               ENDDO                                                       TRANS2.267   
            ENDDO                                                          TRANS2.268   
         ENDDO                                                             TRANS2.269   
         DO L=1,NLxx(iCol)                                                 TRANS2.270   
            DO J=1,JGyy(iRow)                                              TRANS2.271   
               DO IHEM=1,NHEM                                              TRANS2.272   
                  DO I=1,IMMAX                                             TRANS2.273   
                     TG2(IM1+I,IHEM,J,L)=TG(I,IHEM,J1+J,L)                 TRANS2.274   
                  ENDDO                                                    TRANS2.275   
                  DO I=1,IMMAX                                             TRANS2.276   
                     TG2(IM3+I,IHEM,J,L)=TG(IMMAX+I,IHEM,J1+J,L)           TRANS2.277   
                  ENDDO                                                    TRANS2.278   
               ENDDO                                                       TRANS2.279   
            ENDDO                                                          TRANS2.280   
         ENDDO                                                             TRANS2.281   
*IF DEF,ABOVE_V1                                                           TRANS2.282   
         DO ITRAC=1,NTRAC                                                  TRANS2.283   
            DO L=1,NLxx(iCol)                                              TRANS2.284   
               DO J=1,JGyy(iRow)                                           TRANS2.285   
                  DO IHEM=1,NHEM                                           TRANS2.286   
                     DO I=1,IMMAX                                          TRANS2.287   
                        TRAG2(IM1+I,IHEM,J,L,ITRAC)=                       TRANS2.288   
     &                       TRAG(I,IHEM,J1+J,L,ITRAC)                     TRANS2.289   
                     ENDDO                                                 TRANS2.290   
                     DO I=1,IMMAX                                          TRANS2.291   
                        TRAG2(IM3+I,IHEM,J,L,ITRAC)=                       TRANS2.292   
     &                       TRAG(IMMAX+I,IHEM,J1+J,L,ITRAC)               TRANS2.293   
                     ENDDO                                                 TRANS2.294   
                  ENDDO                                                    TRANS2.295   
               ENDDO                                                       TRANS2.296   
            ENDDO                                                          TRANS2.297   
         ENDDO                                                             TRANS2.298   
*ENDIF                                                                     TRANS2.299   
         !-----------------------------------------------------            TRANS2.300   
         ! Single layer variables are only stored when iCol=1              TRANS2.301   
         !-----------------------------------------------------            TRANS2.302   
         IF (iCol.EQ.1) THEN                                               TRANS2.303   
            !-----------------------------------------------------         TRANS2.304   
            ! Loop over PEs on the same row to send data                   TRANS2.305   
            !-----------------------------------------------------         TRANS2.306   
            DO iRow2=1,Py                                                  TRANS2.307   
               iPe=PeGrid(iCol,iRow2)                                      TRANS2.308   
               IF (iPe.NE.MyPe) THEN                                       TRANS2.309   
                  !-----------------------------------------------------   TRANS2.310   
                  ! Single layer variables are only stored on first        TRANS2.311   
                  ! column.                                                TRANS2.312   
                  !-----------------------------------------------------   TRANS2.313   
                  IMMAX=4*MMTyy(iRow)                                      TRANS2.314   
                  JMAX=JGyy(iRow2)                                         TRANS2.315   
                  J1=JJ1(iRow2)+1                                          TRANS2.316   
                  J2=JJ1(iRow2)+JGyy(iRow2)                                TRANS2.317   
                  HoldVar2(1:IMMAX,:,1:JMAX,1)=PLG(1:IMMAX,:,J1:J2)        TRANS2.318   
                  HoldVar2(1:IMMAX,:,1:JMAX,2)=PJG(1:IMMAX,:,J1:J2)        TRANS2.319   
                  HoldVar2(1:IMMAX,:,1:JMAX,3)=PMG(1:IMMAX,:,J1:J2)        TRANS2.320   
                  !----------------------------------------------------    TRANS2.321   
                  ! Send message                                           TRANS2.322   
                  !----------------------------------------------------    TRANS2.323   
                  iRecv=iPe                                                TRANS2.324   
                  nBuffSize=12*MMTy*NHEM*JGy                               TRANS2.325   
                  iTag=TagRef+1001+100*iRow+10*iRow2                       TRANS2.326   
                  CALL MPI_BSEND(HoldVar2,nBuffSize,ParaReal,iRecv,iTag,   TRANS2.327   
     &                 MPI_COMM_WORLD,ierr)                                TRANS2.328   
               ENDIF                                                       TRANS2.329   
            ENDDO                                                          TRANS2.330   
            !-----------------------------------------------------         TRANS2.331   
            ! Loop over PEs on the same row to receive data                TRANS2.332   
            !-----------------------------------------------------         TRANS2.333   
            DO iRow2=1,Py                                                  TRANS2.334   
               iPe=PeGrid(iCol,iRow2)                                      TRANS2.335   
               IF (iPe.NE.MyPe) THEN                                       TRANS2.336   
                  !----------------------------------------------------    TRANS2.337   
                  ! Receive message                                        TRANS2.338   
                  !----------------------------------------------------    TRANS2.339   
                  iSend=iPe                                                TRANS2.340   
                  nBuffSize=12*MMTy*NHEM*JGy                               TRANS2.341   
                  iTag=TagRef+1001+100*iRow2+10*iRow                       TRANS2.342   
                  CALL MPI_RECV(HoldVar2,nBuffSize,ParaReal,iSend,iTag,    TRANS2.343   
     &                 MPI_COMM_WORLD,istat,ierr)                          TRANS2.344   
                  !----------------------------------------------------    TRANS2.345   
                  ! Write into array                                       TRANS2.346   
                  !----------------------------------------------------    TRANS2.347   
                  IMMAX=2*MMTyy(iRow2)                                     TRANS2.348   
                  IM1=2*MMT1(iRow2)                                        TRANS2.349   
                  IM3=4*MMT-2*(MMT1(iRow2)+MMTyy(iRow2))                   TRANS2.350   
                  DO J=1,JGyy(iRow)                                        TRANS2.351   
                     DO IHEM=1,NHEM                                        TRANS2.352   
                        DO I=1,IMMAX                                       TRANS2.353   
                           PLG2(IM1+I,IHEM,J)=HoldVar2(I,IHEM,J,1)         TRANS2.354   
                        ENDDO                                              TRANS2.355   
                        DO I=1,IMMAX                                       TRANS2.356   
                           PLG2(IM3+I,IHEM,J)=HoldVar2(IMMAX+I,IHEM,J,1)   TRANS2.357   
                        ENDDO                                              TRANS2.358   
                     ENDDO                                                 TRANS2.359   
                  ENDDO                                                    TRANS2.360   
                  DO J=1,JGyy(iRow)                                        TRANS2.361   
                     DO IHEM=1,NHEM                                        TRANS2.362   
                        DO I=1,IMMAX                                       TRANS2.363   
                           PJG2(IM1+I,IHEM,J)=HoldVar2(I,IHEM,J,2)         TRANS2.364   
                        ENDDO                                              TRANS2.365   
                        DO I=1,IMMAX                                       TRANS2.366   
                           PJG2(IM3+I,IHEM,J)=HoldVar2(IMMAX+I,IHEM,J,2)   TRANS2.367   
                        ENDDO                                              TRANS2.368   
                     ENDDO                                                 TRANS2.369   
                  ENDDO                                                    TRANS2.370   
                  DO J=1,JGyy(iRow)                                        TRANS2.371   
                     DO IHEM=1,NHEM                                        TRANS2.372   
                        DO I=1,IMMAX                                       TRANS2.373   
                           PMG2(IM1+I,IHEM,J)=HoldVar2(I,IHEM,J,3)         TRANS2.374   
                        ENDDO                                              TRANS2.375   
                        DO I=1,IMMAX                                       TRANS2.376   
                           PMG2(IM3+I,IHEM,J)=HoldVar2(IMMAX+I,IHEM,J,3)   TRANS2.377   
                        ENDDO                                              TRANS2.378   
                     ENDDO                                                 TRANS2.379   
                  ENDDO                                                    TRANS2.380   
               ENDIF                                                       TRANS2.381   
            ENDDO                                                          TRANS2.382   
            !-----------------------------------------------------         TRANS2.383   
            ! Data is already stored on this PE                            TRANS2.384   
            !-----------------------------------------------------         TRANS2.385   
            IMMAX=2*MMTyy(iRow)                                            TRANS2.386   
            IM1=2*MMT1(iRow)                                               TRANS2.387   
            IM3=4*MMT-2*(MMT1(iRow)+MMTyy(iRow))                           TRANS2.388   
            J1=JJ1(iRow)                                                   TRANS2.389   
            DO J=1,JGyy(iRow)                                              TRANS2.390   
               DO IHEM=1,NHEM                                              TRANS2.391   
                  DO I=1,IMMAX                                             TRANS2.392   
                     PLG2(IM1+I,IHEM,J)=PLG(I,IHEM,J1+J)                   TRANS2.393   
                  ENDDO                                                    TRANS2.394   
                  DO I=1,IMMAX                                             TRANS2.395   
                     PLG2(IM3+I,IHEM,J)=PLG(IMMAX+I,IHEM,J1+J)             TRANS2.396   
                  ENDDO                                                    TRANS2.397   
               ENDDO                                                       TRANS2.398   
            ENDDO                                                          TRANS2.399   
            DO J=1,JGyy(iRow)                                              TRANS2.400   
               DO IHEM=1,NHEM                                              TRANS2.401   
                  DO I=1,IMMAX                                             TRANS2.402   
                     PJG2(IM1+I,IHEM,J)=PJG(I,IHEM,J1+J)                   TRANS2.403   
                  ENDDO                                                    TRANS2.404   
                  DO I=1,IMMAX                                             TRANS2.405   
                     PJG2(IM3+I,IHEM,J)=PJG(IMMAX+I,IHEM,J1+J)             TRANS2.406   
                  ENDDO                                                    TRANS2.407   
               ENDDO                                                       TRANS2.408   
            ENDDO                                                          TRANS2.409   
            DO J=1,JGyy(iRow)                                              TRANS2.410   
               DO IHEM=1,NHEM                                              TRANS2.411   
                  DO I=1,IMMAX                                             TRANS2.412   
                     PMG2(IM1+I,IHEM,J)=PMG(I,IHEM,J1+J)                   TRANS2.413   
                  ENDDO                                                    TRANS2.414   
                  DO I=1,IMMAX                                             TRANS2.415   
                     PMG2(IM3+I,IHEM,J)=PMG(IMMAX+I,IHEM,J1+J)             TRANS2.416   
                  ENDDO                                                    TRANS2.417   
               ENDDO                                                       TRANS2.418   
            ENDDO                                                          TRANS2.419   
         ENDIF                                                             TRANS2.420   
      ELSE                                                                 TRANS2.421   
         !-----------------------------------------------------            TRANS2.422   
         ! One processor option, just copy one array into another          TRANS2.423   
         !-----------------------------------------------------            TRANS2.424   
         UG2(:,:,:,:)=0.0                                                  TRANS2.425   
         VG2(:,:,:,:)=0.0                                                  TRANS2.426   
         ZG2(:,:,:,:)=0.0                                                  TRANS2.427   
         DG2(:,:,:,:)=0.0                                                  TRANS2.428   
         TG2(:,:,:,:)=0.0                                                  TRANS2.429   
*IF DEF,ABOVE_V1                                                           TRANS2.430   
         TRAG2(:,:,:,:,:)=0.0                                              TRANS2.431   
*ENDIF                                                                     TRANS2.432   
         DO L=1,NL                                                         TRANS2.433   
            DO J=1,JG                                                      TRANS2.434   
               DO IHEM=1,NHEM                                              TRANS2.435   
                  DO I=1,4*MMT                                             TRANS2.436   
                     UG2(I,IHEM,J,L)=UG(I,IHEM,J,L)                        TRANS2.437   
                     VG2(I,IHEM,J,L)=VG(I,IHEM,J,L)                        TRANS2.438   
                     ZG2(I,IHEM,J,L)=ZG(I,IHEM,J,L)                        TRANS2.439   
                     DG2(I,IHEM,J,L)=DG(I,IHEM,J,L)                        TRANS2.440   
                     TG2(I,IHEM,J,L)=TG(I,IHEM,J,L)                        TRANS2.441   
*IF DEF,ABOVE_V1                                                           TRANS2.442   
                     DO ITRAC=1,NTRAC                                      TRANS2.443   
                        TRAG2(I,IHEM,J,L,ITRAC)=TRAG(I,IHEM,J,L,ITRAC)     TRANS2.444   
                     ENDDO                                                 TRANS2.445   
*ENDIF                                                                     TRANS2.446   
                  ENDDO                                                    TRANS2.447   
               ENDDO                                                       TRANS2.448   
            ENDDO                                                          TRANS2.449   
         ENDDO                                                             TRANS2.450   
         PLG2(:,:,:)=0.0                                                   TRANS2.451   
         PJG2(:,:,:)=0.0                                                   TRANS2.452   
         PMG2(:,:,:)=0.0                                                   TRANS2.453   
         DO J=1,JG                                                         TRANS2.454   
            DO IHEM=1,NHEM                                                 TRANS2.455   
               DO I=1,4*MMT                                                TRANS2.456   
                  PLG2(I,IHEM,J) =PLG(I,IHEM,J)                            TRANS2.457   
                  PJG2(I,IHEM,J) =PJG(I,IHEM,J)                            TRANS2.458   
                  PMG2(I,IHEM,J) =PMG(I,IHEM,J)                            TRANS2.459   
               ENDDO                                                       TRANS2.460   
            ENDDO                                                          TRANS2.461   
         ENDDO                                                             TRANS2.462   
      ENDIF                                                                TRANS2.463   
      END                                                                  TRANS2.464   
*ENDIF                                                                     TRANS2.465   
*DECK TRANS2A                                                              TRANS2A.1     
*IF DEF,ABOVE_V1                                                           TRANS2A.2     
*IF DEF,NOMPI                                                              TRANS2A.3     
*ELSE                                                                      TRANS2A.4     
!=====================================================                     TRANS2A.5     
! Transposing the half transforms so that the zonal wavenumbers            TRANS2A.6     
! are complete instead of the latitudes, so that the zonal                 TRANS2A.7     
! wavenumber dimension is ready to be converted to longitudes              TRANS2A.8     
! using FFT991 to produce grid space variables. Instead the                TRANS2A.9     
! latitudes become split across the rows of PEs.                           TRANS2A.10    
!=====================================================                     TRANS2A.11    
      SUBROUTINE TRANS2A(CHIG,SFG)                                         TRANS2A.12    
      IMPLICIT NONE                                                        TRANS2A.13    
*CALL PARAM1                                                               TRANS2A.14    
*CALL PARAM2                                                               TRANS2A.15    
*CALL PARAM3                                                               TRANS2A.16    
*CALL GRIDPB2                                                              TRANS2A.17    
*CALL MPIDECK                                                              TRANS2A.18    
!-----------------------------------------------------                     TRANS2A.19    
! Passed variables - these are the variables in common block               TRANS2A.20    
! GRIDP but defined as REALs, instead of COMPLEXs.                         TRANS2A.21    
!-----------------------------------------------------                     TRANS2A.22    
      REAL :: CHIG(4*MMTy,NHEM,JG,NLx)                                     TRANS2A.23    
      REAL :: SFG(4*MMTy,NHEM,JG,NLx)                                      TRANS2A.24    
!-----------------------------------------------------                     TRANS2A.25    
! Local variables                                                          TRANS2A.26    
!-----------------------------------------------------                     TRANS2A.27    
      INTEGER, PARAMETER :: TagRef=6000                                    TRANS2A.28    
      REAL :: HoldVar1(4*MMTy,NHEM,JGy,NLx,2)                              TRANS2A.29    
      INTEGER :: iPe                                                       TRANS2A.30    
      INTEGER :: iRow2                                                     TRANS2A.31    
      INTEGER :: IMMAX, JMAX, LMAX                                         TRANS2A.32    
      INTEGER :: IM1, IM2, IM3, IM4                                        TRANS2A.33    
      INTEGER :: J1, J2                                                    TRANS2A.34    
! Loop variables                                                           TRANS2A.35    
      INTEGER :: I, IHEM, IM, ITRAC, J, L                                  TRANS2A.36    
!-----------------------------------------------------                     TRANS2A.37    
! Transpose                                                                TRANS2A.38    
!-----------------------------------------------------                     TRANS2A.39    
      IF (NPE.GT.1) THEN                                                   TRANS2A.40    
         !-----------------------------------------------------            TRANS2A.41    
         ! Zero arrays, before writing to them                             TRANS2A.42    
         !-----------------------------------------------------            TRANS2A.43    
         CHIG2(:,:,:,:)=0.0                                                TRANS2A.44    
         SFG2(:,:,:,:)=0.0                                                 TRANS2A.45    
         !-----------------------------------------------------            TRANS2A.46    
         ! Loop over PEs on the same column to send them data              TRANS2A.47    
         !-----------------------------------------------------            TRANS2A.48    
         DO iRow2=1,Py                                                     TRANS2A.49    
            iPe=PeGrid(iCol,iRow2)                                         TRANS2A.50    
            IF (iPe.NE.MyPe) THEN                                          TRANS2A.51    
               !-----------------------------------------------------      TRANS2A.52    
               ! Store multi-layer variables in HoldVar1                   TRANS2A.53    
               !-----------------------------------------------------      TRANS2A.54    
               IMMAX=4*MMTyy(iRow)                                         TRANS2A.55    
               JMAX=JGyy(iRow2)                                            TRANS2A.56    
               LMAX=NLxx(iCol)                                             TRANS2A.57    
               J1=JJ1(iRow2)+1                                             TRANS2A.58    
               J2=JJ1(iRow2)+JGyy(iRow2)                                   TRANS2A.59    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,1)=                        TRANS2A.60    
     &              CHIG(1:IMMAX,:,J1:J2,1:LMAX)                           TRANS2A.61    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,2)=                        TRANS2A.62    
     &              SFG(1:IMMAX,:,J1:J2,1:LMAX)                            TRANS2A.63    
               !-----------------------------------------------------      TRANS2A.64    
               ! Send message                                              TRANS2A.65    
               !-----------------------------------------------------      TRANS2A.66    
               iRecv=iPe                                                   TRANS2A.67    
               nBuffSize=8*MMTy*NHEM*JGy*NLx                               TRANS2A.68    
               iTag=TagRef+100*iRow+10*iRow2+iCol                          TRANS2A.69    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS2A.70    
     &              MPI_COMM_WORLD,ierr)                                   TRANS2A.71    
            ENDIF                                                          TRANS2A.72    
         ENDDO                                                             TRANS2A.73    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS2A.74    
         !-----------------------------------------------------            TRANS2A.75    
         ! Loop over PEs on the same row to receive data                   TRANS2A.76    
         !-----------------------------------------------------            TRANS2A.77    
         DO iRow2=1,Py                                                     TRANS2A.78    
            iPe=PeGrid(iCol,iRow2)                                         TRANS2A.79    
            IF (iPe.NE.MyPe) THEN                                          TRANS2A.80    
               !-----------------------------------------------------      TRANS2A.81    
               ! Receive message                                           TRANS2A.82    
               !-----------------------------------------------------      TRANS2A.83    
               iSend=iPe                                                   TRANS2A.84    
               nBuffSize=8*MMTy*NHEM*JGy*NLx                               TRANS2A.85    
               iTag=TagRef+100*iRow2+10*iRow+iCol                          TRANS2A.86    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS2A.87    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS2A.88    
               !-----------------------------------------------------      TRANS2A.89    
               ! Write to CHIG2 and SFG2                                   TRANS2A.90    
               !-----------------------------------------------------      TRANS2A.91    
               IMMAX=2*MMTyy(iRow2)                                        TRANS2A.92    
               IM1=2*MMT1(iRow2)                                           TRANS2A.93    
               IM3=4*MMT-2*(MMT1(iRow2)+MMTyy(iRow2))                      TRANS2A.94    
               DO L=1,NLxx(iCol)                                           TRANS2A.95    
                  DO J=1,JGyy(iRow)                                        TRANS2A.96    
                     DO IHEM=1,NHEM                                        TRANS2A.97    
                        DO I=1,IMMAX                                       TRANS2A.98    
                           CHIG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,1)    TRANS2A.99    
                        ENDDO                                              TRANS2A.100   
                        DO I=1,IMMAX                                       TRANS2A.101   
                           CHIG2(IM3+I,IHEM,J,L)=                          TRANS2A.102   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,1)               TRANS2A.103   
                        ENDDO                                              TRANS2A.104   
                     ENDDO                                                 TRANS2A.105   
                  ENDDO                                                    TRANS2A.106   
               ENDDO                                                       TRANS2A.107   
               DO L=1,NLxx(iCol)                                           TRANS2A.108   
                  DO J=1,JGyy(iRow)                                        TRANS2A.109   
                     DO IHEM=1,NHEM                                        TRANS2A.110   
                        DO I=1,IMMAX                                       TRANS2A.111   
                           SFG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,2)     TRANS2A.112   
                        ENDDO                                              TRANS2A.113   
                        DO I=1,IMMAX                                       TRANS2A.114   
                           SFG2(IM3+I,IHEM,J,L)=                           TRANS2A.115   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,2)               TRANS2A.116   
                        ENDDO                                              TRANS2A.117   
                     ENDDO                                                 TRANS2A.118   
                  ENDDO                                                    TRANS2A.119   
               ENDDO                                                       TRANS2A.120   
            ENDIF                                                          TRANS2A.121   
         ENDDO                                                             TRANS2A.122   
         !-----------------------------------------------------            TRANS2A.123   
         ! Data is already contained on this PE                            TRANS2A.124   
         !-----------------------------------------------------            TRANS2A.125   
         IMMAX=2*MMTyy(iRow)                                               TRANS2A.126   
         IM1=2*MMT1(iRow)                                                  TRANS2A.127   
         IM3=4*MMT-2*(MMT1(iRow)+MMTyy(iRow))                              TRANS2A.128   
         J1=JJ1(iRow)                                                      TRANS2A.129   
         DO L=1,NLxx(iCol)                                                 TRANS2A.130   
            DO J=1,JGyy(iRow)                                              TRANS2A.131   
               DO IHEM=1,NHEM                                              TRANS2A.132   
                  DO I=1,IMMAX                                             TRANS2A.133   
                     CHIG2(IM1+I,IHEM,J,L)=CHIG(I,IHEM,J1+J,L)             TRANS2A.134   
                  ENDDO                                                    TRANS2A.135   
                  DO I=1,IMMAX                                             TRANS2A.136   
                     CHIG2(IM3+I,IHEM,J,L)=CHIG(IMMAX+I,IHEM,J1+J,L)       TRANS2A.137   
                  ENDDO                                                    TRANS2A.138   
               ENDDO                                                       TRANS2A.139   
            ENDDO                                                          TRANS2A.140   
         ENDDO                                                             TRANS2A.141   
         DO L=1,NLxx(iCol)                                                 TRANS2A.142   
            DO J=1,JGyy(iRow)                                              TRANS2A.143   
               DO IHEM=1,NHEM                                              TRANS2A.144   
                  DO I=1,IMMAX                                             TRANS2A.145   
                     SFG2(IM1+I,IHEM,J,L)=SFG(I,IHEM,J1+J,L)               TRANS2A.146   
                  ENDDO                                                    TRANS2A.147   
                  DO I=1,IMMAX                                             TRANS2A.148   
                     SFG2(IM3+I,IHEM,J,L)=SFG(IMMAX+I,IHEM,J1+J,L)         TRANS2A.149   
                  ENDDO                                                    TRANS2A.150   
               ENDDO                                                       TRANS2A.151   
            ENDDO                                                          TRANS2A.152   
         ENDDO                                                             TRANS2A.153   
      ELSE                                                                 TRANS2A.154   
         !-----------------------------------------------------            TRANS2A.155   
         ! One processor option, just copy one array into another          TRANS2A.156   
         !-----------------------------------------------------            TRANS2A.157   
         CHIG2(:,:,:,:)=0.0                                                TRANS2A.158   
         SFG2(:,:,:,:)=0.0                                                 TRANS2A.159   
         DO L=1,NL                                                         TRANS2A.160   
            DO J=1,JG                                                      TRANS2A.161   
               DO IHEM=1,NHEM                                              TRANS2A.162   
                  DO I=1,4*MMT                                             TRANS2A.163   
                     CHIG2(I,IHEM,J,L)=CHIG(I,IHEM,J,L)                    TRANS2A.164   
                     SFG2(I,IHEM,J,L)=SFG(I,IHEM,J,L)                      TRANS2A.165   
                  ENDDO                                                    TRANS2A.166   
               ENDDO                                                       TRANS2A.167   
            ENDDO                                                          TRANS2A.168   
         ENDDO                                                             TRANS2A.169   
      ENDIF                                                                TRANS2A.170   
      END                                                                  TRANS2A.171   
*ENDIF                                                                     TRANS2A.172   
*ENDIF                                                                     TRANS2A.173   
*DECK TRANS2B                                                              TRANS2B.1     
*IF DEF,ABOVE_V1                                                           TRANS2B.2     
*IF DEF,NOMPI                                                              TRANS2B.3     
*ELSE                                                                      TRANS2B.4     
!=====================================================                     TRANS2B.5     
! Transposing the half transforms so that the zonal wavenumbers            TRANS2B.6     
! are complete instead of the latitudes, so that the zonal                 TRANS2B.7     
! wavenumber dimension is ready to be converted to longitudes              TRANS2B.8     
! using FFT991 to produce grid space variables. Instead the                TRANS2B.9     
! latitudes become split across the rows of PEs.                           TRANS2B.10    
!=====================================================                     TRANS2B.11    
      SUBROUTINE TRANS2B(UG,VG,TG,TRAG,PLG)                                TRANS2B.12    
      IMPLICIT NONE                                                        TRANS2B.13    
*CALL PARAM1                                                               TRANS2B.14    
*CALL PARAM2                                                               TRANS2B.15    
*CALL PARAM3                                                               TRANS2B.16    
*CALL GRIDPA2                                                              TRANS2B.17    
*CALL MPIDECK                                                              TRANS2B.18    
!-----------------------------------------------------                     TRANS2B.19    
! Passed variables - these are the variables in common block               TRANS2B.20    
! GRIDP but defined as REALs, instead of COMPLEXs.                         TRANS2B.21    
!-----------------------------------------------------                     TRANS2B.22    
      REAL :: UG(4*MMTy,NHEM,JG,NLx)                                       TRANS2B.23    
      REAL :: VG(4*MMTy,NHEM,JG,NLx)                                       TRANS2B.24    
      REAL :: TG(4*MMTy,NHEM,JG,NLx)                                       TRANS2B.25    
      REAL :: TRAG(4*MMTy,NHEM,JG,NLx,NTRAC)                               TRANS2B.26    
      REAL :: PLG(4*MMTy,NHEM,JG)                                          TRANS2B.27    
!-----------------------------------------------------                     TRANS2B.28    
! Local variables                                                          TRANS2B.29    
!-----------------------------------------------------                     TRANS2B.30    
      INTEGER, PARAMETER :: TagRef=7000                                    TRANS2B.31    
      REAL :: HoldVar1(4*MMTy,NHEM,JGy,NLx,3+NTRAC)                        TRANS2B.32    
      REAL :: HoldVar2(4*MMTy,NHEM,JGy)                                    TRANS2B.33    
      INTEGER :: iPe                                                       TRANS2B.34    
      INTEGER :: iRow2                                                     TRANS2B.35    
      INTEGER :: IMMAX, JMAX, LMAX                                         TRANS2B.36    
      INTEGER :: IM1, IM2, IM3, IM4                                        TRANS2B.37    
      INTEGER :: J1, J2                                                    TRANS2B.38    
! Loop variables                                                           TRANS2B.39    
      INTEGER :: I, IHEM, IM, ITRAC, J, L                                  TRANS2B.40    
!-----------------------------------------------------                     TRANS2B.41    
! Transpose                                                                TRANS2B.42    
!-----------------------------------------------------                     TRANS2B.43    
      IF (NPE.GT.1) THEN                                                   TRANS2B.44    
         !-----------------------------------------------------            TRANS2B.45    
         ! Zero arrays, before writing to them                             TRANS2B.46    
         !-----------------------------------------------------            TRANS2B.47    
         UG2(:,:,:,:)=0.0                                                  TRANS2B.48    
         VG2(:,:,:,:)=0.0                                                  TRANS2B.49    
         TG2(:,:,:,:)=0.0                                                  TRANS2B.50    
         TRAG2(:,:,:,:,:)=0.0                                              TRANS2B.51    
         PLG2(:,:,:)=0.0                                                   TRANS2B.52    
         !-----------------------------------------------------            TRANS2B.53    
         ! Loop over PEs on the same column to send them data              TRANS2B.54    
         !-----------------------------------------------------            TRANS2B.55    
         DO iRow2=1,Py                                                     TRANS2B.56    
            iPe=PeGrid(iCol,iRow2)                                         TRANS2B.57    
            IF (iPe.NE.MyPe) THEN                                          TRANS2B.58    
               !-----------------------------------------------------      TRANS2B.59    
               ! Store multi-layer variables in HoldVar1                   TRANS2B.60    
               !-----------------------------------------------------      TRANS2B.61    
               IMMAX=4*MMTyy(iRow)                                         TRANS2B.62    
               JMAX=JGyy(iRow2)                                            TRANS2B.63    
               LMAX=NLxx(iCol)                                             TRANS2B.64    
               J1=JJ1(iRow2)+1                                             TRANS2B.65    
               J2=JJ1(iRow2)+JGyy(iRow2)                                   TRANS2B.66    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,1)=                        TRANS2B.67    
     &              UG(1:IMMAX,:,J1:J2,1:LMAX)                             TRANS2B.68    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,2)=                        TRANS2B.69    
     &              VG(1:IMMAX,:,J1:J2,1:LMAX)                             TRANS2B.70    
               HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,3)=                        TRANS2B.71    
     &              TG(1:IMMAX,:,J1:J2,1:LMAX)                             TRANS2B.72    
*IF DEF,ABOVE_V1                                                           TRANS2B.73    
               DO ITRAC=1,NTRAC                                            TRANS2B.74    
                  HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,3+ITRAC)=               TRANS2B.75    
     &                 TRAG(1:IMMAX,:,J1:J2,1:LMAX,ITRAC)                  TRANS2B.76    
               ENDDO                                                       TRANS2B.77    
*ENDIF                                                                     TRANS2B.78    
               !-----------------------------------------------------      TRANS2B.79    
               ! Send message                                              TRANS2B.80    
               !-----------------------------------------------------      TRANS2B.81    
               iRecv=iPe                                                   TRANS2B.82    
               nBuffSize=(3+NTRAC)*4*MMTy*NHEM*JGy*NLx                     TRANS2B.83    
               iTag=TagRef+100*iRow+10*iRow2+iCol                          TRANS2B.84    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS2B.85    
     &              MPI_COMM_WORLD,ierr)                                   TRANS2B.86    
            ENDIF                                                          TRANS2B.87    
         ENDDO                                                             TRANS2B.88    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS2B.89    
         !-----------------------------------------------------            TRANS2B.90    
         ! Loop over PEs on the same row to receive data                   TRANS2B.91    
         !-----------------------------------------------------            TRANS2B.92    
         DO iRow2=1,Py                                                     TRANS2B.93    
            iPe=PeGrid(iCol,iRow2)                                         TRANS2B.94    
            IF (iPe.NE.MyPe) THEN                                          TRANS2B.95    
               !-----------------------------------------------------      TRANS2B.96    
               ! Receive message                                           TRANS2B.97    
               !-----------------------------------------------------      TRANS2B.98    
               iSend=iPe                                                   TRANS2B.99    
               nBuffSize=(3+NTRAC)*4*MMTy*NHEM*JGy*NLx                     TRANS2B.100   
               iTag=TagRef+100*iRow2+10*iRow+iCol                          TRANS2B.101   
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS2B.102   
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS2B.103   
               !-----------------------------------------------------      TRANS2B.104   
               ! Write to UG2 etc                                          TRANS2B.105   
               !-----------------------------------------------------      TRANS2B.106   
               IMMAX=2*MMTyy(iRow2)                                        TRANS2B.107   
               IM1=2*MMT1(iRow2)                                           TRANS2B.108   
               IM3=4*MMT-2*(MMT1(iRow2)+MMTyy(iRow2))                      TRANS2B.109   
               DO L=1,NLxx(iCol)                                           TRANS2B.110   
                  DO J=1,JGyy(iRow)                                        TRANS2B.111   
                     DO IHEM=1,NHEM                                        TRANS2B.112   
                        DO I=1,IMMAX                                       TRANS2B.113   
                           UG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,1)      TRANS2B.114   
                        ENDDO                                              TRANS2B.115   
                        DO I=1,IMMAX                                       TRANS2B.116   
                           UG2(IM3+I,IHEM,J,L)=                            TRANS2B.117   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,1)               TRANS2B.118   
                        ENDDO                                              TRANS2B.119   
                     ENDDO                                                 TRANS2B.120   
                  ENDDO                                                    TRANS2B.121   
               ENDDO                                                       TRANS2B.122   
               DO L=1,NLxx(iCol)                                           TRANS2B.123   
                  DO J=1,JGyy(iRow)                                        TRANS2B.124   
                     DO IHEM=1,NHEM                                        TRANS2B.125   
                        DO I=1,IMMAX                                       TRANS2B.126   
                           VG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,2)      TRANS2B.127   
                        ENDDO                                              TRANS2B.128   
                        DO I=1,IMMAX                                       TRANS2B.129   
                           VG2(IM3+I,IHEM,J,L)=                            TRANS2B.130   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,2)               TRANS2B.131   
                        ENDDO                                              TRANS2B.132   
                     ENDDO                                                 TRANS2B.133   
                  ENDDO                                                    TRANS2B.134   
               ENDDO                                                       TRANS2B.135   
               DO L=1,NLxx(iCol)                                           TRANS2B.136   
                  DO J=1,JGyy(iRow)                                        TRANS2B.137   
                     DO IHEM=1,NHEM                                        TRANS2B.138   
                        DO I=1,IMMAX                                       TRANS2B.139   
                           TG2(IM1+I,IHEM,J,L)=HoldVar1(I,IHEM,J,L,3)      TRANS2B.140   
                        ENDDO                                              TRANS2B.141   
                        DO I=1,IMMAX                                       TRANS2B.142   
                           TG2(IM3+I,IHEM,J,L)=                            TRANS2B.143   
     &                          HoldVar1(IMMAX+I,IHEM,J,L,3)               TRANS2B.144   
                        ENDDO                                              TRANS2B.145   
                     ENDDO                                                 TRANS2B.146   
                  ENDDO                                                    TRANS2B.147   
               ENDDO                                                       TRANS2B.148   
*IF DEF,ABOVE_V1                                                           TRANS2B.149   
               DO ITRAC=1,NTRAC                                            TRANS2B.150   
                  DO L=1,NLxx(iCol)                                        TRANS2B.151   
                     DO J=1,JGyy(iRow)                                     TRANS2B.152   
                        DO IHEM=1,NHEM                                     TRANS2B.153   
                           DO I=1,IMMAX                                    TRANS2B.154   
                              TRAG2(IM1+I,IHEM,J,L,ITRAC)=                 TRANS2B.155   
     &                             HoldVar1(I,IHEM,J,L,3+ITRAC)            TRANS2B.156   
                           ENDDO                                           TRANS2B.157   
                           DO I=1,IMMAX                                    TRANS2B.158   
                              TRAG2(IM3+I,IHEM,J,L,ITRAC)=                 TRANS2B.159   
     &                             HoldVar1(IMMAX+I,IHEM,J,L,3+ITRAC)      TRANS2B.160   
                           ENDDO                                           TRANS2B.161   
                        ENDDO                                              TRANS2B.162   
                     ENDDO                                                 TRANS2B.163   
                  ENDDO                                                    TRANS2B.164   
               ENDDO                                                       TRANS2B.165   
*ENDIF                                                                     TRANS2B.166   
            ENDIF                                                          TRANS2B.167   
         ENDDO                                                             TRANS2B.168   
         !-----------------------------------------------------            TRANS2B.169   
         ! Data is already contained on this PE                            TRANS2B.170   
         !-----------------------------------------------------            TRANS2B.171   
         IMMAX=2*MMTyy(iRow)                                               TRANS2B.172   
         IM1=2*MMT1(iRow)                                                  TRANS2B.173   
         IM3=4*MMT-2*(MMT1(iRow)+MMTyy(iRow))                              TRANS2B.174   
         J1=JJ1(iRow)                                                      TRANS2B.175   
         DO L=1,NLxx(iCol)                                                 TRANS2B.176   
            DO J=1,JGyy(iRow)                                              TRANS2B.177   
               DO IHEM=1,NHEM                                              TRANS2B.178   
                  DO I=1,IMMAX                                             TRANS2B.179   
                     UG2(IM1+I,IHEM,J,L)=UG(I,IHEM,J1+J,L)                 TRANS2B.180   
                  ENDDO                                                    TRANS2B.181   
                  DO I=1,IMMAX                                             TRANS2B.182   
                     UG2(IM3+I,IHEM,J,L)=UG(IMMAX+I,IHEM,J1+J,L)           TRANS2B.183   
                  ENDDO                                                    TRANS2B.184   
               ENDDO                                                       TRANS2B.185   
            ENDDO                                                          TRANS2B.186   
         ENDDO                                                             TRANS2B.187   
         DO L=1,NLxx(iCol)                                                 TRANS2B.188   
            DO J=1,JGyy(iRow)                                              TRANS2B.189   
               DO IHEM=1,NHEM                                              TRANS2B.190   
                  DO I=1,IMMAX                                             TRANS2B.191   
                     VG2(IM1+I,IHEM,J,L)=VG(I,IHEM,J1+J,L)                 TRANS2B.192   
                  ENDDO                                                    TRANS2B.193   
                  DO I=1,IMMAX                                             TRANS2B.194   
                     VG2(IM3+I,IHEM,J,L)=VG(IMMAX+I,IHEM,J1+J,L)           TRANS2B.195   
                  ENDDO                                                    TRANS2B.196   
               ENDDO                                                       TRANS2B.197   
            ENDDO                                                          TRANS2B.198   
         ENDDO                                                             TRANS2B.199   
         DO L=1,NLxx(iCol)                                                 TRANS2B.200   
            DO J=1,JGyy(iRow)                                              TRANS2B.201   
               DO IHEM=1,NHEM                                              TRANS2B.202   
                  DO I=1,IMMAX                                             TRANS2B.203   
                     TG2(IM1+I,IHEM,J,L)=TG(I,IHEM,J1+J,L)                 TRANS2B.204   
                  ENDDO                                                    TRANS2B.205   
                  DO I=1,IMMAX                                             TRANS2B.206   
                     TG2(IM3+I,IHEM,J,L)=TG(IMMAX+I,IHEM,J1+J,L)           TRANS2B.207   
                  ENDDO                                                    TRANS2B.208   
               ENDDO                                                       TRANS2B.209   
            ENDDO                                                          TRANS2B.210   
         ENDDO                                                             TRANS2B.211   
         DO ITRAC=1,NTRAC                                                  TRANS2B.212   
            DO L=1,NLxx(iCol)                                              TRANS2B.213   
               DO J=1,JGyy(iRow)                                           TRANS2B.214   
                  DO IHEM=1,NHEM                                           TRANS2B.215   
                     DO I=1,IMMAX                                          TRANS2B.216   
                        TRAG2(IM1+I,IHEM,J,L,ITRAC)=                       TRANS2B.217   
     &                       TRAG(I,IHEM,J1+J,L,ITRAC)                     TRANS2B.218   
                     ENDDO                                                 TRANS2B.219   
                     DO I=1,IMMAX                                          TRANS2B.220   
                        TRAG2(IM3+I,IHEM,J,L,ITRAC)=                       TRANS2B.221   
     &                       TRAG(IMMAX+I,IHEM,J1+J,L,ITRAC)               TRANS2B.222   
                     ENDDO                                                 TRANS2B.223   
                  ENDDO                                                    TRANS2B.224   
               ENDDO                                                       TRANS2B.225   
            ENDDO                                                          TRANS2B.226   
         ENDDO                                                             TRANS2B.227   
         !-----------------------------------------------------            TRANS2B.228   
         ! Single layer variables are only stored when iCol=1              TRANS2B.229   
         !-----------------------------------------------------            TRANS2B.230   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS2B.231   
         IF (iCol.EQ.1) THEN                                               TRANS2B.232   
            !-----------------------------------------------------         TRANS2B.233   
            ! Loop over PEs on the same row to send data                   TRANS2B.234   
            !-----------------------------------------------------         TRANS2B.235   
            DO iRow2=1,Py                                                  TRANS2B.236   
               iPe=PeGrid(iCol,iRow2)                                      TRANS2B.237   
               IF (iPe.NE.MyPe) THEN                                       TRANS2B.238   
                  !-----------------------------------------------------   TRANS2B.239   
                  ! Single layer variables are only stored on first        TRANS2B.240   
                  ! column.                                                TRANS2B.241   
                  !-----------------------------------------------------   TRANS2B.242   
                  IMMAX=4*MMTyy(iRow)                                      TRANS2B.243   
                  JMAX=JGyy(iRow2)                                         TRANS2B.244   
                  J1=JJ1(iRow2)+1                                          TRANS2B.245   
                  J2=JJ1(iRow2)+JGyy(iRow2)                                TRANS2B.246   
                  HoldVar2(1:IMMAX,:,1:JMAX)=PLG(1:IMMAX,:,J1:J2)          TRANS2B.247   
                  !----------------------------------------------------    TRANS2B.248   
                  ! Send message                                           TRANS2B.249   
                  !----------------------------------------------------    TRANS2B.250   
                  iRecv=iPe                                                TRANS2B.251   
                  nBuffSize=4*MMTy*NHEM*JGy                                TRANS2B.252   
                  iTag=TagRef+1001+100*iRow+10*iRow2                       TRANS2B.253   
                  CALL MPI_BSEND(HoldVar2,nBuffSize,ParaReal,iRecv,iTag,   TRANS2B.254   
     &                 MPI_COMM_WORLD,ierr)                                TRANS2B.255   
               ENDIF                                                       TRANS2B.256   
            ENDDO                                                          TRANS2B.257   
            !-----------------------------------------------------         TRANS2B.258   
            ! Loop over PEs on the same row to receive data                TRANS2B.259   
            !-----------------------------------------------------         TRANS2B.260   
            DO iRow2=1,Py                                                  TRANS2B.261   
               iPe=PeGrid(iCol,iRow2)                                      TRANS2B.262   
               IF (iPe.NE.MyPe) THEN                                       TRANS2B.263   
                  !----------------------------------------------------    TRANS2B.264   
                  ! Receive message                                        TRANS2B.265   
                  !----------------------------------------------------    TRANS2B.266   
                  iSend=iPe                                                TRANS2B.267   
                  nBuffSize=4*MMTy*NHEM*JGy                                TRANS2B.268   
                  iTag=TagRef+1001+100*iRow2+10*iRow                       TRANS2B.269   
                  CALL MPI_RECV(HoldVar2,nBuffSize,ParaReal,iSend,iTag,    TRANS2B.270   
     &                 MPI_COMM_WORLD,istat,ierr)                          TRANS2B.271   
                  !----------------------------------------------------    TRANS2B.272   
                  ! Write into array                                       TRANS2B.273   
                  !----------------------------------------------------    TRANS2B.274   
                  IMMAX=2*MMTyy(iRow2)                                     TRANS2B.275   
                  IM1=2*MMT1(iRow2)                                        TRANS2B.276   
                  IM3=4*MMT-2*(MMT1(iRow2)+MMTyy(iRow2))                   TRANS2B.277   
                  DO J=1,JGyy(iRow)                                        TRANS2B.278   
                     DO IHEM=1,NHEM                                        TRANS2B.279   
                        DO I=1,IMMAX                                       TRANS2B.280   
                           PLG2(IM1+I,IHEM,J)=HoldVar2(I,IHEM,J)           TRANS2B.281   
                        ENDDO                                              TRANS2B.282   
                        DO I=1,IMMAX                                       TRANS2B.283   
                           PLG2(IM3+I,IHEM,J)=HoldVar2(IMMAX+I,IHEM,J)     TRANS2B.284   
                        ENDDO                                              TRANS2B.285   
                     ENDDO                                                 TRANS2B.286   
                  ENDDO                                                    TRANS2B.287   
               ENDIF                                                       TRANS2B.288   
            ENDDO                                                          TRANS2B.289   
            !-----------------------------------------------------         TRANS2B.290   
            ! Data is already stored on this PE                            TRANS2B.291   
            !-----------------------------------------------------         TRANS2B.292   
            IMMAX=2*MMTyy(iRow)                                            TRANS2B.293   
            IM1=2*MMT1(iRow)                                               TRANS2B.294   
            IM3=4*MMT-2*(MMT1(iRow)+MMTyy(iRow))                           TRANS2B.295   
            J1=JJ1(iRow)                                                   TRANS2B.296   
            DO J=1,JGyy(iRow)                                              TRANS2B.297   
               DO IHEM=1,NHEM                                              TRANS2B.298   
                  DO I=1,IMMAX                                             TRANS2B.299   
                     PLG2(IM1+I,IHEM,J)=PLG(I,IHEM,J1+J)                   TRANS2B.300   
                  ENDDO                                                    TRANS2B.301   
                  DO I=1,IMMAX                                             TRANS2B.302   
                     PLG2(IM3+I,IHEM,J)=PLG(IMMAX+I,IHEM,J1+J)             TRANS2B.303   
                  ENDDO                                                    TRANS2B.304   
               ENDDO                                                       TRANS2B.305   
            ENDDO                                                          TRANS2B.306   
         ENDIF                                                             TRANS2B.307   
      ELSE                                                                 TRANS2B.308   
         !-----------------------------------------------------            TRANS2B.309   
         ! One processor option, just copy one array into another          TRANS2B.310   
         !-----------------------------------------------------            TRANS2B.311   
         UG2(:,:,:,:)=0.0                                                  TRANS2B.312   
         VG2(:,:,:,:)=0.0                                                  TRANS2B.313   
         TG2(:,:,:,:)=0.0                                                  TRANS2B.314   
         TRAG2(:,:,:,:,:)=0.0                                              TRANS2B.315   
         DO L=1,NL                                                         TRANS2B.316   
            DO J=1,JG                                                      TRANS2B.317   
               DO IHEM=1,NHEM                                              TRANS2B.318   
                  DO I=1,4*MMT                                             TRANS2B.319   
                     UG2(I,IHEM,J,L)=UG(I,IHEM,J,L)                        TRANS2B.320   
                     VG2(I,IHEM,J,L)=VG(I,IHEM,J,L)                        TRANS2B.321   
                     TG2(I,IHEM,J,L)=TG(I,IHEM,J,L)                        TRANS2B.322   
                     DO ITRAC=1,NTRAC                                      TRANS2B.323   
                        TRAG2(I,IHEM,J,L,ITRAC)=TRAG(I,IHEM,J,L,ITRAC)     TRANS2B.324   
                     ENDDO                                                 TRANS2B.325   
                  ENDDO                                                    TRANS2B.326   
               ENDDO                                                       TRANS2B.327   
            ENDDO                                                          TRANS2B.328   
         ENDDO                                                             TRANS2B.329   
         PLG2(:,:,:)=0.0                                                   TRANS2B.330   
         DO J=1,JG                                                         TRANS2B.331   
            DO IHEM=1,NHEM                                                 TRANS2B.332   
               DO I=1,4*MMT                                                TRANS2B.333   
                  PLG2(I,IHEM,J) =PLG(I,IHEM,J)                            TRANS2B.334   
               ENDDO                                                       TRANS2B.335   
            ENDDO                                                          TRANS2B.336   
         ENDDO                                                             TRANS2B.337   
      ENDIF                                                                TRANS2B.338   
      END                                                                  TRANS2B.339   
*ENDIF                                                                     TRANS2B.340   
*ENDIF                                                                     TRANS2B.341   
*DECK TRANS3                                                               TRANS3.1     
*IF DEF,NOMPI                                                              TRANS3.2     
*ELSE                                                                      TRANS3.3     
!=====================================================                     TRANS3.4     
! Transposing the grid space variables so that the levels                  TRANS3.5     
! are complete instead of the longitudes, because complete                 TRANS3.6     
! levels are needed in MGRMLT. Instead the longitude are                   TRANS3.7     
! split across the columns of PEs.                                         TRANS3.8     
!=====================================================                     TRANS3.9     
      SUBROUTINE TRANS3                                                    TRANS3.10    
      IMPLICIT NONE                                                        TRANS3.11    
*CALL PARAM1                                                               TRANS3.12    
*CALL PARAM2                                                               TRANS3.13    
*CALL PARAM3                                                               TRANS3.14    
*CALL GRIDPA2                                                              TRANS3.15    
*CALL GRIDPB2                                                              TRANS3.16    
*CALL GRIDPA3                                                              TRANS3.17    
*CALL GRIDPB3                                                              TRANS3.18    
*CALL MPIDECK                                                              TRANS3.19    
!-----------------------------------------------------                     TRANS3.20    
! Local variables                                                          TRANS3.21    
!-----------------------------------------------------                     TRANS3.22    
      INTEGER, PARAMETER :: TagRef=9000                                    TRANS3.23    
      REAL :: HoldVar1(MGx,NHEM,JGy,NLx,5+NTRAC)                           TRANS3.24    
      REAL :: HoldVar2(MGx,NHEM,JGy,3)                                     TRANS3.25    
      INTEGER :: iPe                                                       TRANS3.26    
      INTEGER :: iCol2                                                     TRANS3.27    
      INTEGER :: IMAX, JMAX, LMAX                                          TRANS3.28    
      INTEGER :: I1, I2                                                    TRANS3.29    
      INTEGER :: L1, L2                                                    TRANS3.30    
! Loop variables                                                           TRANS3.31    
      INTEGER :: I, IHEM, ITRAC, J, L                                      TRANS3.32    
!-----------------------------------------------------                     TRANS3.33    
! Transpose                                                                TRANS3.34    
!-----------------------------------------------------                     TRANS3.35    
      IF (NPE.GT.1) THEN                                                   TRANS3.36    
         !-----------------------------------------------------            TRANS3.37    
         ! Loop over PEs on the same row to send them data                 TRANS3.38    
         !-----------------------------------------------------            TRANS3.39    
         DO iCol2=1,Px                                                     TRANS3.40    
            iPe=PeGrid(iCol2,iRow)                                         TRANS3.41    
            IF (iPe.NE.MyPe) THEN                                          TRANS3.42    
               !-----------------------------------------------------      TRANS3.43    
               ! Store multi-layer data in HoldVar1                        TRANS3.44    
               !-----------------------------------------------------      TRANS3.45    
               IMAX=MGxx(iCol2)                                            TRANS3.46    
               JMAX=JGyy(iRow)                                             TRANS3.47    
               LMAX=NLxx(iCol)                                             TRANS3.48    
               I1=II1(iCol2)+1                                             TRANS3.49    
               I2=II1(iCol2)+IMAX                                          TRANS3.50    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)=                         TRANS3.51    
     &              UG2(I1:I2,:,1:JMAX,1:LMAX)                             TRANS3.52    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)=                         TRANS3.53    
     &              VG2(I1:I2,:,1:JMAX,1:LMAX)                             TRANS3.54    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3)=                         TRANS3.55    
     &              ZG2(I1:I2,:,1:JMAX,1:LMAX)                             TRANS3.56    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,4)=                         TRANS3.57    
     &              DG2(I1:I2,:,1:JMAX,1:LMAX)                             TRANS3.58    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,5)=                         TRANS3.59    
     &              TG2(I1:I2,:,1:JMAX,1:LMAX)                             TRANS3.60    
*IF DEF,ABOVE_V1                                                           TRANS3.61    
               DO ITRAC=1,NTRAC                                            TRANS3.62    
                  HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,5+ITRAC)=                TRANS3.63    
     &                 TRAG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)                  TRANS3.64    
               ENDDO                                                       TRANS3.65    
*ENDIF                                                                     TRANS3.66    
               !-----------------------------------------------------      TRANS3.67    
               ! Send message                                              TRANS3.68    
               !-----------------------------------------------------      TRANS3.69    
               iRecv=iPe                                                   TRANS3.70    
               nBuffSize=(5+NTRAC)*MGx*NHEM*JGy*NLx                        TRANS3.71    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS3.72    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS3.73    
     &              MPI_COMM_WORLD,ierr)                                   TRANS3.74    
            ENDIF                                                          TRANS3.75    
         ENDDO                                                             TRANS3.76    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS3.77    
         !-----------------------------------------------------            TRANS3.78    
         ! Loop over PEs on the same row to receive data                   TRANS3.79    
         !-----------------------------------------------------            TRANS3.80    
         DO iCol2=1,Px                                                     TRANS3.81    
            iPe=PeGrid(iCol2,iRow)                                         TRANS3.82    
            IF (iPe.NE.MyPe) THEN                                          TRANS3.83    
               !-----------------------------------------------------      TRANS3.84    
               ! Receive message                                           TRANS3.85    
               !-----------------------------------------------------      TRANS3.86    
               iSend=iPe                                                   TRANS3.87    
               nBuffSize=(5+NTRAC)*MGx*NHEM*JGy*NLx                        TRANS3.88    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS3.89    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS3.90    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS3.91    
               !-----------------------------------------------------      TRANS3.92    
               ! Write to UG3 etc                                          TRANS3.93    
               !-----------------------------------------------------      TRANS3.94    
               IMAX=MGxx(iCol)                                             TRANS3.95    
               JMAX=JGyy(iRow)                                             TRANS3.96    
               LMAX=NLxx(iCol2)                                            TRANS3.97    
               L1=KK1(iCol2)+1                                             TRANS3.98    
               L2=KK1(iCol2)+LMAX                                          TRANS3.99    
               UG3(1:IMAX,:,1:JMAX,L1:L2)=                                 TRANS3.100   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)                     TRANS3.101   
               VG3(1:IMAX,:,1:JMAX,L1:L2)=                                 TRANS3.102   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)                     TRANS3.103   
               ZG3(1:IMAX,:,1:JMAX,L1:L2)=                                 TRANS3.104   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3)                     TRANS3.105   
               DG3(1:IMAX,:,1:JMAX,L1:L2)=                                 TRANS3.106   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,4)                     TRANS3.107   
               TG3(1:IMAX,:,1:JMAX,L1:L2)=                                 TRANS3.108   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,5)                     TRANS3.109   
*IF DEF,ABOVE_V1                                                           TRANS3.110   
               DO ITRAC=1,NTRAC                                            TRANS3.111   
                  TRAG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)=                      TRANS3.112   
     &                 HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,5+ITRAC)            TRANS3.113   
               ENDDO                                                       TRANS3.114   
*ENDIF                                                                     TRANS3.115   
            ENDIF                                                          TRANS3.116   
         ENDDO                                                             TRANS3.117   
         !-----------------------------------------------------            TRANS3.118   
         ! Data is already contained on this PE                            TRANS3.119   
         !-----------------------------------------------------            TRANS3.120   
         IMAX=MGxx(iCol)                                                   TRANS3.121   
         JMAX=JGyy(iRow)                                                   TRANS3.122   
         LMAX=NLxx(iCol)                                                   TRANS3.123   
         I1=II1(iCol)+1                                                    TRANS3.124   
         I2=II1(iCol)+IMAX                                                 TRANS3.125   
         L1=KK1(iCol)+1                                                    TRANS3.126   
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS3.127   
         UG3(1:IMAX,:,1:JMAX,L1:L2)=UG2(I1:I2,:,1:JMAX,1:LMAX)             TRANS3.128   
         VG3(1:IMAX,:,1:JMAX,L1:L2)=VG2(I1:I2,:,1:JMAX,1:LMAX)             TRANS3.129   
         DG3(1:IMAX,:,1:JMAX,L1:L2)=DG2(I1:I2,:,1:JMAX,1:LMAX)             TRANS3.130   
         ZG3(1:IMAX,:,1:JMAX,L1:L2)=ZG2(I1:I2,:,1:JMAX,1:LMAX)             TRANS3.131   
         TG3(1:IMAX,:,1:JMAX,L1:L2)=TG2(I1:I2,:,1:JMAX,1:LMAX)             TRANS3.132   
*IF DEF,ABOVE_V1                                                           TRANS3.133   
         DO ITRAC=1,NTRAC                                                  TRANS3.134   
            TRAG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)=                            TRANS3.135   
     &           TRAG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)                        TRANS3.136   
         ENDDO                                                             TRANS3.137   
*ENDIF                                                                     TRANS3.138   
         !-----------------------------------------------------            TRANS3.139   
         ! Single layer variables are only stored on first                 TRANS3.140   
         ! column.                                                         TRANS3.141   
         !-----------------------------------------------------            TRANS3.142   
         IF (iCol.EQ.1) THEN                                               TRANS3.143   
            DO iCol2=2,Px                                                  TRANS3.144   
               iPe=PeGrid(iCol2,iRow)                                      TRANS3.145   
               !-----------------------------------------------------      TRANS3.146   
               ! Store single layer data in HoldVar2                       TRANS3.147   
               !-----------------------------------------------------      TRANS3.148   
               IMAX=MGxx(iCol2)                                            TRANS3.149   
               JMAX=JGyy(iRow)                                             TRANS3.150   
               I1=II1(iCol2)+1                                             TRANS3.151   
               I2=II1(iCol2)+IMAX                                          TRANS3.152   
               HoldVar2(1:IMAX,:,1:JMAX,1)=PLG2(I1:I2,:,1:JMAX)            TRANS3.153   
               HoldVar2(1:IMAX,:,1:JMAX,2)=PJG2(I1:I2,:,1:JMAX)            TRANS3.154   
               HoldVar2(1:IMAX,:,1:JMAX,3)=PMG2(I1:I2,:,1:JMAX)            TRANS3.155   
               !-----------------------------------------------------      TRANS3.156   
               ! Send message                                              TRANS3.157   
               !-----------------------------------------------------      TRANS3.158   
               iRecv=iPe                                                   TRANS3.159   
               nBuffSize=3*MGx*NHEM*JGy                                    TRANS3.160   
               iTag=TagRef+1100+10*iCol2+iRow                              TRANS3.161   
               CALL MPI_BSEND(HoldVar2,nBuffSize,ParaReal,iRecv,iTag,      TRANS3.162   
     &              MPI_COMM_WORLD,ierr)                                   TRANS3.163   
            ENDDO                                                          TRANS3.164   
         ENDIF                                                             TRANS3.165   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS3.166   
         IF (iCol.GT.1) THEN                                               TRANS3.167   
            !---------------------------------------------------           TRANS3.168   
            ! Receive message                                              TRANS3.169   
            !---------------------------------------------------           TRANS3.170   
            iSend=PeGrid(1,iRow)                                           TRANS3.171   
            nBuffSize=3*MGx*NHEM*JGy                                       TRANS3.172   
            iTag=TagRef+1100+10*iCol+iRow                                  TRANS3.173   
            CALL MPI_RECV(HoldVar2,nBuffSize,ParaReal,iSend,iTag,          TRANS3.174   
     &           MPI_COMM_WORLD,istat,ierr)                                TRANS3.175   
            !---------------------------------------------------           TRANS3.176   
            ! Write to PLG3 etc                                            TRANS3.177   
            !---------------------------------------------------           TRANS3.178   
            IMAX=MGxx(iCol)                                                TRANS3.179   
            JMAX=JGyy(iRow)                                                TRANS3.180   
            PLG3(1:IMAX,:,1:JMAX)=HoldVar2(1:IMAX,:,1:JMAX,1)              TRANS3.181   
            PJG3(1:IMAX,:,1:JMAX)=HoldVar2(1:IMAX,:,1:JMAX,2)              TRANS3.182   
            PMG3(1:IMAX,:,1:JMAX)=HoldVar2(1:IMAX,:,1:JMAX,3)              TRANS3.183   
         ELSE                                                              TRANS3.184   
            !-----------------------------------------------------         TRANS3.185   
            ! Data for PE on column 1 is already contained on this PE      TRANS3.186   
            !-----------------------------------------------------         TRANS3.187   
            IMAX=MGxx(iCol)                                                TRANS3.188   
            JMAX=JGyy(iRow)                                                TRANS3.189   
            I1=II1(iCol)+1                                                 TRANS3.190   
            I2=II1(iCol)+MGxx(iCol)                                        TRANS3.191   
            PLG3(1:IMAX,:,1:JMAX)=PLG2(I1:I2,:,1:JMAX)                     TRANS3.192   
            PJG3(1:IMAX,:,1:JMAX)=PJG2(I1:I2,:,1:JMAX)                     TRANS3.193   
            PMG3(1:IMAX,:,1:JMAX)=PMG2(I1:I2,:,1:JMAX)                     TRANS3.194   
         ENDIF                                                             TRANS3.195   
      ELSE                                                                 TRANS3.196   
         !-----------------------------------------------------            TRANS3.197   
         ! One processor option, just copy one array into another          TRANS3.198   
         !-----------------------------------------------------            TRANS3.199   
         DO L=1,NL                                                         TRANS3.200   
            DO J=1,JGy                                                     TRANS3.201   
               DO IHEM=1,NHEM                                              TRANS3.202   
                  DO I=1,MG                                                TRANS3.203   
                     UG3(I,IHEM,J,L)=UG2(I,IHEM,J,L)                       TRANS3.204   
                     VG3(I,IHEM,J,L)=VG2(I,IHEM,J,L)                       TRANS3.205   
                     ZG3(I,IHEM,J,L)=ZG2(I,IHEM,J,L)                       TRANS3.206   
                     DG3(I,IHEM,J,L)=DG2(I,IHEM,J,L)                       TRANS3.207   
                     TG3(I,IHEM,J,L)=TG2(I,IHEM,J,L)                       TRANS3.208   
*IF DEF,ABOVE_V1                                                           TRANS3.209   
                     DO ITRAC=1,NTRAC                                      TRANS3.210   
                        TRAG3(I,IHEM,J,L,ITRAC)=TRAG2(I,IHEM,J,L,ITRAC)    TRANS3.211   
                     ENDDO                                                 TRANS3.212   
*ENDIF                                                                     TRANS3.213   
                  ENDDO                                                    TRANS3.214   
               ENDDO                                                       TRANS3.215   
            ENDDO                                                          TRANS3.216   
         ENDDO                                                             TRANS3.217   
         DO J=1,JGy                                                        TRANS3.218   
            DO IHEM=1,NHEM                                                 TRANS3.219   
               DO I=1,MG                                                   TRANS3.220   
                  PLG3(I,IHEM,J) =PLG2(I,IHEM,J)                           TRANS3.221   
                  PJG3(I,IHEM,J) =PJG2(I,IHEM,J)                           TRANS3.222   
                  PMG3(I,IHEM,J) =PMG2(I,IHEM,J)                           TRANS3.223   
               ENDDO                                                       TRANS3.224   
            ENDDO                                                          TRANS3.225   
         ENDDO                                                             TRANS3.226   
      ENDIF                                                                TRANS3.227   
      END                                                                  TRANS3.228   
*ENDIF                                                                     TRANS3.229   
*DECK TRANS3A                                                              TRANS3A.1     
*IF DEF,ABOVE_V1                                                           TRANS3A.2     
*IF DEF,NOMPI                                                              TRANS3A.3     
*ELSE                                                                      TRANS3A.4     
!=====================================================                     TRANS3A.5     
! Transposing the grid space variables so that the levels                  TRANS3A.6     
! are complete instead of the longitudes, because complete                 TRANS3A.7     
! levels are needed in MGRMLT. Instead the longitude are                   TRANS3A.8     
! split across the columns of PEs.                                         TRANS3A.9     
!=====================================================                     TRANS3A.10    
      SUBROUTINE TRANS3A                                                   TRANS3A.11    
      IMPLICIT NONE                                                        TRANS3A.12    
*CALL PARAM1                                                               TRANS3A.13    
*CALL PARAM2                                                               TRANS3A.14    
*CALL PARAM3                                                               TRANS3A.15    
*CALL GRIDPB2                                                              TRANS3A.16    
*CALL GRIDPB3                                                              TRANS3A.17    
*CALL MPIDECK                                                              TRANS3A.18    
!-----------------------------------------------------                     TRANS3A.19    
! Local variables                                                          TRANS3A.20    
!-----------------------------------------------------                     TRANS3A.21    
      INTEGER, PARAMETER :: TagRef=11000                                   TRANS3A.22    
      REAL :: HoldVar1(MGx,NHEM,JGy,NLx,2)                                 TRANS3A.23    
      INTEGER :: iPe                                                       TRANS3A.24    
      INTEGER :: iCol2                                                     TRANS3A.25    
      INTEGER :: IMAX, JMAX, LMAX                                          TRANS3A.26    
      INTEGER :: I1, I2                                                    TRANS3A.27    
      INTEGER :: L1, L2                                                    TRANS3A.28    
! Loop variables                                                           TRANS3A.29    
      INTEGER :: I, IHEM, ITRAC, J, L                                      TRANS3A.30    
!-----------------------------------------------------                     TRANS3A.31    
! Transpose                                                                TRANS3A.32    
!-----------------------------------------------------                     TRANS3A.33    
      IF (NPE.GT.1) THEN                                                   TRANS3A.34    
         !-----------------------------------------------------            TRANS3A.35    
         ! Loop over PEs on the same row to send them data                 TRANS3A.36    
         !-----------------------------------------------------            TRANS3A.37    
         DO iCol2=1,Px                                                     TRANS3A.38    
            iPe=PeGrid(iCol2,iRow)                                         TRANS3A.39    
            IF (iPe.NE.MyPe) THEN                                          TRANS3A.40    
               !-----------------------------------------------------      TRANS3A.41    
               ! Store multi-layer data in HoldVar1                        TRANS3A.42    
               !-----------------------------------------------------      TRANS3A.43    
               IMAX=MGxx(iCol2)                                            TRANS3A.44    
               JMAX=JGyy(iRow)                                             TRANS3A.45    
               LMAX=NLxx(iCol)                                             TRANS3A.46    
               I1=II1(iCol2)+1                                             TRANS3A.47    
               I2=II1(iCol2)+IMAX                                          TRANS3A.48    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)=                         TRANS3A.49    
     &              CHIG2(I1:I2,:,1:JMAX,1:LMAX)                           TRANS3A.50    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)=                         TRANS3A.51    
     &              SFG2(I1:I2,:,1:JMAX,1:LMAX)                            TRANS3A.52    
               !-----------------------------------------------------      TRANS3A.53    
               ! Send message                                              TRANS3A.54    
               !-----------------------------------------------------      TRANS3A.55    
               iRecv=iPe                                                   TRANS3A.56    
               nBuffSize=2*MGx*NHEM*JGy*NLx                                TRANS3A.57    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS3A.58    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS3A.59    
     &              MPI_COMM_WORLD,ierr)                                   TRANS3A.60    
            ENDIF                                                          TRANS3A.61    
         ENDDO                                                             TRANS3A.62    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS3A.63    
         !-----------------------------------------------------            TRANS3A.64    
         ! Loop over PEs on the same row to receive data                   TRANS3A.65    
         !-----------------------------------------------------            TRANS3A.66    
         DO iCol2=1,Px                                                     TRANS3A.67    
            iPe=PeGrid(iCol2,iRow)                                         TRANS3A.68    
            IF (iPe.NE.MyPe) THEN                                          TRANS3A.69    
               !-----------------------------------------------------      TRANS3A.70    
               ! Receive message                                           TRANS3A.71    
               !-----------------------------------------------------      TRANS3A.72    
               iSend=iPe                                                   TRANS3A.73    
               nBuffSize=2*MGx*NHEM*JGy*NLx                                TRANS3A.74    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS3A.75    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS3A.76    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS3A.77    
               !-----------------------------------------------------      TRANS3A.78    
               ! Write to CHIG3 etc                                        TRANS3A.79    
               !-----------------------------------------------------      TRANS3A.80    
               IMAX=MGxx(iCol)                                             TRANS3A.81    
               JMAX=JGyy(iRow)                                             TRANS3A.82    
               LMAX=NLxx(iCol2)                                            TRANS3A.83    
               L1=KK1(iCol2)+1                                             TRANS3A.84    
               L2=KK1(iCol2)+LMAX                                          TRANS3A.85    
               CHIG3(1:IMAX,:,1:JMAX,L1:L2)=                               TRANS3A.86    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)                     TRANS3A.87    
               SFG3(1:IMAX,:,1:JMAX,L1:L2)=                                TRANS3A.88    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)                     TRANS3A.89    
            ENDIF                                                          TRANS3A.90    
         ENDDO                                                             TRANS3A.91    
         !-----------------------------------------------------            TRANS3A.92    
         ! Data is already contained on this PE                            TRANS3A.93    
         !-----------------------------------------------------            TRANS3A.94    
         IMAX=MGxx(iCol)                                                   TRANS3A.95    
         JMAX=JGyy(iRow)                                                   TRANS3A.96    
         LMAX=NLxx(iCol)                                                   TRANS3A.97    
         I1=II1(iCol)+1                                                    TRANS3A.98    
         I2=II1(iCol)+MGxx(iCol)                                           TRANS3A.99    
         L1=KK1(iCol)+1                                                    TRANS3A.100   
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS3A.101   
         CHIG3(1:IMAX,:,1:JMAX,L1:L2)=CHIG2(I1:I2,:,1:JMAX,1:LMAX)         TRANS3A.102   
         SFG3(1:IMAX,:,1:JMAX,L1:L2)=SFG2(I1:I2,:,1:JMAX,1:LMAX)           TRANS3A.103   
      ELSE                                                                 TRANS3A.104   
         !-----------------------------------------------------            TRANS3A.105   
         ! One processor option, just copy one array into another          TRANS3A.106   
         !-----------------------------------------------------            TRANS3A.107   
         DO L=1,NL                                                         TRANS3A.108   
            DO J=1,JG                                                      TRANS3A.109   
               DO IHEM=1,NHEM                                              TRANS3A.110   
                  DO I=1,MG                                                TRANS3A.111   
                     CHIG3(I,IHEM,J,L)=CHIG2(I,IHEM,J,L)                   TRANS3A.112   
                     SFG3(I,IHEM,J,L)=SFG2(I,IHEM,J,L)                     TRANS3A.113   
                  ENDDO                                                    TRANS3A.114   
               ENDDO                                                       TRANS3A.115   
            ENDDO                                                          TRANS3A.116   
         ENDDO                                                             TRANS3A.117   
      ENDIF                                                                TRANS3A.118   
      END                                                                  TRANS3A.119   
*ENDIF                                                                     TRANS3A.120   
*ENDIF                                                                     TRANS3A.121   
*DECK TRANS3B                                                              TRANS3B.1     
*IF DEF,ABOVE_V1                                                           TRANS3B.2     
*IF DEF,NOMPI                                                              TRANS3B.3     
*ELSE                                                                      TRANS3B.4     
!=====================================================                     TRANS3B.5     
! Transposing the grid space variables so that the levels                  TRANS3B.6     
! are complete instead of the longitudes, because complete                 TRANS3B.7     
! levels are needed in MGRMLT. Instead the longitude are                   TRANS3B.8     
! split across the columns of PEs.                                         TRANS3B.9     
!=====================================================                     TRANS3B.10    
      SUBROUTINE TRANS3B                                                   TRANS3B.11    
      IMPLICIT NONE                                                        TRANS3B.12    
*CALL PARAM1                                                               TRANS3B.13    
*CALL PARAM2                                                               TRANS3B.14    
*CALL PARAM3                                                               TRANS3B.15    
*CALL GRIDPA2                                                              TRANS3B.16    
*CALL GRIDPA3                                                              TRANS3B.17    
*CALL MPIDECK                                                              TRANS3B.18    
!-----------------------------------------------------                     TRANS3B.19    
! Local variables                                                          TRANS3B.20    
!-----------------------------------------------------                     TRANS3B.21    
      INTEGER, PARAMETER :: TagRef=12000                                   TRANS3B.22    
      REAL :: HoldVar1(MGx,NHEM,JGy,NLx,3+NTRAC)                           TRANS3B.23    
      REAL :: HoldVar2(MGx,NHEM,JGy)                                       TRANS3B.24    
      INTEGER :: iPe                                                       TRANS3B.25    
      INTEGER :: iCol2                                                     TRANS3B.26    
      INTEGER :: IMAX, JMAX, LMAX                                          TRANS3B.27    
      INTEGER :: I1, I2                                                    TRANS3B.28    
      INTEGER :: L1, L2                                                    TRANS3B.29    
! Loop variables                                                           TRANS3B.30    
      INTEGER :: I, IHEM, ITRAC, J, L                                      TRANS3B.31    
!-----------------------------------------------------                     TRANS3B.32    
! Transpose                                                                TRANS3B.33    
!-----------------------------------------------------                     TRANS3B.34    
      IF (NPE.GT.1) THEN                                                   TRANS3B.35    
         !-----------------------------------------------------            TRANS3B.36    
         ! Loop over PEs on the same row to send them data                 TRANS3B.37    
         !-----------------------------------------------------            TRANS3B.38    
         DO iCol2=1,Px                                                     TRANS3B.39    
            iPe=PeGrid(iCol2,iRow)                                         TRANS3B.40    
            IF (iPe.NE.MyPe) THEN                                          TRANS3B.41    
               !-----------------------------------------------------      TRANS3B.42    
               ! Store multi-layer data in HoldVar1                        TRANS3B.43    
               !-----------------------------------------------------      TRANS3B.44    
               IMAX=MGxx(iCol2)                                            TRANS3B.45    
               JMAX=JGyy(iRow)                                             TRANS3B.46    
               LMAX=NLxx(iCol)                                             TRANS3B.47    
               I1=II1(iCol2)+1                                             TRANS3B.48    
               I2=II1(iCol2)+IMAX                                          TRANS3B.49    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)=                         TRANS3B.50    
     &              UG2(I1:I2,:,1:JMAX,1:LMAX)                             TRANS3B.51    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)=                         TRANS3B.52    
     &              VG2(I1:I2,:,1:JMAX,1:LMAX)                             TRANS3B.53    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3)=                         TRANS3B.54    
     &              TG2(I1:I2,:,1:JMAX,1:LMAX)                             TRANS3B.55    
               DO ITRAC=1,NTRAC                                            TRANS3B.56    
                  HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3+ITRAC)=                TRANS3B.57    
     &                 TRAG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)                  TRANS3B.58    
               ENDDO                                                       TRANS3B.59    
               !-----------------------------------------------------      TRANS3B.60    
               ! Send message                                              TRANS3B.61    
               !-----------------------------------------------------      TRANS3B.62    
               iRecv=iPe                                                   TRANS3B.63    
               nBuffSize=(3+NTRAC)*MGx*NHEM*JGy*NLx                        TRANS3B.64    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS3B.65    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS3B.66    
     &              MPI_COMM_WORLD,ierr)                                   TRANS3B.67    
            ENDIF                                                          TRANS3B.68    
         ENDDO                                                             TRANS3B.69    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS3B.70    
         !-----------------------------------------------------            TRANS3B.71    
         ! Loop over PEs on the same row to receive data                   TRANS3B.72    
         !-----------------------------------------------------            TRANS3B.73    
         DO iCol2=1,Px                                                     TRANS3B.74    
            iPe=PeGrid(iCol2,iRow)                                         TRANS3B.75    
            IF (iPe.NE.MyPe) THEN                                          TRANS3B.76    
               !-----------------------------------------------------      TRANS3B.77    
               ! Receive message                                           TRANS3B.78    
               !-----------------------------------------------------      TRANS3B.79    
               iSend=iPe                                                   TRANS3B.80    
               nBuffSize=(3+NTRAC)*MGx*NHEM*JGy*NLx                        TRANS3B.81    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS3B.82    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS3B.83    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS3B.84    
               !-----------------------------------------------------      TRANS3B.85    
               ! Write to UG3 etc                                          TRANS3B.86    
               !-----------------------------------------------------      TRANS3B.87    
               IMAX=MGxx(iCol)                                             TRANS3B.88    
               JMAX=JGyy(iRow)                                             TRANS3B.89    
               LMAX=NLxx(iCol2)                                            TRANS3B.90    
               L1=KK1(iCol2)+1                                             TRANS3B.91    
               L2=KK1(iCol2)+LMAX                                          TRANS3B.92    
               UG3(1:IMAX,:,1:JMAX,L1:L2)=                                 TRANS3B.93    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)                     TRANS3B.94    
               VG3(1:IMAX,:,1:JMAX,L1:L2)=                                 TRANS3B.95    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)                     TRANS3B.96    
               TG3(1:IMAX,:,1:JMAX,L1:L2)=                                 TRANS3B.97    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3)                     TRANS3B.98    
*IF DEF,ABOVE_V1                                                           TRANS3B.99    
               DO ITRAC=1,NTRAC                                            TRANS3B.100   
                  TRAG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)=                      TRANS3B.101   
     &                 HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3+ITRAC)            TRANS3B.102   
               ENDDO                                                       TRANS3B.103   
*ENDIF                                                                     TRANS3B.104   
            ENDIF                                                          TRANS3B.105   
         ENDDO                                                             TRANS3B.106   
         !-----------------------------------------------------            TRANS3B.107   
         ! Data is already contained on this PE                            TRANS3B.108   
         !-----------------------------------------------------            TRANS3B.109   
         IMAX=MGxx(iCol)                                                   TRANS3B.110   
         JMAX=JGyy(iRow)                                                   TRANS3B.111   
         LMAX=NLxx(iCol)                                                   TRANS3B.112   
         I1=II1(iCol)+1                                                    TRANS3B.113   
         I2=II1(iCol)+MGxx(iCol)                                           TRANS3B.114   
         L1=KK1(iCol)+1                                                    TRANS3B.115   
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS3B.116   
         UG3(1:IMAX,:,1:JMAX,L1:L2)=UG2(I1:I2,:,1:JMAX,1:LMAX)             TRANS3B.117   
         VG3(1:IMAX,:,1:JMAX,L1:L2)=VG2(I1:I2,:,1:JMAX,1:LMAX)             TRANS3B.118   
         TG3(1:IMAX,:,1:JMAX,L1:L2)=TG2(I1:I2,:,1:JMAX,1:LMAX)             TRANS3B.119   
*IF DEF,ABOVE_V1                                                           TRANS3B.120   
         DO ITRAC=1,NTRAC                                                  TRANS3B.121   
            TRAG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)=                            TRANS3B.122   
     &           TRAG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)                        TRANS3B.123   
         ENDDO                                                             TRANS3B.124   
*ENDIF                                                                     TRANS3B.125   
         !-----------------------------------------------------            TRANS3B.126   
         ! Single layer variables are only stored on first                 TRANS3B.127   
         ! column.                                                         TRANS3B.128   
         !-----------------------------------------------------            TRANS3B.129   
         IF (iCol.EQ.1) THEN                                               TRANS3B.130   
            DO iCol2=2,Px                                                  TRANS3B.131   
               iPe=PeGrid(iCol2,iRow)                                      TRANS3B.132   
               !-----------------------------------------------------      TRANS3B.133   
               ! Store single layer data in HoldVar2                       TRANS3B.134   
               !-----------------------------------------------------      TRANS3B.135   
               IMAX=MGxx(iCol2)                                            TRANS3B.136   
               JMAX=JGyy(iRow)                                             TRANS3B.137   
               I1=II1(iCol2)+1                                             TRANS3B.138   
               I2=II1(iCol2)+IMAX                                          TRANS3B.139   
               HoldVar2(1:IMAX,:,1:JMAX)=PLG2(I1:I2,:,1:JMAX)              TRANS3B.140   
               !-----------------------------------------------------      TRANS3B.141   
               ! Send message                                              TRANS3B.142   
               !-----------------------------------------------------      TRANS3B.143   
               iRecv=iPe                                                   TRANS3B.144   
               nBuffSize=MGx*NHEM*JGy                                      TRANS3B.145   
               iTag=TagRef+1100+10*iCol2+iRow                              TRANS3B.146   
               CALL MPI_BSEND(HoldVar2,nBuffSize,ParaReal,iRecv,iTag,      TRANS3B.147   
     &              MPI_COMM_WORLD,ierr)                                   TRANS3B.148   
            ENDDO                                                          TRANS3B.149   
         ENDIF                                                             TRANS3B.150   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS3B.151   
         IF (iCol.GT.1) THEN                                               TRANS3B.152   
            !---------------------------------------------------           TRANS3B.153   
            ! Receive message                                              TRANS3B.154   
            !---------------------------------------------------           TRANS3B.155   
            iSend=PeGrid(1,iRow)                                           TRANS3B.156   
            nBuffSize=MGx*NHEM*JGy                                         TRANS3B.157   
            iTag=TagRef+1100+10*iCol+iRow                                  TRANS3B.158   
            CALL MPI_RECV(HoldVar2,nBuffSize,ParaReal,iSend,iTag,          TRANS3B.159   
     &           MPI_COMM_WORLD,istat,ierr)                                TRANS3B.160   
            !---------------------------------------------------           TRANS3B.161   
            ! Write to PLG3 etc                                            TRANS3B.162   
            !---------------------------------------------------           TRANS3B.163   
            IMAX=MGxx(iCol)                                                TRANS3B.164   
            JMAX=JGyy(iRow)                                                TRANS3B.165   
            PLG3(1:IMAX,:,1:JMAX)=HoldVar2(1:IMAX,:,1:JMAX)                TRANS3B.166   
         ELSE                                                              TRANS3B.167   
            !-----------------------------------------------------         TRANS3B.168   
            ! Data for PE on column 1 is already contained on this PE      TRANS3B.169   
            !-----------------------------------------------------         TRANS3B.170   
            IMAX=MGxx(iCol)                                                TRANS3B.171   
            JMAX=JGyy(iRow)                                                TRANS3B.172   
            I1=II1(iCol)+1                                                 TRANS3B.173   
            I2=II1(iCol)+IMAX                                              TRANS3B.174   
            PLG3(1:IMAX,:,1:JMAX)=PLG2(I1:I2,:,1:JMAX)                     TRANS3B.175   
         ENDIF                                                             TRANS3B.176   
      ELSE                                                                 TRANS3B.177   
         !-----------------------------------------------------            TRANS3B.178   
         ! One processor option, just copy one array into another          TRANS3B.179   
         !-----------------------------------------------------            TRANS3B.180   
         DO L=1,NL                                                         TRANS3B.181   
            DO J=1,JGy                                                     TRANS3B.182   
               DO IHEM=1,NHEM                                              TRANS3B.183   
                  DO I=1,MG                                                TRANS3B.184   
                     UG3(I,IHEM,J,L)=UG2(I,IHEM,J,L)                       TRANS3B.185   
                     VG3(I,IHEM,J,L)=VG2(I,IHEM,J,L)                       TRANS3B.186   
                     TG3(I,IHEM,J,L)=TG2(I,IHEM,J,L)                       TRANS3B.187   
*IF DEF,ABOVE_V1                                                           TRANS3B.188   
                     DO ITRAC=1,NTRAC                                      TRANS3B.189   
                        TRAG3(I,IHEM,J,L,ITRAC)=TRAG2(I,IHEM,J,L,ITRAC)    TRANS3B.190   
                     ENDDO                                                 TRANS3B.191   
*ENDIF                                                                     TRANS3B.192   
                  ENDDO                                                    TRANS3B.193   
               ENDDO                                                       TRANS3B.194   
            ENDDO                                                          TRANS3B.195   
         ENDDO                                                             TRANS3B.196   
         DO J=1,JGy                                                        TRANS3B.197   
            DO IHEM=1,NHEM                                                 TRANS3B.198   
               DO I=1,MG                                                   TRANS3B.199   
                  PLG3(I,IHEM,J) =PLG2(I,IHEM,J)                           TRANS3B.200   
               ENDDO                                                       TRANS3B.201   
            ENDDO                                                          TRANS3B.202   
         ENDDO                                                             TRANS3B.203   
      ENDIF                                                                TRANS3B.204   
      END                                                                  TRANS3B.205   
*ENDIF                                                                     TRANS3B.206   
*ENDIF                                                                     TRANS3B.207   
*DECK TRANS4                                                               TRANS4.1     
*IF DEF,NOMPI                                                              TRANS4.2     
*ELSE                                                                      TRANS4.3     
!=====================================================                     TRANS4.4     
! Transposing the grid space variables so that the longitudes              TRANS4.5     
! are complete (so that this dimension and can be converted to             TRANS4.6     
! zonal wavenumber in using FFT991). Instead the levels are                TRANS4.7     
! split across the columns of PEs.                                         TRANS4.8     
!=====================================================                     TRANS4.9     
      SUBROUTINE TRANS4                                                    TRANS4.10    
      IMPLICIT NONE                                                        TRANS4.11    
*CALL PARAM1                                                               TRANS4.12    
*CALL PARAM2                                                               TRANS4.13    
*CALL PARAM3                                                               TRANS4.14    
*CALL GRIDPA2                                                              TRANS4.15    
*CALL GRIDPB2                                                              TRANS4.16    
*CALL GRIDPA3                                                              TRANS4.17    
*CALL GRIDPB3                                                              TRANS4.18    
*CALL MPIDECK                                                              TRANS4.19    
!-----------------------------------------------------                     TRANS4.20    
! Local variables                                                          TRANS4.21    
!-----------------------------------------------------                     TRANS4.22    
      INTEGER, PARAMETER :: TagRef=14000                                   TRANS4.23    
      REAL :: HoldVar1(MGx,NHEM,JGy,NLx,6+3*NTRAC)                         TRANS4.24    
      REAL :: HoldVar2(MGx,NHEM,JGy,2)                                     TRANS4.25    
      INTEGER :: iPe                                                       TRANS4.26    
      INTEGER :: iCol2                                                     TRANS4.27    
      INTEGER :: IMAX, JMAX, LMAX                                          TRANS4.28    
      INTEGER :: I1, I2                                                    TRANS4.29    
      INTEGER :: L1, L2                                                    TRANS4.30    
! Loop variables                                                           TRANS4.31    
      INTEGER :: I, IHEM, ITRAC, J, L                                      TRANS4.32    
!-----------------------------------------------------                     TRANS4.33    
! Transpose                                                                TRANS4.34    
!-----------------------------------------------------                     TRANS4.35    
      IF (NPE.GT.1) THEN                                                   TRANS4.36    
         !-----------------------------------------------------            TRANS4.37    
         ! Loop over PEs on the same row to send them data                 TRANS4.38    
         !-----------------------------------------------------            TRANS4.39    
         DO iCol2=1,Px                                                     TRANS4.40    
            iPe=PeGrid(iCol2,iRow)                                         TRANS4.41    
            IF (iPe.NE.MyPe) THEN                                          TRANS4.42    
               !-----------------------------------------------------      TRANS4.43    
               ! Store multi-layer data in HoldVar1                        TRANS4.44    
               !-----------------------------------------------------      TRANS4.45    
               IMAX=MGxx(iCol)                                             TRANS4.46    
               JMAX=JGyy(iRow)                                             TRANS4.47    
               LMAX=NLxx(iCol2)                                            TRANS4.48    
               L1=KK1(iCol2)+1                                             TRANS4.49    
               L2=KK1(iCol2)+NLxx(iCol2)                                   TRANS4.50    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)=                         TRANS4.51    
     &              EG3(1:IMAX,:,1:JMAX,L1:L2)                             TRANS4.52    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)=                         TRANS4.53    
     &              TNLG3(1:IMAX,:,1:JMAX,L1:L2)                           TRANS4.54    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3)=                         TRANS4.55    
     &              FUG3(1:IMAX,:,1:JMAX,L1:L2)                            TRANS4.56    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,4)=                         TRANS4.57    
     &              FVG3(1:IMAX,:,1:JMAX,L1:L2)                            TRANS4.58    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,5)=                         TRANS4.59    
     &              UTG3(1:IMAX,:,1:JMAX,L1:L2)                            TRANS4.60    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,6)=                         TRANS4.61    
     &              VTG3(1:IMAX,:,1:JMAX,L1:L2)                            TRANS4.62    
*IF DEF,ABOVE_V1                                                           TRANS4.63    
               DO ITRAC=1,NTRAC                                            TRANS4.64    
                  HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,4+3*ITRAC)=              TRANS4.65    
     &                 TRANLG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)                TRANS4.66    
                  HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,5+3*ITRAC)=              TRANS4.67    
     &                 UTRAG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)                 TRANS4.68    
                  HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,6+3*ITRAC)=              TRANS4.69    
     &                 VTRAG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)                 TRANS4.70    
               ENDDO                                                       TRANS4.71    
*ENDIF                                                                     TRANS4.72    
               !-----------------------------------------------------      TRANS4.73    
               ! Send message                                              TRANS4.74    
               !-----------------------------------------------------      TRANS4.75    
               iRecv=iPe                                                   TRANS4.76    
               nBuffSize=(6+3*NTRAC)*MGx*NHEM*JGy*NLx                      TRANS4.77    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS4.78    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS4.79    
     &              MPI_COMM_WORLD,ierr)                                   TRANS4.80    
            ENDIF                                                          TRANS4.81    
         ENDDO                                                             TRANS4.82    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS4.83    
         !-----------------------------------------------------            TRANS4.84    
         ! Loop over PEs on the same row to receive data                   TRANS4.85    
         !-----------------------------------------------------            TRANS4.86    
         DO iCol2=1,Px                                                     TRANS4.87    
            iPe=PeGrid(iCol2,iRow)                                         TRANS4.88    
            IF (iPe.NE.MyPe) THEN                                          TRANS4.89    
               !-----------------------------------------------------      TRANS4.90    
               ! Receive message                                           TRANS4.91    
               !-----------------------------------------------------      TRANS4.92    
               iSend=iPe                                                   TRANS4.93    
               nBuffSize=(6+3*NTRAC)*MGx*NHEM*JGy*NLx                      TRANS4.94    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS4.95    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS4.96    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS4.97    
               !-----------------------------------------------------      TRANS4.98    
               ! Write to EG2 etc                                          TRANS4.99    
               !-----------------------------------------------------      TRANS4.100   
               IMAX=MGxx(iCol2)                                            TRANS4.101   
               JMAX=JGyy(iRow)                                             TRANS4.102   
               LMAX=NLxx(iCol)                                             TRANS4.103   
               I1=II1(iCol2)+1                                             TRANS4.104   
               I2=II1(iCol2)+MGxx(iCol2)                                   TRANS4.105   
               EG2(I1:I2,:,1:JMAX,1:LMAX)=                                 TRANS4.106   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)                     TRANS4.107   
               TNLG2(I1:I2,:,1:JMAX,1:LMAX)=                               TRANS4.108   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)                     TRANS4.109   
               FUG2(I1:I2,:,1:JMAX,1:LMAX)=                                TRANS4.110   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3)                     TRANS4.111   
               FVG2(I1:I2,:,1:JMAX,1:LMAX)=                                TRANS4.112   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,4)                     TRANS4.113   
               UTG2(I1:I2,:,1:JMAX,1:LMAX)=                                TRANS4.114   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,5)                     TRANS4.115   
               VTG2(I1:I2,:,1:JMAX,1:LMAX)=                                TRANS4.116   
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,6)                     TRANS4.117   
*IF DEF,ABOVE_V1                                                           TRANS4.118   
               DO ITRAC=1,NTRAC                                            TRANS4.119   
                  TRANLG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)=                    TRANS4.120   
     &                 HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,4+3*ITRAC)          TRANS4.121   
                  UTRAG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)=                     TRANS4.122   
     &                 HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,5+3*ITRAC)          TRANS4.123   
                  VTRAG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)=                     TRANS4.124   
     &                 HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,6+3*ITRAC)          TRANS4.125   
               ENDDO                                                       TRANS4.126   
*ENDIF                                                                     TRANS4.127   
            ENDIF                                                          TRANS4.128   
         ENDDO                                                             TRANS4.129   
         !-----------------------------------------------------            TRANS4.130   
         ! Data is already contained on this PE                            TRANS4.131   
         !-----------------------------------------------------            TRANS4.132   
         IMAX=MGxx(iCol)                                                   TRANS4.133   
         JMAX=JGyy(iRow)                                                   TRANS4.134   
         LMAX=NLxx(iCol)                                                   TRANS4.135   
         I1=II1(iCol)+1                                                    TRANS4.136   
         I2=II1(iCol)+MGxx(iCol)                                           TRANS4.137   
         L1=KK1(iCol)+1                                                    TRANS4.138   
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS4.139   
         EG2(I1:I2,:,1:JMAX,1:LMAX)=EG3(1:IMAX,:,1:JMAX,L1:L2)             TRANS4.140   
         TNLG2(I1:I2,:,1:JMAX,1:LMAX)=TNLG3(1:IMAX,:,1:JMAX,L1:L2)         TRANS4.141   
         FUG2(I1:I2,:,1:JMAX,1:LMAX)=FUG3(1:IMAX,:,1:JMAX,L1:L2)           TRANS4.142   
         FVG2(I1:I2,:,1:JMAX,1:LMAX)=FVG3(1:IMAX,:,1:JMAX,L1:L2)           TRANS4.143   
         UTG2(I1:I2,:,1:JMAX,1:LMAX)=UTG3(1:IMAX,:,1:JMAX,L1:L2)           TRANS4.144   
         VTG2(I1:I2,:,1:JMAX,1:LMAX)=VTG3(1:IMAX,:,1:JMAX,L1:L2)           TRANS4.145   
*IF DEF,ABOVE_V1                                                           TRANS4.146   
         DO ITRAC=1,NTRAC                                                  TRANS4.147   
            TRANLG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)=                          TRANS4.148   
     &           TRANLG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)                      TRANS4.149   
            UTRAG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)=                           TRANS4.150   
     &           UTRAG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)                       TRANS4.151   
            VTRAG2(I1:I2,:,1:JMAX,1:LMAX,ITRAC)=                           TRANS4.152   
     &           VTRAG3(1:IMAX,:,1:JMAX,L1:L2,ITRAC)                       TRANS4.153   
         ENDDO                                                             TRANS4.154   
*ENDIF                                                                     TRANS4.155   
         !-----------------------------------------------------            TRANS4.156   
         ! Store single-layer variables will only be stored on             TRANS4.157   
         ! first column after this transpose.                              TRANS4.158   
         !-----------------------------------------------------            TRANS4.159   
         IF (iCol.GT.1) THEN                                               TRANS4.160   
            !----------------------------------------------------          TRANS4.161   
            ! Store single-layer variables in HoldVar2                     TRANS4.162   
            !----------------------------------------------------          TRANS4.163   
            IMAX=MGxx(iCol)                                                TRANS4.164   
            JMAX=JGyy(iRow)                                                TRANS4.165   
            HoldVar2(1:IMAX,:,1:JMAX,1)=SPG3(1:IMAX,:,1:JMAX)              TRANS4.166   
            HoldVar2(1:IMAX,:,1:JMAX,2)=VPG3(1:IMAX,:,1:JMAX)              TRANS4.167   
            !----------------------------------------------------          TRANS4.168   
            ! Send message to PEs on column 1                              TRANS4.169   
            !----------------------------------------------------          TRANS4.170   
            iRecv=PeGrid(1,iRow)                                           TRANS4.171   
            nBuffSize=2*MGx*NHEM*JGy                                       TRANS4.172   
            iTag=TagRef+1010+100*iCol+iRow                                 TRANS4.173   
            CALL MPI_BSEND(HoldVar2,nBuffSize,ParaReal,iRecv,iTag,         TRANS4.174   
     &           MPI_COMM_WORLD,ierr)                                      TRANS4.175   
         ENDIF                                                             TRANS4.176   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS4.177   
         IF (iCol.EQ.1) THEN                                               TRANS4.178   
            !---------------------------------------------------           TRANS4.179   
            ! Loop through the other PEs on this row                       TRANS4.180   
            !---------------------------------------------------           TRANS4.181   
            DO iCol2=2,Px                                                  TRANS4.182   
               iPe=PeGrid(iCol2,iRow)                                      TRANS4.183   
               !---------------------------------------------------        TRANS4.184   
               ! Receive message                                           TRANS4.185   
               !---------------------------------------------------        TRANS4.186   
               iSend=iPe                                                   TRANS4.187   
               nBuffSize=2*MGx*NHEM*JGy                                    TRANS4.188   
               iTag=TagRef+1010+100*iCol2+iRow                             TRANS4.189   
               CALL MPI_RECV(HoldVar2,nBuffSize,ParaReal,iSend,iTag,       TRANS4.190   
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS4.191   
               !---------------------------------------------------        TRANS4.192   
               ! Write to SPG2 etc                                         TRANS4.193   
               !---------------------------------------------------        TRANS4.194   
               IMAX=MGxx(iCol2)                                            TRANS4.195   
               JMAX=JGyy(iRow)                                             TRANS4.196   
               LMAX=NLxx(iCol)                                             TRANS4.197   
               I1=II1(iCol2)+1                                             TRANS4.198   
               I2=II1(iCol2)+MGxx(iCol2)                                   TRANS4.199   
               SPG2(I1:I2,:,1:JMAX)=HoldVar2(1:IMAX,:,1:JMAX,1)            TRANS4.200   
               VPG2(I1:I2,:,1:JMAX)=HoldVar2(1:IMAX,:,1:JMAX,2)            TRANS4.201   
            ENDDO                                                          TRANS4.202   
            !---------------------------------------------------           TRANS4.203   
            ! Data is already contained on this PE                         TRANS4.204   
            !---------------------------------------------------           TRANS4.205   
            IMAX=MGxx(iCol)                                                TRANS4.206   
            JMAX=JGyy(iRow)                                                TRANS4.207   
            I1=II1(iCol)+1                                                 TRANS4.208   
            I2=II1(iCol)+MGxx(iCol)                                        TRANS4.209   
            SPG2(I1:I2,:,1:JMAX)=SPG3(1:IMAX,:,1:JMAX)                     TRANS4.210   
            VPG2(I1:I2,:,1:JMAX)=VPG3(1:IMAX,:,1:JMAX)                     TRANS4.211   
         ENDIF                                                             TRANS4.212   
      ELSE                                                                 TRANS4.213   
         !---------------------------------------------------              TRANS4.214   
         ! One processor option                                            TRANS4.215   
         !---------------------------------------------------              TRANS4.216   
         DO L=1,NL                                                         TRANS4.217   
            DO J=1,JGy                                                     TRANS4.218   
               DO IHEM=1,NHEM                                              TRANS4.219   
                  DO I=1,MG                                                TRANS4.220   
                     EG2(I,IHEM,J,L)  =EG3(I,IHEM,J,L)                     TRANS4.221   
                     TNLG2(I,IHEM,J,L)=TNLG3(I,IHEM,J,L)                   TRANS4.222   
                     FUG2(I,IHEM,J,L) =FUG3(I,IHEM,J,L)                    TRANS4.223   
                     FVG2(I,IHEM,J,L) =FVG3(I,IHEM,J,L)                    TRANS4.224   
                     UTG2(I,IHEM,J,L) =UTG3(I,IHEM,J,L)                    TRANS4.225   
                     VTG2(I,IHEM,J,L) =VTG3(I,IHEM,J,L)                    TRANS4.226   
*IF DEF,ABOVE_V1                                                           TRANS4.227   
                     DO ITRAC=1,NTRAC                                      TRANS4.228   
                        TRANLG2(I,IHEM,J,L,ITRAC)=                         TRANS4.229   
     &                       TRANLG3(I,IHEM,J,L,ITRAC)                     TRANS4.230   
                        UTRAG2(I,IHEM,J,L,ITRAC)=                          TRANS4.231   
     &                       UTRAG3(I,IHEM,J,L,ITRAC)                      TRANS4.232   
                        VTRAG2(I,IHEM,J,L,ITRAC)=                          TRANS4.233   
     &                       VTRAG3(I,IHEM,J,L,ITRAC)                      TRANS4.234   
                     ENDDO                                                 TRANS4.235   
*ENDIF                                                                     TRANS4.236   
                  ENDDO                                                    TRANS4.237   
               ENDDO                                                       TRANS4.238   
            ENDDO                                                          TRANS4.239   
         ENDDO                                                             TRANS4.240   
         DO J=1,JGy                                                        TRANS4.241   
            DO IHEM=1,NHEM                                                 TRANS4.242   
               DO I=1,MG                                                   TRANS4.243   
                  SPG2(I,IHEM,J)   =SPG3(I,IHEM,J)                         TRANS4.244   
                  VPG2(I,IHEM,J)   =VPG3(I,IHEM,J)                         TRANS4.245   
               ENDDO                                                       TRANS4.246   
            ENDDO                                                          TRANS4.247   
         ENDDO                                                             TRANS4.248   
      ENDIF                                                                TRANS4.249   
      END                                                                  TRANS4.250   
*ENDIF                                                                     TRANS4.251   
*DECK TRANS4A                                                              TRANS4A.1     
*IF DEF,ABOVE_V1                                                           TRANS4A.2     
*IF DEF,NOMPI                                                              TRANS4A.3     
*ELSE                                                                      TRANS4A.4     
!=====================================================                     TRANS4A.5     
! Transposing the grid space variables so that the longitudes              TRANS4A.6     
! are complete (so that this dimension and can be converted to             TRANS4A.7     
! zonal wavenumber in using FFT991). Instead the levels are                TRANS4A.8     
! split across the columns of PEs.                                         TRANS4A.9     
!=====================================================                     TRANS4A.10    
      SUBROUTINE TRANS4A                                                   TRANS4A.11    
      IMPLICIT NONE                                                        TRANS4A.12    
*CALL PARAM1                                                               TRANS4A.13    
*CALL PARAM2                                                               TRANS4A.14    
*CALL PARAM3                                                               TRANS4A.15    
*CALL GRIDPA2                                                              TRANS4A.16    
*CALL GRIDPA3                                                              TRANS4A.17    
*CALL MPIDECK                                                              TRANS4A.18    
!-----------------------------------------------------                     TRANS4A.19    
! Local variables                                                          TRANS4A.20    
!-----------------------------------------------------                     TRANS4A.21    
      INTEGER, PARAMETER :: TagRef=16000                                   TRANS4A.22    
      REAL :: HoldVar1(MGx,NHEM,JGy,NLx,NTRAC)                             TRANS4A.23    
      INTEGER :: iPe                                                       TRANS4A.24    
      INTEGER :: iCol2                                                     TRANS4A.25    
      INTEGER :: IMAX, JMAX, LMAX                                          TRANS4A.26    
      INTEGER :: I1, I2                                                    TRANS4A.27    
      INTEGER :: L1, L2                                                    TRANS4A.28    
! Loop variables                                                           TRANS4A.29    
      INTEGER :: I, IHEM, ITRAC, J, L                                      TRANS4A.30    
!-----------------------------------------------------                     TRANS4A.31    
! Transpose                                                                TRANS4A.32    
!-----------------------------------------------------                     TRANS4A.33    
      IF (NPE.GT.1) THEN                                                   TRANS4A.34    
         !-----------------------------------------------------            TRANS4A.35    
         ! Loop over PEs on the same row to send them data                 TRANS4A.36    
         !-----------------------------------------------------            TRANS4A.37    
         DO iCol2=1,Px                                                     TRANS4A.38    
            iPe=PeGrid(iCol2,iRow)                                         TRANS4A.39    
            IF (iPe.NE.MyPe) THEN                                          TRANS4A.40    
               !-----------------------------------------------------      TRANS4A.41    
               ! Store multi-layer data in HoldVar1                        TRANS4A.42    
               !-----------------------------------------------------      TRANS4A.43    
               IMAX=MGxx(iCol)                                             TRANS4A.44    
               JMAX=JGyy(iRow)                                             TRANS4A.45    
               LMAX=NLxx(iCol2)                                            TRANS4A.46    
               L1=KK1(iCol2)+1                                             TRANS4A.47    
               L2=KK1(iCol2)+NLxx(iCol2)                                   TRANS4A.48    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,:)=                         TRANS4A.49    
     &              TRANLG3(1:IMAX,:,1:JMAX,L1:L2,:)                       TRANS4A.50    
               !-----------------------------------------------------      TRANS4A.51    
               ! Send message                                              TRANS4A.52    
               !-----------------------------------------------------      TRANS4A.53    
               iRecv=iPe                                                   TRANS4A.54    
               nBuffSize=NTRAC*MGx*NHEM*JGy*NLx                            TRANS4A.55    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS4A.56    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS4A.57    
     &              MPI_COMM_WORLD,ierr)                                   TRANS4A.58    
            ENDIF                                                          TRANS4A.59    
         ENDDO                                                             TRANS4A.60    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS4A.61    
         !-----------------------------------------------------            TRANS4A.62    
         ! Loop over PEs on the same row to receive data                   TRANS4A.63    
         !-----------------------------------------------------            TRANS4A.64    
         DO iCol2=1,Px                                                     TRANS4A.65    
            iPe=PeGrid(iCol2,iRow)                                         TRANS4A.66    
            IF (iPe.NE.MyPe) THEN                                          TRANS4A.67    
               !-----------------------------------------------------      TRANS4A.68    
               ! Receive message                                           TRANS4A.69    
               !-----------------------------------------------------      TRANS4A.70    
               iSend=iPe                                                   TRANS4A.71    
               nBuffSize=NTRAC*MGx*NHEM*JGy*NLx                            TRANS4A.72    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS4A.73    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS4A.74    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS4A.75    
               !-----------------------------------------------------      TRANS4A.76    
               ! Write to EG2 etc                                          TRANS4A.77    
               !-----------------------------------------------------      TRANS4A.78    
               IMAX=MGxx(iCol2)                                            TRANS4A.79    
               JMAX=JGyy(iRow)                                             TRANS4A.80    
               LMAX=NLxx(iCol)                                             TRANS4A.81    
               I1=II1(iCol2)+1                                             TRANS4A.82    
               I2=II1(iCol2)+MGxx(iCol2)                                   TRANS4A.83    
               TRANLG2(I1:I2,:,1:JMAX,1:LMAX,:)=                           TRANS4A.84    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,:)                     TRANS4A.85    
            ENDIF                                                          TRANS4A.86    
         ENDDO                                                             TRANS4A.87    
         !-----------------------------------------------------            TRANS4A.88    
         ! Data is already contained on this PE                            TRANS4A.89    
         !-----------------------------------------------------            TRANS4A.90    
         IMAX=MGxx(iCol)                                                   TRANS4A.91    
         JMAX=JGyy(iRow)                                                   TRANS4A.92    
         LMAX=NLxx(iCol)                                                   TRANS4A.93    
         I1=II1(iCol)+1                                                    TRANS4A.94    
         I2=II1(iCol)+MGxx(iCol)                                           TRANS4A.95    
         L1=KK1(iCol)+1                                                    TRANS4A.96    
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS4A.97    
         TRANLG2(I1:I2,:,1:JMAX,1:LMAX,:)=                                 TRANS4A.98    
     &        TRANLG3(1:IMAX,:,1:JMAX,L1:L2,:)                             TRANS4A.99    
      ELSE                                                                 TRANS4A.100   
         !---------------------------------------------------              TRANS4A.101   
         ! One processor option                                            TRANS4A.102   
         !---------------------------------------------------              TRANS4A.103   
         DO L=1,NL                                                         TRANS4A.104   
            DO J=1,JGy                                                     TRANS4A.105   
               DO IHEM=1,NHEM                                              TRANS4A.106   
                  DO I=1,MG                                                TRANS4A.107   
                     DO ITRAC=1,NTRAC                                      TRANS4A.108   
                        TRANLG2(I,IHEM,J,L,ITRAC)=                         TRANS4A.109   
     &                       TRANLG3(I,IHEM,J,L,ITRAC)                     TRANS4A.110   
                     ENDDO                                                 TRANS4A.111   
                  ENDDO                                                    TRANS4A.112   
               ENDDO                                                       TRANS4A.113   
            ENDDO                                                          TRANS4A.114   
         ENDDO                                                             TRANS4A.115   
      ENDIF                                                                TRANS4A.116   
      END                                                                  TRANS4A.117   
*ENDIF                                                                     TRANS4A.118   
*ENDIF                                                                     TRANS4A.119   
*DECK TRANS4B                                                              TRANS4B.1     
*IF DEF,ABOVE_V1                                                           TRANS4B.2     
*IF DEF,NOMPI                                                              TRANS4B.3     
*ELSE                                                                      TRANS4B.4     
!=====================================================                     TRANS4B.5     
! Transposing the grid space variables so that the longitudes              TRANS4B.6     
! are complete (so that this dimension and can be converted to             TRANS4B.7     
! zonal wavenumber in using FFT991). Instead the levels are                TRANS4B.8     
! split across the columns of PEs.                                         TRANS4B.9     
!=====================================================                     TRANS4B.10    
      SUBROUTINE TRANS4B                                                   TRANS4B.11    
      IMPLICIT NONE                                                        TRANS4B.12    
*CALL PARAM1                                                               TRANS4B.13    
*CALL PARAM2                                                               TRANS4B.14    
*CALL PARAM3                                                               TRANS4B.15    
*CALL GRIDPA2                                                              TRANS4B.16    
*CALL GRIDPA3                                                              TRANS4B.17    
*CALL MPIDECK                                                              TRANS4B.18    
!-----------------------------------------------------                     TRANS4B.19    
! Local variables                                                          TRANS4B.20    
!-----------------------------------------------------                     TRANS4B.21    
      INTEGER, PARAMETER :: TagRef=17000                                   TRANS4B.22    
      REAL :: HoldVar1(MGx,NHEM,JGy,NLx,3+NTRAC)                           TRANS4B.23    
      INTEGER :: iPe                                                       TRANS4B.24    
      INTEGER :: iCol2                                                     TRANS4B.25    
      INTEGER :: IMAX, JMAX, LMAX                                          TRANS4B.26    
      INTEGER :: I1, I2                                                    TRANS4B.27    
      INTEGER :: L1, L2                                                    TRANS4B.28    
! Loop variables                                                           TRANS4B.29    
      INTEGER :: I, IHEM, ITRAC, J, L                                      TRANS4B.30    
!-----------------------------------------------------                     TRANS4B.31    
! Transpose                                                                TRANS4B.32    
!-----------------------------------------------------                     TRANS4B.33    
      IF (NPE.GT.1) THEN                                                   TRANS4B.34    
         !-----------------------------------------------------            TRANS4B.35    
         ! Loop over PEs on the same row to send them data                 TRANS4B.36    
         !-----------------------------------------------------            TRANS4B.37    
         DO iCol2=1,Px                                                     TRANS4B.38    
            iPe=PeGrid(iCol2,iRow)                                         TRANS4B.39    
            IF (iPe.NE.MyPe) THEN                                          TRANS4B.40    
               !-----------------------------------------------------      TRANS4B.41    
               ! Store multi-layer data in HoldVar1                        TRANS4B.42    
               !-----------------------------------------------------      TRANS4B.43    
               IMAX=MGxx(iCol)                                             TRANS4B.44    
               JMAX=JGyy(iRow)                                             TRANS4B.45    
               LMAX=NLxx(iCol2)                                            TRANS4B.46    
               L1=KK1(iCol2)+1                                             TRANS4B.47    
               L2=KK1(iCol2)+NLxx(iCol2)                                   TRANS4B.48    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)=                         TRANS4B.49    
     &              TNLG3(1:IMAX,:,1:JMAX,L1:L2)                           TRANS4B.50    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)=                         TRANS4B.51    
     &              FUG3(1:IMAX,:,1:JMAX,L1:L2)                            TRANS4B.52    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3)=                         TRANS4B.53    
     &              FVG3(1:IMAX,:,1:JMAX,L1:L2)                            TRANS4B.54    
               HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,4:3+NTRAC)=                 TRANS4B.55    
     &              TRANLG3(1:IMAX,:,1:JMAX,L1:L2,:)                       TRANS4B.56    
               !-----------------------------------------------------      TRANS4B.57    
               ! Send message                                              TRANS4B.58    
               !-----------------------------------------------------      TRANS4B.59    
               iRecv=iPe                                                   TRANS4B.60    
               nBuffSize=(3+NTRAC)*MGx*NHEM*JGy*NLx                        TRANS4B.61    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS4B.62    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS4B.63    
     &              MPI_COMM_WORLD,ierr)                                   TRANS4B.64    
            ENDIF                                                          TRANS4B.65    
         ENDDO                                                             TRANS4B.66    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS4B.67    
         !-----------------------------------------------------            TRANS4B.68    
         ! Loop over PEs on the same row to receive data                   TRANS4B.69    
         !-----------------------------------------------------            TRANS4B.70    
         DO iCol2=1,Px                                                     TRANS4B.71    
            iPe=PeGrid(iCol2,iRow)                                         TRANS4B.72    
            IF (iPe.NE.MyPe) THEN                                          TRANS4B.73    
               !-----------------------------------------------------      TRANS4B.74    
               ! Receive message                                           TRANS4B.75    
               !-----------------------------------------------------      TRANS4B.76    
               iSend=iPe                                                   TRANS4B.77    
               nBuffSize=(6+3*NTRAC)*MGx*NHEM*JGy*NLx                      TRANS4B.78    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS4B.79    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS4B.80    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS4B.81    
               !-----------------------------------------------------      TRANS4B.82    
               ! Write to EG2 etc                                          TRANS4B.83    
               !-----------------------------------------------------      TRANS4B.84    
               IMAX=MGxx(iCol2)                                            TRANS4B.85    
               JMAX=JGyy(iRow)                                             TRANS4B.86    
               LMAX=NLxx(iCol)                                             TRANS4B.87    
               I1=II1(iCol2)+1                                             TRANS4B.88    
               I2=II1(iCol2)+MGxx(iCol2)                                   TRANS4B.89    
               TNLG2(I1:I2,:,1:JMAX,1:LMAX)=                               TRANS4B.90    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,1)                     TRANS4B.91    
               FUG2(I1:I2,:,1:JMAX,1:LMAX)=                                TRANS4B.92    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,2)                     TRANS4B.93    
               FVG2(I1:I2,:,1:JMAX,1:LMAX)=                                TRANS4B.94    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,3)                     TRANS4B.95    
               TRANLG2(I1:I2,:,1:JMAX,1:LMAX,:)=                           TRANS4B.96    
     &              HoldVar1(1:IMAX,:,1:JMAX,1:LMAX,4:3+NTRAC)             TRANS4B.97    
            ENDIF                                                          TRANS4B.98    
         ENDDO                                                             TRANS4B.99    
         !-----------------------------------------------------            TRANS4B.100   
         ! Data is already contained on this PE                            TRANS4B.101   
         !-----------------------------------------------------            TRANS4B.102   
         IMAX=MGxx(iCol)                                                   TRANS4B.103   
         JMAX=JGyy(iRow)                                                   TRANS4B.104   
         LMAX=NLxx(iCol)                                                   TRANS4B.105   
         I1=II1(iCol)+1                                                    TRANS4B.106   
         I2=II1(iCol)+MGxx(iCol)                                           TRANS4B.107   
         L1=KK1(iCol)+1                                                    TRANS4B.108   
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS4B.109   
         TNLG2(I1:I2,:,1:JMAX,1:LMAX)=TNLG3(1:IMAX,:,1:JMAX,L1:L2)         TRANS4B.110   
         FUG2(I1:I2,:,1:JMAX,1:LMAX)=FUG3(1:IMAX,:,1:JMAX,L1:L2)           TRANS4B.111   
         FVG2(I1:I2,:,1:JMAX,1:LMAX)=FVG3(1:IMAX,:,1:JMAX,L1:L2)           TRANS4B.112   
         TRANLG2(I1:I2,:,1:JMAX,1:LMAX,:)=                                 TRANS4B.113   
     &        TRANLG3(1:IMAX,:,1:JMAX,L1:L2,:)                             TRANS4B.114   
      ELSE                                                                 TRANS4B.115   
         !---------------------------------------------------              TRANS4B.116   
         ! One processor option                                            TRANS4B.117   
         !---------------------------------------------------              TRANS4B.118   
         DO L=1,NL                                                         TRANS4B.119   
            DO J=1,JGy                                                     TRANS4B.120   
               DO IHEM=1,NHEM                                              TRANS4B.121   
                  DO I=1,MG                                                TRANS4B.122   
                     TNLG2(I,IHEM,J,L)=TNLG3(I,IHEM,J,L)                   TRANS4B.123   
                     FUG2(I,IHEM,J,L) =FUG3(I,IHEM,J,L)                    TRANS4B.124   
                     FVG2(I,IHEM,J,L) =FVG3(I,IHEM,J,L)                    TRANS4B.125   
                     DO ITRAC=1,NTRAC                                      TRANS4B.126   
                        TRANLG2(I,IHEM,J,L,ITRAC)=                         TRANS4B.127   
     &                       TRANLG3(I,IHEM,J,L,ITRAC)                     TRANS4B.128   
                     ENDDO                                                 TRANS4B.129   
                  ENDDO                                                    TRANS4B.130   
               ENDDO                                                       TRANS4B.131   
            ENDDO                                                          TRANS4B.132   
         ENDDO                                                             TRANS4B.133   
      ENDIF                                                                TRANS4B.134   
      END                                                                  TRANS4B.135   
*ENDIF                                                                     TRANS4B.136   
*ENDIF                                                                     TRANS4B.137   
*DECK TRANS5                                                               TRANS5.1     
*IF DEF,NOMPI                                                              TRANS5.2     
*ELSE                                                                      TRANS5.3     
!=====================================================                     TRANS5.4     
! Transposing the half transforms so that the latitudes are                TRANS5.5     
! complete (so that this dimension is ready to be transformed              TRANS5.6     
! to meriodonal wavenumbers in the source terms for the spectral           TRANS5.7     
! coefficients (e.g. ZT) in both LTD and HANALV). Instead the              TRANS5.8     
! zonal wavenumbers are split across the rows of PEs.                      TRANS5.9     
!=====================================================                     TRANS5.10    
*IF DEF,ABOVE_V1                                                           TRANS5.11    
      SUBROUTINE TRANS5(SPG,VPG,EG,TNLG,TRANLG,FUG,FVG,                    TRANS5.12    
     &     UTG,UTRAG,VTG,VTRAG)                                            TRANS5.13    
*ELSE                                                                      TRANS5.14    
      SUBROUTINE TRANS5(SPG,VPG,EG,TNLG,FUG,FVG,                           TRANS5.15    
     &     UTG,VTG)                                                        TRANS5.16    
*ENDIF                                                                     TRANS5.17    
      IMPLICIT NONE                                                        TRANS5.18    
*CALL PARAM1                                                               TRANS5.19    
*CALL PARAM2                                                               TRANS5.20    
*CALL PARAM3                                                               TRANS5.21    
*CALL GRIDPA2                                                              TRANS5.22    
*CALL GRIDPB2                                                              TRANS5.23    
*CALL MPIDECK                                                              TRANS5.24    
!-----------------------------------------------------                     TRANS5.25    
! Passed variables - these are the variables in common block               TRANS5.26    
! GRIDP but defined as REALs, instead of COMPLEXs.                         TRANS5.27    
!-----------------------------------------------------                     TRANS5.28    
      REAL :: SPG(4*MMTy,NHEM,JG)                                          TRANS5.29    
      REAL :: VPG(4*MMTy,NHEM,JG)                                          TRANS5.30    
      REAL :: EG(4*MMTy,NHEM,JG,NLx)                                       TRANS5.31    
      REAL :: TNLG(4*MMTy,NHEM,JG,NLx)                                     TRANS5.32    
      REAL :: FUG(4*MMTy,NHEM,JG,NLx)                                      TRANS5.33    
      REAL :: FVG(4*MMTy,NHEM,JG,NLx)                                      TRANS5.34    
      REAL :: UTG(4*MMTy,NHEM,JG,NLx)                                      TRANS5.35    
      REAL :: VTG(4*MMTy,NHEM,JG,NLx)                                      TRANS5.36    
      REAL :: FVGT(4*MMTy,NHEM,JG,NLx)                                     TRANS5.37    
      REAL :: FUGT(4*MMTy,NHEM,JG,NLx)                                     TRANS5.38    
*IF DEF,ABOVE_V1                                                           TRANS5.39    
      REAL :: TRANLG(4*MMTy,NHEM,JG,NLx,NTRAC)                             TRANS5.40    
      REAL :: UTRAG(4*MMTy,NHEM,JG,NLx,NTRAC)                              TRANS5.41    
      REAL :: VTRAG(4*MMTy,NHEM,JG,NLx,NTRAC)                              TRANS5.42    
*ENDIF                                                                     TRANS5.43    
!-----------------------------------------------------                     TRANS5.44    
! Local variables                                                          TRANS5.45    
!-----------------------------------------------------                     TRANS5.46    
      INTEGER, PARAMETER :: TagRef=18000                                   TRANS5.47    
      REAL :: HoldVar1(4*MMTy,NHEM,JGy,NLx,6+3*NTRAC)                      TRANS5.48    
      REAL :: HoldVar2(4*MMTy,NHEM,JGy,2)                                  TRANS5.49    
      INTEGER :: iPe                                                       TRANS5.50    
      INTEGER :: iRow2                                                     TRANS5.51    
      INTEGER :: IMMAX, JMAX, LMAX                                         TRANS5.52    
      INTEGER :: IM1, IM2, IM3, IM4                                        TRANS5.53    
      INTEGER :: J1, J2                                                    TRANS5.54    
! Loop variables                                                           TRANS5.55    
      INTEGER :: I, IHEM, IM, ITRAC, J, K, L                               TRANS5.56    
!-----------------------------------------------------                     TRANS5.57    
! Transpose                                                                TRANS5.58    
!-----------------------------------------------------                     TRANS5.59    
      IF (NPE.GT.1) THEN                                                   TRANS5.60    
         DO iRow2=1,Py                                                     TRANS5.61    
            iPe=PeGrid(iCol,iRow2)                                         TRANS5.62    
            IF (iPe.NE.MyPe) THEN                                          TRANS5.63    
               !-----------------------------------------------------      TRANS5.64    
               ! Store multi-layer variables in HoldVar1                   TRANS5.65    
               !-----------------------------------------------------      TRANS5.66    
               IMMAX=2*MMTyy(iRow2)                                        TRANS5.67    
               IM1=2*MMT1(iRow2)                                           TRANS5.68    
               IM3=4*MMT-2*(MMT1(iRow2)+MMTyy(iRow2))                      TRANS5.69    
               DO L=1,NLxx(iCol)                                           TRANS5.70    
                  DO J=1,JGyy(iRow)                                        TRANS5.71    
                     DO IHEM=1,NHEM                                        TRANS5.72    
                        DO I=1,IMMAX                                       TRANS5.73    
                           HoldVar1(I,IHEM,J,L,1)=EG2(IM1+I,IHEM,J,L)      TRANS5.74    
                        ENDDO                                              TRANS5.75    
                        DO I=1,IMMAX                                       TRANS5.76    
                           HoldVar1(IMMAX+I,IHEM,J,L,1)=                   TRANS5.77    
     &                          EG2(IM3+I,IHEM,J,L)                        TRANS5.78    
                        ENDDO                                              TRANS5.79    
                     ENDDO                                                 TRANS5.80    
                  ENDDO                                                    TRANS5.81    
               ENDDO                                                       TRANS5.82    
               DO L=1,NLxx(iCol)                                           TRANS5.83    
                  DO J=1,JGyy(iRow)                                        TRANS5.84    
                     DO IHEM=1,NHEM                                        TRANS5.85    
                        DO I=1,IMMAX                                       TRANS5.86    
                           HoldVar1(I,IHEM,J,L,2)=TNLG2(IM1+I,IHEM,J,L)    TRANS5.87    
                        ENDDO                                              TRANS5.88    
                        DO I=1,IMMAX                                       TRANS5.89    
                           HoldVar1(IMMAX+I,IHEM,J,L,2)=                   TRANS5.90    
     &                          TNLG2(IM3+I,IHEM,J,L)                      TRANS5.91    
                        ENDDO                                              TRANS5.92    
                     ENDDO                                                 TRANS5.93    
                  ENDDO                                                    TRANS5.94    
               ENDDO                                                       TRANS5.95    
               DO L=1,NLxx(iCol)                                           TRANS5.96    
                  DO J=1,JGyy(iRow)                                        TRANS5.97    
                     DO IHEM=1,NHEM                                        TRANS5.98    
                        DO I=1,IMMAX                                       TRANS5.99    
                           HoldVar1(I,IHEM,J,L,3)=FUG2(IM1+I,IHEM,J,L)     TRANS5.100   
                        ENDDO                                              TRANS5.101   
                        DO I=1,IMMAX                                       TRANS5.102   
                           HoldVar1(IMMAX+I,IHEM,J,L,3)=                   TRANS5.103   
     &                          FUG2(IM3+I,IHEM,J,L)                       TRANS5.104   
                        ENDDO                                              TRANS5.105   
                     ENDDO                                                 TRANS5.106   
                  ENDDO                                                    TRANS5.107   
               ENDDO                                                       TRANS5.108   
               DO L=1,NLxx(iCol)                                           TRANS5.109   
                  DO J=1,JGyy(iRow)                                        TRANS5.110   
                     DO IHEM=1,NHEM                                        TRANS5.111   
                        DO I=1,IMMAX                                       TRANS5.112   
                           HoldVar1(I,IHEM,J,L,4)=FVG2(IM1+I,IHEM,J,L)     TRANS5.113   
                        ENDDO                                              TRANS5.114   
                        DO I=1,IMMAX                                       TRANS5.115   
                           HoldVar1(IMMAX+I,IHEM,J,L,4)=                   TRANS5.116   
     &                          FVG2(IM3+I,IHEM,J,L)                       TRANS5.117   
                        ENDDO                                              TRANS5.118   
                     ENDDO                                                 TRANS5.119   
                  ENDDO                                                    TRANS5.120   
               ENDDO                                                       TRANS5.121   
               DO L=1,NLxx(iCol)                                           TRANS5.122   
                  DO J=1,JGyy(iRow)                                        TRANS5.123   
                     DO IHEM=1,NHEM                                        TRANS5.124   
                        DO I=1,IMMAX                                       TRANS5.125   
                           HoldVar1(I,IHEM,J,L,5)=UTG2(IM1+I,IHEM,J,L)     TRANS5.126   
                        ENDDO                                              TRANS5.127   
                        DO I=1,IMMAX                                       TRANS5.128   
                           HoldVar1(IMMAX+I,IHEM,J,L,5)=                   TRANS5.129   
     &                          UTG2(IM3+I,IHEM,J,L)                       TRANS5.130   
                        ENDDO                                              TRANS5.131   
                     ENDDO                                                 TRANS5.132   
                  ENDDO                                                    TRANS5.133   
               ENDDO                                                       TRANS5.134   
               DO L=1,NLxx(iCol)                                           TRANS5.135   
                  DO J=1,JGyy(iRow)                                        TRANS5.136   
                     DO IHEM=1,NHEM                                        TRANS5.137   
                        DO I=1,IMMAX                                       TRANS5.138   
                           HoldVar1(I,IHEM,J,L,6)=VTG2(IM1+I,IHEM,J,L)     TRANS5.139   
                        ENDDO                                              TRANS5.140   
                        DO I=1,IMMAX                                       TRANS5.141   
                           HoldVar1(IMMAX+I,IHEM,J,L,6)=                   TRANS5.142   
     &                          VTG2(IM3+I,IHEM,J,L)                       TRANS5.143   
                        ENDDO                                              TRANS5.144   
                     ENDDO                                                 TRANS5.145   
                  ENDDO                                                    TRANS5.146   
               ENDDO                                                       TRANS5.147   
*IF DEF,ABOVE_V1                                                           TRANS5.148   
               DO ITRAC=1,NTRAC                                            TRANS5.149   
                  DO L=1,NLxx(iCol)                                        TRANS5.150   
                     DO J=1,JGyy(iRow)                                     TRANS5.151   
                        DO IHEM=1,NHEM                                     TRANS5.152   
                           DO I=1,IMMAX                                    TRANS5.153   
                              HoldVar1(I,IHEM,J,L,6+ITRAC)=                TRANS5.154   
     &                             TRANLG2(IM1+I,IHEM,J,L,ITRAC)           TRANS5.155   
                           ENDDO                                           TRANS5.156   
                           DO I=1,IMMAX                                    TRANS5.157   
                              HoldVar1(IMMAX+I,IHEM,J,L,6+ITRAC)=          TRANS5.158   
     &                             TRANLG2(IM3+I,IHEM,J,L,ITRAC)           TRANS5.159   
                           ENDDO                                           TRANS5.160   
                        ENDDO                                              TRANS5.161   
                     ENDDO                                                 TRANS5.162   
                  ENDDO                                                    TRANS5.163   
               ENDDO                                                       TRANS5.164   
               DO ITRAC=1,NTRAC                                            TRANS5.165   
                  DO L=1,NLxx(iCol)                                        TRANS5.166   
                     DO J=1,JGyy(iRow)                                     TRANS5.167   
                        DO IHEM=1,NHEM                                     TRANS5.168   
                           DO I=1,IMMAX                                    TRANS5.169   
                              HoldVar1(I,IHEM,J,L,6+NTRAC+ITRAC)=          TRANS5.170   
     &                             UTRAG2(IM1+I,IHEM,J,L,ITRAC)            TRANS5.171   
                           ENDDO                                           TRANS5.172   
                           DO I=1,IMMAX                                    TRANS5.173   
                              HoldVar1(IMMAX+I,IHEM,J,L,6+NTRAC+ITRAC)=    TRANS5.174   
     &                             UTRAG2(IM3+I,IHEM,J,L,ITRAC)            TRANS5.175   
                           ENDDO                                           TRANS5.176   
                        ENDDO                                              TRANS5.177   
                     ENDDO                                                 TRANS5.178   
                  ENDDO                                                    TRANS5.179   
               ENDDO                                                       TRANS5.180   
               DO ITRAC=1,NTRAC                                            TRANS5.181   
                  DO L=1,NLxx(iCol)                                        TRANS5.182   
                     DO J=1,JGyy(iRow)                                     TRANS5.183   
                        DO IHEM=1,NHEM                                     TRANS5.184   
                           DO I=1,IMMAX                                    TRANS5.185   
                              HoldVar1(I,IHEM,J,L,6+2*NTRAC+ITRAC)=        TRANS5.186   
     &                             VTRAG2(IM1+I,IHEM,J,L,ITRAC)            TRANS5.187   
                           ENDDO                                           TRANS5.188   
                           DO I=1,IMMAX                                    TRANS5.189   
                              HoldVar1(IMMAX+I,IHEM,J,L,6+2*NTRAC+ITRAC)   TRANS5.190   
     &                          =VTRAG2(IM3+I,IHEM,J,L,ITRAC)              TRANS5.191   
                           ENDDO                                           TRANS5.192   
                        ENDDO                                              TRANS5.193   
                     ENDDO                                                 TRANS5.194   
                  ENDDO                                                    TRANS5.195   
               ENDDO                                                       TRANS5.196   
*ENDIF                                                                     TRANS5.197   
               !-----------------------------------------------------      TRANS5.198   
               ! Send message                                              TRANS5.199   
               !-----------------------------------------------------      TRANS5.200   
               iRecv=iPe                                                   TRANS5.201   
               nBuffSize=(6+3*NTRAC)*4*MMTy*NHEM*JGy*NLx                   TRANS5.202   
               iTag=TagRef+100*iRow+10*iRow2+iCol                          TRANS5.203   
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS5.204   
     &              MPI_COMM_WORLD,ierr)                                   TRANS5.205   
            ENDIF                                                          TRANS5.206   
         ENDDO                                                             TRANS5.207   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS5.208   
         !-----------------------------------------------------            TRANS5.209   
         ! Loop over PEs on this column                                    TRANS5.210   
         !-----------------------------------------------------            TRANS5.211   
         DO iRow2=1,Py                                                     TRANS5.212   
            iPe=PeGrid(iCol,iRow2)                                         TRANS5.213   
            IF (iPe.NE.MyPe) THEN                                          TRANS5.214   
               !-----------------------------------------------------      TRANS5.215   
               ! Receive message                                           TRANS5.216   
               !-----------------------------------------------------      TRANS5.217   
               iSend=iPe                                                   TRANS5.218   
               nBuffSize=(6+3*NTRAC)*4*MMTy*NHEM*JGy*NLx                   TRANS5.219   
               iTag=TagRef+100*iRow2+10*iRow+iCol                          TRANS5.220   
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS5.221   
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS5.222   
               !-----------------------------------------------------      TRANS5.223   
               ! Write to EG etc                                           TRANS5.224   
               !-----------------------------------------------------      TRANS5.225   
               IMMAX=4*MMTyy(iRow)                                         TRANS5.226   
               JMAX=JGyy(iRow2)                                            TRANS5.227   
               LMAX=NLxx(iCol)                                             TRANS5.228   
               J1=JJ1(iRow2)+1                                             TRANS5.229   
               J2=JJ1(iRow2)+JGyy(iRow2)                                   TRANS5.230   
               EG(1:IMMAX,:,J1:J2,1:LMAX)=                                 TRANS5.231   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,1)                    TRANS5.232   
               TNLG(1:IMMAX,:,J1:J2,1:LMAX)=                               TRANS5.233   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,2)                    TRANS5.234   
               FUG(1:IMMAX,:,J1:J2,1:LMAX)=                                TRANS5.235   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,3)                    TRANS5.236   
               FVG(1:IMMAX,:,J1:J2,1:LMAX)=                                TRANS5.237   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,4)                    TRANS5.238   
               UTG(1:IMMAX,:,J1:J2,1:LMAX)=                                TRANS5.239   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,5)                    TRANS5.240   
               VTG(1:IMMAX,:,J1:J2,1:LMAX)=                                TRANS5.241   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,6)                    TRANS5.242   
*IF DEF,ABOVE_V1                                                           TRANS5.243   
               TRANLG(1:IMMAX,:,J1:J2,1:LMAX,:)=                           TRANS5.244   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,7:6+NTRAC)            TRANS5.245   
               UTRAG(1:IMMAX,:,J1:J2,1:LMAX,:)=                            TRANS5.246   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,7+NTRAC:6+2*NTRAC)    TRANS5.247   
               VTRAG(1:IMMAX,:,J1:J2,1:LMAX,:)=                            TRANS5.248   
     &            HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,7+2*NTRAC:6+3*NTRAC)    TRANS5.249   
*ENDIF                                                                     TRANS5.250   
            ENDIF                                                          TRANS5.251   
         ENDDO                                                             TRANS5.252   
         !-----------------------------------------------------            TRANS5.253   
         ! Data is already contained on this PE                            TRANS5.254   
         !-----------------------------------------------------            TRANS5.255   
         IMMAX=2*MMTyy(iRow)                                               TRANS5.256   
         IM1=2*MMT1(iRow)                                                  TRANS5.257   
         IM3=4*MMT-2*(MMT1(iRow)+MMTyy(iRow))                              TRANS5.258   
         J1=JJ1(iRow)                                                      TRANS5.259   
         DO L=1,NLxx(iCol)                                                 TRANS5.260   
            DO J=1,JGyy(iRow)                                              TRANS5.261   
               DO IHEM=1,NHEM                                              TRANS5.262   
                  DO I=1,IMMAX                                             TRANS5.263   
                     EG(I,IHEM,J1+J,L)=EG2(IM1+I,IHEM,J,L)                 TRANS5.264   
                  ENDDO                                                    TRANS5.265   
                  DO I=1,IMMAX                                             TRANS5.266   
                     EG(IMMAX+I,IHEM,J1+J,L)=EG2(IM3+I,IHEM,J,L)           TRANS5.267   
                  ENDDO                                                    TRANS5.268   
               ENDDO                                                       TRANS5.269   
            ENDDO                                                          TRANS5.270   
         ENDDO                                                             TRANS5.271   
         DO L=1,NLxx(iCol)                                                 TRANS5.272   
            DO J=1,JGyy(iRow)                                              TRANS5.273   
               DO IHEM=1,NHEM                                              TRANS5.274   
                  DO I=1,IMMAX                                             TRANS5.275   
                     TNLG(I,IHEM,J1+J,L)=TNLG2(IM1+I,IHEM,J,L)             TRANS5.276   
                  ENDDO                                                    TRANS5.277   
                  DO I=1,IMMAX                                             TRANS5.278   
                     TNLG(IMMAX+I,IHEM,J1+J,L)=TNLG2(IM3+I,IHEM,J,L)       TRANS5.279   
                  ENDDO                                                    TRANS5.280   
               ENDDO                                                       TRANS5.281   
            ENDDO                                                          TRANS5.282   
         ENDDO                                                             TRANS5.283   
         DO L=1,NLxx(iCol)                                                 TRANS5.284   
            DO J=1,JGyy(iRow)                                              TRANS5.285   
               DO IHEM=1,NHEM                                              TRANS5.286   
                  DO I=1,IMMAX                                             TRANS5.287   
                     FUG(I,IHEM,J1+J,L)=FUG2(IM1+I,IHEM,J,L)               TRANS5.288   
                  ENDDO                                                    TRANS5.289   
                  DO I=1,IMMAX                                             TRANS5.290   
                     FUG(IMMAX+I,IHEM,J1+J,L)=FUG2(IM3+I,IHEM,J,L)         TRANS5.291   
                  ENDDO                                                    TRANS5.292   
               ENDDO                                                       TRANS5.293   
            ENDDO                                                          TRANS5.294   
         ENDDO                                                             TRANS5.295   
         DO L=1,NLxx(iCol)                                                 TRANS5.296   
            DO J=1,JGyy(iRow)                                              TRANS5.297   
               DO IHEM=1,NHEM                                              TRANS5.298   
                  DO I=1,IMMAX                                             TRANS5.299   
                     FVG(I,IHEM,J1+J,L)=FVG2(IM1+I,IHEM,J,L)               TRANS5.300   
                  ENDDO                                                    TRANS5.301   
                  DO I=1,IMMAX                                             TRANS5.302   
                     FVG(IMMAX+I,IHEM,J1+J,L)=FVG2(IM3+I,IHEM,J,L)         TRANS5.303   
                  ENDDO                                                    TRANS5.304   
               ENDDO                                                       TRANS5.305   
            ENDDO                                                          TRANS5.306   
         ENDDO                                                             TRANS5.307   
         DO L=1,NLxx(iCol)                                                 TRANS5.308   
            DO J=1,JGyy(iRow)                                              TRANS5.309   
               DO IHEM=1,NHEM                                              TRANS5.310   
                  DO I=1,IMMAX                                             TRANS5.311   
                     UTG(I,IHEM,J1+J,L)=UTG2(IM1+I,IHEM,J,L)               TRANS5.312   
                  ENDDO                                                    TRANS5.313   
                  DO I=1,IMMAX                                             TRANS5.314   
                     UTG(IMMAX+I,IHEM,J1+J,L)=UTG2(IM3+I,IHEM,J,L)         TRANS5.315   
                  ENDDO                                                    TRANS5.316   
               ENDDO                                                       TRANS5.317   
            ENDDO                                                          TRANS5.318   
         ENDDO                                                             TRANS5.319   
         DO L=1,NLxx(iCol)                                                 TRANS5.320   
            DO J=1,JGyy(iRow)                                              TRANS5.321   
               DO IHEM=1,NHEM                                              TRANS5.322   
                  DO I=1,IMMAX                                             TRANS5.323   
                     VTG(I,IHEM,J1+J,L)=VTG2(IM1+I,IHEM,J,L)               TRANS5.324   
                  ENDDO                                                    TRANS5.325   
                  DO I=1,IMMAX                                             TRANS5.326   
                     VTG(IMMAX+I,IHEM,J1+J,L)=VTG2(IM3+I,IHEM,J,L)         TRANS5.327   
                  ENDDO                                                    TRANS5.328   
               ENDDO                                                       TRANS5.329   
            ENDDO                                                          TRANS5.330   
         ENDDO                                                             TRANS5.331   
*IF DEF,ABOVE_V1                                                           TRANS5.332   
         DO ITRAC=1,NTRAC                                                  TRANS5.333   
            DO L=1,NLxx(iCol)                                              TRANS5.334   
               DO J=1,JGyy(iRow)                                           TRANS5.335   
                  DO IHEM=1,NHEM                                           TRANS5.336   
                     DO I=1,IMMAX                                          TRANS5.337   
                        TRANLG(I,IHEM,J1+J,L,ITRAC)=                       TRANS5.338   
     &                       TRANLG2(IM1+I,IHEM,J,L,ITRAC)                 TRANS5.339   
                     ENDDO                                                 TRANS5.340   
                     DO I=1,IMMAX                                          TRANS5.341   
                        TRANLG(IMMAX+I,IHEM,J1+J,L,ITRAC)=                 TRANS5.342   
     &                       TRANLG2(IM3+I,IHEM,J,L,ITRAC)                 TRANS5.343   
                     ENDDO                                                 TRANS5.344   
                  ENDDO                                                    TRANS5.345   
               ENDDO                                                       TRANS5.346   
            ENDDO                                                          TRANS5.347   
         ENDDO                                                             TRANS5.348   
         DO ITRAC=1,NTRAC                                                  TRANS5.349   
            DO L=1,NLxx(iCol)                                              TRANS5.350   
               DO J=1,JGyy(iRow)                                           TRANS5.351   
                  DO IHEM=1,NHEM                                           TRANS5.352   
                     DO I=1,IMMAX                                          TRANS5.353   
                        UTRAG(I,IHEM,J1+J,L,ITRAC)=                        TRANS5.354   
     &                       UTRAG2(IM1+I,IHEM,J,L,ITRAC)                  TRANS5.355   
                     ENDDO                                                 TRANS5.356   
                     DO I=1,IMMAX                                          TRANS5.357   
                        UTRAG(IMMAX+I,IHEM,J1+J,L,ITRAC)=                  TRANS5.358   
     &                       UTRAG2(IM3+I,IHEM,J,L,ITRAC)                  TRANS5.359   
                     ENDDO                                                 TRANS5.360   
                  ENDDO                                                    TRANS5.361   
               ENDDO                                                       TRANS5.362   
            ENDDO                                                          TRANS5.363   
         ENDDO                                                             TRANS5.364   
         DO ITRAC=1,NTRAC                                                  TRANS5.365   
            DO L=1,NLxx(iCol)                                              TRANS5.366   
               DO J=1,JGyy(iRow)                                           TRANS5.367   
                  DO IHEM=1,NHEM                                           TRANS5.368   
                     DO I=1,IMMAX                                          TRANS5.369   
                        VTRAG(I,IHEM,J1+J,L,ITRAC)=                        TRANS5.370   
     &                       VTRAG2(IM1+I,IHEM,J,L,ITRAC)                  TRANS5.371   
                     ENDDO                                                 TRANS5.372   
                     DO I=1,IMMAX                                          TRANS5.373   
                        VTRAG(IMMAX+I,IHEM,J1+J,L,ITRAC)=                  TRANS5.374   
     &                       VTRAG2(IM3+I,IHEM,J,L,ITRAC)                  TRANS5.375   
                     ENDDO                                                 TRANS5.376   
                  ENDDO                                                    TRANS5.377   
               ENDDO                                                       TRANS5.378   
            ENDDO                                                          TRANS5.379   
         ENDDO                                                             TRANS5.380   
*ENDIF                                                                     TRANS5.381   
         !-----------------------------------------------------            TRANS5.382   
         ! Single layer variables are only stored on first                 TRANS5.383   
         ! column.                                                         TRANS5.384   
         !-----------------------------------------------------            TRANS5.385   
         IF (iCol.EQ.1) THEN                                               TRANS5.386   
            DO iRow2=1,Py                                                  TRANS5.387   
               iPe=PeGrid(1,iRow2)                                         TRANS5.388   
               IF (iPe.NE.MyPe) THEN                                       TRANS5.389   
                  IMMAX=2*MMTyy(iRow2)                                     TRANS5.390   
                  IM1=2*MMT1(iRow2)                                        TRANS5.391   
                  IM3=4*MMT-2*(MMT1(iRow2)+MMTyy(iRow2))                   TRANS5.392   
                  DO J=1,JGyy(iRow)                                        TRANS5.393   
                     DO IHEM=1,NHEM                                        TRANS5.394   
                        DO I=1,IMMAX                                       TRANS5.395   
                           HoldVar2(I,IHEM,J,1)=SPG2(IM1+I,IHEM,J)         TRANS5.396   
                        ENDDO                                              TRANS5.397   
                        DO I=1,IMMAX                                       TRANS5.398   
                           HoldVar2(IMMAX+I,IHEM,J,1)=SPG2(IM3+I,IHEM,J)   TRANS5.399   
                        ENDDO                                              TRANS5.400   
                     ENDDO                                                 TRANS5.401   
                  ENDDO                                                    TRANS5.402   
                  DO J=1,JGyy(iRow)                                        TRANS5.403   
                     DO IHEM=1,NHEM                                        TRANS5.404   
                        DO I=1,IMMAX                                       TRANS5.405   
                           HoldVar2(I,IHEM,J,2)=VPG2(IM1+I,IHEM,J)         TRANS5.406   
                        ENDDO                                              TRANS5.407   
                        DO I=1,IMMAX                                       TRANS5.408   
                           HoldVar2(IMMAX+I,IHEM,J,2)=VPG2(IM3+I,IHEM,J)   TRANS5.409   
                        ENDDO                                              TRANS5.410   
                     ENDDO                                                 TRANS5.411   
                  ENDDO                                                    TRANS5.412   
                  !----------------------------------------------------    TRANS5.413   
                  ! Send message                                           TRANS5.414   
                  !----------------------------------------------------    TRANS5.415   
                  iRecv=iPe                                                TRANS5.416   
                  nBuffSize=8*MMTy*NHEM*JGy                                TRANS5.417   
                  iTag=TagRef+1001+100*iRow+10*iRow2                       TRANS5.418   
                  CALL MPI_BSEND(HoldVar2,nBuffSize,ParaReal,iRecv         TRANS5.419   
     &                 ,iTag,MPI_COMM_WORLD,ierr)                          TRANS5.420   
               ENDIF                                                       TRANS5.421   
            ENDDO                                                          TRANS5.422   
            !-----------------------------------------------------         TRANS5.423   
            ! Receive data                                                 TRANS5.424   
            !-----------------------------------------------------         TRANS5.425   
            DO iRow2=1,Py                                                  TRANS5.426   
               iPe=PeGrid(1,iRow2)                                         TRANS5.427   
               IF (iPe.NE.MyPe) THEN                                       TRANS5.428   
                  iSend=iPe                                                TRANS5.429   
                  nBuffSize=8*MMTy*NHEM*JGy                                TRANS5.430   
                  iTag=TagRef+1001+100*iRow2+10*iRow                       TRANS5.431   
                  CALL MPI_RECV(HoldVar2,nBuffSize,ParaReal,iSend,iTag     TRANS5.432   
     &                 ,MPI_COMM_WORLD,istat,ierr)                         TRANS5.433   
                  !----------------------------------------------------    TRANS5.434   
                  ! Write into arrays                                      TRANS5.435   
                  !----------------------------------------------------    TRANS5.436   
                  IMMAX=4*MMTyy(iRow)                                      TRANS5.437   
                  JMAX=JGyy(iRow2)                                         TRANS5.438   
                  J1=JJ1(iRow2)+1                                          TRANS5.439   
                  J2=JJ1(iRow2)+JGyy(iRow2)                                TRANS5.440   
                  SPG(1:IMMAX,:,J1:J2)=HoldVar2(1:IMMAX,:,1:JMAX,1)        TRANS5.441   
                  VPG(1:IMMAX,:,J1:J2)=HoldVar2(1:IMMAX,:,1:JMAX,2)        TRANS5.442   
               ENDIF                                                       TRANS5.443   
            ENDDO                                                          TRANS5.444   
            !-----------------------------------------------------         TRANS5.445   
            ! Data is already stored on this PE                            TRANS5.446   
            !-----------------------------------------------------         TRANS5.447   
            IMMAX=2*MMTyy(iRow)                                            TRANS5.448   
            IM1=2*MMT1(iRow)                                               TRANS5.449   
            IM3=4*MMT-2*(MMT1(iRow)+MMTyy(iRow))                           TRANS5.450   
            J1=JJ1(iRow)                                                   TRANS5.451   
            DO J=1,JGyy(iRow)                                              TRANS5.452   
               DO IHEM=1,NHEM                                              TRANS5.453   
                  DO I=1,IMMAX                                             TRANS5.454   
                     SPG(I,IHEM,J1+J)=SPG2(IM1+I,IHEM,J)                   TRANS5.455   
                  ENDDO                                                    TRANS5.456   
                  DO I=1,IMMAX                                             TRANS5.457   
                     SPG(IMMAX+I,IHEM,J1+J)=SPG2(IM3+I,IHEM,J)             TRANS5.458   
                  ENDDO                                                    TRANS5.459   
               ENDDO                                                       TRANS5.460   
            ENDDO                                                          TRANS5.461   
            DO J=1,JGyy(iRow)                                              TRANS5.462   
               DO IHEM=1,NHEM                                              TRANS5.463   
                  DO I=1,IMMAX                                             TRANS5.464   
                     VPG(I,IHEM,J1+J)=VPG2(IM1+I,IHEM,J)                   TRANS5.465   
                  ENDDO                                                    TRANS5.466   
                  DO I=1,IMMAX                                             TRANS5.467   
                     VPG(IMMAX+I,IHEM,J1+J)=VPG2(IM3+I,IHEM,J)             TRANS5.468   
                  ENDDO                                                    TRANS5.469   
               ENDDO                                                       TRANS5.470   
            ENDDO                                                          TRANS5.471   
         ENDIF                                                             TRANS5.472   
      ELSE                                                                 TRANS5.473   
         !-----------------------------------------------------            TRANS5.474   
         ! One processor option                                            TRANS5.475   
         !-----------------------------------------------------            TRANS5.476   
         EG(:,:,:,:)=0.0                                                   TRANS5.477   
         TNLG(:,:,:,:)=0.0                                                 TRANS5.478   
         FUG(:,:,:,:)=0.0                                                  TRANS5.479   
         FVG(:,:,:,:)=0.0                                                  TRANS5.480   
         UTG(:,:,:,:)=0.0                                                  TRANS5.481   
         VTG(:,:,:,:)=0.0                                                  TRANS5.482   
*IF DEF,ABOVE_V1                                                           TRANS5.483   
         TRANLG(:,:,:,:,:)=0.0                                             TRANS5.484   
         UTRAG(:,:,:,:,:)=0.0                                              TRANS5.485   
         VTRAG(:,:,:,:,:)=0.0                                              TRANS5.486   
*ENDIF                                                                     TRANS5.487   
         DO L=1,NL                                                         TRANS5.488   
            DO J=1,JG                                                      TRANS5.489   
               DO IHEM=1,NHEM                                              TRANS5.490   
                  DO I=1,4*MMTy                                            TRANS5.491   
                     EG(I,IHEM,J,L)  =EG2(I,IHEM,J,L)                      TRANS5.492   
                     TNLG(I,IHEM,J,L)=TNLG2(I,IHEM,J,L)                    TRANS5.493   
                     FUG(I,IHEM,J,L) =FUG2(I,IHEM,J,L)                     TRANS5.494   
                     FVG(I,IHEM,J,L) =FVG2(I,IHEM,J,L)                     TRANS5.495   
                     UTG(I,IHEM,J,L) =UTG2(I,IHEM,J,L)                     TRANS5.496   
                     VTG(I,IHEM,J,L) =VTG2(I,IHEM,J,L)                     TRANS5.497   
*IF DEF,ABOVE_V1                                                           TRANS5.498   
                     DO ITRAC=1,NTRAC                                      TRANS5.499   
                        TRANLG(I,IHEM,J,L,ITRAC)=                          TRANS5.500   
     &                       TRANLG2(I,IHEM,J,L,ITRAC)                     TRANS5.501   
                        UTRAG(I,IHEM,J,L,ITRAC)=                           TRANS5.502   
     &                       UTRAG2(I,IHEM,J,L,ITRAC)                      TRANS5.503   
                        VTRAG(I,IHEM,J,L,ITRAC)=                           TRANS5.504   
     &                       VTRAG2(I,IHEM,J,L,ITRAC)                      TRANS5.505   
                     ENDDO                                                 TRANS5.506   
*ENDIF                                                                     TRANS5.507   
                 ENDDO                                                     TRANS5.508   
               ENDDO                                                       TRANS5.509   
            ENDDO                                                          TRANS5.510   
         ENDDO                                                             TRANS5.511   
         SPG(:,:,:)=0.0                                                    TRANS5.512   
         VPG(:,:,:)=0.0                                                    TRANS5.513   
         DO J=1,JG                                                         TRANS5.514   
            DO IHEM=1,NHEM                                                 TRANS5.515   
               DO I=1,4*MMTy                                               TRANS5.516   
                  SPG(I,IHEM,J)=SPG2(I,IHEM,J)                             TRANS5.517   
                  VPG(I,IHEM,J)=VPG2(I,IHEM,J)                             TRANS5.518   
               ENDDO                                                       TRANS5.519   
            ENDDO                                                          TRANS5.520   
         ENDDO                                                             TRANS5.521   
      ENDIF                                                                TRANS5.522   
      END                                                                  TRANS5.523   
*ENDIF                                                                     TRANS5.524   
*DECK TRANS5A                                                              TRANS5A.1     
*IF DEF,ABOVE_V1                                                           TRANS5A.2     
*IF DEF,NOMPI                                                              TRANS5A.3     
*ELSE                                                                      TRANS5A.4     
!=====================================================                     TRANS5A.5     
! Transposing the half transforms so that the latitudes are                TRANS5A.6     
! complete (so that this dimension is ready to be transformed              TRANS5A.7     
! to meriodonal wavenumbers in the source terms for the spectral           TRANS5A.8     
! coefficients (e.g. ZT) in both LTD and HANALV). Instead the              TRANS5A.9     
! zonal wavenumbers are split across the rows of PEs.                      TRANS5A.10    
!=====================================================                     TRANS5A.11    
      SUBROUTINE TRANS5A(TRANLG)                                           TRANS5A.12    
      IMPLICIT NONE                                                        TRANS5A.13    
*CALL PARAM1                                                               TRANS5A.14    
*CALL PARAM2                                                               TRANS5A.15    
*CALL PARAM3                                                               TRANS5A.16    
*CALL GRIDPA2                                                              TRANS5A.17    
*CALL MPIDECK                                                              TRANS5A.18    
!-----------------------------------------------------                     TRANS5A.19    
! Passed variables - these are the variables in common block               TRANS5A.20    
! GRIDP but defined as REALs, instead of COMPLEXs.                         TRANS5A.21    
!-----------------------------------------------------                     TRANS5A.22    
      REAL :: TRANLG(4*MMTy,NHEM,JG,NLx,NTRAC)                             TRANS5A.23    
!-----------------------------------------------------                     TRANS5A.24    
! Local variables                                                          TRANS5A.25    
!-----------------------------------------------------                     TRANS5A.26    
      INTEGER, PARAMETER :: TagRef=20000                                   TRANS5A.27    
      REAL :: HoldVar1(4*MMTy,NHEM,JGy,NLx,NTRAC)                          TRANS5A.28    
      INTEGER :: iPe                                                       TRANS5A.29    
      INTEGER :: iRow2                                                     TRANS5A.30    
      INTEGER :: IMMAX, JMAX, LMAX                                         TRANS5A.31    
      INTEGER :: IM1, IM2, IM3, IM4                                        TRANS5A.32    
      INTEGER :: J1, J2                                                    TRANS5A.33    
! Loop variables                                                           TRANS5A.34    
      INTEGER :: I, IHEM, IM, ITRAC, J, K, L                               TRANS5A.35    
!-----------------------------------------------------                     TRANS5A.36    
! Transpose                                                                TRANS5A.37    
!-----------------------------------------------------                     TRANS5A.38    
      IF (NPE.GT.1) THEN                                                   TRANS5A.39    
         DO iRow2=1,Py                                                     TRANS5A.40    
            iPe=PeGrid(iCol,iRow2)                                         TRANS5A.41    
            IF (iPe.NE.MyPe) THEN                                          TRANS5A.42    
               !-----------------------------------------------------      TRANS5A.43    
               ! Store multi-layer variables in HoldVar1                   TRANS5A.44    
               !-----------------------------------------------------      TRANS5A.45    
               IMMAX=2*MMTyy(iRow2)                                        TRANS5A.46    
               IM1=2*MMT1(iRow2)                                           TRANS5A.47    
               IM3=4*MMT-2*(MMT1(iRow2)+MMTyy(iRow2))                      TRANS5A.48    
               DO ITRAC=1,NTRAC                                            TRANS5A.49    
                  DO L=1,NLxx(iCol)                                        TRANS5A.50    
                     DO J=1,JGyy(iRow)                                     TRANS5A.51    
                        DO IHEM=1,NHEM                                     TRANS5A.52    
                           DO I=1,IMMAX                                    TRANS5A.53    
                              HoldVar1(I,IHEM,J,L,ITRAC)=                  TRANS5A.54    
     &                             TRANLG2(IM1+I,IHEM,J,L,ITRAC)           TRANS5A.55    
                           ENDDO                                           TRANS5A.56    
                           DO I=1,IMMAX                                    TRANS5A.57    
                              HoldVar1(IMMAX+I,IHEM,J,L,ITRAC)=            TRANS5A.58    
     &                             TRANLG2(IM3+I,IHEM,J,L,ITRAC)           TRANS5A.59    
                           ENDDO                                           TRANS5A.60    
                        ENDDO                                              TRANS5A.61    
                     ENDDO                                                 TRANS5A.62    
                  ENDDO                                                    TRANS5A.63    
               ENDDO                                                       TRANS5A.64    
               !-----------------------------------------------------      TRANS5A.65    
               ! Send message                                              TRANS5A.66    
               !-----------------------------------------------------      TRANS5A.67    
               iRecv=iPe                                                   TRANS5A.68    
               nBuffSize=NTRAC*4*MMTy*NHEM*JGy*NLx                         TRANS5A.69    
               iTag=TagRef+100*iRow+10*iRow2+iCol                          TRANS5A.70    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS5A.71    
     &              MPI_COMM_WORLD,ierr)                                   TRANS5A.72    
            ENDIF                                                          TRANS5A.73    
         ENDDO                                                             TRANS5A.74    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS5A.75    
         !-----------------------------------------------------            TRANS5A.76    
         ! Loop over PEs on this column                                    TRANS5A.77    
         !-----------------------------------------------------            TRANS5A.78    
         DO iRow2=1,Py                                                     TRANS5A.79    
            iPe=PeGrid(iCol,iRow2)                                         TRANS5A.80    
            IF (iPe.NE.MyPe) THEN                                          TRANS5A.81    
               !-----------------------------------------------------      TRANS5A.82    
               ! Receive message                                           TRANS5A.83    
               !-----------------------------------------------------      TRANS5A.84    
               iSend=iPe                                                   TRANS5A.85    
               nBuffSize=NTRAC*4*MMTy*NHEM*JGy*NLx                         TRANS5A.86    
               iTag=TagRef+100*iRow2+10*iRow+iCol                          TRANS5A.87    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS5A.88    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS5A.89    
               !-----------------------------------------------------      TRANS5A.90    
               ! Write to TRANLG                                           TRANS5A.91    
               !-----------------------------------------------------      TRANS5A.92    
               IMMAX=4*MMTyy(iRow)                                         TRANS5A.93    
               JMAX=JGyy(iRow2)                                            TRANS5A.94    
               LMAX=NLxx(iCol)                                             TRANS5A.95    
               J1=JJ1(iRow2)+1                                             TRANS5A.96    
               J2=JJ1(iRow2)+JGyy(iRow2)                                   TRANS5A.97    
               TRANLG(1:IMMAX,:,J1:J2,1:LMAX,:)=                           TRANS5A.98    
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,:)                    TRANS5A.99    
            ENDIF                                                          TRANS5A.100   
         ENDDO                                                             TRANS5A.101   
         !-----------------------------------------------------            TRANS5A.102   
         ! Data is already contained on this PE                            TRANS5A.103   
         !-----------------------------------------------------            TRANS5A.104   
         IMMAX=2*MMTyy(iRow)                                               TRANS5A.105   
         IM1=2*MMT1(iRow)                                                  TRANS5A.106   
         IM3=4*MMT-2*(MMT1(iRow)+MMTyy(iRow))                              TRANS5A.107   
         J1=JJ1(iRow)                                                      TRANS5A.108   
         DO ITRAC=1,NTRAC                                                  TRANS5A.109   
            DO L=1,NLxx(iCol)                                              TRANS5A.110   
               DO J=1,JGyy(iRow)                                           TRANS5A.111   
                  DO IHEM=1,NHEM                                           TRANS5A.112   
                     DO I=1,IMMAX                                          TRANS5A.113   
                        TRANLG(I,IHEM,J1+J,L,ITRAC)=                       TRANS5A.114   
     &                       TRANLG2(IM1+I,IHEM,J,L,ITRAC)                 TRANS5A.115   
                     ENDDO                                                 TRANS5A.116   
                     DO I=1,IMMAX                                          TRANS5A.117   
                        TRANLG(IMMAX+I,IHEM,J1+J,L,ITRAC)=                 TRANS5A.118   
     &                       TRANLG2(IM3+I,IHEM,J,L,ITRAC)                 TRANS5A.119   
                     ENDDO                                                 TRANS5A.120   
                  ENDDO                                                    TRANS5A.121   
               ENDDO                                                       TRANS5A.122   
            ENDDO                                                          TRANS5A.123   
         ENDDO                                                             TRANS5A.124   
      ELSE                                                                 TRANS5A.125   
         !-----------------------------------------------------            TRANS5A.126   
         ! One processor option                                            TRANS5A.127   
         !-----------------------------------------------------            TRANS5A.128   
         TRANLG(:,:,:,:,:)=0.0                                             TRANS5A.129   
         DO L=1,NL                                                         TRANS5A.130   
            DO J=1,JG                                                      TRANS5A.131   
               DO IHEM=1,NHEM                                              TRANS5A.132   
                  DO I=1,4*MMTy                                            TRANS5A.133   
                     DO ITRAC=1,NTRAC                                      TRANS5A.134   
                        TRANLG(I,IHEM,J,L,ITRAC)=                          TRANS5A.135   
     &                       TRANLG2(I,IHEM,J,L,ITRAC)                     TRANS5A.136   
                     ENDDO                                                 TRANS5A.137   
                 ENDDO                                                     TRANS5A.138   
               ENDDO                                                       TRANS5A.139   
            ENDDO                                                          TRANS5A.140   
         ENDDO                                                             TRANS5A.141   
      ENDIF                                                                TRANS5A.142   
      END                                                                  TRANS5A.143   
*ENDIF                                                                     TRANS5A.144   
*ENDIF                                                                     TRANS5A.145   
*DECK TRANS5B                                                              TRANS5B.1     
*IF DEF,ABOVE_V1                                                           TRANS5B.2     
*IF DEF,NOMPI                                                              TRANS5B.3     
*ELSE                                                                      TRANS5B.4     
!=====================================================                     TRANS5B.5     
! Transposing the half transforms so that the latitudes are                TRANS5B.6     
! complete (so that this dimension is ready to be transformed              TRANS5B.7     
! to meriodonal wavenumbers in the source terms for the spectral           TRANS5B.8     
! coefficients (e.g. ZT) in both LTD and HANALV). Instead the              TRANS5B.9     
! zonal wavenumbers are split across the rows of PEs.                      TRANS5B.10    
!=====================================================                     TRANS5B.11    
      SUBROUTINE TRANS5B(TNLG,TRANLG,FUG,FVG)                              TRANS5B.12    
      IMPLICIT NONE                                                        TRANS5B.13    
*CALL PARAM1                                                               TRANS5B.14    
*CALL PARAM2                                                               TRANS5B.15    
*CALL PARAM3                                                               TRANS5B.16    
*CALL GRIDPA2                                                              TRANS5B.17    
*CALL MPIDECK                                                              TRANS5B.18    
!-----------------------------------------------------                     TRANS5B.19    
! Passed variables - these are the variables in common block               TRANS5B.20    
! GRIDP but defined as REALs, instead of COMPLEXs.                         TRANS5B.21    
!-----------------------------------------------------                     TRANS5B.22    
      REAL :: TNLG(4*MMTy,NHEM,JG,NLx)                                     TRANS5B.23    
      REAL :: FUG(4*MMTy,NHEM,JG,NLx)                                      TRANS5B.24    
      REAL :: FVG(4*MMTy,NHEM,JG,NLx)                                      TRANS5B.25    
      REAL :: TRANLG(4*MMTy,NHEM,JG,NLx,NTRAC)                             TRANS5B.26    
!-----------------------------------------------------                     TRANS5B.27    
! Local variables                                                          TRANS5B.28    
!-----------------------------------------------------                     TRANS5B.29    
      INTEGER, PARAMETER :: TagRef=21000                                   TRANS5B.30    
      REAL :: HoldVar1(4*MMTy,NHEM,JGy,NLx,3+NTRAC)                        TRANS5B.31    
      INTEGER :: iPe                                                       TRANS5B.32    
      INTEGER :: iRow2                                                     TRANS5B.33    
      INTEGER :: IMMAX, JMAX, LMAX                                         TRANS5B.34    
      INTEGER :: IM1, IM2, IM3, IM4                                        TRANS5B.35    
      INTEGER :: J1, J2                                                    TRANS5B.36    
! Loop variables                                                           TRANS5B.37    
      INTEGER :: I, IHEM, IM, ITRAC, J, K, L                               TRANS5B.38    
!-----------------------------------------------------                     TRANS5B.39    
! Transpose                                                                TRANS5B.40    
!-----------------------------------------------------                     TRANS5B.41    
      IF (NPE.GT.1) THEN                                                   TRANS5B.42    
         DO iRow2=1,Py                                                     TRANS5B.43    
            iPe=PeGrid(iCol,iRow2)                                         TRANS5B.44    
            IF (iPe.NE.MyPe) THEN                                          TRANS5B.45    
               !-----------------------------------------------------      TRANS5B.46    
               ! Store multi-layer variables in HoldVar1                   TRANS5B.47    
               !-----------------------------------------------------      TRANS5B.48    
               IMMAX=2*MMTyy(iRow2)                                        TRANS5B.49    
               IM1=2*MMT1(iRow2)                                           TRANS5B.50    
               IM3=4*MMT-2*(MMT1(iRow2)+MMTyy(iRow2))                      TRANS5B.51    
               DO L=1,NLxx(iCol)                                           TRANS5B.52    
                  DO J=1,JGyy(iRow)                                        TRANS5B.53    
                     DO IHEM=1,NHEM                                        TRANS5B.54    
                        DO I=1,IMMAX                                       TRANS5B.55    
                           HoldVar1(I,IHEM,J,L,1)=TNLG2(IM1+I,IHEM,J,L)    TRANS5B.56    
                        ENDDO                                              TRANS5B.57    
                        DO I=1,IMMAX                                       TRANS5B.58    
                           HoldVar1(IMMAX+I,IHEM,J,L,1)=                   TRANS5B.59    
     &                          TNLG2(IM3+I,IHEM,J,L)                      TRANS5B.60    
                        ENDDO                                              TRANS5B.61    
                     ENDDO                                                 TRANS5B.62    
                  ENDDO                                                    TRANS5B.63    
               ENDDO                                                       TRANS5B.64    
               DO L=1,NLxx(iCol)                                           TRANS5B.65    
                  DO J=1,JGyy(iRow)                                        TRANS5B.66    
                     DO IHEM=1,NHEM                                        TRANS5B.67    
                        DO I=1,IMMAX                                       TRANS5B.68    
                           HoldVar1(I,IHEM,J,L,2)=FUG2(IM1+I,IHEM,J,L)     TRANS5B.69    
                        ENDDO                                              TRANS5B.70    
                        DO I=1,IMMAX                                       TRANS5B.71    
                           HoldVar1(IMMAX+I,IHEM,J,L,2)=                   TRANS5B.72    
     &                          FUG2(IM3+I,IHEM,J,L)                       TRANS5B.73    
                        ENDDO                                              TRANS5B.74    
                     ENDDO                                                 TRANS5B.75    
                  ENDDO                                                    TRANS5B.76    
               ENDDO                                                       TRANS5B.77    
               DO L=1,NLxx(iCol)                                           TRANS5B.78    
                  DO J=1,JGyy(iRow)                                        TRANS5B.79    
                     DO IHEM=1,NHEM                                        TRANS5B.80    
                        DO I=1,IMMAX                                       TRANS5B.81    
                           HoldVar1(I,IHEM,J,L,3)=FVG2(IM1+I,IHEM,J,L)     TRANS5B.82    
                        ENDDO                                              TRANS5B.83    
                        DO I=1,IMMAX                                       TRANS5B.84    
                           HoldVar1(IMMAX+I,IHEM,J,L,3)=                   TRANS5B.85    
     &                          FVG2(IM3+I,IHEM,J,L)                       TRANS5B.86    
                        ENDDO                                              TRANS5B.87    
                     ENDDO                                                 TRANS5B.88    
                  ENDDO                                                    TRANS5B.89    
               ENDDO                                                       TRANS5B.90    
               DO ITRAC=1,NTRAC                                            TRANS5B.91    
                  DO L=1,NLxx(iCol)                                        TRANS5B.92    
                     DO J=1,JGyy(iRow)                                     TRANS5B.93    
                        DO IHEM=1,NHEM                                     TRANS5B.94    
                           DO I=1,IMMAX                                    TRANS5B.95    
                              HoldVar1(I,IHEM,J,L,3+ITRAC)=                TRANS5B.96    
     &                             TRANLG2(IM1+I,IHEM,J,L,ITRAC)           TRANS5B.97    
                           ENDDO                                           TRANS5B.98    
                           DO I=1,IMMAX                                    TRANS5B.99    
                              HoldVar1(IMMAX+I,IHEM,J,L,3+ITRAC)=          TRANS5B.100   
     &                             TRANLG2(IM3+I,IHEM,J,L,ITRAC)           TRANS5B.101   
                           ENDDO                                           TRANS5B.102   
                        ENDDO                                              TRANS5B.103   
                     ENDDO                                                 TRANS5B.104   
                  ENDDO                                                    TRANS5B.105   
               ENDDO                                                       TRANS5B.106   
               !-----------------------------------------------------      TRANS5B.107   
               ! Send message                                              TRANS5B.108   
               !-----------------------------------------------------      TRANS5B.109   
               iRecv=iPe                                                   TRANS5B.110   
               nBuffSize=(3+NTRAC)*4*MMTy*NHEM*JGy*NLx                     TRANS5B.111   
               iTag=TagRef+100*iRow+10*iRow2+iCol                          TRANS5B.112   
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaReal,iRecv,iTag,      TRANS5B.113   
     &              MPI_COMM_WORLD,ierr)                                   TRANS5B.114   
            ENDIF                                                          TRANS5B.115   
         ENDDO                                                             TRANS5B.116   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS5B.117   
         !-----------------------------------------------------            TRANS5B.118   
         ! Loop over PEs on this column                                    TRANS5B.119   
         !-----------------------------------------------------            TRANS5B.120   
         DO iRow2=1,Py                                                     TRANS5B.121   
            iPe=PeGrid(iCol,iRow2)                                         TRANS5B.122   
            IF (iPe.NE.MyPe) THEN                                          TRANS5B.123   
               !-----------------------------------------------------      TRANS5B.124   
               ! Receive message                                           TRANS5B.125   
               !-----------------------------------------------------      TRANS5B.126   
               iSend=iPe                                                   TRANS5B.127   
               nBuffSize=(3+NTRAC)*4*MMTy*NHEM*JGy*NLx                     TRANS5B.128   
               iTag=TagRef+100*iRow2+10*iRow+iCol                          TRANS5B.129   
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaReal,iSend,iTag,       TRANS5B.130   
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS5B.131   
               !-----------------------------------------------------      TRANS5B.132   
               ! Write to EG etc                                           TRANS5B.133   
               !-----------------------------------------------------      TRANS5B.134   
               IMMAX=4*MMTyy(iRow)                                         TRANS5B.135   
               JMAX=JGyy(iRow2)                                            TRANS5B.136   
               LMAX=NLxx(iCol)                                             TRANS5B.137   
               J1=JJ1(iRow2)+1                                             TRANS5B.138   
               J2=JJ1(iRow2)+JGyy(iRow2)                                   TRANS5B.139   
               TNLG(1:IMMAX,:,J1:J2,1:LMAX)=                               TRANS5B.140   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,1)                    TRANS5B.141   
               FUG(1:IMMAX,:,J1:J2,1:LMAX)=                                TRANS5B.142   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,2)                    TRANS5B.143   
               FVG(1:IMMAX,:,J1:J2,1:LMAX)=                                TRANS5B.144   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,3)                    TRANS5B.145   
               TRANLG(1:IMMAX,:,J1:J2,1:LMAX,:)=                           TRANS5B.146   
     &              HoldVar1(1:IMMAX,:,1:JMAX,1:LMAX,4:3+NTRAC)            TRANS5B.147   
            ENDIF                                                          TRANS5B.148   
         ENDDO                                                             TRANS5B.149   
         !-----------------------------------------------------            TRANS5B.150   
         ! Data is already contained on this PE                            TRANS5B.151   
         !-----------------------------------------------------            TRANS5B.152   
         IMMAX=2*MMTyy(iRow)                                               TRANS5B.153   
         IM1=2*MMT1(iRow)                                                  TRANS5B.154   
         IM3=4*MMT-2*(MMT1(iRow)+MMTyy(iRow))                              TRANS5B.155   
         J1=JJ1(iRow)                                                      TRANS5B.156   
         DO L=1,NLxx(iCol)                                                 TRANS5B.157   
            DO J=1,JGyy(iRow)                                              TRANS5B.158   
               DO IHEM=1,NHEM                                              TRANS5B.159   
                  DO I=1,IMMAX                                             TRANS5B.160   
                     TNLG(I,IHEM,J1+J,L)=TNLG2(IM1+I,IHEM,J,L)             TRANS5B.161   
                  ENDDO                                                    TRANS5B.162   
                  DO I=1,IMMAX                                             TRANS5B.163   
                     TNLG(IMMAX+I,IHEM,J1+J,L)=TNLG2(IM3+I,IHEM,J,L)       TRANS5B.164   
                  ENDDO                                                    TRANS5B.165   
               ENDDO                                                       TRANS5B.166   
            ENDDO                                                          TRANS5B.167   
         ENDDO                                                             TRANS5B.168   
         DO L=1,NLxx(iCol)                                                 TRANS5B.169   
            DO J=1,JGyy(iRow)                                              TRANS5B.170   
               DO IHEM=1,NHEM                                              TRANS5B.171   
                  DO I=1,IMMAX                                             TRANS5B.172   
                     FUG(I,IHEM,J1+J,L)=FUG2(IM1+I,IHEM,J,L)               TRANS5B.173   
                  ENDDO                                                    TRANS5B.174   
                  DO I=1,IMMAX                                             TRANS5B.175   
                     FUG(IMMAX+I,IHEM,J1+J,L)=FUG2(IM3+I,IHEM,J,L)         TRANS5B.176   
                  ENDDO                                                    TRANS5B.177   
               ENDDO                                                       TRANS5B.178   
            ENDDO                                                          TRANS5B.179   
         ENDDO                                                             TRANS5B.180   
         DO L=1,NLxx(iCol)                                                 TRANS5B.181   
            DO J=1,JGyy(iRow)                                              TRANS5B.182   
               DO IHEM=1,NHEM                                              TRANS5B.183   
                  DO I=1,IMMAX                                             TRANS5B.184   
                     FVG(I,IHEM,J1+J,L)=FVG2(IM1+I,IHEM,J,L)               TRANS5B.185   
                  ENDDO                                                    TRANS5B.186   
                  DO I=1,IMMAX                                             TRANS5B.187   
                     FVG(IMMAX+I,IHEM,J1+J,L)=FVG2(IM3+I,IHEM,J,L)         TRANS5B.188   
                  ENDDO                                                    TRANS5B.189   
               ENDDO                                                       TRANS5B.190   
            ENDDO                                                          TRANS5B.191   
         ENDDO                                                             TRANS5B.192   
         DO ITRAC=1,NTRAC                                                  TRANS5B.193   
            DO L=1,NLxx(iCol)                                              TRANS5B.194   
               DO J=1,JGyy(iRow)                                           TRANS5B.195   
                  DO IHEM=1,NHEM                                           TRANS5B.196   
                     DO I=1,IMMAX                                          TRANS5B.197   
                        TRANLG(I,IHEM,J1+J,L,ITRAC)=                       TRANS5B.198   
     &                       TRANLG2(IM1+I,IHEM,J,L,ITRAC)                 TRANS5B.199   
                     ENDDO                                                 TRANS5B.200   
                     DO I=1,IMMAX                                          TRANS5B.201   
                        TRANLG(IMMAX+I,IHEM,J1+J,L,ITRAC)=                 TRANS5B.202   
     &                       TRANLG2(IM3+I,IHEM,J,L,ITRAC)                 TRANS5B.203   
                     ENDDO                                                 TRANS5B.204   
                  ENDDO                                                    TRANS5B.205   
               ENDDO                                                       TRANS5B.206   
            ENDDO                                                          TRANS5B.207   
         ENDDO                                                             TRANS5B.208   
      ELSE                                                                 TRANS5B.209   
         !-----------------------------------------------------            TRANS5B.210   
         ! One processor option                                            TRANS5B.211   
         !-----------------------------------------------------            TRANS5B.212   
         TNLG(:,:,:,:)=0.0                                                 TRANS5B.213   
         FUG(:,:,:,:)=0.0                                                  TRANS5B.214   
         FVG(:,:,:,:)=0.0                                                  TRANS5B.215   
         TRANLG(:,:,:,:,:)=0.0                                             TRANS5B.216   
         DO L=1,NL                                                         TRANS5B.217   
            DO J=1,JG                                                      TRANS5B.218   
               DO IHEM=1,NHEM                                              TRANS5B.219   
                  DO I=1,4*MMTy                                            TRANS5B.220   
                     TNLG(I,IHEM,J,L)=TNLG2(I,IHEM,J,L)                    TRANS5B.221   
                     FUG(I,IHEM,J,L) =FUG2(I,IHEM,J,L)                     TRANS5B.222   
                     FVG(I,IHEM,J,L) =FVG2(I,IHEM,J,L)                     TRANS5B.223   
                     DO ITRAC=1,NTRAC                                      TRANS5B.224   
                        TRANLG(I,IHEM,J,L,ITRAC)=                          TRANS5B.225   
     &                       TRANLG2(I,IHEM,J,L,ITRAC)                     TRANS5B.226   
                     ENDDO                                                 TRANS5B.227   
                 ENDDO                                                     TRANS5B.228   
               ENDDO                                                       TRANS5B.229   
            ENDDO                                                          TRANS5B.230   
         ENDDO                                                             TRANS5B.231   
      ENDIF                                                                TRANS5B.232   
      END                                                                  TRANS5B.233   
*ENDIF                                                                     TRANS5B.234   
*ENDIF                                                                     TRANS5B.235   
*DECK TRANS6                                                               TRANS6.1     
*IF DEF,NOMPI                                                              TRANS6.2     
*ELSE                                                                      TRANS6.3     
!=====================================================                     TRANS6.4     
! Transposing the source terms for the spectral coefficients so            TRANS6.5     
! that the levels are complete. Instead the meriodonal wavenumbers         TRANS6.6     
! are split across the columns of PEs.                                     TRANS6.7     
!=====================================================                     TRANS6.8     
      SUBROUTINE TRANS6                                                    TRANS6.9     
      IMPLICIT NONE                                                        TRANS6.10    
*CALL PARAM1                                                               TRANS6.11    
*CALL PARAM3                                                               TRANS6.12    
*CALL SPECTR                                                               TRANS6.13    
*CALL SPECTR2                                                              TRANS6.14    
*CALL MPIDECK                                                              TRANS6.15    
!-----------------------------------------------------                     TRANS6.16    
! Local variables                                                          TRANS6.17    
!-----------------------------------------------------                     TRANS6.18    
      INTEGER, PARAMETER :: TagRef=22000                                   TRANS6.19    
      COMPLEX :: HoldVar1(NNTx,MMTy,NHEM,NLx,4+NTRAC)                      TRANS6.20    
      COMPLEX :: HoldVar2(NNTx,MMTy,NHEM,2)                                TRANS6.21    
      INTEGER :: iCol2, iPe                                                TRANS6.22    
      INTEGER :: IMMAX, INMAX, LMAX                                        TRANS6.23    
      INTEGER :: IN1, IN2                                                  TRANS6.24    
      INTEGER :: L1, L2                                                    TRANS6.25    
! Loop variables                                                           TRANS6.26    
      INTEGER :: I, IHEM, IM, IN, ITRAC, L                                 TRANS6.27    
!-----------------------------------------------------                     TRANS6.28    
! Transpose                                                                TRANS6.29    
!-----------------------------------------------------                     TRANS6.30    
      IF (NPE.GT.1) THEN                                                   TRANS6.31    
         !-----------------------------------------------------            TRANS6.32    
         ! Loop over PEs on the same row to send them data                 TRANS6.33    
         !-----------------------------------------------------            TRANS6.34    
         DO iCol2=1,Px                                                     TRANS6.35    
            iPe=PeGrid(iCol2,iRow)                                         TRANS6.36    
            IF (iPe.NE.MyPe) THEN                                          TRANS6.37    
               !-----------------------------------------------------      TRANS6.38    
               ! Store multi-layer variables in HoldVar1                   TRANS6.39    
               !-----------------------------------------------------      TRANS6.40    
               INMAX=NNTxx(iCol2)                                          TRANS6.41    
               IMMAX=MMTyy(iRow)                                           TRANS6.42    
               LMAX=NLxx(iCol)                                             TRANS6.43    
               IN1=NNT1(iCol2)+1                                           TRANS6.44    
               IN2=NNT1(iCol2)+NNTxx(iCol2)                                TRANS6.45    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,1)=                       TRANS6.46    
     &              ZT2(IN1:IN2,1:IMMAX,:,1:LMAX)                          TRANS6.47    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,2)=                       TRANS6.48    
     &              DT2(IN1:IN2,1:IMMAX,:,1:LMAX)                          TRANS6.49    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,3)=                       TRANS6.50    
     &              TT2(IN1:IN2,1:IMMAX,:,1:LMAX)                          TRANS6.51    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,4)=                       TRANS6.52    
     &              DTE2(IN1:IN2,1:IMMAX,:,1:LMAX)                         TRANS6.53    
*IF DEF,ABOVE_V1                                                           TRANS6.54    
               DO ITRAC=1,NTRAC                                            TRANS6.55    
                  HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,4+ITRAC)=              TRANS6.56    
     &                 TRAT2(IN1:IN2,1:IMMAX,:,1:LMAX,ITRAC)               TRANS6.57    
               ENDDO                                                       TRANS6.58    
*ENDIF                                                                     TRANS6.59    
               !-----------------------------------------------------      TRANS6.60    
               ! Send message                                              TRANS6.61    
               !-----------------------------------------------------      TRANS6.62    
               iRecv=iPe                                                   TRANS6.63    
               nBuffSize=(4+NTRAC)*NNTx*MMTy*NHEM*NLx                      TRANS6.64    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS6.65    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaCom,iRecv,iTag,       TRANS6.66    
     &              MPI_COMM_WORLD,ierr)                                   TRANS6.67    
            ENDIF                                                          TRANS6.68    
         ENDDO                                                             TRANS6.69    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS6.70    
         !-----------------------------------------------------            TRANS6.71    
         ! Loop over PEs on the same row to receive data                   TRANS6.72    
         !-----------------------------------------------------            TRANS6.73    
         DO iCol2=1,Px                                                     TRANS6.74    
            iPe=PeGrid(iCol2,iRow)                                         TRANS6.75    
            IF (iPe.NE.MyPe) THEN                                          TRANS6.76    
               !-----------------------------------------------------      TRANS6.77    
               ! Receive message                                           TRANS6.78    
               !-----------------------------------------------------      TRANS6.79    
               iSend=iPe                                                   TRANS6.80    
               nBuffSize=(4+NTRAC)*NNTx*MMTy*NHEM*NLx                      TRANS6.81    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS6.82    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaCom,iSend,iTag,        TRANS6.83    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS6.84    
               !-----------------------------------------------------      TRANS6.85    
               ! Write to ZT etc                                           TRANS6.86    
               !-----------------------------------------------------      TRANS6.87    
               INMAX=NNTxx(iCol)                                           TRANS6.88    
               IMMAX=MMTyy(iRow)                                           TRANS6.89    
               LMAX=NLxx(iCol2)                                            TRANS6.90    
               L1=KK1(iCol2)+1                                             TRANS6.91    
               L2=KK1(iCol2)+NLxx(iCol2)                                   TRANS6.92    
               ZT(1:INMAX,1:IMMAX,:,L1:L2)=                                TRANS6.93    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,1)                   TRANS6.94    
               DT(1:INMAX,1:IMMAX,:,L1:L2)=                                TRANS6.95    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,2)                   TRANS6.96    
               TT(1:INMAX,1:IMMAX,:,L1:L2)=                                TRANS6.97    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,3)                   TRANS6.98    
               DTE(1:INMAX,1:IMMAX,:,L1:L2)=                               TRANS6.99    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,4)                   TRANS6.100   
*IF DEF,ABOVE_V1                                                           TRANS6.101   
               DO ITRAC=1,NTRAC                                            TRANS6.102   
                  TRAT(1:INMAX,1:IMMAX,:,L1:L2,ITRAC)=                     TRANS6.103   
     &                 HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,4+ITRAC)          TRANS6.104   
               ENDDO                                                       TRANS6.105   
*ENDIF                                                                     TRANS6.106   
            ENDIF                                                          TRANS6.107   
         ENDDO                                                             TRANS6.108   
         !-----------------------------------------------------            TRANS6.109   
         ! Data is already contained on this PE                            TRANS6.110   
         !-----------------------------------------------------            TRANS6.111   
         INMAX=NNTxx(iCol)                                                 TRANS6.112   
         IMMAX=MMTyy(iRow)                                                 TRANS6.113   
         LMAX=NLxx(iCol)                                                   TRANS6.114   
         IN1=NNT1(iCol)+1                                                  TRANS6.115   
         IN2=NNT1(iCol)+NNTxx(iCol)                                        TRANS6.116   
         L1=KK1(iCol)+1                                                    TRANS6.117   
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS6.118   
         ZT(1:INMAX,1:IMMAX,:,L1:L2)=ZT2(IN1:IN2,1:IMMAX,:,1:LMAX)         TRANS6.119   
         DT(1:INMAX,1:IMMAX,:,L1:L2)=DT2(IN1:IN2,1:IMMAX,:,1:LMAX)         TRANS6.120   
         TT(1:INMAX,1:IMMAX,:,L1:L2)=TT2(IN1:IN2,1:IMMAX,:,1:LMAX)         TRANS6.121   
         DTE(1:INMAX,1:IMMAX,:,L1:L2)=DTE2(IN1:IN2,1:IMMAX,:,1:LMAX)       TRANS6.122   
*IF DEF,ABOVE_V1                                                           TRANS6.123   
         TRAT(1:INMAX,1:IMMAX,:,L1:L2,:)=                                  TRANS6.124   
     &        TRAT2(IN1:IN2,1:IMMAX,:,1:LMAX,:)                            TRANS6.125   
*ENDIF                                                                     TRANS6.126   
         !-----------------------------------------------------            TRANS6.127   
         ! Single layer variables are only stored on first                 TRANS6.128   
         ! column.                                                         TRANS6.129   
         !-----------------------------------------------------            TRANS6.130   
         IF (iCol.EQ.1) THEN                                               TRANS6.131   
            DO iCol2=2,Px                                                  TRANS6.132   
               iPe=PeGrid(iCol2,iRow)                                      TRANS6.133   
               INMAX=NNTxx(iCol2)                                          TRANS6.134   
               IMMAX=MMTyy(iRow)                                           TRANS6.135   
               IN1=NNT1(iCol2)+1                                           TRANS6.136   
               IN2=NNT1(iCol2)+NNTxx(iCol2)                                TRANS6.137   
               HoldVar2(1:INMAX,1:IMMAX,:,1)=SPA2(IN1:IN2,1:IMMAX,:)       TRANS6.138   
               HoldVar2(1:INMAX,1:IMMAX,:,2)=VP2(IN1:IN2,1:IMMAX,:)        TRANS6.139   
               !-----------------------------------------------------      TRANS6.140   
               ! Send message                                              TRANS6.141   
               !-----------------------------------------------------      TRANS6.142   
               iRecv=iPe                                                   TRANS6.143   
               nBuffSize=2*NNTx*MMTy*NHEM                                  TRANS6.144   
               iTag=TagRef+1100+10*iCol2+iRow                              TRANS6.145   
               CALL MPI_BSEND(HoldVar2,nBuffSize,ParaCom,iRecv,iTag,       TRANS6.146   
     &              MPI_COMM_WORLD,ierr)                                   TRANS6.147   
            ENDDO                                                          TRANS6.148   
            !-----------------------------------------------------         TRANS6.149   
            ! Data is already on this array                                TRANS6.150   
            !-----------------------------------------------------         TRANS6.151   
            INMAX=NNTxx(iCol)                                              TRANS6.152   
            IMMAX=MMTyy(iRow)                                              TRANS6.153   
            SPA(1:INMAX,1:IMMAX,:)=SPA2(1:INMAX,1:IMMAX,:)                 TRANS6.154   
            VP(1:INMAX,1:IMMAX,:)=VP2(1:INMAX,1:IMMAX,:)                   TRANS6.155   
         ENDIF                                                             TRANS6.156   
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS6.157   
         IF (iCol.GT.1) THEN                                               TRANS6.158   
            !----------------------------------------------------          TRANS6.159   
            ! Receive messages                                             TRANS6.160   
            !----------------------------------------------------          TRANS6.161   
            iSend=PeGrid(1,iRow)                                           TRANS6.162   
            nBuffSize=2*NNTx*MMTy*NHEM                                     TRANS6.163   
            iTag=TagRef+1100+10*iCol+iRow                                  TRANS6.164   
            CALL MPI_RECV(HoldVar2,nBuffSize,ParaCom,iSend,iTag,           TRANS6.165   
     &           MPI_COMM_WORLD,istat,ierr)                                TRANS6.166   
            !----------------------------------------------------          TRANS6.167   
            ! Write data to SPA and VP                                     TRANS6.168   
            !----------------------------------------------------          TRANS6.169   
            INMAX=NNTxx(iCol)                                              TRANS6.170   
            IMMAX=MMTyy(iRow)                                              TRANS6.171   
            SPA(1:INMAX,1:IMMAX,:)=HoldVar2(1:INMAX,1:IMMAX,:,1)           TRANS6.172   
            VP(1:INMAX,1:IMMAX,:)=HoldVar2(1:INMAX,1:IMMAX,:,2)            TRANS6.173   
         ENDIF                                                             TRANS6.174   
      ELSE                                                                 TRANS6.175   
         !-----------------------------------------------------            TRANS6.176   
         ! One processor option                                            TRANS6.177   
         !-----------------------------------------------------            TRANS6.178   
         DO L=1,NL                                                         TRANS6.179   
            DO IHEM=1,NHEM                                                 TRANS6.180   
               DO IM=1,MMT                                                 TRANS6.181   
                  DO IN=1,NNT                                              TRANS6.182   
                     ZT(IN,IM,IHEM,L)=ZT2(IN,IM,IHEM,L)                    TRANS6.183   
                     DT(IN,IM,IHEM,L)=DT2(IN,IM,IHEM,L)                    TRANS6.184   
                     TT(IN,IM,IHEM,L)=TT2(IN,IM,IHEM,L)                    TRANS6.185   
                     DTE(IN,IM,IHEM,L)=DTE2(IN,IM,IHEM,L)                  TRANS6.186   
*IF DEF,ABOVE_V1                                                           TRANS6.187   
                     DO ITRAC=1,NTRAC                                      TRANS6.188   
                        TRAT(IN,IM,IHEM,L,ITRAC)=                          TRANS6.189   
     &                       TRAT2(IN,IM,IHEM,L,ITRAC)                     TRANS6.190   
                     ENDDO                                                 TRANS6.191   
*ENDIF                                                                     TRANS6.192   
                  ENDDO                                                    TRANS6.193   
               ENDDO                                                       TRANS6.194   
            ENDDO                                                          TRANS6.195   
         ENDDO                                                             TRANS6.196   
         DO IHEM=1,NHEM                                                    TRANS6.197   
            DO IM=1,MMT                                                    TRANS6.198   
               DO IN=1,NNT                                                 TRANS6.199   
                  SPA(IN,IM,IHEM)=SPA2(IN,IM,IHEM)                         TRANS6.200   
                  VP(IN,IM,IHEM)=VP2(IN,IM,IHEM)                           TRANS6.201   
               ENDDO                                                       TRANS6.202   
            ENDDO                                                          TRANS6.203   
         ENDDO                                                             TRANS6.204   
      ENDIF                                                                TRANS6.205   
      END                                                                  TRANS6.206   
*ENDIF                                                                     TRANS6.207   
*DECK TRANS6A                                                              TRANS6A.1     
*IF DEF,ABOVE_V1                                                           TRANS6A.2     
*IF DEF,NOMPI                                                              TRANS6A.3     
*ELSE                                                                      TRANS6A.4     
!=====================================================                     TRANS6A.5     
! Transposing the source terms for the spectral coefficients so            TRANS6A.6     
! that the levels are complete. Instead the meriodonal wavenumbers         TRANS6A.7     
! are split across the columns of PEs.                                     TRANS6A.8     
!=====================================================                     TRANS6A.9     
      SUBROUTINE TRANS6A                                                   TRANS6A.10    
      IMPLICIT NONE                                                        TRANS6A.11    
*CALL PARAM1                                                               TRANS6A.12    
*CALL PARAM3                                                               TRANS6A.13    
*CALL SPECTR                                                               TRANS6A.14    
*CALL SPECTR2                                                              TRANS6A.15    
*CALL MPIDECK                                                              TRANS6A.16    
!-----------------------------------------------------                     TRANS6A.17    
! Local variables                                                          TRANS6A.18    
!-----------------------------------------------------                     TRANS6A.19    
      INTEGER, PARAMETER :: TagRef=24000                                   TRANS6A.20    
      COMPLEX :: HoldVar1(NNTx,MMTy,NHEM,NLx,NTRAC)                        TRANS6A.21    
      INTEGER :: iCol2, iPe                                                TRANS6A.22    
      INTEGER :: IMMAX, INMAX, LMAX                                        TRANS6A.23    
      INTEGER :: IN1, IN2                                                  TRANS6A.24    
      INTEGER :: L1, L2                                                    TRANS6A.25    
! Loop variables                                                           TRANS6A.26    
      INTEGER :: I, IHEM, IM, IN, ITRAC, L                                 TRANS6A.27    
!-----------------------------------------------------                     TRANS6A.28    
! Transpose                                                                TRANS6A.29    
!-----------------------------------------------------                     TRANS6A.30    
      IF (NPE.GT.1) THEN                                                   TRANS6A.31    
         !-----------------------------------------------------            TRANS6A.32    
         ! Loop over PEs on the same row to send them data                 TRANS6A.33    
         !-----------------------------------------------------            TRANS6A.34    
         DO iCol2=1,Px                                                     TRANS6A.35    
            iPe=PeGrid(iCol2,iRow)                                         TRANS6A.36    
            IF (iPe.NE.MyPe) THEN                                          TRANS6A.37    
               !-----------------------------------------------------      TRANS6A.38    
               ! Store multi-layer variables in HoldVar1                   TRANS6A.39    
               !-----------------------------------------------------      TRANS6A.40    
               INMAX=NNTxx(iCol2)                                          TRANS6A.41    
               IMMAX=MMTyy(iRow)                                           TRANS6A.42    
               LMAX=NLxx(iCol)                                             TRANS6A.43    
               IN1=NNT1(iCol2)+1                                           TRANS6A.44    
               IN2=NNT1(iCol2)+NNTxx(iCol2)                                TRANS6A.45    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,:)=                       TRANS6A.46    
     &              TRAT2(IN1:IN2,1:IMMAX,:,1:LMAX,:)                      TRANS6A.47    
               !-----------------------------------------------------      TRANS6A.48    
               ! Send message                                              TRANS6A.49    
               !-----------------------------------------------------      TRANS6A.50    
               iRecv=iPe                                                   TRANS6A.51    
               nBuffSize=NTRAC*NNTx*MMTy*NHEM*NLx                          TRANS6A.52    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS6A.53    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaCom,iRecv,iTag,       TRANS6A.54    
     &              MPI_COMM_WORLD,ierr)                                   TRANS6A.55    
            ENDIF                                                          TRANS6A.56    
         ENDDO                                                             TRANS6A.57    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS6A.58    
         !-----------------------------------------------------            TRANS6A.59    
         ! Loop over PEs on the same row to receive data                   TRANS6A.60    
         !-----------------------------------------------------            TRANS6A.61    
         DO iCol2=1,Px                                                     TRANS6A.62    
            iPe=PeGrid(iCol2,iRow)                                         TRANS6A.63    
            IF (iPe.NE.MyPe) THEN                                          TRANS6A.64    
               !-----------------------------------------------------      TRANS6A.65    
               ! Receive message                                           TRANS6A.66    
               !-----------------------------------------------------      TRANS6A.67    
               iSend=iPe                                                   TRANS6A.68    
               nBuffSize=NTRAC*NNTx*MMTy*NHEM*NLx                          TRANS6A.69    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS6A.70    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaCom,iSend,iTag,        TRANS6A.71    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS6A.72    
               !-----------------------------------------------------      TRANS6A.73    
               ! Write to TRAT                                             TRANS6A.74    
               !-----------------------------------------------------      TRANS6A.75    
               INMAX=NNTxx(iCol)                                           TRANS6A.76    
               IMMAX=MMTyy(iRow)                                           TRANS6A.77    
               LMAX=NLxx(iCol2)                                            TRANS6A.78    
               L1=KK1(iCol2)+1                                             TRANS6A.79    
               L2=KK1(iCol2)+NLxx(iCol2)                                   TRANS6A.80    
               TRAT(1:INMAX,1:IMMAX,:,L1:L2,:)=                            TRANS6A.81    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,:)                   TRANS6A.82    
            ENDIF                                                          TRANS6A.83    
         ENDDO                                                             TRANS6A.84    
         !-----------------------------------------------------            TRANS6A.85    
         ! Data is already contained on this PE                            TRANS6A.86    
         !-----------------------------------------------------            TRANS6A.87    
         INMAX=NNTxx(iCol)                                                 TRANS6A.88    
         IMMAX=MMTyy(iRow)                                                 TRANS6A.89    
         LMAX=NLxx(iCol)                                                   TRANS6A.90    
         IN1=NNT1(iCol)+1                                                  TRANS6A.91    
         IN2=NNT1(iCol)+NNTxx(iCol)                                        TRANS6A.92    
         L1=KK1(iCol)+1                                                    TRANS6A.93    
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS6A.94    
         TRAT(1:INMAX,1:IMMAX,:,L1:L2,:)=                                  TRANS6A.95    
     &        TRAT2(IN1:IN2,1:IMMAX,:,1:LMAX,:)                            TRANS6A.96    
      ELSE                                                                 TRANS6A.97    
         !-----------------------------------------------------            TRANS6A.98    
         ! One processor option                                            TRANS6A.99    
         !-----------------------------------------------------            TRANS6A.100   
         DO L=1,NL                                                         TRANS6A.101   
            DO IHEM=1,NHEM                                                 TRANS6A.102   
               DO IM=1,MMT                                                 TRANS6A.103   
                  DO IN=1,NNT                                              TRANS6A.104   
                     DO ITRAC=1,NTRAC                                      TRANS6A.105   
                        TRAT(IN,IM,IHEM,L,ITRAC)=                          TRANS6A.106   
     &                       TRAT2(IN,IM,IHEM,L,ITRAC)                     TRANS6A.107   
                     ENDDO                                                 TRANS6A.108   
                  ENDDO                                                    TRANS6A.109   
               ENDDO                                                       TRANS6A.110   
            ENDDO                                                          TRANS6A.111   
         ENDDO                                                             TRANS6A.112   
      ENDIF                                                                TRANS6A.113   
      END                                                                  TRANS6A.114   
*ENDIF                                                                     TRANS6A.115   
*ENDIF                                                                     TRANS6A.116   
*DECK TRANS6B                                                              TRANS6B.1     
*IF DEF,ABOVE_V1                                                           TRANS6B.2     
*IF DEF,NOMPI                                                              TRANS6B.3     
*ELSE                                                                      TRANS6B.4     
!=====================================================                     TRANS6B.5     
! Transposing the source terms for the spectral coefficients so            TRANS6B.6     
! that the levels are complete. Instead the meriodonal wavenumbers         TRANS6B.7     
! are split across the columns of PEs.                                     TRANS6B.8     
!=====================================================                     TRANS6B.9     
      SUBROUTINE TRANS6B                                                   TRANS6B.10    
      IMPLICIT NONE                                                        TRANS6B.11    
*CALL PARAM1                                                               TRANS6B.12    
*CALL PARAM3                                                               TRANS6B.13    
*CALL SPECTR                                                               TRANS6B.14    
*CALL SPECTR2                                                              TRANS6B.15    
*CALL MPIDECK                                                              TRANS6B.16    
!-----------------------------------------------------                     TRANS6B.17    
! Local variables                                                          TRANS6B.18    
!-----------------------------------------------------                     TRANS6B.19    
      INTEGER, PARAMETER :: TagRef=25000                                   TRANS6B.20    
      COMPLEX :: HoldVar1(NNTx,MMTy,NHEM,NLx,3+NTRAC)                      TRANS6B.21    
      INTEGER :: iCol2, iPe                                                TRANS6B.22    
      INTEGER :: IMMAX, INMAX, LMAX                                        TRANS6B.23    
      INTEGER :: IN1, IN2                                                  TRANS6B.24    
      INTEGER :: L1, L2                                                    TRANS6B.25    
! Loop variables                                                           TRANS6B.26    
      INTEGER :: I, IHEM, IM, IN, ITRAC, L                                 TRANS6B.27    
!-----------------------------------------------------                     TRANS6B.28    
! Transpose                                                                TRANS6B.29    
!-----------------------------------------------------                     TRANS6B.30    
      IF (NPE.GT.1) THEN                                                   TRANS6B.31    
         !-----------------------------------------------------            TRANS6B.32    
         ! Loop over PEs on the same row to send them data                 TRANS6B.33    
         !-----------------------------------------------------            TRANS6B.34    
         DO iCol2=1,Px                                                     TRANS6B.35    
            iPe=PeGrid(iCol2,iRow)                                         TRANS6B.36    
            IF (iPe.NE.MyPe) THEN                                          TRANS6B.37    
               !-----------------------------------------------------      TRANS6B.38    
               ! Store multi-layer variables in HoldVar1                   TRANS6B.39    
               !-----------------------------------------------------      TRANS6B.40    
               INMAX=NNTxx(iCol2)                                          TRANS6B.41    
               IMMAX=MMTyy(iRow)                                           TRANS6B.42    
               LMAX=NLxx(iCol)                                             TRANS6B.43    
               IN1=NNT1(iCol2)+1                                           TRANS6B.44    
               IN2=NNT1(iCol2)+NNTxx(iCol2)                                TRANS6B.45    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,1)=                       TRANS6B.46    
     &              ZT2(IN1:IN2,1:IMMAX,:,1:LMAX)                          TRANS6B.47    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,2)=                       TRANS6B.48    
     &              DT2(IN1:IN2,1:IMMAX,:,1:LMAX)                          TRANS6B.49    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,3)=                       TRANS6B.50    
     &              TT2(IN1:IN2,1:IMMAX,:,1:LMAX)                          TRANS6B.51    
               HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,4:3+NTRAC)=               TRANS6B.52    
     &              TRAT2(IN1:IN2,1:IMMAX,:,1:LMAX,:)                      TRANS6B.53    
               !-----------------------------------------------------      TRANS6B.54    
               ! Send message                                              TRANS6B.55    
               !-----------------------------------------------------      TRANS6B.56    
               iRecv=iPe                                                   TRANS6B.57    
               nBuffSize=(3+NTRAC)*NNTx*MMTy*NHEM*NLx                      TRANS6B.58    
               iTag=TagRef+100*iCol+10*iCol2+iRow                          TRANS6B.59    
               CALL MPI_BSEND(HoldVar1,nBuffSize,ParaCom,iRecv,iTag,       TRANS6B.60    
     &              MPI_COMM_WORLD,ierr)                                   TRANS6B.61    
            ENDIF                                                          TRANS6B.62    
         ENDDO                                                             TRANS6B.63    
         CALL MPI_BARRIER(MPI_COMM_WORLD, ierr)                            TRANS6B.64    
         !-----------------------------------------------------            TRANS6B.65    
         ! Loop over PEs on the same row to receive data                   TRANS6B.66    
         !-----------------------------------------------------            TRANS6B.67    
         DO iCol2=1,Px                                                     TRANS6B.68    
            iPe=PeGrid(iCol2,iRow)                                         TRANS6B.69    
            IF (iPe.NE.MyPe) THEN                                          TRANS6B.70    
               !-----------------------------------------------------      TRANS6B.71    
               ! Receive message                                           TRANS6B.72    
               !-----------------------------------------------------      TRANS6B.73    
               iSend=iPe                                                   TRANS6B.74    
               nBuffSize=(3+NTRAC)*NNTx*MMTy*NHEM*NLx                      TRANS6B.75    
               iTag=TagRef+100*iCol2+10*iCol+iRow                          TRANS6B.76    
               CALL MPI_RECV(HoldVar1,nBuffSize,ParaCom,iSend,iTag,        TRANS6B.77    
     &              MPI_COMM_WORLD,istat,ierr)                             TRANS6B.78    
               !-----------------------------------------------------      TRANS6B.79    
               ! Write to ZT etc                                           TRANS6B.80    
               !-----------------------------------------------------      TRANS6B.81    
               INMAX=NNTxx(iCol)                                           TRANS6B.82    
               IMMAX=MMTyy(iRow)                                           TRANS6B.83    
               LMAX=NLxx(iCol2)                                            TRANS6B.84    
               L1=KK1(iCol2)+1                                             TRANS6B.85    
               L2=KK1(iCol2)+NLxx(iCol2)                                   TRANS6B.86    
               ZT(1:INMAX,1:IMMAX,:,L1:L2)=                                TRANS6B.87    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,1)                   TRANS6B.88    
               DT(1:INMAX,1:IMMAX,:,L1:L2)=                                TRANS6B.89    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,2)                   TRANS6B.90    
               TT(1:INMAX,1:IMMAX,:,L1:L2)=                                TRANS6B.91    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,3)                   TRANS6B.92    
               TRAT(1:INMAX,1:IMMAX,:,L1:L2,:)=                            TRANS6B.93    
     &              HoldVar1(1:INMAX,1:IMMAX,:,1:LMAX,4:3+NTRAC)           TRANS6B.94    
            ENDIF                                                          TRANS6B.95    
         ENDDO                                                             TRANS6B.96    
         !-----------------------------------------------------            TRANS6B.97    
         ! Data is already contained on this PE                            TRANS6B.98    
         !-----------------------------------------------------            TRANS6B.99    
         INMAX=NNTxx(iCol)                                                 TRANS6B.100   
         IMMAX=MMTyy(iRow)                                                 TRANS6B.101   
         LMAX=NLxx(iCol)                                                   TRANS6B.102   
         IN1=NNT1(iCol)+1                                                  TRANS6B.103   
         IN2=NNT1(iCol)+NNTxx(iCol)                                        TRANS6B.104   
         L1=KK1(iCol)+1                                                    TRANS6B.105   
         L2=KK1(iCol)+NLxx(iCol)                                           TRANS6B.106   
         ZT(1:INMAX,1:IMMAX,:,L1:L2)=ZT2(IN1:IN2,1:IMMAX,:,1:LMAX)         TRANS6B.107   
         DT(1:INMAX,1:IMMAX,:,L1:L2)=DT2(IN1:IN2,1:IMMAX,:,1:LMAX)         TRANS6B.108   
         TT(1:INMAX,1:IMMAX,:,L1:L2)=TT2(IN1:IN2,1:IMMAX,:,1:LMAX)         TRANS6B.109   
         TRAT(1:INMAX,1:IMMAX,:,L1:L2,:)=                                  TRANS6B.110   
     &        TRAT2(IN1:IN2,1:IMMAX,:,1:LMAX,:)                            TRANS6B.111   
      ELSE                                                                 TRANS6B.112   
         !-----------------------------------------------------            TRANS6B.113   
         ! One processor option                                            TRANS6B.114   
         !-----------------------------------------------------            TRANS6B.115   
         DO L=1,NL                                                         TRANS6B.116   
            DO IHEM=1,NHEM                                                 TRANS6B.117   
               DO IM=1,MMT                                                 TRANS6B.118   
                  DO IN=1,NNT                                              TRANS6B.119   
                     ZT(IN,IM,IHEM,L)=ZT2(IN,IM,IHEM,L)                    TRANS6B.120   
                     DT(IN,IM,IHEM,L)=DT2(IN,IM,IHEM,L)                    TRANS6B.121   
                     TT(IN,IM,IHEM,L)=TT2(IN,IM,IHEM,L)                    TRANS6B.122   
                     DO ITRAC=1,NTRAC                                      TRANS6B.123   
                        TRAT(IN,IM,IHEM,L,ITRAC)=                          TRANS6B.124   
     &                       TRAT2(IN,IM,IHEM,L,ITRAC)                     TRANS6B.125   
                     ENDDO                                                 TRANS6B.126   
                  ENDDO                                                    TRANS6B.127   
               ENDDO                                                       TRANS6B.128   
            ENDDO                                                          TRANS6B.129   
         ENDDO                                                             TRANS6B.130   
      ENDIF                                                                TRANS6B.131   
      END                                                                  TRANS6B.132   
*ENDIF                                                                     TRANS6B.133   
*ENDIF                                                                     TRANS6B.134   
*DECK TRBUD                                                                TRBUD.1     
*IF DEF,ONLY_V2                                                            TRBUD.2     
!=====================================================                     TRBUD.3     
! Global tracer budgets, accumulated between "print" timesteps.            TRBUD.4     
! Compute global tracer mass and tendency contributions from               TRBUD.5     
! advection, non-linear sources and linear sources/hyperdiffusion.         TRBUD.6     
!                                                                          TRBUD.7     
! Note: for the advective form of the tracer equation, the advection       TRBUD.8     
! tendency omits the term q*d(ps)/dt.  The flux form automatically         TRBUD.9     
! includes it in d(q*ps)/dt.                                               TRBUD.10    
!                                                                          TRBUD.11    
! Compute all terms spectrally.  The flux form of tracer advection         TRBUD.12    
! requires only the global mean tracer and mass (m=0,n=0), but the         TRBUD.13    
! advective form requires a quadratic sum over all wavenumbers.            TRBUD.14    
!                                                                          TRBUD.15    
! KSW=1: tracer mass, advection tendency, output for KOUTP=KOUNTP;         TRBUD.16    
! KSW=2: non-linear source term;                                           TRBUD.17    
! KSW=3: total source/hyperdiffusion tendency.                             TRBUD.18    
! The linear source/hyperdiffusion (4) is the (3-2) difference.            TRBUD.19    
! The total tendency is the (1+4) addition.                                TRBUD.20    
!                                                                          TRBUD.21    
! The routine should be called at all timesteps: logic here decides        TRBUD.22    
! timestep-dependent actions (initialisation, accumulation, output).       TRBUD.23    
! Accumulate for KOUTP.GE.0 (advection) or for KOUTP.GT.0 (sources),       TRBUD.24    
! since the routine is called at different parts of the timestep.          TRBUD.25    
!                                                                          TRBUD.26    
! Uses spectral surface pressure in SPA - present time value from          TRBUD.27    
! the adiabatic step is used for all tracer masses and tendencies.         TRBUD.28    
!                                                                          TRBUD.29    
! GTR   : global tracer mass at start/end of accumulation.                 TRBUD.30    
!          1=initial; 2=final; 3=difference/tendency                       TRBUD.31    
! GTRIT : global tracer tendency, instantaneous.                           TRBUD.32    
! GTRAT : global tracer tendency, accumulated:                             TRBUD.33    
!          1=adiabatic; 2=non-linear-source; 3=total-source                TRBUD.34    
!          4=linear-source; 5=total-tendency                               TRBUD.35    
!                                                                          TRBUD.36    
! The apparently bizarre calculation ordering is required because          TRBUD.37    
! output occurs in the advection step at KOUNTP, since the final           TRBUD.38    
! tracer is only then available.  Immediately following, the final         TRBUD.39    
! tracer becomes the initial tracer and accumulation begins again.         TRBUD.40    
!                                                                          TRBUD.41    
! Original version for IGCM 2.2.         Mike Blackburn, 15.11.2000.       TRBUD.42    
!=====================================================                     TRBUD.43    
      SUBROUTINE TRBUD(KSW)                                                TRBUD.44    
      IMPLICIT NONE                                                        TRBUD.45    
*CALL PARAM1                                                               TRBUD.46    
*CALL PARAM2                                                               TRBUD.47    
*CALL PARAM3                                                               TRBUD.48    
*CALL BATS                                                                 TRBUD.49    
*CALL BLANK                                                                TRBUD.50    
*CALL OUTCON                                                               TRBUD.51    
*CALL SPECTR                                                               TRBUD.52    
*CALL MPIDECK                                                              TRBUD.53    
!-----------------------------------------------------                     TRBUD.54    
! Passed variables                                                         TRBUD.55    
!-----------------------------------------------------                     TRBUD.56    
      INTEGER :: KSW                                                       TRBUD.57    
!-----------------------------------------------------                     TRBUD.58    
! Local variables                                                          TRBUD.59    
!-----------------------------------------------------                     TRBUD.60    
      LOGICAL :: LFIRST                                                    TRBUD.61    
      INTEGER :: NOUT                                                      TRBUD.62    
      REAL :: RKP                                                          TRBUD.63    
      INTEGER :: IOPT1, IOPT2                                              TRBUD.64    
      REAL :: ZFAC                                                         TRBUD.65    
      REAL :: ZDELT                                                        TRBUD.66    
      LOGICAL :: L0,LP,L1,L2,L3                                            TRBUD.67    
      INTEGER :: KTIM                                                      TRBUD.68    
      REAL :: ZTR00                                                        TRBUD.69    
      REAL :: ZTOT                                                         TRBUD.70    
      REAL :: ZDIM1(NTRAC),ZDIM2(NTRAC),ZDIM3(NTRAC)                       TRBUD.71    
      COMPLEX :: CSPA(NNTx,MMTy,NHEM)                                      TRBUD.72    
! Loop variables                                                           TRBUD.73    
      INTEGER :: I, IHEM, IM, IN, K, L                                     TRBUD.74    
!-----------------------------------------------------                     TRBUD.75    
! Set default value and save                                               TRBUD.76    
!-----------------------------------------------------                     TRBUD.77    
      DATA LFIRST /.TRUE./                                                 TRBUD.78    
      SAVE LFIRST,ZDIM1,ZDIM2,ZDIM3,CSPA                                   TRBUD.79    
!-----------------------------------------------------                     TRBUD.80    
! Initialisation: check timestep and switches.                             TRBUD.81    
!-----------------------------------------------------                     TRBUD.82    
      NOUT=2                                                               TRBUD.83    
      RKP=1./REAL(KOUNTP)                                                  TRBUD.84    
!-----------------------------------------------------                     TRBUD.85    
! Options for normalisation, assuming tracer and tendency arrays           TRBUD.86    
! are non-dimensional:                                                     TRBUD.87    
!                             { 1, non-dim mass-weighted average           TRBUD.88    
! Dimensionalisation: IOPT1 = { 2, dimensional mass-weighted average       TRBUD.89    
!                             { 3, total column mass                       TRBUD.90    
! Tendency type:      IOPT2 = { 1, tendency (non-dim or /day)              TRBUD.91    
!                             { 2, difference over KOUNTP steps            TRBUD.92    
!-----------------------------------------------------                     TRBUD.93    
      IOPT1=2                                                              TRBUD.94    
      IOPT2=2                                                              TRBUD.95    
C                                                                          TRBUD.96    
      IF (LFIRST) THEN                                                     TRBUD.97    
         IF (MyPe.EQ.0) THEN                                               TRBUD.98    
            WRITE(NOUT,'(/'' GLOBAL TRACER BUDGET OUTPUT INITIALISED''     TRBUD.99    
     &           ,'' AT KOUNT ='',I6)') KOUNT                              TRBUD.100   
            IF (IOPT1.EQ.1)                                                TRBUD.101   
     &           WRITE(NOUT,'('' - ALL VALUES NON-DIMENSIONAL'')')         TRBUD.102   
            IF (IOPT1.EQ.2)                                                TRBUD.103   
     &           WRITE(NOUT,'('' - ALL VALUES DIMENSIONED BY CTRA'')')     TRBUD.104   
            IF (IOPT1.EQ.3)                                                TRBUD.105   
     &           WRITE(NOUT,'('' - ALL VALUES DIMENSIONAL COLUMN MASS''    TRBUD.106   
     &           )')                                                       TRBUD.107   
            IF (IOPT2.EQ.1)                                                TRBUD.108   
     &           WRITE(NOUT                                                TRBUD.109   
     &           ,'('' - TENDENCIES O/P NON-DIM OR (DAY)-1'')')            TRBUD.110   
            IF (IOPT2.EQ.2)                                                TRBUD.111   
     &           WRITE(NOUT                                                TRBUD.112   
     &           ,'('' - TENDENCIES O/P AS KOUNTP-DIFFERENCES'')')         TRBUD.113   
         ENDIF                                                             TRBUD.114   
         !-----------------------------------------------------            TRBUD.115   
         ! Compute full timestep length from current value at KSTART.      TRBUD.116   
         !-----------------------------------------------------            TRBUD.117   
         ZFAC=REAL(2**KITS)                                                TRBUD.118   
         IF (LRSTRT.AND..NOT.LSHORT) ZFAC=1.0                              TRBUD.119   
         ZDELT=DELT*ZFAC                                                   TRBUD.120   
         IF ( (KOUNT.NE.KSTART).AND. (MyPe.EQ.0) ) THEN                    TRBUD.121   
            WRITE(NOUT,'(/'' ***WARNING: TRACER BUDGET INITIALISATION''    TRBUD.122   
     &                   ,'' IS NOT AT THE FIRST STEP: CHECK ZDELT =''     TRBUD.123   
     &                   ,F10.3,'' SEC'')') ZDELT/WW                       TRBUD.124   
         ENDIF                                                             TRBUD.125   
C                                                                          TRBUD.126   
         DO I=1,NTRAC                                                      TRBUD.127   
            IF (IOPT1.EQ.1) ZDIM1(I)=1.                                    TRBUD.128   
            IF (IOPT1.EQ.2) ZDIM1(I)=CTRA(I)                               TRBUD.129   
            IF (IOPT1.EQ.3) ZDIM1(I)=CTRA(I)*P0/GA                         TRBUD.130   
            IF (IOPT2.EQ.1) THEN                                           TRBUD.131   
               ZDIM2(I)=ZDIM1(I)*RKP                                       TRBUD.132   
               ZDIM3(I)=ZDIM1(I)*RKP/ZDELT                                 TRBUD.133   
               IF (IOPT1.GT.1) THEN                                        TRBUD.134   
                  ZDIM2(I)=ZDIM2(I)*PI2                                    TRBUD.135   
                  ZDIM3(I)=ZDIM3(I)*PI2                                    TRBUD.136   
               ENDIF                                                       TRBUD.137   
            ELSE                                                           TRBUD.138   
               ZDIM2(I)=ZDIM1(I)*ZDELT                                     TRBUD.139   
               ZDIM3(I)=ZDIM1(I)                                           TRBUD.140   
            ENDIF                                                          TRBUD.141   
         ENDDO                                                             TRBUD.142   
C                                                                          TRBUD.143   
         LFIRST=.FALSE.                                                    TRBUD.144   
      ENDIF                                                                TRBUD.145   
!-----------------------------------------------------                     TRBUD.146   
! Store initial tracer at start of run.                                    TRBUD.147   
!-----------------------------------------------------                     TRBUD.148   
      L0=(KSW.EQ.1).AND.(KOUNT.EQ.KSTART)                                  TRBUD.149   
!-----------------------------------------------------                     TRBUD.150   
! Store final tracer, output, restart accumulation.                        TRBUD.151   
!-----------------------------------------------------                     TRBUD.152   
      LP=(KSW.EQ.1).AND.(KOUTP.EQ.KOUNTP)                                  TRBUD.153   
!-----------------------------------------------------                     TRBUD.154   
! Tendency accumulation.                                                   TRBUD.155   
!-----------------------------------------------------                     TRBUD.156   
      L1=(KSW.EQ.1).AND.(KOUTP.GE.0)                                       TRBUD.157   
      L2=(KSW.EQ.2).AND.(KOUTP.GT.0)                                       TRBUD.158   
      L3=(KSW.EQ.3).AND.(KOUTP.GT.0)                                       TRBUD.159   
C                                                                          TRBUD.160   
C***  WRITE(NOUT,'(''trbud:'',2i5,1x,5l1)') KOUNT,KOUTP,L0,LP,L1,L2,L3     TRBUD.161   
      IF ((KOUNT.LE.KITS).AND.(MyPe.EQ.0))                                 TRBUD.162   
     &   WRITE(NOUT,'(''trbud: kount delt:'',i5,f10.2)') KOUNT,DELT/WW     TRBUD.163   
C                                                                          TRBUD.164   
      IF (.NOT.(L0.OR.LP.OR.L1.OR.L2.OR.L3)) THEN                          TRBUD.165   
         IF (MyPe.EQ.0) WRITE(NOUT,                                        TRBUD.166   
     &        '('' TRACER BUDGET SKIPPED AT STEP '',I5)') KOUNT            TRBUD.167   
         RETURN                                                            TRBUD.168   
      ENDIF                                                                TRBUD.169   
!-----------------------------------------------------                     TRBUD.170   
! Conjugate of surface pressure.                                           TRBUD.171   
!-----------------------------------------------------                     TRBUD.172   
      IF (L0.OR.LP.OR.L1) THEN                                             TRBUD.173   
         DO IHEM=1,NHEM                                                    TRBUD.174   
            DO IM=1,MMTyy(iRow)                                            TRBUD.175   
               DO IN=1,NNTxx(iCol)                                         TRBUD.176   
                  CSPA(IN,IM,IHEM)=CONJG(SPA(IN,IM,IHEM))                  TRBUD.177   
               ENDDO                                                       TRBUD.178   
            ENDDO                                                          TRBUD.179   
         ENDDO                                                             TRBUD.180   
      ENDIF                                                                TRBUD.181   
!-----------------------------------------------------                     TRBUD.182   
! Compute instantaneous tracer mass.                                       TRBUD.183   
!-----------------------------------------------------                     TRBUD.184   
      IF (L0.OR.LP) THEN                                                   TRBUD.185   
         IF (L0) KTIM=1                                                    TRBUD.186   
         IF (LP) KTIM=2                                                    TRBUD.187   
                                                                           TRBUD.188   
         DO I=1,NTRAC                                                      TRBUD.189   
            IF (LFLUX) THEN                                                TRBUD.190   
               ZTOT=0.                                                     TRBUD.191   
            ELSE                                                           TRBUD.192   
               CALL TRGAV(TRA(1,1,1,1,I),CSPA,DSIGMA,ZTOT)                 TRBUD.193   
            ENDIF                                                          TRBUD.194   
         ENDDO                                                             TRBUD.195   
                                                                           TRBUD.196   
         IF (MyPe.EQ.0) THEN                                               TRBUD.197   
            DO I=1,NTRAC                                                   TRBUD.198   
               ZTR00=0.                                                    TRBUD.199   
               DO L=1,NL                                                   TRBUD.200   
                  ZTR00=ZTR00+REAL(TRA(1,1,1,L,I))*DSIGMA(L)               TRBUD.201   
               ENDDO                                                       TRBUD.202   
               GTR(I,KTIM)=ZTR00*RSQR2+ZTOT                                TRBUD.203   
            ENDDO                                                          TRBUD.204   
         ENDIF                                                             TRBUD.205   
      ENDIF                                                                TRBUD.206   
!-----------------------------------------------------                     TRBUD.207   
! Output accumulated tracer diagnostics.                                   TRBUD.208   
!-----------------------------------------------------                     TRBUD.209   
      IF (MyPe.EQ.0) THEN                                                  TRBUD.210   
         IF (LP) THEN                                                      TRBUD.211   
            WRITE(NOUT,'(/'' GLOBAL TRACER BUDGETS AT DAY '',F8.2          TRBUD.212   
     &                ,'',  STEP '',I6,'',  AVERAGED OVER THE LAST''       TRBUD.213   
     &                ,I4,'' STEPS'')') DAY,KOUNT,KOUNTP                   TRBUD.214   
            WRITE(NOUT,'('' TRACER  MASS_I         MASS_F''                TRBUD.215   
     &               ,''         MASS_TEND''                               TRBUD.216   
     &               ,''      TEND_TOT       TEND_ADV''                    TRBUD.217   
     &               ,''       TEND_NLS       TEND_LSD'')')                TRBUD.218   
                                                                           TRBUD.219   
            DO I=1,NTRAC                                                   TRBUD.220   
               !-----------------------------------------------------      TRBUD.221   
               ! Actual tracer tendency from (final-initial) values.       TRBUD.222   
               !-----------------------------------------------------      TRBUD.223   
               GTR(I,3)=(GTR(I,2)-GTR(I,1))                                TRBUD.224   
               !-----------------------------------------------------      TRBUD.225   
               ! Dimensionalise accumulated values.                        TRBUD.226   
               !-----------------------------------------------------      TRBUD.227   
               DO K=1,3                                                    TRBUD.228   
                  GTRAT(I,K)=GTRAT(I,K)*ZDIM2(I)                           TRBUD.229   
               ENDDO                                                       TRBUD.230   
               !-----------------------------------------------------      TRBUD.231   
               ! Difference sources for linear component.                  TRBUD.232   
               !-----------------------------------------------------      TRBUD.233   
               GTRAT(I,4)=GTRAT(I,3)-GTRAT(I,2)                            TRBUD.234   
               !-----------------------------------------------------      TRBUD.235   
               ! Total forcing.                                            TRBUD.236   
               !-----------------------------------------------------      TRBUD.237   
               GTRAT(I,5)=GTRAT(I,1)+GTRAT(I,3)                            TRBUD.238   
               !-----------------------------------------------------      TRBUD.239   
               ! Normalise accumulated values.                             TRBUD.240   
               !-----------------------------------------------------      TRBUD.241   
               IF (IOPT1.EQ.2.AND.IOPT2.EQ.2) THEN                         TRBUD.242   
                  WRITE(NOUT,'(I6,7F15.10)') I                             TRBUD.243   
     &                 ,GTR(I,1)*ZDIM1(I),GTR(I,2)*ZDIM1(I),               TRBUD.244   
     &                 GTR(I,3)*ZDIM3(I),GTRAT(I,5),GTRAT(I,1),            TRBUD.245   
     &                 GTRAT(I,2),GTRAT(I,4)                               TRBUD.246   
               ELSE                                                        TRBUD.247   
                  WRITE(NOUT,'(I6,7E15.7)') I                              TRBUD.248   
     &                 ,GTR(I,1)*ZDIM1(I),GTR(I,2)*ZDIM1(I),               TRBUD.249   
     &                 GTR(I,3)*ZDIM3(I),GTRAT(I,5),GTRAT(I,1),            TRBUD.250   
     &                 GTRAT(I,2),GTRAT(I,4)                               TRBUD.251   
               ENDIF                                                       TRBUD.252   
               !-----------------------------------------------------      TRBUD.253   
               ! Copy final to initial tracer for next accumulation.       TRBUD.254   
               !-----------------------------------------------------      TRBUD.255   
               GTR(I,1)=GTR(I,2)                                           TRBUD.256   
            ENDDO                                                          TRBUD.257   
         ENDIF                                                             TRBUD.258   
         !-----------------------------------------------------            TRBUD.259   
         ! Preset accumulations.                                           TRBUD.260   
         !-----------------------------------------------------            TRBUD.261   
         IF (L0.OR.LP) THEN                                                TRBUD.262   
            DO K=1,5                                                       TRBUD.263   
               DO I=1,NTRAC                                                TRBUD.264   
                  GTRAT(I,K)=0.                                            TRBUD.265   
               ENDDO                                                       TRBUD.266   
            ENDDO                                                          TRBUD.267   
         ENDIF                                                             TRBUD.268   
      ENDIF                                                                TRBUD.269   
!-----------------------------------------------------                     TRBUD.270   
! Compute instantaneous tendency components.                               TRBUD.271   
!-----------------------------------------------------                     TRBUD.272   
      IF (L1.OR.L2.OR.L3) THEN                                             TRBUD.273   
         DO I=1,NTRAC                                                      TRBUD.274   
            IF (LFLUX) THEN                                                TRBUD.275   
               ZTOT=0.                                                     TRBUD.276   
            ELSE                                                           TRBUD.277   
               CALL TRGAV(TRAT(1,1,1,1,I),CSPA,DSIGMA,ZTOT)                TRBUD.278   
            ENDIF                                                          TRBUD.279   
         ENDDO                                                             TRBUD.280   
                                                                           TRBUD.281   
         IF (MyPe.EQ.0) THEN                                               TRBUD.282   
            DO I=1,NTRAC                                                   TRBUD.283   
               ZTR00=0.                                                    TRBUD.284   
               DO L=1,NL                                                   TRBUD.285   
                  ZTR00=ZTR00+REAL(TRAT(1,1,1,L,I))*DSIGMA(L)              TRBUD.286   
               ENDDO                                                       TRBUD.287   
               GTRIT(I,KSW)=ZTR00*RSQR2+ZTOT                               TRBUD.288   
            ENDDO                                                          TRBUD.289   
            !-----------------------------------------------------         TRBUD.290   
            ! Increment accumulated values.                                TRBUD.291   
            !-----------------------------------------------------         TRBUD.292   
            DO I=1,NTRAC                                                   TRBUD.293   
               GTRAT(I,KSW)=GTRAT(I,KSW)+GTRIT(I,KSW)                      TRBUD.294   
            ENDDO                                                          TRBUD.295   
         ENDIF                                                             TRBUD.296   
      ENDIF                                                                TRBUD.297   
      RETURN                                                               TRBUD.298   
      END                                                                  TRBUD.299   
*ENDIF                                                                     TRBUD.300   
*DECK TRGAV                                                                TRGAV.1     
*IF DEF,ONLY_V2                                                            TRGAV.2     
!=====================================================                     TRGAV.3     
! Compute a global mass-weighted average in spectral space.                TRGAV.4     
! Surface pressure array is assumed to be its complex conjugate.           TRGAV.5     
! Surface pressure omits the reference value p0.                           TRGAV.6     
! Follows the method in routine ENERGY, whereby the global average         TRGAV.7     
! of a quadratic quantity can be computed in spectral space.               TRGAV.8     
! Note that the m=0 contribution is weighted by 1/2.                       TRGAV.9     
!                                                                          TRGAV.10    
! Original version for IGCM 2.2.         Mike Blackburn, 25.10.2000.       TRGAV.11    
!=====================================================                     TRGAV.12    
      SUBROUTINE TRGAV(S,CSPA,DSIGMA,STOT)                                 TRGAV.13    
      IMPLICIT NONE                                                        TRGAV.14    
*CALL PARAM1                                                               TRGAV.15    
*CALL PARAM2                                                               TRGAV.16    
*CALL PARAM3                                                               TRGAV.17    
*CALL MPIDECK                                                              TRGAV.18    
!-----------------------------------------------------                     TRGAV.19    
! Passed variables                                                         TRGAV.20    
!-----------------------------------------------------                     TRGAV.21    
      COMPLEX :: S(NNTx,MMTy,NHEM,NL)                                      TRGAV.22    
      COMPLEX :: CSPA(NNTx,MMTy,NHEM)                                      TRGAV.23    
      REAL :: DSIGMA(NL)                                                   TRGAV.24    
      REAL :: STOT                                                         TRGAV.25    
!-----------------------------------------------------                     TRGAV.26    
! Local variables                                                          TRGAV.27    
!-----------------------------------------------------                     TRGAV.28    
      INTEGER, PARAMETER :: TagRef=26000                                   TRGAV.29    
      REAL :: ZTOT                                                         TRGAV.30    
      REAL :: ZTOTL                                                        TRGAV.31    
      INTEGER :: IN1                                                       TRGAV.32    
! Loop variables                                                           TRGAV.33    
      INTEGER :: IHEM, IM, IN, iPe, L                                      TRGAV.34    
!-----------------------------------------------------                     TRGAV.35    
! Just the first zonal wavenumber                                          TRGAV.36    
!-----------------------------------------------------                     TRGAV.37    
      ZTOT=0.                                                              TRGAV.38    
      IF (iRow.EQ.1) THEN                                                  TRGAV.39    
         DO IHEM=1,NHEM                                                    TRGAV.40    
            DO L=1,NL                                                      TRGAV.41    
               ZTOTL=0.                                                    TRGAV.42    
               DO IN=1,mTwin1(2,1)                                         TRGAV.43    
                  ZTOTL=ZTOTL+REAL(S(IN,1,IHEM,L))*                        TRGAV.44    
     &                 REAL(CSPA(IN,1,IHEM))                               TRGAV.45    
               ENDDO                                                       TRGAV.46    
               ZTOT=ZTOT+0.5*ZTOTL*DSIGMA(L)                               TRGAV.47    
            ENDDO                                                          TRGAV.48    
         ENDDO                                                             TRGAV.49    
      ENDIF                                                                TRGAV.50    
!-----------------------------------------------------                     TRGAV.51    
! Everything but the first zonal wavenumber                                TRGAV.52    
!-----------------------------------------------------                     TRGAV.53    
      DO IHEM=1,NHEM                                                       TRGAV.54    
         DO L=1,NL                                                         TRGAV.55    
            ZTOTL=0.                                                       TRGAV.56    
            DO IM=1,MMTyy(iRow)                                            TRGAV.57    
               IF ((iRow.EQ.1).AND.(IM.EQ.1)) THEN                         TRGAV.58    
                  IN1=mTwin1(2,1)+1                                        TRGAV.59    
               ELSE                                                        TRGAV.60    
                  IN1=1                                                    TRGAV.61    
               ENDIF                                                       TRGAV.62    
               DO IN=IN1,NNTxx(iCol)                                       TRGAV.63    
                  ZTOTL=ZTOTL+REAL(S(IN,IM,IHEM,L)*CSPA(IN,IM,IHEM))       TRGAV.64    
               ENDDO                                                       TRGAV.65    
            ENDDO                                                          TRGAV.66    
            ZTOT=ZTOT+ZTOTL*DSIGMA(L)                                      TRGAV.67    
         ENDDO                                                             TRGAV.68    
      ENDDO                                                                TRGAV.69    
!-----------------------------------------------------                     TRGAV.70    
! On PE 0 add all PE values together                                       TRGAV.71    
!-----------------------------------------------------                     TRGAV.72    
      IF (MyPe.NE.0) THEN                                                  TRGAV.73    
         !-----------------------------------------------------            TRGAV.74    
         ! Send the data to PE 0                                           TRGAV.75    
         !-----------------------------------------------------            TRGAV.76    
         iRecv=0                                                           TRGAV.77    
         nBuffSize=1                                                       TRGAV.78    
         iTag=TagRef+MyPe                                                  TRGAV.79    
         CALL MPI_BSEND(ZTOT,nBuffSize,ParaReal,iRecv,iTag,                TRGAV.80    
     &        MPI_COMM_WORLD,ierr)                                         TRGAV.81    
      ENDIF                                                                TRGAV.82    
      IF (NPE.GT.1) CALL MPI_BARRIER(MPI_COMM_WORLD,ierr)                  TRGAV.83    
      IF (MyPe.EQ.0) THEN                                                  TRGAV.84    
         !-----------------------------------------------------            TRGAV.85    
         ! On PE 0 set STOT to the total on this PE.                       TRGAV.86    
         !-----------------------------------------------------            TRGAV.87    
         STOT=ZTOT                                                         TRGAV.88    
         IF (NPE.GT.1) THEN                                                TRGAV.89    
            DO iPe=1,NPE-1                                                 TRGAV.90    
               !-----------------------------------------------------      TRGAV.91    
               ! Receive the total from PE iPe                             TRGAV.92    
               !-----------------------------------------------------      TRGAV.93    
               iSend=iPe                                                   TRGAV.94    
               nBuffSize=1                                                 TRGAV.95    
               iTag=TagRef+iPe                                             TRGAV.96    
               CALL MPI_RECV(ZTOT,nBuffSize,ParaReal,iSend,                TRGAV.97    
     &              iTag,MPI_COMM_WORLD,istat,ierr)                        TRGAV.98    
               !-----------------------------------------------------      TRGAV.99    
               ! Add to running total on PE 0                              TRGAV.100   
               !-----------------------------------------------------      TRGAV.101   
               STOT=STOT+ZTOT                                              TRGAV.102   
            ENDDO                                                          TRGAV.103   
         ENDIF                                                             TRGAV.104   
      ENDIF                                                                TRGAV.105   
      RETURN                                                               TRGAV.106   
      END                                                                  TRGAV.107   
*ENDIF                                                                     TRGAV.108   
*DECK TSTEP                                                                TSTEP.1     
!=====================================================                     TSTEP.2     
! Takes an adiabatic timestep in spectral space                            TSTEP.3     
! either a centred semi-implicit timestep for KOUNT>KITS                   TSTEP.4     
! or an initial short timestep for KOUNT<KITS                              TSTEP.5     
!                                                                          TSTEP.6     
! A time filter used for centred timestep.                                 TSTEP.7     
!=====================================================                     TSTEP.8     
      SUBROUTINE TSTEP                                                     TSTEP.9     
      IMPLICIT NONE                                                        TSTEP.10    
*CALL PARAM1                                                               TSTEP.11    
*CALL PARAM2                                                               TSTEP.12    
*CALL PARAM3                                                               TSTEP.13    
*CALL BLANK                                                                TSTEP.14    
*CALL SPECTR                                                               TSTEP.15    
*CALL BATS                                                                 TSTEP.16    
*CALL RESTOR                                                               TSTEP.17    
*CALL MPIDECK                                                              TSTEP.18    
!-----------------------------------------------------                     TSTEP.19    
! Local variables                                                          TSTEP.20    
!-----------------------------------------------------                     TSTEP.21    
      REAL :: WA(NL)                                                       TSTEP.22    
      COMPLEX :: D1(NL)                                                    TSTEP.23    
      INTEGER IWA(NL)                                                      TSTEP.24    
      REAL :: TBM1(NL,NL)                                                  TSTEP.25    
!-----------------------------------------------------                     TSTEP.26    
! RMPA and RMPB are REAL versions of the complex arrays TMPA and           TSTEP.27    
! TMPB.                                                                    TSTEP.28    
!-----------------------------------------------------                     TSTEP.29    
      COMPLEX :: TMPA(NL),TMPB(NL)                                         TSTEP.30    
      REAL :: RMPA(2,NL),RMPB(2,NL)                                        TSTEP.31    
      EQUIVALENCE (TMPA(1),RMPA(1,1)),(TMPB(1),RMPB(1,1))                  TSTEP.32    
!-----------------------------------------------------                     TSTEP.33    
! TTR, DTR, TMIR D1R are REAL versions of the COMPLEX arrays TT            TSTEP.34    
! DT, TMI D1 respectively                                                  TSTEP.35    
!-----------------------------------------------------                     TSTEP.36    
      REAL :: TTR(2*NNTx,MMTy,NHEM,NL),DTR(2*NNTx,MMTy,NHEM,NL)            TSTEP.37    
      REAL :: TMIR(2*NNTx,MMTy,NHEM,NL),D1R(2,NL)                          TSTEP.38    
      EQUIVALENCE (TTR(1,1,1,1),TT(1,1,1,1)),(DTR(1,1,1,1),DT(1,1,1,1))    TSTEP.39    
      EQUIVALENCE (TMIR(1,1,1,1),TMI(1,1,1,1))                             TSTEP.40    
     +,(D1R(1,1),D1(1))                                                    TSTEP.41    
      COMPLEX :: ZPAV,TPAV,DPAV,DTI,SPAV                                   TSTEP.42    
      COMPLEX :: TRAPAV                                                    TSTEP.43    
      COMPLEX :: SPPA,VPS,GSI1                                             TSTEP.44    
      INTEGER :: I1, IBM1                                                  TSTEP.45    
      REAL :: RCN                                                          TSTEP.46    
      INTEGER :: N                                                         TSTEP.47    
! Loop variables                                                           TSTEP.48    
      INTEGER :: IHEM, IL, IM, IN, iZon, KK, L, M, MP, nT                  TSTEP.49    
      INTEGER :: NVAL                                                      TSTEP.50    
!-----------------------------------------------------                     TSTEP.51    
! Determine if it should be the short initial timestep or                  TSTEP.52    
! centred semi-implicit timstep.                                           TSTEP.53    
!-----------------------------------------------------                     TSTEP.54    
      IF (KOUNT.GT.KITS) THEN                                              TSTEP.55    
         !-----------------------------------------------------            TSTEP.56    
         ! Ordinary centred semi-implicit timestep                         TSTEP.57    
         !-----------------------------------------------------            TSTEP.58    
         DO IHEM=1,NHEM                                                    TSTEP.59    
            DO IM=1,MMTyy(iRow)                                            TSTEP.60    
               DO IN=1,NNTxx(iCol)                                         TSTEP.61    
                  N=nWave(IN,IM,iCol)                                      TSTEP.62    
                  IF ((N+IHEM).GT.1) THEN                                  TSTEP.63    
                     SPPA=SPMI(IN,IM,IHEM)                                 TSTEP.64    
                     VPS=VP(IN,IM,IHEM)                                    TSTEP.65    
                     RCN=RSQ(N+IHEM)                                       TSTEP.66    
                     GSI1=GS(IN,IM,IHEM)                                   TSTEP.67    
                     !---------------------------------------------        TSTEP.68    
                     ! Multiplies the temperature source term              TSTEP.69    
                     ! matrix, TTR/TT, and matrix G (matrix G              TSTEP.70    
                     ! relates temperature to geopotential).               TSTEP.71    
                     !---------------------------------------------        TSTEP.72    
                     CALL SGEMM('N','N',2,NL,NL,1.0,                       TSTEP.73    
     &                    TTR(2*IN-1,IM,IHEM,1),(2*NNTx*MMTy*NHEM),        TSTEP.74    
     &                    G,NL,0.0,RMPA,2)                                 TSTEP.75    
                     !---------------------------------------------        TSTEP.76    
                     ! Multiplies temperature matrix, TMIR/TMI, by G.      TSTEP.77    
                     !---------------------------------------------        TSTEP.78    
                     CALL SGEMM('N','N',2,NL,NL,1.0,                       TSTEP.79    
     &                    TMIR(2*IN-1,IM,IHEM,1),(2*NNTx*MMTy*NHEM),       TSTEP.80    
     &                    G,NL,0.0,RMPB,2)                                 TSTEP.81    
                     !---------------------------------------------        TSTEP.82    
                     ! The RHS of equation 17 in Hoskins and Simmons       TSTEP.83    
                     ! (1975) (H & S) - source term for calculating        TSTEP.84    
                     ! divergence.                                         TSTEP.85    
                     !---------------------------------------------        TSTEP.86    
                     DO L=1,NL                                             TSTEP.87    
                        D1(L)=RCN*DMI(IN,IM,IHEM,L)+DELT*(TMPB(L)+         TSTEP.88    
     &                       GSI1+T0(L)*SPPA+RCN*DT(IN,IM,IHEM,L)+         TSTEP.89    
     &                       DELT*(TMPA(L)-T0(L)*VPS))                     TSTEP.90    
                     ENDDO                                                 TSTEP.91    
                     !---------------------------------------------        TSTEP.92    
                     ! Calculates the source term for divergence,          TSTEP.93    
                     ! DTR/DT, by multiplying the source term matrix       TSTEP.94    
                     ! above, D1R/D1, by an inversion of H & S's           TSTEP.95    
                     ! matrix A_n, BM1(:,:,IN).                            TSTEP.96    
                     !---------------------------------------------        TSTEP.97    
                     CALL SGEMM('N','N',2,NL,NL,1.0,D1R,2,                 TSTEP.98    
     &                    BM1(1,1,N+IHEM-1),NL,0.0,                        TSTEP.99    
     &                    DTR(2*IN-1,IM,IHEM,1),(2*NNTx*MMTy*NHEM))        TSTEP.100   
                     !---------------------------------------------        TSTEP.101   
                     ! Calculates ln(pressure) (RHS of eq 15 in            TSTEP.102   
                     ! H & S)                                              TSTEP.103   
                     !---------------------------------------------        TSTEP.104   
                     DO L=1,NL                                             TSTEP.105   
                        VP(IN,IM,IHEM)=VP(IN,IM,IHEM)+                     TSTEP.106   
     &                       DT(IN,IM,IHEM,L)*DSIGMA(L)                    TSTEP.107   
                     ENDDO                                                 TSTEP.108   
                     !---------------------------------------------        TSTEP.109   
                     ! Multiplies divergence source term matrix,           TSTEP.110   
                     ! DTR/DT, by matrix tau (RHS of eq 14 in H & S)       TSTEP.111   
                     !---------------------------------------------        TSTEP.112   
                     CALL SGEMM('N','N',2,NL,NL,1.0,                       TSTEP.113   
     &                    DTR(2*IN-1,IM,IHEM,1),(2*NNTx*MMTy*NHEM),        TSTEP.114   
     &                    TAU,NL,0.0,RMPA,2)                               TSTEP.115   
                     !---------------------------------------------        TSTEP.116   
                     ! Calculates source term for temperature, TT          TSTEP.117   
                     !---------------------------------------------        TSTEP.118   
                     DO L=1,NL                                             TSTEP.119   
                        TT(IN,IM,IHEM,L)=TT(IN,IM,IHEM,L)-TMPA(L)          TSTEP.120   
                     ENDDO                                                 TSTEP.121   
                  ENDIF                                                    TSTEP.122   
               ENDDO                                                       TSTEP.123   
            ENDDO                                                          TSTEP.124   
         ENDDO                                                             TSTEP.125   
         !-----------------------------------------------------            TSTEP.126   
         ! Calculate diabatic vorticity, divergence and temperature.       TSTEP.127   
         !-----------------------------------------------------            TSTEP.128   
         DO L=1,NL                                                         TSTEP.129   
            DO IHEM=1,NHEM                                                 TSTEP.130   
               DO IM=1,MMTyy(iRow)                                         TSTEP.131   
                  DO IN=1,NNTxx(iCol)                                      TSTEP.132   
                     ZPAV=ZMI(IN,IM,IHEM,L)                                TSTEP.133   
                     ZMI(IN,IM,IHEM,L)=PNU21*Z(IN,IM,IHEM,L)+PNU*ZPAV      TSTEP.134   
                     Z(IN,IM,IHEM,L)=ZPAV+DELT2*ZT(IN,IM,IHEM,L)           TSTEP.135   
                     TPAV=TMI(IN,IM,IHEM,L)                                TSTEP.136   
                     TMI(IN,IM,IHEM,L)=PNU21*T(IN,IM,IHEM,L)+PNU*TPAV      TSTEP.137   
                     T(IN,IM,IHEM,L)=TPAV+DELT2*TT(IN,IM,IHEM,L)           TSTEP.138   
                     DPAV=DMI(IN,IM,IHEM,L)                                TSTEP.139   
                     DTI=DT(IN,IM,IHEM,L)                                  TSTEP.140   
                     DMI(IN,IM,IHEM,L)=PNU21*D(IN,IM,IHEM,L)+PNU*DPAV      TSTEP.141   
                     D(IN,IM,IHEM,L)=DTI+DTI-DPAV                          TSTEP.142   
                  ENDDO                                                    TSTEP.143   
               ENDDO                                                       TSTEP.144   
            ENDDO                                                          TSTEP.145   
         ENDDO                                                             TSTEP.146   
*IF DEF,ABOVE_V1                                                           TSTEP.147   
         !-----------------------------------------------------            TSTEP.148   
         ! Calculate tracers                                               TSTEP.149   
         !-----------------------------------------------------            TSTEP.150   
         DO KK=1,NTRAC                                                     TSTEP.151   
            DO L=1,NL                                                      TSTEP.152   
               DO IHEM=1,NHEM                                              TSTEP.153   
                  DO IM=1,MMTyy(iRow)                                      TSTEP.154   
                     DO IN=1,NNTxx(iCol)                                   TSTEP.155   
                        TRAPAV=TRAMI(IN,IM,IHEM,L,KK)                      TSTEP.156   
                        TRAMI(IN,IM,IHEM,L,KK)=PNU21*                      TSTEP.157   
     &                       TRA(IN,IM,IHEM,L,KK)+PNU*TRAPAV               TSTEP.158   
                        TRA(IN,IM,IHEM,L,KK)=TRAPAV+DELT2*                 TSTEP.159   
     &                       TRAT(IN,IM,IHEM,L,KK)                         TSTEP.160   
                     ENDDO                                                 TSTEP.161   
                  ENDDO                                                    TSTEP.162   
               ENDDO                                                       TSTEP.163   
            ENDDO                                                          TSTEP.164   
         ENDDO                                                             TSTEP.165   
*ENDIF                                                                     TSTEP.166   
         !-----------------------------------------------------            TSTEP.167   
         ! Calculate surface pressure                                      TSTEP.168   
         !-----------------------------------------------------            TSTEP.169   
         DO IHEM=1,NHEM                                                    TSTEP.170   
            DO IM=1,MMTyy(iRow)                                            TSTEP.171   
               DO IN=1,NNTxx(iCol)                                         TSTEP.172   
                  SPAV=SPMI(IN,IM,IHEM)                                    TSTEP.173   
                  SPMI(IN,IM,IHEM)=PNU21*SP(IN,IM,IHEM)+PNU*SPAV           TSTEP.174   
                  SP(IN,IM,IHEM)=SPAV-DELT2*VP(IN,IM,IHEM)                 TSTEP.175   
               ENDDO                                                       TSTEP.176   
            ENDDO                                                          TSTEP.177   
         ENDDO                                                             TSTEP.178   
         RETURN                                                            TSTEP.179   
      ELSE                                                                 TSTEP.180   
         !-----------------------------------------------------            TSTEP.181   
         ! Initial short timestep                                          TSTEP.182   
         !-----------------------------------------------------            TSTEP.183   
         DO IHEM=1,NHEM                                                    TSTEP.184   
            DO IM=1,MMTyy(iRow)                                            TSTEP.185   
               DO IN=1,NNTxx(iCol)                                         TSTEP.186   
                  N=nWave(IN,IM,iCol)                                      TSTEP.187   
                  IF (N+IHEM.GT.1) THEN                                    TSTEP.188   
                     SPPA=SPMI(IN,IM,IHEM)                                 TSTEP.189   
                     VPS=VP(IN,IM,IHEM)                                    TSTEP.190   
                     RCN=RSQ(N+IHEM)                                       TSTEP.191   
                     GSI1=GS(IN,IM,IHEM)                                   TSTEP.192   
                     DO L=1,NL                                             TSTEP.193   
                        DO M=1,NL                                          TSTEP.194   
                           TBM1(M,L)=AQ(M,L)                               TSTEP.195   
                        ENDDO                                              TSTEP.196   
                     ENDDO                                                 TSTEP.197   
                     DO L=1,NL                                             TSTEP.198   
                        TBM1(L,L)=TBM1(L,L)+RCN                            TSTEP.199   
                     ENDDO                                                 TSTEP.200   
                     !---------------------------------------------        TSTEP.201   
                     ! Multiplies the temperature source term,             TSTEP.202   
                     ! matrix, TTR/TT, and matrix G (matrix G relates      TSTEP.203   
                     ! temperature to geopotential).                       TSTEP.204   
                     !---------------------------------------------        TSTEP.205   
                     CALL SGEMM('N','N',2,NL,NL,1.0,                       TSTEP.206   
     &                    TTR(2*IN-1,IM,IHEM,1),(2*NNTx*MMTy*NHEM),        TSTEP.207   
     &                    G,NL,0.0,RMPA,2)                                 TSTEP.208   
                     !---------------------------------------------        TSTEP.209   
                     ! Multiplies temperature matrix, TMIR/TMI, by G.      TSTEP.210   
                     !---------------------------------------------        TSTEP.211   
                     CALL SGEMM('N','N',2,NL,NL,1.0,                       TSTEP.212   
     &                    TMIR(2*IN-1,IM,IHEM,1),(2*NNTx*MMTy*NHEM),       TSTEP.213   
     &                    G,NL,0.0,RMPB,2)                                 TSTEP.214   
                     !---------------------------------------------        TSTEP.215   
                     ! The RHS of equation 17 in Hoskins and Simmons       TSTEP.216   
                     ! (1975) (H & S) - source term for calculating        TSTEP.217   
                     ! divergence.                                         TSTEP.218   
                     !---------------------------------------------        TSTEP.219   
                     DO L=1,NL                                             TSTEP.220   
                        D1(L)=RCN*DMI(IN,IM,IHEM,L)+DELT*(TMPB(L)+         TSTEP.221   
     &                       GSI1+T0(L)*SPPA+RCN*DT(IN,IM,IHEM,L)+         TSTEP.222   
     &                       DELT*(TMPA(L)-T0(L)*VPS))                     TSTEP.223   
                     ENDDO                                                 TSTEP.224   
                     !---------------------------------------------        TSTEP.225   
                     ! Invert the matrix on the LHS of eq 17 in            TSTEP.226   
                     ! H & S (1975)                                        TSTEP.227   
                     !---------------------------------------------        TSTEP.228   
                     CALL MATINV(TBM1,NL,NL,IWA,WA)                        TSTEP.229   
                     !---------------------------------------------        TSTEP.230   
                     ! Calculates the source term for divergence,          TSTEP.231   
                     ! DTR/DT, by multiplying the source term matrix       TSTEP.232   
                     ! above, D1R/D1, by an inversion of H & S's           TSTEP.233   
                     ! matrix A_n, BM1(:,:,IN).                            TSTEP.234   
                     !---------------------------------------------        TSTEP.235   
                     CALL SGEMM('N','N',2,NL,NL,1.0,D1R,2,                 TSTEP.236   
     &                    TBM1,NL,0.0,DTR(2*IN-1,IM,IHEM,1),               TSTEP.237   
     &                    (2*NNTx*MMTy*NHEM))                              TSTEP.238   
                     !---------------------------------------------        TSTEP.239   
                     ! Calculates ln(pressure) (RHS of eq 15 in            TSTEP.240   
                     ! H & S)                                              TSTEP.241   
                     !---------------------------------------------        TSTEP.242   
                     DO L=1,NL                                             TSTEP.243   
                        VP(IN,IM,IHEM)=VP(IN,IM,IHEM)+                     TSTEP.244   
     &                       DT(IN,IM,IHEM,L)*DSIGMA(L)                    TSTEP.245   
                     ENDDO                                                 TSTEP.246   
                     !---------------------------------------------        TSTEP.247   
                     ! Multiplies divergence source term matrix,           TSTEP.248   
                     ! DTR/DT, by matrix tau (RHS of eq 14 in H & S)       TSTEP.249   
                     !---------------------------------------------        TSTEP.250   
                     CALL SGEMM('N','N',2,NL,NL,1.0,                       TSTEP.251   
     &                    DTR(2*IN-1,IM,IHEM,1),(2*NNTx*MMTy*NHEM),        TSTEP.252   
     &                    TAU,NL,0.0,RMPA,2)                               TSTEP.253   
                     !---------------------------------------------        TSTEP.254   
                     ! Calculates source term for temperature, TT          TSTEP.255   
                     !---------------------------------------------        TSTEP.256   
                     DO L=1,NL                                             TSTEP.257   
                        TT(IN,IM,IHEM,L)=TT(IN,IM,IHEM,L)-TMPA(L)          TSTEP.258   
                     ENDDO                                                 TSTEP.259   
                  ENDIF                                                    TSTEP.260   
               ENDDO                                                       TSTEP.261   
            ENDDO                                                          TSTEP.262   
         ENDDO                                                             TSTEP.263   
         DO L=1,NL                                                         TSTEP.264   
            DO IHEM=1,NHEM                                                 TSTEP.265   
               DO IM=1,MMTyy(iRow)                                         TSTEP.266   
                  DO IN=1,NNTxx(iCol)                                      TSTEP.267   
                     Z(IN,IM,IHEM,L)=ZMI(IN,IM,IHEM,L)+                    TSTEP.268   
     &                    DELT2*ZT(IN,IM,IHEM,L)                           TSTEP.269   
                     T(IN,IM,IHEM,L)=TMI(IN,IM,IHEM,L)+                    TSTEP.270   
     &                    DELT2*TT(IN,IM,IHEM,L)                           TSTEP.271   
                     D(IN,IM,IHEM,L)=DT(IN,IM,IHEM,L)+DT(IN,IM,IHEM,L)-    TSTEP.272   
     &                    DMI(IN,IM,IHEM,L)                                TSTEP.273   
                  ENDDO                                                    TSTEP.274   
               ENDDO                                                       TSTEP.275   
            ENDDO                                                          TSTEP.276   
         ENDDO                                                             TSTEP.277   
*IF DEF,ABOVE_V1                                                           TSTEP.278   
         DO KK=1,NTRAC                                                     TSTEP.279   
            DO L=1,NL                                                      TSTEP.280   
               DO IHEM=1,NHEM                                              TSTEP.281   
                  DO IM=1,MMTyy(iRow)                                      TSTEP.282   
                     DO IN=1,NNTxx(iCol)                                   TSTEP.283   
                        TRA(IN,IM,IHEM,L,KK)=TRAMI(IN,IM,IHEM,L,KK)+       TSTEP.284   
     &                       DELT2*TRAT(IN,IM,IHEM,L,KK)                   TSTEP.285   
                     ENDDO                                                 TSTEP.286   
                  ENDDO                                                    TSTEP.287   
               ENDDO                                                       TSTEP.288   
            ENDDO                                                          TSTEP.289   
         ENDDO                                                             TSTEP.290   
*ENDIF                                                                     TSTEP.291   
         DO IHEM=1,NHEM                                                    TSTEP.292   
            DO IM=1,MMTyy(iRow)                                            TSTEP.293   
               DO IN=1,NNTxx(iCol)                                         TSTEP.294   
                  SP(IN,IM,IHEM)=SPMI(IN,IM,IHEM)-DELT2*VP(IN,IM,IHEM)     TSTEP.295   
               ENDDO                                                       TSTEP.296   
            ENDDO                                                          TSTEP.297   
         ENDDO                                                             TSTEP.298   
         DO L=1,NL                                                         TSTEP.299   
            DO M=1,NL                                                      TSTEP.300   
               AQ(M,L)=AQ(M,L)*4.0                                         TSTEP.301   
            ENDDO                                                          TSTEP.302   
         ENDDO                                                             TSTEP.303   
         RETURN                                                            TSTEP.304   
      ENDIF                                                                TSTEP.305   
      END                                                                  TSTEP.306   
*DECK VADV1                                                                VADV1.1     
*IF DEF,ONLY_V2                                                            VADV1.2     
!=====================================================                     VADV1.3     
!**** *VADV1* -  Centred difference scheme for vertical advection.         VADV1.4     
!                Mike Blackburn               30.10.2000.                  VADV1.5     
!                                                                          VADV1.6     
! PURPOSE                                                                  VADV1.7     
! -------                                                                  VADV1.8     
!      To calculate the vertical advection contribution to the             VADV1.9     
! material derivative using centred differences.  Variables at             VADV1.10    
! the current time-level t are used.  This is simply a modular             VADV1.11    
! version of the original advection scheme in the IGCM.                    VADV1.12    
!                                                                          VADV1.13    
! INTERFACE                                                                VADV1.14    
! ---------                                                                VADV1.15    
!      The logical switch LFLUX indicates whether the flux form            VADV1.16    
! (.true.) or the advective form (.false.) of the advection term           VADV1.17    
! is required.                                                             VADV1.18    
!      The quantity/species to be advected at the current and              VADV1.19    
! previous timesteps (XG,XGMI) and "vertical velocity" (SDOTP) are         VADV1.20    
! passed as arguments.  The resulting contribution to the tendency         VADV1.21    
! (XE) is returned as an argument.  XGMI is unused.                        VADV1.22    
!      Advection is computed for multiple species (KFLD), which are        VADV1.23    
! assumed to be continguous in the argument arrays.                        VADV1.24    
! The MG species/tendency values are offset by KOFM at each level.         VADV1.25    
! Layer thicknesses and sigma values are obtained from common BLANK.       VADV1.26    
!                                                                          VADV1.27    
! METHOD                                                                   VADV1.28    
! ------                                                                   VADV1.29    
!      A sigma vertical coordinate is assumed, with the mass               VADV1.30    
! weighting for the flux form being X = x*dp/d(sigma) = x*ps, where        VADV1.31    
! x is in kg/kg and ps is the (non-dimensional) surface pressure.          VADV1.32    
!                                                                          VADV1.33    
! The flux form of the scheme returns at full level k:                     VADV1.34    
!     -d(sdot*X)/d(sigma) = -[F(k+)-F(k-)]/Dsigma  ,                       VADV1.35    
!                   F(k+) = sdot(k+)*[X(k+1)+X(k)]/2                       VADV1.36    
! k+ and k- are the half levels bounding the layer containing k.           VADV1.37    
!                                                                          VADV1.38    
! The advective form of the scheme returns at full level k:                VADV1.39    
!       -sdot*dx/d(sigma) = -[A(k+)+A(k-)]/2  ,                            VADV1.40    
!                   A(k+) = sdot(k+)*[x(k+1)-x(k)]/Dsigma                  VADV1.41    
!                                                                          VADV1.42    
! In both forms the layer thickness at level k is used, making the         VADV1.43    
! scheme only first order accurate for unequal layer thicknesses.          VADV1.44    
!=====================================================                     VADV1.45    
      SUBROUTINE VADV1(XG,XE,SDOTP,KFLD,IHEM,JH)                           VADV1.46    
      IMPLICIT NONE                                                        VADV1.47    
*CALL PARAM1                                                               VADV1.48    
*CALL PARAM2                                                               VADV1.49    
*CALL PARAM3                                                               VADV1.50    
*CALL BLANK                                                                VADV1.51    
*CALL MPIDECK                                                              VADV1.52    
!-----------------------------------------------------                     VADV1.53    
! Passed variables                                                         VADV1.54    
!-----------------------------------------------------                     VADV1.55    
*IF DEF,NOMPI                                                              VADV1.56    
      REAL :: XG(MGPP,NHEM,JG,NL,KFLD)                                     VADV1.57    
      REAL :: XE(MGPP,NHEM,JG,NL,KFLD)                                     VADV1.58    
*ELSE                                                                      VADV1.59    
      REAL :: XG(MGx,NHEM,JGy,NL,KFLD)                                     VADV1.60    
      REAL :: XE(MGx,NHEM,JGy,NL,KFLD)                                     VADV1.61    
*ENDIF                                                                     VADV1.62    
      REAL :: SDOTP(MGx,0:NL-1)                                            VADV1.63    
      INTEGER :: KFLD                                                      VADV1.64    
      INTEGER :: IHEM                                                      VADV1.65    
      INTEGER :: JH                                                        VADV1.66    
!-----------------------------------------------------                     VADV1.67    
! Local variables                                                          VADV1.68    
!-----------------------------------------------------                     VADV1.69    
      REAL :: ZHM(MGx,NHEM)                                                VADV1.70    
      REAL :: ZHP                                                          VADV1.71    
! Loop variables                                                           VADV1.72    
      INTEGER :: I, KK, L                                                  VADV1.73    
!-----------------------------------------------------                     VADV1.74    
! Loop over species.                                                       VADV1.75    
!-----------------------------------------------------                     VADV1.76    
      DO KK=1,KFLD                                                         VADV1.77    
         !-----------------------------------------------------            VADV1.78    
         ! There's a flux form and advective form                          VADV1.79    
         !-----------------------------------------------------            VADV1.80    
         IF (LFLUX) THEN                                                   VADV1.81    
            !-----------------------------------------------------         VADV1.82    
            ! 1. Flux form                                                 VADV1.83    
            ! Set flux at upper half level to zero, for top level.         VADV1.84    
            !-----------------------------------------------------         VADV1.85    
            DO I=1,MGxx(iCol)                                              VADV1.86    
               ZHM(I,IHEM)=0.0                                             VADV1.87    
            ENDDO                                                          VADV1.88    
            !-----------------------------------------------------         VADV1.89    
            ! Compute flux at lower half level and flux divergence.        VADV1.90    
            !-----------------------------------------------------         VADV1.91    
            DO L=1,NL-1                                                    VADV1.92    
               DO I=1,MGxx(iCol)                                           VADV1.93    
                  ZHP=SDOTP(I,L)*(XG(I,IHEM,JH,L+1,KK)+                    VADV1.94    
     &                 XG(I,IHEM,JH,L,KK))                                 VADV1.95    
                  XE(I,IHEM,JH,L,KK)=-RDSIG(L)*(ZHP-ZHM(I,IHEM))           VADV1.96    
                  ZHM(I,IHEM)=ZHP                                          VADV1.97    
               ENDDO                                                       VADV1.98    
            ENDDO                                                          VADV1.99    
            !-----------------------------------------------------         VADV1.100   
            ! Bottom level.                                                VADV1.101   
            !-----------------------------------------------------         VADV1.102   
            DO I=1,MGxx(iCol)                                              VADV1.103   
               XE(I,IHEM,JH,NL,KK)=RDSIG(NL)*ZHM(I,IHEM)                   VADV1.104   
            ENDDO                                                          VADV1.105   
         ELSE                                                              VADV1.106   
            !-----------------------------------------------------         VADV1.107   
            ! 2. Advective form.                                           VADV1.108   
            ! Set advection at upper half level to zero, for top level.    VADV1.109   
            !-----------------------------------------------------         VADV1.110   
            DO I=1,MGxx(iCol)                                              VADV1.111   
               ZHM(I,IHEM)=0.0                                             VADV1.112   
            ENDDO                                                          VADV1.113   
            !-----------------------------------------------------         VADV1.114   
            ! Compute advection at lower half level and layer average.     VADV1.115   
            !-----------------------------------------------------         VADV1.116   
            DO L=1,NL-1                                                    VADV1.117   
               DO I=1,MGxx(iCol)                                           VADV1.118   
                  ZHP=SDOTP(I,L)*(XG(I,IHEM,JH,L+1,KK)-                    VADV1.119   
     &                 XG(I,IHEM,JH,L,KK))                                 VADV1.120   
                  XE(I,IHEM,JH,L,KK)=-RDSIG(L)*(ZHP+ZHM(I,IHEM))           VADV1.121   
                  ZHM(I,IHEM)=ZHP                                          VADV1.122   
               ENDDO                                                       VADV1.123   
            ENDDO                                                          VADV1.124   
            !-----------------------------------------------------         VADV1.125   
            ! Bottom level.                                                VADV1.126   
            !-----------------------------------------------------         VADV1.127   
            DO I=1,MGxx(iCol)                                              VADV1.128   
               XE(I,IHEM,JH,NL,KK)=-RDSIG(NL)*ZHM(I,IHEM)                  VADV1.129   
            ENDDO                                                          VADV1.130   
         ENDIF                                                             VADV1.131   
      ENDDO                                                                VADV1.132   
      RETURN                                                               VADV1.133   
      END                                                                  VADV1.134   
*ENDIF                                                                     VADV1.135   
*DECK VADV2                                                                VADV2.1     
*IF DEF,ONLY_V2                                                            VADV2.2     
!=====================================================                     VADV2.3     
!**** *VADV2* -  TVD scheme for vertical advection in the IGCM.            VADV2.4     
!            Mike Blackburn               30.10.2000.                      VADV2.5     
!                                                                          VADV2.6     
!            Based on version for UGCM by John Thuburn, 1991-1994.         VADV2.7     
!                                                                          VADV2.8     
! PURPOSE                                                                  VADV2.9     
! -------                                                                  VADV2.10    
!      To calculate the vertical advection contribution to the             VADV2.11    
! material derivative using a TVD scheme.  A first order forward           VADV2.12    
! step is used for these terms, so variables at t-1 are used (apart        VADV2.13    
! from the vertical velocity which is only available at time t).           VADV2.14    
! The Van Leer limiter is used.                                            VADV2.15    
!                                                                          VADV2.16    
! INTERFACE                                                                VADV2.17    
! ---------                                                                VADV2.18    
!      The logical switch LFLUX indicates whether the flux form            VADV2.19    
! (.true.) or the advective form (.false.) of the advection term           VADV2.20    
! is required.                                                             VADV2.21    
!      The quantity/species to be advected at the current and              VADV2.22    
! previous timesteps (XG,XGMI) and "vertical velocity" (SDOTP) are         VADV2.23    
! passed as arguments.  The resulting contribution to the tendency         VADV2.24    
! (XE) is returned as an argument.                                         VADV2.25    
!      Advection is computed for multiple species (KFLD), which are        VADV2.26    
! assumed to be continguous in the argument arrays.                        VADV2.27    
! The MG species/tendency values are offset by KOFM at each level.         VADV2.28    
! Layer thicknesses and sigma values are obtained from common BLANK.       VADV2.29    
!                                                                          VADV2.30    
! METHOD                                                                   VADV2.31    
! ------                                                                   VADV2.32    
!      See Thuburn (1993, QJRMS, 119, 469-487) for details of the          VADV2.33    
! scheme.                                                                  VADV2.34    
!      A sigma vertical coordinate is assumed, with the mass               VADV2.35    
! weighting for the flux form being X = x*dp/d(sigma) = x*ps, where        VADV2.36    
! x is in kg/kg and ps is the (non-dimensional) surface pressure.          VADV2.37    
! This differs from the mass weighting used in the hybrid coord-           VADV2.38    
! inate UGCM and described in Thuburn (1993).                              VADV2.39    
!                                                                          VADV2.40    
! The flux form of the scheme returns at full level k:                     VADV2.41    
!     -d(sdot*X)/d(sigma) = -[F(k+)-F(k-)]/Dsigma  ,                       VADV2.42    
!                   F(k+) = sdot(k+)*X(k+)                                 VADV2.43    
! k+ and k- are the half levels bounding the layer containing k.           VADV2.44    
!                                                                          VADV2.45    
! The advective form of the scheme returns at full level k:                VADV2.46    
!       -sdot*dx/d(sigma) = -d(sdot*x)/d(sigma) + x*d(sdot)/d(sigma)       VADV2.47    
! The first term is computed as in the flux form, but for x not X,         VADV2.48    
! and the second term as:                                                  VADV2.49    
!      x*d(sdot)/d(sigma) = x(k)*[sdot(k+)-sdot(k-)]/Dsigma                VADV2.50    
!                                                                          VADV2.51    
! The TVD properties of both forms depend on the choice of x(k+),          VADV2.52    
! the half-level values of the advected field.                             VADV2.53    
!=====================================================                     VADV2.54    
      SUBROUTINE VADV2(XG,XGMI,XE,SDOTP,KFLD,IHEM,JH)                      VADV2.55    
      IMPLICIT NONE                                                        VADV2.56    
*CALL PARAM1                                                               VADV2.57    
*CALL PARAM2                                                               VADV2.58    
*CALL PARAM3                                                               VADV2.59    
*CALL BLANK                                                                VADV2.60    
*CALL MPIDECK                                                              VADV2.61    
!-----------------------------------------------------                     VADV2.62    
! Passed variables                                                         VADV2.63    
!-----------------------------------------------------                     VADV2.64    
*IF DEF,NOMPI                                                              VADV2.65    
      REAL :: XG(MGPP,NHEM,JG,NL,KFLD)                                     VADV2.66    
      REAL :: XE(MGPP,NHEM,JG,NL,KFLD)                                     VADV2.67    
*ELSE                                                                      VADV2.68    
      REAL :: XG(MGx,NHEM,JGy,NL,KFLD)                                     VADV2.69    
      REAL :: XE(MGx,NHEM,JGy,NL,KFLD)                                     VADV2.70    
*ENDIF                                                                     VADV2.71    
      REAL :: XGMI(MGx,NHEM,JGy,NL,KFLD)                                   VADV2.72    
      REAL :: SDOTP(MGx,0:NL-1)                                            VADV2.73    
      INTEGER :: KFLD                                                      VADV2.74    
      INTEGER :: IHEM                                                      VADV2.75    
      INTEGER :: JH                                                        VADV2.76    
!-----------------------------------------------------                     VADV2.77    
! Local variables                                                          VADV2.78    
!-----------------------------------------------------                     VADV2.79    
      REAL :: ZEPSLIM                                                      VADV2.80    
      REAL :: ZQ                                                           VADV2.81    
      REAL :: DXD                                                          VADV2.82    
      REAL :: DXU                                                          VADV2.83    
      REAL :: ADXU                                                         VADV2.84    
      REAL :: ADXD                                                         VADV2.85    
      REAL :: RDEN                                                         VADV2.86    
      REAL :: ZPHIP(MGx,NHEM,NL-1)                                         VADV2.87    
      REAL :: ZPHIM(MGx,NHEM,NL)                                           VADV2.88    
      REAL :: ZFLUXM(MGx,NHEM)                                             VADV2.89    
      REAL :: RDSG(NL)                                                     VADV2.90    
      REAL :: ZTERM                                                        VADV2.91    
      REAL :: ZFLUXP                                                       VADV2.92    
! Loop variables                                                           VADV2.93    
      INTEGER :: I, KK, L                                                  VADV2.94    
!-----------------------------------------------------                     VADV2.95    
! Security parameter for calculation of limiters.                          VADV2.96    
!-----------------------------------------------------                     VADV2.97    
      ZEPSLIM=1.0E-50                                                      VADV2.98    
!-----------------------------------------------------                     VADV2.99    
! 1. Preliminary calculations.                                             VADV2.100   
!    ----------- -------------                                             VADV2.101   
! Temporary array to avoid division later: differs from RDSIG.             VADV2.102   
!-----------------------------------------------------                     VADV2.103   
      DO L=1,NL                                                            VADV2.104   
         RDSG(L)=1.0/DSIGMA(L)                                             VADV2.105   
      ENDDO                                                                VADV2.106   
!-----------------------------------------------------                     VADV2.107   
! Loop over species.                                                       VADV2.108   
!-----------------------------------------------------                     VADV2.109   
      DO KK=1,KFLD                                                         VADV2.110   
         !-----------------------------------------------------            VADV2.111   
         ! 2. Calculate limiters.                                          VADV2.112   
         !-----------------------------------------------------            VADV2.113   
         DO I=1,MGxx(iCol)                                                 VADV2.114   
            !-----------------------------------------------------         VADV2.115   
            ! Near top boundary.                                           VADV2.116   
            !-----------------------------------------------------         VADV2.117   
            ZQ=XGMI(I,IHEM,JH,1,KK)                                        VADV2.118   
            DXD=XGMI(I,IHEM,JH,2,KK)-XGMI(I,IHEM,JH,1,KK)                  VADV2.119   
            IF (ZQ.GE.0.0) THEN                                            VADV2.120   
               DXU=MIN(DXD,ZQ)                                             VADV2.121   
            ELSE                                                           VADV2.122   
               DXU=MAX(DXD,ZQ)                                             VADV2.123   
            ENDIF                                                          VADV2.124   
            ADXU=ABS(DXU)                                                  VADV2.125   
            ADXD=ABS(DXD)                                                  VADV2.126   
            RDEN=1.0/(ADXU+ADXD+ZEPSLIM)                                   VADV2.127   
            ZPHIP(I,IHEM,1)=(ADXU+DXU*SIGN(1.,DXD))*RDEN                   VADV2.128   
            !-----------------------------------------------------         VADV2.129   
            ! Near bottom boundary.                                        VADV2.130   
            !-----------------------------------------------------         VADV2.131   
            ZQ=XGMI(I,IHEM,JH,NL,KK)                                       VADV2.132   
            DXU=XGMI(I,IHEM,JH,NL,KK)-XGMI(I,IHEM,JH,NL-1,KK)              VADV2.133   
            IF (ZQ.GE.0.0) THEN                                            VADV2.134   
               DXD=MAX(DXU,-ZQ)                                            VADV2.135   
            ELSE                                                           VADV2.136   
               DXD=MIN(DXU,-ZQ)                                            VADV2.137   
            ENDIF                                                          VADV2.138   
            ADXU=ABS(DXU)                                                  VADV2.139   
            ADXD=ABS(DXD)                                                  VADV2.140   
            RDEN=1.0/(ADXU+ADXD+ZEPSLIM)                                   VADV2.141   
            ZPHIM(I,IHEM,NL)=(ADXD+DXD*SIGN(1.0,DXU))*RDEN                 VADV2.142   
            !-----------------------------------------------------         VADV2.143   
            ! Preset fluxes at the top half-level,                         VADV2.144   
            !-----------------------------------------------------         VADV2.145   
            ZFLUXM(I,IHEM)=0.0                                             VADV2.146   
         ENDDO                                                             VADV2.147   
         !-----------------------------------------------------            VADV2.148   
         ! Interior levels.                                                VADV2.149   
         !-----------------------------------------------------            VADV2.150   
         DO L=2,NL-1                                                       VADV2.151   
            DO I=1,MGxx(iCol)                                              VADV2.152   
               DXU=XGMI(I,IHEM,JH,L,KK)-XGMI(I,IHEM,JH,L-1,KK)             VADV2.153   
               DXD=XGMI(I,IHEM,JH,L+1,KK)-XGMI(I,IHEM,JH,L,KK)             VADV2.154   
               ADXU=ABS(DXU)                                               VADV2.155   
               ADXD=ABS(DXD)                                               VADV2.156   
               RDEN=1.0/(ADXU+ADXD+ZEPSLIM)                                VADV2.157   
               ZPHIP(I,IHEM,L)=(ADXU+DXU*SIGN(1.0,DXD))*RDEN               VADV2.158   
               ZPHIM(I,IHEM,L)=(ADXD+DXD*SIGN(1.0,DXU))*RDEN               VADV2.159   
            ENDDO                                                          VADV2.160   
         ENDDO                                                             VADV2.161   
         !-----------------------------------------------------            VADV2.162   
         ! 3. Calculate fluxes and their divergence.                       VADV2.163   
         !    --------- ------ --- ----- -----------                       VADV2.164   
         ! Top and interior levels.                                        VADV2.165   
         ! Relies on sdotp(i,0)=0 at the top half level, sigma=0.          VADV2.166   
         !-----------------------------------------------------            VADV2.167   
         DO L=1,NL-1                                                       VADV2.168   
            IF (.NOT.LFLUX) THEN                                           VADV2.169   
               DO I=1,MGxx(iCol)                                           VADV2.170   
                  DXD=(XGMI(I,IHEM,JH,L+1,KK)-XGMI(I,IHEM,JH,L,KK))*0.5    VADV2.171   
                  IF (SDOTP(I,L).GE.0.0) THEN                              VADV2.172   
                     ZTERM=XGMI(I,IHEM,JH,L,KK)+ZPHIP(I,IHEM,L)*DXD        VADV2.173   
                  ELSE                                                     VADV2.174   
                     ZTERM=XGMI(I,IHEM,JH,L+1,KK)-ZPHIM(I,IHEM,L+1)*DXD    VADV2.175   
                  ENDIF                                                    VADV2.176   
                  ZFLUXP=SDOTP(I,L)*ZTERM                                  VADV2.177   
                  XE(I,IHEM,JH,L,KK)=RDSG(L)*((ZFLUXM(I,IHEM)-ZFLUXP)      VADV2.178   
     &                 +XG(I,IHEM,JH,L,KK)*(SDOTP(I,L)-SDOTP(I,L-1)))      VADV2.179   
                  ZFLUXM(I,IHEM)=ZFLUXP                                    VADV2.180   
               ENDDO                                                       VADV2.181   
            ELSE                                                           VADV2.182   
               DO I=1,MGxx(iCol)                                           VADV2.183   
                  DXD=(XGMI(I,IHEM,JH,L+1,KK)-XGMI(I,IHEM,JH,L,KK))*0.5    VADV2.184   
                  IF (SDOTP(I,L).GE.0.0) THEN                              VADV2.185   
                     ZTERM=XGMI(I,IHEM,JH,L,KK)+ZPHIP(I,IHEM,L)*DXD        VADV2.186   
                  ELSE                                                     VADV2.187   
                     ZTERM=XGMI(I,IHEM,JH,L+1,KK)-ZPHIM(I,IHEM,L+1)*DXD    VADV2.188   
                  ENDIF                                                    VADV2.189   
                  ZFLUXP=SDOTP(I,L)*ZTERM                                  VADV2.190   
                  XE(I,IHEM,JH,L,KK)=RDSG(L)*(ZFLUXM(I,IHEM)-ZFLUXP)       VADV2.191   
                  ZFLUXM(I,IHEM)=ZFLUXP                                    VADV2.192   
               ENDDO                                                       VADV2.193   
            ENDIF                                                          VADV2.194   
         ENDDO                                                             VADV2.195   
         !-----------------------------------------------------            VADV2.196   
         ! Bottom level.                                                   VADV2.197   
         !-----------------------------------------------------            VADV2.198   
         IF (.NOT.LFLUX) THEN                                              VADV2.199   
            DO I=1,MGxx(iCol)                                              VADV2.200   
               XE(I,IHEM,JH,NL,KK)=RDSG(NL)*(ZFLUXM(I,IHEM)-               VADV2.201   
     &              XG(I,IHEM,JH,NL,KK)*SDOTP(I,NL-1))                     VADV2.202   
            ENDDO                                                          VADV2.203   
         ELSE                                                              VADV2.204   
            DO I=1,MGxx(iCol)                                              VADV2.205   
               XE(I,IHEM,JH,NL,KK)=RDSG(NL)*ZFLUXM(I,IHEM)                 VADV2.206   
            ENDDO                                                          VADV2.207   
         ENDIF                                                             VADV2.208   
      ENDDO                                                                VADV2.209   
      RETURN                                                               VADV2.210   
      END                                                                  VADV2.211   
*ENDIF                                                                     VADV2.212   
*DECK VADV3                                                                VADV3.1     
*IF DEF,ONLY_V2                                                            VADV3.2     
!=====================================================                     VADV3.3     
!**** *VADV3* -  TVD scheme for vertical advection in the IGCM.            VADV3.4     
!            Mike Blackburn               02.11.2000.                      VADV3.5     
!                                                                          VADV3.6     
! Based on version for UGCM by John Thuburn, Aug. 1992.                    VADV3.7     
!=====================================================                     VADV3.8     
      SUBROUTINE VADV3(XG,XGMI,XE,SDOTP,KFLD,IHEM,JH)                      VADV3.9     
      IMPLICIT NONE                                                        VADV3.10    
*CALL PARAM1                                                               VADV3.11    
*CALL PARAM2                                                               VADV3.12    
*CALL PARAM3                                                               VADV3.13    
*CALL BLANK                                                                VADV3.14    
*CALL MPIDECK                                                              VADV3.15    
!-----------------------------------------------------                     VADV3.16    
! Passed variables                                                         VADV3.17    
!-----------------------------------------------------                     VADV3.18    
*IF DEF,NOMPI                                                              VADV3.19    
      REAL :: XG(MGPP,NHEM,JG,NL,KFLD)                                     VADV3.20    
      REAL :: XE(MGPP,NHEM,JG,NL,KFLD)                                     VADV3.21    
*ELSE                                                                      VADV3.22    
      REAL :: XG(MGx,NHEM,JGy,NL,KFLD)                                     VADV3.23    
      REAL :: XE(MGx,NHEM,JGy,NL,KFLD)                                     VADV3.24    
*ENDIF                                                                     VADV3.25    
      REAL :: XGMI(MGx,NHEM,JGy,NL,KFLD)                                   VADV3.26    
      REAL :: SDOTP(MGx,0:NL-1)                                            VADV3.27    
      INTEGER :: KFLD                                                      VADV3.28    
      INTEGER :: IHEM                                                      VADV3.29    
      INTEGER :: JH                                                        VADV3.30    
!-----------------------------------------------------                     VADV3.31    
! Scheme not implemented yet                                               VADV3.32    
!-----------------------------------------------------                     VADV3.33    
      IF (MyPe.EQ.0) WRITE(2,                                              VADV3.34    
     &     '(/'' ***ABORT IN VADV3: SCHEME NOT YET IMPLEMENTED'')')        VADV3.35    
      CALL ABORT                                                           VADV3.36    
      RETURN                                                               VADV3.37    
      END                                                                  VADV3.38    
*ENDIF                                                                     VADV3.39    
*DECK VDIFF                                                                VDIFF.1     
*IF DEF,ABOVE_V1                                                           VDIFF.2     
!=====================================================                     VDIFF.3     
! VERTICAL DIFFUSION OF MOMENTUM, HEAT AND MOISTURE.                       VDIFF.4     
! CONSTANT DIFFUSION COEFFICIENTS SET IN INITAL.                           VDIFF.5     
! ASSUMES ZERO FLUX AT UPPER AND LOWER BOUNDARIES.                         VDIFF.6     
! SURFACE FLUX DEALT WITH SEPARATELY IN BLAYER.                            VDIFF.7     
!=====================================================                     VDIFF.8     
      SUBROUTINE VDIFF(JH)                                                 VDIFF.9     
      IMPLICIT NONE                                                        VDIFF.10    
*CALL PARAM1                                                               VDIFF.11    
*CALL PARAM2                                                               VDIFF.12    
*CALL PARAM3                                                               VDIFF.13    
*CALL BLANK                                                                VDIFF.14    
*CALL LEGAU                                                                VDIFF.15    
*CALL GRIDPA3                                                              VDIFF.16    
*CALL GRIDPC                                                               VDIFF.17    
*CALL PHYSCA                                                               VDIFF.18    
*CALL MPIDECK                                                              VDIFF.19    
!-----------------------------------------------------                     VDIFF.20    
! Passed argument                                                          VDIFF.21    
!-----------------------------------------------------                     VDIFF.22    
! Latitude index                                                           VDIFF.23    
      INTEGER :: JH                                                        VDIFF.24    
!-----------------------------------------------------                     VDIFF.25    
! Local variables                                                          VDIFF.26    
!-----------------------------------------------------                     VDIFF.27    
      REAL BVP(MGx),BQP(MGx),BTP(MGx),BVM(MGx),BQM(MGx),BTM(MGx)           VDIFF.28    
      REAL FA(NL)                                                          VDIFF.29    
      REAL :: TLPH                                                         VDIFF.30    
      REAL :: FTSQ                                                         VDIFF.31    
! Loop variables                                                           VDIFF.32    
      INTEGER :: I, IHEM, L                                                VDIFF.33    
!-----------------------------------------------------                     VDIFF.34    
!                                                                          VDIFF.35    
!-----------------------------------------------------                     VDIFF.36    
      DO L=1,NL                                                            VDIFF.37    
         FA(L)=1.0/DSIGMA(L)                                               VDIFF.38    
      ENDDO                                                                VDIFF.39    
!-----------------------------------------------------                     VDIFF.40    
!                                                                          VDIFF.41    
!-----------------------------------------------------                     VDIFF.42    
      DO IHEM=1,NHEM                                                       VDIFF.43    
         DO I=1,MGxx(iCol)                                                 VDIFF.44    
            TLPH=TG3(I,IHEM,JH,2)+TG3(I,IHEM,JH,1)                         VDIFF.45    
            FTSQ=FB(1)/(TLPH*TLPH)                                         VDIFF.46    
            BVP(I)=AKVV*FTSQ                                               VDIFF.47    
            BQP(I)=AKQV*FTSQ                                               VDIFF.48    
            BTP(I)=AKTV*FTSQ                                               VDIFF.49    
            UTVD(I,IHEM,1)=FA(1)*BVP(I)*(UG3(I,IHEM,JH,2)-                 VDIFF.50    
     &           UG3(I,IHEM,JH,1))                                         VDIFF.51    
            VTVD(I,IHEM,1)=FA(1)*BVP(I)*(VG3(I,IHEM,JH,2)-                 VDIFF.52    
     &           VG3(I,IHEM,JH,1))                                         VDIFF.53    
            QTVD(I,IHEM,1)=FA(1)*BQP(I)*(TRAG3(I,IHEM,JH,2,1)-             VDIFF.54    
     &           TRAG3(I,IHEM,JH,1,1))                                     VDIFF.55    
            TTVD(I,IHEM,1)=FA(1)*BTP(I)*(SK(1)*TG3(I,IHEM,JH,2)-           VDIFF.56    
     &           TG3(I,IHEM,JH,1))                                         VDIFF.57    
         ENDDO                                                             VDIFF.58    
         DO L=2,NL-1                                                       VDIFF.59    
            DO I=1,MGxx(iCol)                                              VDIFF.60    
               BVM(I)=BVP(I)                                               VDIFF.61    
               BQM(I)=BQP(I)                                               VDIFF.62    
               BTM(I)=BTP(I)                                               VDIFF.63    
               TLPH=TG3(I,IHEM,JH,L+1)+TG3(I,IHEM,JH,L)                    VDIFF.64    
               FTSQ=FB(L)/(TLPH*TLPH)                                      VDIFF.65    
               BVP(I)=AKVV*FTSQ                                            VDIFF.66    
               BQP(I)=AKQV*FTSQ                                            VDIFF.67    
               BTP(I)=AKTV*FTSQ                                            VDIFF.68    
*IF DEF,ONLY_V3                                                            VDIFF.69    
               IF (L.EQ.(NL-1)) THEN                                       VDIFF.70    
                  if (LBL.and.(.not.LOLDBL)) THEN                          VDIFF.71    
                     BVP(I)=BVP(I)*5.                                      VDIFF.72    
                  endif                                                    VDIFF.73    
               ENDIF                                                       VDIFF.74    
*ENDIF                                                                     VDIFF.75    
               UTVD(i,ihem,l)=FA(L)*( BVP(I)*(UG3(I,IHEM,JH,L+1)-          VDIFF.76    
     &              UG3(I,IHEM,JH,L))-BVM(I)*                              VDIFF.77    
     &              (UG3(I,IHEM,JH,L)-UG3(I,IHEM,JH,L-1)))                 VDIFF.78    
               VTVD(I,IHEM,L)=FA(L)*( BVP(I)*(VG3(I,IHEM,JH,L+1)-          VDIFF.79    
     &              VG3(I,IHEM,JH,L))-BVM(I)*                              VDIFF.80    
     &              (VG3(I,IHEM,JH,L)-VG3(I,IHEM,JH,L-1)))                 VDIFF.81    
               QTVD(I,IHEM,L)=FA(L)*( BQP(I)*(TRAG3(I,IHEM,JH,L+1,1)-      VDIFF.82    
     &              TRAG3(I,IHEM,JH,L,1))-BQM(I)*                          VDIFF.83    
     &              (TRAG3(I,IHEM,JH,L,1)-TRAG3(I,IHEM,JH,L-1,1)))         VDIFF.84    
               TTVD(I,IHEM,L)=FA(L)*( BTP(I)*(SK(L)*TG3(I,IHEM,JH,L+1)-    VDIFF.85    
     &              TG3(I,IHEM,JH,L))-BTM(I)*                              VDIFF.86    
     &              (TG3(I,IHEM,JH,L)-TG3(I,IHEM,JH,L-1)/SK(L-1)))         VDIFF.87    
            ENDDO                                                          VDIFF.88    
         ENDDO                                                             VDIFF.89    
         DO I=1,MGxx(iCol)                                                 VDIFF.90    
            UTVD(I,IHEM,NL)=-FA(NL)*BVP(I)*(UG3(I,IHEM,JH,NL)-             VDIFF.91    
     &           UG3(I,IHEM,JH,NL-1))                                      VDIFF.92    
            VTVD(I,IHEM,NL)=-FA(NL)*BVP(I)*(VG3(I,IHEM,JH,NL)-             VDIFF.93    
     &           VG3(I,IHEM,JH,NL-1))                                      VDIFF.94    
            QTVD(I,IHEM,NL)=-FA(NL)*BQP(I)*(TRAG3(I,IHEM,JH,NL,1)-         VDIFF.95    
     &           TRAG3(I,IHEM,JH,NL-1,1))                                  VDIFF.96    
            TTVD(I,IHEM,NL)=-FA(NL)*BTP(I)*(TG3(I,IHEM,JH,NL)-             VDIFF.97    
     &           TG3(I,IHEM,JH,NL-1)/SK(NL-1))                             VDIFF.98    
         ENDDO                                                             VDIFF.99    
         DO L=1,NL                                                         VDIFF.100   
            DO I=1,MGxx(iCol)                                              VDIFF.101   
               UG3(I,IHEM,JH,L)=UG3(I,IHEM,JH,L)+DELT2C*UTVD(I,IHEM,L)     VDIFF.102   
               VG3(I,IHEM,JH,L)=VG3(I,IHEM,JH,L)+DELT2C*VTVD(I,IHEM,L)     VDIFF.103   
               TRAG3(I,IHEM,JH,L,1)=TRAG3(I,IHEM,JH,L,1)+                  VDIFF.104   
     &              DELT2C*QTVD(I,IHEM,L)                                  VDIFF.105   
               TG3(I,IHEM,JH,L)=TG3(I,IHEM,JH,L)+DELT2C*TTVD(I,IHEM,L)     VDIFF.106   
            ENDDO                                                          VDIFF.107   
         ENDDO                                                             VDIFF.108   
      ENDDO                                                                VDIFF.109   
      RETURN                                                               VDIFF.110   
      END                                                                  VDIFF.111   
*ENDIF                                                                     VDIFF.112   
*DECK WRITECOEF                                                            WRITECOEF.1     
!=====================================================                     WRITECOEF.2     
! Write coefficients to file. Using a binary code for iType to             WRITECOEF.3     
! decide which variables are needed:                                       WRITECOEF.4     
!  - +1: Z, D, T, TRA (if used) and SP are wanted                          WRITECOEF.5     
!  - +2: ZMI, DMI, TRAMI (if used) and SPMI are wanted                     WRITECOEF.6     
!  - +4: TTRES is wanted                                                   WRITECOEF.7     
!  - +8: TAVE is wanted                                                    WRITECOEF.8     
!  - +16: TT is wanted                                                     WRITECOEF.9     
!  - +32: HTNET is wanted (HTNET is a grid-space variable)                 WRITECOEF.10    
! e.g. For version above 1, to write out RKOUNT, RNTAPE, DAY, DOY,         WRITECOEF.11    
! Z, D, T, TRA, TAVE, SP, RNTAPE iType needs to be 9 (1+8).                WRITECOEF.12    
!=====================================================                     WRITECOEF.13    
*IF DEF,ONLY_V3                                                            WRITECOEF.14    
      SUBROUTINE WRITECOEF(UnitId, iType, RKOUNT, DOY)                     WRITECOEF.15    
*ELSE                                                                      WRITECOEF.16    
      SUBROUTINE WRITECOEF(UnitId, iType, RKOUNT, RNTAPE, DAY)             WRITECOEF.17    
*ENDIF                                                                     WRITECOEF.18    
      IMPLICIT NONE                                                        WRITECOEF.19    
*CALL PARAM1                                                               WRITECOEF.20    
*CALL PARAM3                                                               WRITECOEF.21    
*CALL SPECTR                                                               WRITECOEF.22    
*CALL RESTIJ                                                               WRITECOEF.23    
*CALL MPIDECK                                                              WRITECOEF.24    
*IF DEF,ONLY_V3                                                            WRITECOEF.25    
*CALL OUTCON                                                               WRITECOEF.26    
*CALL RADHT                                                                WRITECOEF.27    
*ENDIF                                                                     WRITECOEF.28    
!-----------------------------------------------------                     WRITECOEF.29    
! Passed variables                                                         WRITECOEF.30    
!-----------------------------------------------------                     WRITECOEF.31    
! Unit number of file                                                      WRITECOEF.32    
      INTEGER :: UnitId                                                    WRITECOEF.33    
! The list of variables to write out is deterimed by choice of iType       WRITECOEF.34    
      INTEGER :: iType                                                     WRITECOEF.35    
      REAL :: RKOUNT                                                       WRITECOEF.36    
*IF DEF,ONLY_V3                                                            WRITECOEF.37    
      REAL :: DOY                                                          WRITECOEF.38    
*ELSE                                                                      WRITECOEF.39    
      REAL :: RNTAPE                                                       WRITECOEF.40    
      REAL :: DAY                                                          WRITECOEF.41    
*ENDIF                                                                     WRITECOEF.42    
!-----------------------------------------------------                     WRITECOEF.43    
! Local variables                                                          WRITECOEF.44    
!-----------------------------------------------------                     WRITECOEF.45    
      COMPLEX, ALLOCATABLE :: StoreArray(:,:,:,:)                          WRITECOEF.46    
      COMPLEX, ALLOCATABLE :: WriteArray(:,:,:)                            WRITECOEF.47    
*IF DEF,ONLY_V3                                                            WRITECOEF.48    
      REAL (KIND=4), ALLOCATABLE :: WriteArraySP(:)                        WRITECOEF.49    
      REAL, ALLOCATABLE :: HtnetFull(:,:,:,:)                              WRITECOEF.50    
*ENDIF                                                                     WRITECOEF.51    
      INTEGER :: nLevels                                                   WRITECOEF.52    
! Current starting point for levels in StoreArray                          WRITECOEF.53    
      INTEGER :: LL                                                        WRITECOEF.54    
      INTEGER :: iPos                                                      WRITECOEF.55    
! Loop variables                                                           WRITECOEF.56    
      INTEGER :: I, IHEM, IM, IN, ITRAC, L                                 WRITECOEF.57    
!-----------------------------------------------------                     WRITECOEF.58    
! Check the type makes sense                                               WRITECOEF.59    
!-----------------------------------------------------                     WRITECOEF.60    
      IF ( (iType.NE.1).AND.(iType.NE.3).AND.(iType.NE.4)                  WRITECOEF.61    
     &     .AND.(iType.NE.9).AND.(iType.NE.16).AND.(iType.NE.35) ) THEN    WRITECOEF.62    
         !-----------------------------------------------------            WRITECOEF.63    
         ! This type is not currently allowed                              WRITECOEF.64    
         !-----------------------------------------------------            WRITECOEF.65    
         IF (MyPe.EQ.0) WRITE(6,*) 'ERROR: this type is not currently ',   WRITECOEF.66    
     &        'allowed: iType=', iType                                     WRITECOEF.67    
         CALL ABORT                                                        WRITECOEF.68    
      ENDIF                                                                WRITECOEF.69    
!-----------------------------------------------------                     WRITECOEF.70    
! Work out how many levels are needed                                      WRITECOEF.71    
!-----------------------------------------------------                     WRITECOEF.72    
      nLevels=0                                                            WRITECOEF.73    
      IF (MOD(iType,2).EQ.1) THEN                                          WRITECOEF.74    
         nLevels=nLevels+(3+NTRAC)*NL+1                                    WRITECOEF.75    
      ENDIF                                                                WRITECOEF.76    
      IF (MOD(iType,4).GE.2) THEN                                          WRITECOEF.77    
         nLevels=nLevels+(3+NTRAC)*NL+1                                    WRITECOEF.78    
      ENDIF                                                                WRITECOEF.79    
      IF (MOD(iType,8).GE.4) THEN                                          WRITECOEF.80    
         nLevels=nLevels+NL                                                WRITECOEF.81    
      ENDIF                                                                WRITECOEF.82    
      IF (MOD(iType,32).GE.16) THEN                                        WRITECOEF.83    
         nLevels=nLevels+NL                                                WRITECOEF.84    
      ENDIF                                                                WRITECOEF.85    
      ALLOCATE(StoreArray(NNTx,MMTy,NHEM,nLevels))                         WRITECOEF.86    
!-----------------------------------------------------                     WRITECOEF.87    
! Storing Z, D, and T                                                      WRITECOEF.88    
!-----------------------------------------------------                     WRITECOEF.89    
      LL=0                                                                 WRITECOEF.90    
      IF (MOD(iType,2).EQ.1) THEN                                          WRITECOEF.91    
         DO L=1,NL                                                         WRITECOEF.92    
            DO IHEM=1,NHEM                                                 WRITECOEF.93    
               DO IM=1,MMTyy(iRow)                                         WRITECOEF.94    
                  DO IN=1,NNTxx(iCol)                                      WRITECOEF.95    
                     StoreArray(IN,IM,IHEM,LL+L)=Z(IN,IM,IHEM,L)           WRITECOEF.96    
                     StoreArray(IN,IM,IHEM,NL+LL+L)=D(IN,IM,IHEM,L)        WRITECOEF.97    
                     StoreArray(IN,IM,IHEM,2*NL+LL+L)=T(IN,IM,IHEM,L)      WRITECOEF.98    
*IF DEF,ABOVE_V1                                                           WRITECOEF.99    
                     DO ITRAC=1,NTRAC                                      WRITECOEF.100   
                        StoreArray(IN,IM,IHEM,(2+ITRAC)*NL+LL+L)=          WRITECOEF.101   
     &                       TRA(IN,IM,IHEM,L,ITRAC)                       WRITECOEF.102   
                     ENDDO                                                 WRITECOEF.103   
*ENDIF                                                                     WRITECOEF.104   
                  ENDDO                                                    WRITECOEF.105   
               ENDDO                                                       WRITECOEF.106   
            ENDDO                                                          WRITECOEF.107   
         ENDDO                                                             WRITECOEF.108   
         LL=LL+(3+NTRAC)*NL                                                WRITECOEF.109   
      ENDIF                                                                WRITECOEF.110   
*IF DEF,ONLY_V3                                                            WRITECOEF.111   
!-----------------------------------------------------                     WRITECOEF.112   
! Writing TAVE over entry for T. TAVE is temperature averaged over         WRITECOEF.113   
! a number of timesteps                                                    WRITECOEF.114   
!-----------------------------------------------------                     WRITECOEF.115   
      IF (MOD(iType,16).GE.8) THEN                                         WRITECOEF.116   
         DO L=1,NL                                                         WRITECOEF.117   
            DO IHEM=1,NHEM                                                 WRITECOEF.118   
               DO IM=1,MMTyy(iRow)                                         WRITECOEF.119   
                  DO IN=1,NNTxx(iCol)                                      WRITECOEF.120   
                     StoreArray(IN,IM,IHEM,2*NL+L)=TAVE(IN,IM,IHEM,L)      WRITECOEF.121   
                  ENDDO                                                    WRITECOEF.122   
               ENDDO                                                       WRITECOEF.123   
            ENDDO                                                          WRITECOEF.124   
         ENDDO                                                             WRITECOEF.125   
      ENDIF                                                                WRITECOEF.126   
*ENDIF                                                                     WRITECOEF.127   
!-----------------------------------------------------                     WRITECOEF.128   
! Storing SP                                                               WRITECOEF.129   
!-----------------------------------------------------                     WRITECOEF.130   
      IF (MOD(iType,2).EQ.1) THEN                                          WRITECOEF.131   
         DO IHEM=1,NHEM                                                    WRITECOEF.132   
            DO IM=1,MMTyy(iRow)                                            WRITECOEF.133   
               DO IN=1,NNTxx(iCol)                                         WRITECOEF.134   
                  StoreArray(IN,IM,IHEM,LL+1)=SP(IN,IM,IHEM)               WRITECOEF.135   
               ENDDO                                                       WRITECOEF.136   
            ENDDO                                                          WRITECOEF.137   
         ENDDO                                                             WRITECOEF.138   
         LL=LL+1                                                           WRITECOEF.139   
      ENDIF                                                                WRITECOEF.140   
!-----------------------------------------------------                     WRITECOEF.141   
! Storing ZMI, DMI, TMI and SPMI                                           WRITECOEF.142   
!-----------------------------------------------------                     WRITECOEF.143   
      IF (MOD(iType,4).GE.2) THEN                                          WRITECOEF.144   
         DO L=1,NL                                                         WRITECOEF.145   
            DO IHEM=1,NHEM                                                 WRITECOEF.146   
               DO IM=1,MMTyy(iRow)                                         WRITECOEF.147   
                  DO IN=1,NNTxx(iCol)                                      WRITECOEF.148   
                     StoreArray(IN,IM,IHEM,LL+L)=                          WRITECOEF.149   
     &                    ZMI(IN,IM,IHEM,L)                                WRITECOEF.150   
                     StoreArray(IN,IM,IHEM,NL+LL+L)=                       WRITECOEF.151   
     &                    DMI(IN,IM,IHEM,L)                                WRITECOEF.152   
                     StoreArray(IN,IM,IHEM,2*NL+LL+L)=                     WRITECOEF.153   
     &                    TMI(IN,IM,IHEM,L)                                WRITECOEF.154   
*IF DEF,ABOVE_V1                                                           WRITECOEF.155   
                     DO ITRAC=1,NTRAC                                      WRITECOEF.156   
                        StoreArray(IN,IM,IHEM,(2+ITRAC)*NL+LL+L)=          WRITECOEF.157   
     &                       TRAMI(IN,IM,IHEM,L,ITRAC)                     WRITECOEF.158   
                     ENDDO                                                 WRITECOEF.159   
*ENDIF                                                                     WRITECOEF.160   
                  ENDDO                                                    WRITECOEF.161   
               ENDDO                                                       WRITECOEF.162   
            ENDDO                                                          WRITECOEF.163   
         ENDDO                                                             WRITECOEF.164   
         LL=LL+(3+NTRAC)*NL                                                WRITECOEF.165   
         DO IHEM=1,NHEM                                                    WRITECOEF.166   
            DO IM=1,MMTyy(iRow)                                            WRITECOEF.167   
               DO IN=1,NNTxx(iCol)                                         WRITECOEF.168   
                  StoreArray(IN,IM,IHEM,LL+1)=SPMI(IN,IM,IHEM)             WRITECOEF.169   
               ENDDO                                                       WRITECOEF.170   
            ENDDO                                                          WRITECOEF.171   
         ENDDO                                                             WRITECOEF.172   
         LL=LL+1                                                           WRITECOEF.173   
      ENDIF                                                                WRITECOEF.174   
!-----------------------------------------------------                     WRITECOEF.175   
! Storing TTRES                                                            WRITECOEF.176   
!-----------------------------------------------------                     WRITECOEF.177   
      IF (MOD(iType,8).GE.4) THEN                                          WRITECOEF.178   
         DO L=1,NL                                                         WRITECOEF.179   
            DO IHEM=1,NHEM                                                 WRITECOEF.180   
               DO IM=1,MMTyy(iRow)                                         WRITECOEF.181   
                  DO IN=1,NNTxx(iCol)                                      WRITECOEF.182   
                     StoreArray(IN,IM,IHEM,LL+L)=TTRES(IN,IM,IHEM,L)       WRITECOEF.183   
                  ENDDO                                                    WRITECOEF.184   
               ENDDO                                                       WRITECOEF.185   
            ENDDO                                                          WRITECOEF.186   
         ENDDO                                                             WRITECOEF.187   
         LL=LL+NL                                                          WRITECOEF.188   
      ENDIF                                                                WRITECOEF.189   
!-----------------------------------------------------                     WRITECOEF.190   
! Storing TT                                                               WRITECOEF.191   
!-----------------------------------------------------                     WRITECOEF.192   
      IF (MOD(iType,32).GE.16) THEN                                        WRITECOEF.193   
         DO L=1,NL                                                         WRITECOEF.194   
            DO IHEM=1,NHEM                                                 WRITECOEF.195   
               DO IM=1,MMTyy(iRow)                                         WRITECOEF.196   
                  DO IN=1,NNTxx(iCol)                                      WRITECOEF.197   
                     StoreArray(IN,IM,IHEM,LL+L)=TT(IN,IM,IHEM,L)          WRITECOEF.198   
                  ENDDO                                                    WRITECOEF.199   
               ENDDO                                                       WRITECOEF.200   
            ENDDO                                                          WRITECOEF.201   
         ENDDO                                                             WRITECOEF.202   
         LL=LL+NL                                                          WRITECOEF.203   
      ENDIF                                                                WRITECOEF.204   
!-----------------------------------------------------                     WRITECOEF.205   
! Get all the data to PE 0                                                 WRITECOEF.206   
!-----------------------------------------------------                     WRITECOEF.207   
      IF (MyPe.EQ.0) ALLOCATE(WriteArray(NWJ2,NHEM,nLevels))               WRITECOEF.208   
      CALL SHARECOEF(.FALSE.,(NHEM*nLevels),WriteArray,StoreArray)         WRITECOEF.209   
      DEALLOCATE(StoreArray)                                               WRITECOEF.210   
      !-----------------------------------------------------               WRITECOEF.211   
      ! Write data to file                                                 WRITECOEF.212   
      !-----------------------------------------------------               WRITECOEF.213   
*IF DEF,ONLY_V3                                                            WRITECOEF.214   
      IF (iType.EQ.35) THEN                                                WRITECOEF.215   
         !-----------------------------------------------------            WRITECOEF.216   
         ! Need to add in HTNET which is a grid-space variable             WRITECOEF.217   
         !-----------------------------------------------------            WRITECOEF.218   
         IF (MyPe.EQ.0) ALLOCATE(HtnetFull(NHEM,JG,MG,NL))                 WRITECOEF.219   
         CALL SHAREGRID2(.FALSE.,NL,HtnetFull,htnet)                       WRITECOEF.220   
         IF (MyPe.EQ.0) THEN                                               WRITECOEF.221   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,DOY,                           WRITECOEF.222   
     &           WriteArray(:,:,1:nLevels/2),RNTAPE,                       WRITECOEF.223   
     &           WriteArray(:,:,nLevels/2+1:nLevels),HtnetFull,RNTAPE      WRITECOEF.224   
            DEALLOCATE(HtnetFull)                                          WRITECOEF.225   
         ENDIF                                                             WRITECOEF.226   
      ELSE IF (MyPe.EQ.0) THEN                                             WRITECOEF.227   
*ELSE                                                                      WRITECOEF.228   
      IF (MyPe.EQ.0) THEN                                                  WRITECOEF.229   
*ENDIF                                                                     WRITECOEF.230   
         IF (iType.EQ.3) THEN                                              WRITECOEF.231   
*IF DEF,ONLY_V3                                                            WRITECOEF.232   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,DOY,                           WRITECOEF.233   
     &           WriteArray(:,:,1:nLevels/2),RNTAPE,                       WRITECOEF.234   
     &           WriteArray(:,:,nLevels/2+1:nLevels),RNTAPE                WRITECOEF.235   
*ELSE                                                                      WRITECOEF.236   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,                               WRITECOEF.237   
     &           WriteArray(:,:,1:nLevels/2),RNTAPE,                       WRITECOEF.238   
     &           WriteArray(:,:,nLevels/2+1:nLevels),RNTAPE                WRITECOEF.239   
*ENDIF                                                                     WRITECOEF.240   
*IF DEF,ABOVE_V1                                                           WRITECOEF.241   
         ELSE IF (iType.EQ.16) THEN                                        WRITECOEF.242   
*IF DEF,ONLY_V2                                                            WRITECOEF.243   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,REAL(JG+2),                    WRITECOEF.244   
     &           WriteArray(:,:,:),RNTAPE                                  WRITECOEF.245   
*ELSE                                                                      WRITECOEF.246   
            IF ( (UnitId == 9).AND.(LMINIH) ) THEN                         WRITECOEF.247   
               ALLOCATE(WriteArraySP(2*NWJ2*NHEM*nLevels+6))               WRITECOEF.248   
               WriteArraySP(1)=RKOUNT                                      WRITECOEF.249   
               WriteArraySP(2)=RNTAPE                                      WRITECOEF.250   
               WriteArraySP(3)=DAY                                         WRITECOEF.251   
               WriteArraySP(4)=DOY                                         WRITECOEF.252   
               WriteArraySP(5)=JG+2                                        WRITECOEF.253   
               DO L=1,nLevels                                              WRITECOEF.254   
                  DO IHEM=1,NHEM                                           WRITECOEF.255   
                     DO I=1,NWJ2                                           WRITECOEF.256   
                        iPos=2*( ((L-1)*NHEM+(IHEM-1))*NWJ2+I )+4          WRITECOEF.257   
                        WriteArraySP(iPos)=REAL(WriteArray(I,IHEM,L))      WRITECOEF.258   
                        WriteArraySP(iPos+1)=AIMAG(WriteArray(I,IHEM,L))   WRITECOEF.259   
                     ENDDO                                                 WRITECOEF.260   
                  ENDDO                                                    WRITECOEF.261   
               ENDDO                                                       WRITECOEF.262   
               WriteArraySP(2*NWJ2*NHEM*nLevels+6)=RNTAPE                  WRITECOEF.263   
               WRITE(UnitId) WriteArraySP                                  WRITECOEF.264   
               DEALLOCATE(WriteArraySP)                                    WRITECOEF.265   
            ELSE                                                           WRITECOEF.266   
               WRITE(UnitId) RKOUNT,RNTAPE,DAY,DOY,REAL(JG+2),             WRITECOEF.267   
     &              WriteArray(:,:,:),RNTAPE                               WRITECOEF.268   
            ENDIF                                                          WRITECOEF.269   
*ENDIF                                                                     WRITECOEF.270   
*ENDIF                                                                     WRITECOEF.271   
         ELSE                                                              WRITECOEF.272   
*IF DEF,ONLY_V3                                                            WRITECOEF.273   
            IF ( (UnitId == 9).AND.(LMINIH) ) THEN                         WRITECOEF.274   
               !-----------------------------------------------------      WRITECOEF.275   
               ! Write as single predision                                 WRITECOEF.276   
               !-----------------------------------------------------      WRITECOEF.277   
               ALLOCATE(WriteArraySP(2*NWJ2*NHEM*nLevels+5))               WRITECOEF.278   
               WriteArraySP(1)=RKOUNT                                      WRITECOEF.279   
               WriteArraySP(2)=RNTAPE                                      WRITECOEF.280   
               WriteArraySP(3)=DAY                                         WRITECOEF.281   
               WriteArraySP(4)=DOY                                         WRITECOEF.282   
               DO L=1,nLevels                                              WRITECOEF.283   
                  DO IHEM=1,NHEM                                           WRITECOEF.284   
                     DO I=1,NWJ2                                           WRITECOEF.285   
                        iPos=2*( ((L-1)*NHEM+(IHEM-1))*NWJ2+I )+3          WRITECOEF.286   
                        WriteArraySP(iPos)=                                WRITECOEF.287   
     &                       REAL(WriteArray(I,IHEM,L),KIND=4)             WRITECOEF.288   
                        WriteArraySP(iPos+1)=REAL(                         WRITECOEF.289   
     &                       AIMAG(WriteArray(I,IHEM,L)),KIND=4)           WRITECOEF.290   
                     ENDDO                                                 WRITECOEF.291   
                  ENDDO                                                    WRITECOEF.292   
               ENDDO                                                       WRITECOEF.293   
               WriteArraySP(2*NWJ2*NHEM*nLevels+5)=RNTAPE                  WRITECOEF.294   
               WRITE(UnitId) WriteArraySP                                  WRITECOEF.295   
               DEALLOCATE(WriteArraySP)                                    WRITECOEF.296   
            ELSE                                                           WRITECOEF.297   
               !-----------------------------------------------------      WRITECOEF.298   
               ! Write as the normal predision                             WRITECOEF.299   
               !-----------------------------------------------------      WRITECOEF.300   
               WRITE(UnitId) RKOUNT,RNTAPE,DAY,DOY,                        WRITECOEF.301   
     &              WriteArray(:,:,:),RNTAPE                               WRITECOEF.302   
            ENDIF                                                          WRITECOEF.303   
*ELSE                                                                      WRITECOEF.304   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,WriteArray(:,:,:),RNTAPE       WRITECOEF.305   
*ENDIF                                                                     WRITECOEF.306   
         ENDIF                                                             WRITECOEF.307   
      ENDIF                                                                MISC_COMMON.5     
      IF (MyPe.EQ.0)DEALLOCATE(WriteArray)                                 MISC_COMMON.6     
      END                                                                  WRITECOEF.310   
*DECK WRITEDIAG                                                            WRITEDIAG.1     
*IF DEF,ABOVE_V1                                                           WRITEDIAG.2     
!=====================================================                     WRITEDIAG.3     
! Write the grid-point diagnostics to file                                 WRITEDIAG.4     
!=====================================================                     WRITEDIAG.5     
*IF DEF,ONLY_V2                                                            WRITEDIAG.6     
      SUBROUTINE WRITEDIAG(UnitId, RKOUNT)                                 WRITEDIAG.7     
*ELSE                                                                      WRITEDIAG.8     
      SUBROUTINE WRITEDIAG(UnitId, RKOUNT, DOY)                            WRITEDIAG.9     
*ENDIF                                                                     WRITEDIAG.10    
      IMPLICIT NONE                                                        WRITEDIAG.11    
*CALL PARAM1                                                               WRITEDIAG.12    
*CALL PARAM3                                                               WRITEDIAG.13    
*CALL PTENDZ                                                               WRITEDIAG.14    
*CALL OUTCON                                                               WRITEDIAG.15    
*CALL MPIDECK                                                              WRITEDIAG.16    
!-----------------------------------------------------                     WRITEDIAG.17    
! Passed variables                                                         WRITEDIAG.18    
!-----------------------------------------------------                     WRITEDIAG.19    
! Unit number of file                                                      WRITEDIAG.20    
      INTEGER :: UnitId                                                    WRITEDIAG.21    
      REAL :: RKOUNT                                                       WRITEDIAG.22    
      REAL :: DOY                                                          WRITEDIAG.23    
!-----------------------------------------------------                     WRITEDIAG.24    
! Local variables                                                          WRITEDIAG.25    
!-----------------------------------------------------                     WRITEDIAG.26    
      INTEGER, PARAMETER :: nLevels=22*NL+8                                WRITEDIAG.27    
      REAL :: StoreArray(JGy,NHEM,nLevels)                                 WRITEDIAG.28    
      INTEGER :: LL                                                        WRITEDIAG.29    
      REAL, ALLOCATABLE :: WriteArray(:,:,:)                               WRITEDIAG.30    
*IF DEF,ONLY_V3                                                            WRITEDIAG.31    
      REAL (KIND=4), ALLOCATABLE :: WriteArraySP(:)                        WRITEDIAG.32    
*ENDIF                                                                     WRITEDIAG.33    
! Loop variables                                                           WRITEDIAG.34    
      INTEGER :: I, J, L                                                   WRITEDIAG.35    
!-----------------------------------------------------                     WRITEDIAG.36    
! Store all the data needed in one array                                   WRITEDIAG.37    
!-----------------------------------------------------                     WRITEDIAG.38    
      LL=0                                                                 WRITEDIAG.39    
      StoreArray(:,:,LL+1:LL+NL)=AUTVDZ(:,:,:)                             WRITEDIAG.40    
      LL=LL+NL                                                             WRITEDIAG.41    
      StoreArray(:,:,LL+1:LL+NL)=AVTVDZ(:,:,:)                             WRITEDIAG.42    
      LL=LL+NL                                                             WRITEDIAG.43    
      StoreArray(:,:,LL+1:LL+NL)=ATTVDZ(:,:,:)                             WRITEDIAG.44    
      LL=LL+NL                                                             WRITEDIAG.45    
      StoreArray(:,:,LL+1:LL+NL)=AQTVDZ(:,:,:)                             WRITEDIAG.46    
      LL=LL+NL                                                             WRITEDIAG.47    
      StoreArray(:,:,LL+1:LL+NL)=ATTCRZ(:,:,:)                             WRITEDIAG.48    
      LL=LL+NL                                                             WRITEDIAG.49    
      StoreArray(:,:,LL+1:LL+NL)=AQTCRZ(:,:,:)                             WRITEDIAG.50    
      LL=LL+NL                                                             WRITEDIAG.51    
      StoreArray(:,:,LL+1:LL+NL)=ATTLRZ(:,:,:)                             WRITEDIAG.52    
      LL=LL+NL                                                             WRITEDIAG.53    
      StoreArray(:,:,LL+1:LL+NL)=AQTLRZ(:,:,:)                             WRITEDIAG.54    
      LL=LL+NL                                                             WRITEDIAG.55    
      StoreArray(:,:,LL+1:LL+NL)=ATTRDZ(:,:,:)                             WRITEDIAG.56    
      LL=LL+NL                                                             WRITEDIAG.57    
      StoreArray(:,:,LL+1:LL+NL)=ACTCRZ(:,:,:)                             WRITEDIAG.58    
      LL=LL+NL                                                             WRITEDIAG.59    
      StoreArray(:,:,LL+1:LL+NL)=ACTLRZ(:,:,:)                             WRITEDIAG.60    
      LL=LL+NL                                                             WRITEDIAG.61    
      StoreArray(:,:,LL+1)=AUTBLZ(:,:)                                     WRITEDIAG.62    
      LL=LL+1                                                              WRITEDIAG.63    
      StoreArray(:,:,LL+1)=AVTBLZ(:,:)                                     WRITEDIAG.64    
      LL=LL+1                                                              WRITEDIAG.65    
      StoreArray(:,:,LL+1)=ATTBLZ(:,:)                                     WRITEDIAG.66    
      LL=LL+1                                                              WRITEDIAG.67    
      StoreArray(:,:,LL+1)=AQTBLZ(:,:)                                     WRITEDIAG.68    
      LL=LL+1                                                              WRITEDIAG.69    
      StoreArray(:,:,LL+1:LL+NL)=UTVDZ(:,:,:)                              WRITEDIAG.70    
      LL=LL+NL                                                             WRITEDIAG.71    
      StoreArray(:,:,LL+1:LL+NL)=VTVDZ(:,:,:)                              WRITEDIAG.72    
      LL=LL+NL                                                             WRITEDIAG.73    
      StoreArray(:,:,LL+1:LL+NL)=TTVDZ(:,:,:)                              WRITEDIAG.74    
      LL=LL+NL                                                             WRITEDIAG.75    
      StoreArray(:,:,LL+1:LL+NL)=QTVDZ(:,:,:)                              WRITEDIAG.76    
      LL=LL+NL                                                             WRITEDIAG.77    
      StoreArray(:,:,LL+1:LL+NL)=TTCRZ(:,:,:)                              WRITEDIAG.78    
      LL=LL+NL                                                             WRITEDIAG.79    
      StoreArray(:,:,LL+1:LL+NL)=QTCRZ(:,:,:)                              WRITEDIAG.80    
      LL=LL+NL                                                             WRITEDIAG.81    
      StoreArray(:,:,LL+1:LL+NL)=TTLRZ(:,:,:)                              WRITEDIAG.82    
      LL=LL+NL                                                             WRITEDIAG.83    
      StoreArray(:,:,LL+1:LL+NL)=QTLRZ(:,:,:)                              WRITEDIAG.84    
      LL=LL+NL                                                             WRITEDIAG.85    
      StoreArray(:,:,LL+1:LL+NL)=TTRDZ(:,:,:)                              WRITEDIAG.86    
      LL=LL+NL                                                             WRITEDIAG.87    
      StoreArray(:,:,LL+1:LL+NL)=CTCRZ(:,:,:)                              WRITEDIAG.88    
      LL=LL+NL                                                             WRITEDIAG.89    
      StoreArray(:,:,LL+1:LL+NL)=CTLRZ(:,:,:)                              WRITEDIAG.90    
      LL=LL+NL                                                             WRITEDIAG.91    
      StoreArray(:,:,LL+1)=UTBLZ(:,:)                                      WRITEDIAG.92    
      LL=LL+1                                                              WRITEDIAG.93    
      StoreArray(:,:,LL+1)=VTBLZ(:,:)                                      WRITEDIAG.94    
      LL=LL+1                                                              WRITEDIAG.95    
      StoreArray(:,:,LL+1)=TTBLZ(:,:)                                      WRITEDIAG.96    
      LL=LL+1                                                              WRITEDIAG.97    
      StoreArray(:,:,LL+1)=QTBLZ(:,:)                                      WRITEDIAG.98    
!-----------------------------------------------------                     WRITEDIAG.99    
! Send all the data to PE 0                                                WRITEDIAG.100   
!-----------------------------------------------------                     WRITEDIAG.101   
      IF (MyPe.EQ.0) ALLOCATE(WriteArray(JG,NHEM,nLevels))                 WRITEDIAG.102   
      CALL SHAREGRID3(nLevels,StoreArray,WriteArray)                       WRITEDIAG.103   
!-----------------------------------------------------                     WRITEDIAG.104   
! Write the data to file                                                   WRITEDIAG.105   
!-----------------------------------------------------                     WRITEDIAG.106   
      IF (MyPe.EQ.0) THEN                                                  WRITEDIAG.107   
*IF DEF,ONLY_V2                                                            WRITEDIAG.108   
         IF (NHEM.EQ.1) THEN                                               WRITEDIAG.109   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,REAL(JG+1),                    WRITEDIAG.110   
     &           WriteArray,RNTAPE                                         WRITEDIAG.111   
         ELSE                                                              WRITEDIAG.112   
            !-----------------------------------------------------         WRITEDIAG.113   
            ! The j-index for the 2nd hemisphere needs switching           WRITEDIAG.114   
            !-----------------------------------------------------         WRITEDIAG.115   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,REAL(JG+1),                    WRITEDIAG.116   
     &           ( (WriteArray(J,1,L),J=1,JG),                             WRITEDIAG.117   
     &             (WriteArray(J,NHEM,L),J=JG,1,-1),L=1,nLevels ),         WRITEDIAG.118   
     &           RNTAPE                                                    WRITEDIAG.119   
         ENDIF                                                             WRITEDIAG.120   
*ELSE                                                                      WRITEDIAG.121   
         IF ( (UnitId == 9).AND.(LMINIH) ) THEN                            WRITEDIAG.122   
            !-----------------------------------------------------         WRITEDIAG.123   
            ! Write as single precision                                    WRITEDIAG.124   
            !-----------------------------------------------------         WRITEDIAG.125   
            ALLOCATE(WriteArraySP(6+JG*NHEM*nLevels))                      WRITEDIAG.126   
            WriteArraySP(1)=RKOUNT                                         WRITEDIAG.127   
            WriteArraySP(2)=RNTAPE                                         WRITEDIAG.128   
            WriteArraySP(3)=DAY                                            WRITEDIAG.129   
            WriteArraySP(4)=DOY                                            WRITEDIAG.130   
            WriteArraySP(5)=JG+1                                           WRITEDIAG.131   
            I=6                                                            WRITEDIAG.132   
            DO L=1,nLevels                                                 WRITEDIAG.133   
               DO J=1,JG                                                   WRITEDIAG.134   
                  WriteArraySp(I)=WriteArray(J,1,L)                        WRITEDIAG.135   
                  I=I+1                                                    WRITEDIAG.136   
               ENDDO                                                       WRITEDIAG.137   
               !-----------------------------------------------------      WRITEDIAG.138   
               ! The j-index for the 2nd hemisphere needs switching        WRITEDIAG.139   
               !-----------------------------------------------------      WRITEDIAG.140   
               IF (NHEM.EQ.2) THEN                                         WRITEDIAG.141   
                  DO J=1,JG                                                WRITEDIAG.142   
                     WriteArraySp(I)=WriteArray(JG+1-J,NHEM,L)             WRITEDIAG.143   
                     I=I+1                                                 WRITEDIAG.144   
                  ENDDO                                                    WRITEDIAG.145   
               ENDIF                                                       WRITEDIAG.146   
            ENDDO                                                          WRITEDIAG.147   
            WriteArraySP(I)=RNTAPE                                         WRITEDIAG.148   
            !-----------------------------------------------------         WRITEDIAG.149   
            ! Write to file                                                WRITEDIAG.150   
            !-----------------------------------------------------         WRITEDIAG.151   
            WRITE(UnitId) WriteArraySp                                     WRITEDIAG.152   
            DEALLOCATE(WriteArraySp)                                       WRITEDIAG.153   
         ELSE                                                              WRITEDIAG.154   
            !-----------------------------------------------------         WRITEDIAG.155   
            ! Write as normal precision                                    WRITEDIAG.156   
            !-----------------------------------------------------         WRITEDIAG.157   
            IF (NHEM.EQ.1) THEN                                            WRITEDIAG.158   
               WRITE(UnitId) RKOUNT,RNTAPE,DAY,DOY,REAL(JG+1),             WRITEDIAG.159   
     &              WriteArray,RNTAPE                                      WRITEDIAG.160   
            ELSE                                                           WRITEDIAG.161   
               !-----------------------------------------------------      WRITEDIAG.162   
               ! The j-index for the 2nd hemisphere needs switching        WRITEDIAG.163   
               !-----------------------------------------------------      WRITEDIAG.164   
               WRITE(UnitId) RKOUNT,RNTAPE,DAY,DOY,REAL(JG+1),             WRITEDIAG.165   
     &              ( (WriteArray(J,1,L),J=1,JG),                          WRITEDIAG.166   
     &              (WriteArray(J,NHEM,L),J=JG,1,-1),L=1,nLevels ),        WRITEDIAG.167   
     &              RNTAPE                                                 WRITEDIAG.168   
            ENDIF                                                          WRITEDIAG.169   
         ENDIF                                                             WRITEDIAG.170   
*ENDIF                                                                     WRITEDIAG.171   
         DEALLOCATE(WriteArray)                                            WRITEDIAG.172   
      ENDIF                                                                WRITEDIAG.173   
      END                                                                  WRITEDIAG.174   
*ENDIF                                                                     WRITEDIAG.175   
*DECK WRITEGRID                                                            WRITEGRID.1     
*IF DEF,ABOVE_V1                                                           WRITEGRID.2     
!=====================================================                     WRITEGRID.3     
! Write grid-point variables to file. Using a binary code for iType to     WRITEGRID.4     
! decide which variables are needed:                                       WRITEGRID.5     
!   - +1: TSTAR, TDEEP, ... and SNET                                       WRITEGRID.6     
!   - +2: ASSBL, ASHBL, ... and ACLD                                       WRITEGRID.7     
!   - +4: SSBL, SHBL, ... and CLD                                          WRITEGRID.8     
!   - +8: TNLG                                                             WRITEGRID.9     
*IF DEF,ONLY_V2                                                            WRITEGRID.10    
!   - +16: TRAGMI3                                                         WRITEGRID.11    
*ENDIF                                                                     WRITEGRID.12    
!=====================================================                     WRITEGRID.13    
*IF DEF,ONLY_V2                                                            WRITEGRID.14    
      SUBROUTINE WRITEGRID(UnitId, iType, RKOUNT, RNTAPE, DAY)             WRITEGRID.15    
*ELSE                                                                      WRITEGRID.16    
      SUBROUTINE WRITEGRID(UnitId, iType, RKOUNT, RNTAPE, DAY, DOY)        WRITEGRID.17    
*ENDIF                                                                     WRITEGRID.18    
      IMPLICIT NONE                                                        WRITEGRID.19    
*CALL PARAM1                                                               WRITEGRID.20    
*CALL PARAM2                                                               WRITEGRID.21    
*CALL PARAM3                                                               WRITEGRID.22    
*CALL PHYSCA                                                               WRITEGRID.23    
*CALL CPIERS                                                               WRITEGRID.24    
*CALL GRIDPA3                                                              WRITEGRID.25    
*CALL GRIDPC                                                               WRITEGRID.26    
*CALL MPIDECK                                                              WRITEGRID.27    
*CALL PARAMH                                                               OAS_ACCUM_TILE.150   
*CALL AOfields                                                             OAS_ACCUM_TILE.151   
*CALL OAfields                                                             OAS_ACCUM_TILE.152   
!-----------------------------------------------------                     WRITEGRID.28    
! Passed variables                                                         WRITEGRID.29    
!-----------------------------------------------------                     WRITEGRID.30    
! Unit number of file                                                      WRITEGRID.31    
      INTEGER :: UnitId                                                    WRITEGRID.32    
! The list of variables to write out is deterimed by choice of iType       WRITEGRID.33    
      INTEGER :: iType                                                     WRITEGRID.34    
      REAL :: RKOUNT                                                       WRITEGRID.35    
      REAL :: RNTAPE                                                       WRITEGRID.36    
      REAL :: DAY                                                          WRITEGRID.37    
*IF DEF,ONLY_V3                                                            WRITEGRID.38    
      REAL :: DOY                                                          WRITEGRID.39    
*ENDIF                                                                     WRITEGRID.40    
!-----------------------------------------------------                     WRITEGRID.41    
! Local variables                                                          WRITEGRID.42    
!-----------------------------------------------------                     WRITEGRID.43    
! The number of 2D fields                                                  WRITEGRID.44    
*IF DEF,ONLY_V2                                                            WRITEGRID.45    
      INTEGER, PARAMETER :: N2DFLD=5                                       WRITEGRID.46    
*ELSE                                                                      WRITEGRID.47    
      INTEGER, PARAMETER :: N2DFLD=21                                      WRITEGRID.48    
*ENDIF                                                                     WRITEGRID.49    
! Stores all the data that needs passing to PE 0                           WRITEGRID.50    
      REAL, ALLOCATABLE :: StoreArray(:,:,:,:)                             WRITEGRID.51    
! On PE 0 the data from the StoreArray arrays from all PEs is fitted       WRITEGRID.52    
! into this.                                                               WRITEGRID.53    
      REAL, ALLOCATABLE :: WriteArray(:,:,:,:)                             WRITEGRID.54    
! The number of levels in StoreArray and WriteArray                        WRITEGRID.55    
      INTEGER :: nLevels                                                   WRITEGRID.56    
! Index for levels                                                         WRITEGRID.57    
      INTEGER :: LL                                                        WRITEGRID.58    
! Loop variables                                                           WRITEGRID.59    
      INTEGER :: J                                                         WRITEGRID.60    
*IF DEF,ONLY_V2                                                            WRITEGRID.61    
      INTEGER :: I, IHEM, L, KK                                            WRITEGRID.62    
*ENDIF                                                                     WRITEGRID.63    
!-----------------------------------------------------                     WRITEGRID.64    
! Check the type makes sense                                               WRITEGRID.65    
!-----------------------------------------------------                     WRITEGRID.66    
      IF ( (iType.NE.1).AND.(iType.NE.10).AND.(iType.NE.14)                WRITEGRID.67    
     &     .AND.(iType.NE.16) ) THEN                                       WRITEGRID.68    
         !-----------------------------------------------------            WRITEGRID.69    
         ! This type is not currently allowed                              WRITEGRID.70    
         !-----------------------------------------------------            WRITEGRID.71    
         IF (MyPe.EQ.0) WRITE(6,*) 'ERROR: this type is not currently ',   WRITEGRID.72    
     &        'allowed: iType=', iType                                     WRITEGRID.73    
         CALL ABORT                                                        WRITEGRID.74    
      ENDIF                                                                WRITEGRID.75    
!-----------------------------------------------------                     WRITEGRID.76    
! Work out how many levels are needed                                      WRITEGRID.77    
!-----------------------------------------------------                     WRITEGRID.78    
      nLevels=0                                                            WRITEGRID.79    
      IF (MOD(iType,2).EQ.1) THEN                                          WRITEGRID.80    
C         nLevels=nLevels+11                                               OAS_ACCUM_TILE.153   
         nLevels=nLevels+17                                                OAS_ACCUM_TILE.154   
      ENDIF                                                                WRITEGRID.82    
      IF (MOD(iType,4).GE.2) THEN                                          WRITEGRID.83    
         nLevels=nLevels+N2DFLD                                            WRITEGRID.84    
      ENDIF                                                                WRITEGRID.85    
      IF (MOD(iType,8).GE.4) THEN                                          WRITEGRID.86    
         nLevels=nLevels+N2DFLD                                            WRITEGRID.87    
      ENDIF                                                                WRITEGRID.88    
      IF (MOD(iType,16).GE.8) THEN                                         WRITEGRID.89    
         nLevels=nLevels+NL                                                WRITEGRID.90    
      ENDIF                                                                WRITEGRID.91    
*IF DEF,ONLY_V2                                                            WRITEGRID.92    
      IF (MOD(iType,32).GE.16) THEN                                        WRITEGRID.93    
         nLevels=nLevels+NL                                                WRITEGRID.94    
      ENDIF                                                                WRITEGRID.95    
*ENDIF                                                                     WRITEGRID.96    
      ALLOCATE(StoreArray(MGx,NHEM,JGy,nLevels))                           WRITEGRID.97    
!-----------------------------------------------------                     WRITEGRID.98    
! Storing surface variables: TSTAR, TDEEP, ... and SNET                    WRITEGRID.99    
!-----------------------------------------------------                     WRITEGRID.100   
      LL=0                                                                 WRITEGRID.101   
*IF DEF,ONLY_V3                                                            WRITEGRID.102   
      IF (MOD(iType,2).EQ.1) THEN                                          WRITEGRID.103   
         StoreArray(:,:,:,LL+1)=TSTAR(:,:,:)                               WRITEGRID.104   
         LL=LL+1                                                           WRITEGRID.105   
         StoreArray(:,:,:,LL+1)=TDEEP(:,:,:)                               WRITEGRID.106   
         LL=LL+1                                                           WRITEGRID.107   
         StoreArray(:,:,:,LL+1)=SMSTAR(:,:,:)                              WRITEGRID.108   
         LL=LL+1                                                           WRITEGRID.109   
         StoreArray(:,:,:,LL+1)=QSTAR(:,:,:)                               WRITEGRID.110   
         LL=LL+1                                                           WRITEGRID.111   
         StoreArray(:,:,:,LL+1)=HSNOW(:,:,:)                               WRITEGRID.112   
         LL=LL+1                                                           WRITEGRID.113   
         StoreArray(:,:,:,LL+1)=SQSTAR(:,:,:)                              WRITEGRID.114   
         LL=LL+1                                                           WRITEGRID.115   
         StoreArray(:,:,:,LL+1)=SALB(:,:,:)                                WRITEGRID.116   
         LL=LL+1                                                           WRITEGRID.117   
         StoreArray(:,:,:,LL+1)=SBAL(:,:,:)                                WRITEGRID.118   
         LL=LL+1                                                           WRITEGRID.119   
         StoreArray(:,:,:,LL+1)=TSTARO(:,:,:)                              WRITEGRID.120   
         LL=LL+1                                                           WRITEGRID.121   
         StoreArray(:,:,:,LL+1)=TDEEPO(:,:,:)                              WRITEGRID.122   
         LL=LL+1                                                           WRITEGRID.123   
         StoreArray(:,:,:,LL+1)=SNET(:,:,:)                                WRITEGRID.124   
         LL=LL+1                                                           WRITEGRID.125   
         StoreArray(:,:,:,LL+1)=TSTAROO(:,:,:)                             OAS_ACCUM_TILE.155   
         LL=LL+1                                                           OAS_ACCUM_TILE.156   
         StoreArray(:,:,:,LL+1)=TSTARF(:,:,:)                              OAS_ACCUM_TILE.157   
         LL=LL+1                                                           OAS_ACCUM_TILE.158   
         StoreArray(:,:,:,LL+1)=zsst_2d(:,:,:)                             OAS_ACCUM_TILE.159   
         LL=LL+1                                                           OAS_ACCUM_TILE.160   
         StoreArray(:,:,:,LL+1)=SICECOV(:,:,:)                             OAS_ACCUM_TILE.161   
         LL=LL+1                                                           OAS_ACCUM_TILE.162   
         StoreArray(:,:,:,LL+1)=zscur_2d(:,:,:)                            OAS_ACCUM_TILE.163   
         LL=LL+1                                                           OAS_ACCUM_TILE.164   
         StoreArray(:,:,:,LL+1)=mscur_2d(:,:,:)                            OAS_ACCUM_TILE.165   
         LL=LL+1                                                           OAS_ACCUM_TILE.166   
      ENDIF                                                                WRITEGRID.126   
*ENDIF                                                                     WRITEGRID.127   
!-----------------------------------------------------                     WRITEGRID.128   
! Storing grid variables from DGRMLT: ASSBL, ASHBL, ... and ACLD           WRITEGRID.129   
!-----------------------------------------------------                     WRITEGRID.130   
      IF (MOD(iType,4).GE.2) THEN                                          WRITEGRID.131   
         StoreArray(:,:,:,LL+1)=ASSBL(:,:,:)                               WRITEGRID.132   
         LL=LL+1                                                           WRITEGRID.133   
         StoreArray(:,:,:,LL+1)=ASHBL(:,:,:)                               WRITEGRID.134   
         LL=LL+1                                                           WRITEGRID.135   
         StoreArray(:,:,:,LL+1)=ASLBL(:,:,:)                               WRITEGRID.136   
         LL=LL+1                                                           WRITEGRID.137   
         StoreArray(:,:,:,LL+1)=ARRCR(:,:,:)                               WRITEGRID.138   
         LL=LL+1                                                           WRITEGRID.139   
         StoreArray(:,:,:,LL+1)=ARRLR(:,:,:)                               WRITEGRID.140   
         LL=LL+1                                                           WRITEGRID.141   
*IF DEF,ONLY_V3                                                            WRITEGRID.142   
         StoreArray(:,:,:,LL+1:LL+6)=ARFLUX(:,:,:,:)                       WRITEGRID.143   
         LL=LL+6                                                           WRITEGRID.144   
         StoreArray(:,:,:,LL+1:LL+6)=ASFLD(:,:,:,:)                        WRITEGRID.145   
         LL=LL+6                                                           WRITEGRID.146   
         StoreArray(:,:,:,LL+1:LL+4)=ACLD(:,:,:,:)                         WRITEGRID.147   
         LL=LL+4                                                           WRITEGRID.148   
*ENDIF                                                                     WRITEGRID.149   
      ENDIF                                                                WRITEGRID.150   
!-----------------------------------------------------                     WRITEGRID.151   
! Storing grid variables from DGRMLT: SSBL, SHBL, ... and CLD              WRITEGRID.152   
!-----------------------------------------------------                     WRITEGRID.153   
      IF (MOD(iType,8).GE.4) THEN                                          WRITEGRID.154   
         StoreArray(:,:,:,LL+1)=SSBL(:,:,:)                                WRITEGRID.155   
         LL=LL+1                                                           WRITEGRID.156   
         StoreArray(:,:,:,LL+1)=SHBL(:,:,:)                                WRITEGRID.157   
         LL=LL+1                                                           WRITEGRID.158   
         StoreArray(:,:,:,LL+1)=SLBL(:,:,:)                                WRITEGRID.159   
         LL=LL+1                                                           WRITEGRID.160   
         StoreArray(:,:,:,LL+1)=RRCR(:,:,:)                                WRITEGRID.161   
         LL=LL+1                                                           WRITEGRID.162   
         StoreArray(:,:,:,LL+1)=RRLR(:,:,:)                                WRITEGRID.163   
         LL=LL+1                                                           WRITEGRID.164   
*IF DEF,ONLY_V3                                                            WRITEGRID.165   
         StoreArray(:,:,:,LL+1:LL+6)=RFLUX(:,:,:,:)                        WRITEGRID.166   
         LL=LL+6                                                           WRITEGRID.167   
         StoreArray(:,:,:,LL+1:LL+6)=SFLD(:,:,:,:)                         WRITEGRID.168   
         LL=LL+6                                                           WRITEGRID.169   
         StoreArray(:,:,:,LL+1:LL+4)=CLD(:,:,:,:)                          WRITEGRID.170   
         LL=LL+4                                                           WRITEGRID.171   
*ENDIF                                                                     WRITEGRID.172   
      ENDIF                                                                WRITEGRID.173   
!-----------------------------------------------------                     WRITEGRID.174   
! Storing TNLG                                                             WRITEGRID.175   
!-----------------------------------------------------                     WRITEGRID.176   
      IF (MOD(iType,16).GE.8) THEN                                         WRITEGRID.177   
         StoreArray(:,:,:,LL+1:LL+NL)=TNLG3(1:MGx,:,:,:)                   WRITEGRID.178   
         LL=LL+NL                                                          WRITEGRID.179   
      ENDIF                                                                WRITEGRID.180   
*IF DEF,ONLY_V2                                                            WRITEGRID.181   
!-----------------------------------------------------                     WRITEGRID.182   
! Storing TRAGMI3. Before writing we require the last two                  WRITEGRID.183   
! dimensions to be switched                                                WRITEGRID.184   
!-----------------------------------------------------                     WRITEGRID.185   
      IF (MOD(iType,32).GE.16) THEN                                        WRITEGRID.186   
         DO KK=1,NTRAC                                                     WRITEGRID.187   
            DO L=1,NL                                                      WRITEGRID.188   
               StoreArray(:,:,:,LL+(L-1)*NTRAC+KK)=                        WRITEGRID.189   
     &              TRAGMI3(:,:,:,L,KK)                                    WRITEGRID.190   
            ENDDO                                                          WRITEGRID.191   
         ENDDO                                                             WRITEGRID.192   
         LL=LL+NL*NTRAC                                                    WRITEGRID.193   
      ENDIF                                                                WRITEGRID.194   
*ENDIF                                                                     WRITEGRID.195   
!-----------------------------------------------------                     WRITEGRID.196   
! Get all the data to PE 0                                                 WRITEGRID.197   
!-----------------------------------------------------                     WRITEGRID.198   
      IF (MyPe.EQ.0) ALLOCATE(WriteArray(MGPP,NHEM,JG,nLevels))            WRITEGRID.199   
      CALL SHAREGRID(.FALSE.,MGPP,nLevels,WriteArray,StoreArray)           WRITEGRID.200   
      DEALLOCATE(StoreArray)                                               WRITEGRID.201   
      IF (MyPe.EQ.0) THEN                                                  WRITEGRID.202   
         !-----------------------------------------------------            WRITEGRID.203   
         ! Wrap around                                                     WRITEGRID.204   
         !-----------------------------------------------------            WRITEGRID.205   
         WriteArray(MG+1,:,:,:)=WriteArray(1,:,:,:)                        WRITEGRID.206   
         WriteArray(MGPP,:,:,:)=WriteArray(2,:,:,:)                        WRITEGRID.207   
      ENDIF                                                                WRITEGRID.208   
!-----------------------------------------------------                     WRITEGRID.209   
! Write data to file                                                       WRITEGRID.210   
!-----------------------------------------------------                     WRITEGRID.211   
      IF (MyPe.EQ.0) THEN                                                  WRITEGRID.212   
         IF (iType.EQ.1) THEN                                              WRITEGRID.213   
            WRITE(UnitId) -999.999                                         WRITEGRID.214   
*IF DEF,ONLY_V2                                                            WRITEGRID.215   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,WriteArray,RNTAPE              WRITEGRID.216   
         ELSE IF (iType.EQ.16) THEN                                        WRITEGRID.217   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,3.0,                           WRITEGRID.218   
     &           ((((WriteArray(I,IHEM,J,L),I=1,MGPP),                     WRITEGRID.219   
     &           IHEM=1,NHEM),L=1,NL*NTRAC),J=1,JG),                       WRITEGRID.220   
     &           RNTAPE                                                    WRITEGRID.221   
*ELSE                                                                      WRITEGRID.222   
            WRITE(UnitId) RKOUNT,RNTAPE,DAY,DOY,WriteArray,RNTAPE          WRITEGRID.223   
*ENDIF                                                                     WRITEGRID.224   
         ELSE                                                              WRITEGRID.225   
            !-----------------------------------------------------         WRITEGRID.226   
            ! Loop through latitudes                                       WRITEGRID.227   
            !-----------------------------------------------------         WRITEGRID.228   
            DO J=1,JG                                                      WRITEGRID.229   
*IF DEF,ONLY_V2                                                            WRITEGRID.230   
               WRITE(UnitId) RKOUNT,RNTAPE,DAY,REAL(J),                    WRITEGRID.231   
     &              WriteArray(:,:,J,1:nLevels-NL),RNTAPE,                 WRITEGRID.232   
     &              WriteArray(:,:,J,nLevels-NL+1:nLevels),                WRITEGRID.233   
     &              RNTAPE                                                 WRITEGRID.234   
*ELSE                                                                      WRITEGRID.235   
               !-----------------------------------------------------      WRITEGRID.236   
               ! Write data to file as single precision                    WRITEGRID.237   
               !-----------------------------------------------------      WRITEGRID.238   
               WRITE(UnitId) REAL(RKOUNT,KIND=4),REAL(RNTAPE,KIND=4),      WRITEGRID.239   
     &              REAL(DAY,KIND=4),REAL(DOY,KIND=4),REAL(J,KIND=4),      WRITEGRID.240   
     &              REAL(WriteArray(:,:,J,1:nLevels-NL),KIND=4),           WRITEGRID.241   
     &              REAL(RNTAPE,KIND=4),                                   WRITEGRID.242   
     &              REAL(WriteArray(:,:,J,nLevels-NL+1:nLevels),KIND=4),   WRITEGRID.243   
     &              REAL(RNTAPE,KIND=4)                                    WRITEGRID.244   
*ENDIF                                                                     WRITEGRID.245   
            ENDDO                                                          WRITEGRID.246   
         ENDIF                                                             WRITEGRID.247   
         DEALLOCATE(WriteArray)                                            WRITEGRID.248   
      ENDIF                                                                WRITEGRID.249   
      END                                                                  WRITEGRID.250   
*ENDIF                                                                     WRITEGRID.251   
*DECK WRSPS                                                                WRSPS.1     
!=====================================================                     WRSPS.2     
! Prints spectral coefficients                                             WRSPS.3     
!=====================================================                     WRSPS.4     
      SUBROUTINE WRSPS(DESCRIPTION,A,IA,nLevs)                             WRSPS.5     
      IMPLICIT NONE                                                        WRSPS.6     
*CALL PARAM1                                                               WRSPS.7     
*CALL PARAM2                                                               WRSPS.8     
*CALL PARAM3                                                               WRSPS.9     
*CALL BLANK                                                                WRSPS.10    
*CALL OUTCON                                                               WRSPS.11    
*CALL MPIDECK                                                              WRSPS.12    
!-----------------------------------------------------                     WRSPS.13    
! Passed variables                                                         WRSPS.14    
!-----------------------------------------------------                     WRSPS.15    
      CHARACTER*(80) :: DESCRIPTION                                        WRSPS.16    
      COMPLEX :: A(NNTx,MMTy,NHEM,nLevs)                                   WRSPS.17    
      COMPLEX :: B(NWJ2,NHEM,nLevs)                                        WRSPS.18    
      INTEGER :: IA                                                        WRSPS.19    
      INTEGER :: nLevs                                                     WRSPS.20    
!-----------------------------------------------------                     WRSPS.21    
! Local variables                                                          WRSPS.22    
!-----------------------------------------------------                     WRSPS.23    
      COMPLEX, ALLOCATABLE :: HoldVar(:,:,:,:)                             WRSPS.24    
      CHARACTER COEFF(NWJ2,2)*8                                            WRSPS.25    
! External function                                                        WRSPS.26    
      COMPLEX :: POLAR                                                     WRSPS.27    
      INTEGER, PARAMETER :: MJPm=NWJ2+NWJ2                                 WRSPS.28    
      INTEGER :: FP(NWJ2*NHEM)                                             WRSPS.29    
      INTEGER :: IP(NWJ2*NHEM)                                             WRSPS.30    
      INTEGER :: I, IBEG, IG                                               WRSPS.31    
      INTEGER, PARAMETER :: TagRef=26100                                   WRSPS.32    
      INTEGER :: iPe                                                       WRSPS.33    
! Loop variables                                                           WRSPS.34    
      INTEGER :: IHEM, IM, IN, JP, L, MP                                   WRSPS.35    
!-----------------------------------------------------                     WRSPS.36    
! Store COEFF, FP and IP, so that they only need setting once              WRSPS.37    
!-----------------------------------------------------                     WRSPS.38    
      SAVE COEFF,FP,IP                                                     WRSPS.39    
      DATA COEFF/MJPm*' (  ,  )'/                                          WRSPS.40    
      IG=0                                                                 WRSPS.41    
      I=0                                                                  WRSPS.42    
      DO MP=0,MM-1,MOCT                                                    WRSPS.43    
         !-----------------------------------------------------            WRSPS.44    
         ! Only print if MP<NCOEFF                                         WRSPS.45    
         !-----------------------------------------------------            WRSPS.46    
         IF (MP.GE.NCOEFF) RETURN                                          WRSPS.47    
                                                                           WRSPS.48    
         IBEG=IG                                                           WRSPS.49    
         DO JP=MP,NCOEFF-1,MH                                              WRSPS.50    
            IG=IG+1                                                        WRSPS.51    
            I=I+1                                                          WRSPS.52    
            IP(I)=IG                                                       WRSPS.53    
            IF (MP.EQ.0) THEN                                              WRSPS.54    
               FP(I)=1                                                     WRSPS.55    
            ELSE                                                           WRSPS.56    
               FP(I)=2                                                     WRSPS.57    
            ENDIF                                                          WRSPS.58    
            WRITE(COEFF(I,1)(3:4),'(I2)')MP                                WRSPS.59    
            WRITE(COEFF(I,2)(3:4),'(I2)')MP                                WRSPS.60    
            WRITE(COEFF(I,1)(6:7),'(I2)')JP+1                              WRSPS.61    
            WRITE(COEFF(I,2)(6:7),'(I2)')JP                                WRSPS.62    
         ENDDO                                                             WRSPS.63    
         IG=IBEG+(NN-MP+1)/MH                                              WRSPS.64    
      ENDDO                                                                WRSPS.65    
      RETURN                                                               WRSPS.66    
!-----------------------------------------------------                     WRSPS.67    
! By calling WRSPA the computation begins here and initialisation          WRSPS.68    
! above isn't needed.                                                      WRSPS.69    
!-----------------------------------------------------                     WRSPS.70    
      ENTRY WRSPA(DESCRIPTION,A,IA,nLevs)                                  WRSPS.71    
!-----------------------------------------------------                     WRSPS.72    
! Only interested in the data stored in IHEM=1                             WRSPS.73    
!-----------------------------------------------------                     WRSPS.74    
      ALLOCATE(HoldVar(NNTx,MMTy,NHEM,nLevs))                              WRSPS.75    
      HoldVar(:,:,:,:)=A(:,:,:,:)                                          WRSPS.76    
!-----------------------------------------------------                     WRSPS.77    
! Put coefficient together                                                 WRSPS.78    
!-----------------------------------------------------                     WRSPS.79    
      IF (MyPe.GT.0) THEN                                                  WRSPS.80    
         !-----------------------------------------------------            WRSPS.81    
         ! Send coefficients to PE 0                                       WRSPS.82    
         !-----------------------------------------------------            WRSPS.83    
         iRecv=MyPe                                                        WRSPS.84    
         nBuffSize=NNTx*MMTy*NHEM*nLevs                                    WRSPS.85    
         iTag=TagRef+MyPe                                                  WRSPS.86    
         CALL MPI_BSEND(HoldVar, nBuffSize, ParaCom, iRecv,                WRSPS.87    
     &        iTag, MPI_COMM_WORLD, ierr)                                  WRSPS.88    
      ELSE                                                                 WRSPS.89    
         !-----------------------------------------------------            WRSPS.90    
         ! Loop through PE that aren't PE 0                                WRSPS.91    
         !-----------------------------------------------------            WRSPS.92    
         DO iPe=1,NPE-1                                                    WRSPS.93    
            !-----------------------------------------------------         WRSPS.94    
            ! Receive data                                                 WRSPS.95    
            !-----------------------------------------------------         WRSPS.96    
            iSend=iPe                                                      WRSPS.97    
            nBuffSize=NNTx*MMTy*NHEM*nLevs                                 WRSPS.98    
            iTag=TagRef+iPe                                                WRSPS.99    
            CALL MPI_RECV(HoldVar, nBuffSize, ParaCom, iSend,              WRSPS.100   
     &           iTag, MPI_COMM_WORLD, istat, ierr)                        WRSPS.101   
            !-----------------------------------------------------         WRSPS.102   
            ! Write data into array                                        WRSPS.103   
            !-----------------------------------------------------         WRSPS.104   
            DO L=1,nLevs                                                   WRSPS.105   
               DO IHEM=1,NHEM                                              WRSPS.106   
                  DO IM=1,MMTyy(iRow)                                      WRSPS.107   
                     DO IN=1,NNTxx(iCol)                                   WRSPS.108   
                        B(CoefConv(IN,IM,iPe),IHEM,L)=                     WRSPS.109   
     &                       HoldVar(IN,IM,IHEM,L)                         WRSPS.110   
                     ENDDO                                                 WRSPS.111   
                  ENDDO                                                    WRSPS.112   
               ENDDO                                                       WRSPS.113   
            ENDDO                                                          WRSPS.114   
         ENDDO                                                             WRSPS.115   
         !-----------------------------------------------------            WRSPS.116   
         ! Write coefficients on PE 0 into array B                         WRSPS.117   
         !-----------------------------------------------------            WRSPS.118   
         DO L=1,nLevs                                                      WRSPS.119   
            DO IHEM=1,NHEM                                                 WRSPS.120   
               DO IM=1,MMTyy(iRow)                                         WRSPS.121   
                  DO IN=1,NNTxx(iCol)                                      WRSPS.122   
                     B(CoefConv(IN,IM,0),IHEM,L)=HoldVar(IN,IM,IHEM,L)     WRSPS.123   
                  ENDDO                                                    WRSPS.124   
               ENDDO                                                       WRSPS.125   
            ENDDO                                                          WRSPS.126   
         ENDDO                                                             WRSPS.127   
         !-----------------------------------------------------            WRSPS.128   
         ! Write coefficients to output file                               WRSPS.129   
         !-----------------------------------------------------            WRSPS.130   
         IF (NHEM.EQ.1) THEN                                               WRSPS.131   
            DO L=1,nLevs                                                   WRSPS.132   
               IF (LSPO(L)) THEN                                           WRSPS.133   
                  IF (nLevs.GT.1) THEN                                     WRSPS.134   
                     WRITE(2, *) TRIM(DESCRIPTION),L                       WRSPS.135   
                  ELSE                                                     WRSPS.136   
                     WRITE(2, *) TRIM(DESCRIPTION)                         WRSPS.137   
                  ENDIF                                                    WRSPS.138   
                  WRITE(2,1000)(COEFF(I,IA),POLAR(B(IP(I),1,L)*FP(I)),     WRSPS.139   
     &                 I=1,INSPC)                                          WRSPS.140   
               ENDIF                                                       WRSPS.141   
            ENDDO                                                          WRSPS.142   
         ELSE                                                              WRSPS.143   
            DO L=1,nLevs                                                   WRSPS.144   
               IF (LSPO(L)) THEN                                           WRSPS.145   
                  IF (nLevs.GT.1) THEN                                     WRSPS.146   
                     WRITE(2, *) TRIM(DESCRIPTION),L                       WRSPS.147   
                  ELSE                                                     WRSPS.148   
                     WRITE(2, *) TRIM(DESCRIPTION)                         WRSPS.149   
                  ENDIF                                                    WRSPS.150   
                  WRITE(2,1000)(COEFF(I,2),POLAR(B(IP(I),3-IA,L)           WRSPS.151   
     &                 *FP(I)),COEFF(I,1),                                 WRSPS.152   
     &                 POLAR(B(IP(I),IA,L)*FP(I)),I=1,INSPC)               WRSPS.153   
               ENDIF                                                       WRSPS.154   
            ENDDO                                                          WRSPS.155   
         ENDIF                                                             WRSPS.156   
      ENDIF                                                                WRSPS.157   
 1000 FORMAT(3(A8,1X,1PE8.2,0PF7.1))                                       WRSPS.158   
      RETURN                                                               WRSPS.159   
      END                                                                  WRSPS.160   
*DECK XSECT                                                                XSECT.1     
!=====================================================                     XSECT.2     
! This subroutine gives quick look sigma-latitude x-sections               XSECT.3     
! of [U], [T] and [V*T*].                                                  XSECT.4     
!=====================================================                     XSECT.5     
      SUBROUTINE XSECT(ISKIP)                                              XSECT.6     
      IMPLICIT NONE                                                        XSECT.7     
*CALL PARAM1                                                               XSECT.8     
*CALL PARAM2                                                               XSECT.9     
*CALL PARAM3                                                               XSECT.10    
*CALL BLANK                                                                XSECT.11    
*CALL BATS                                                                 XSECT.12    
*CALL GRIDPA2                                                              XSECT.13    
*CALL LEGAU                                                                XSECT.14    
*CALL OUTCON                                                               XSECT.15    
*CALL RESTOR                                                               XSECT.16    
*CALL MPIDECK                                                              XSECT.17    
!-----------------------------------------------------                     XSECT.18    
! Passed variable                                                          XSECT.19    
!-----------------------------------------------------                     XSECT.20    
      INTEGER, INTENT(IN) :: ISKIP                                         XSECT.21    
!-----------------------------------------------------                     XSECT.22    
! Local variables                                                          XSECT.23    
!-----------------------------------------------------                     XSECT.24    
      INTEGER, PARAMETER :: TagRef=26200                                   XSECT.25    
      INTEGER :: SLICE(JGy,NHEM,NLx,3)                                     XSECT.26    
      INTEGER :: SliceFull(JG,NHEM,NL,3)                                   XSECT.27    
      INTEGER :: HOLD(JGy,NHEM,NLx)                                        XSECT.28    
      REAL :: SEC                                                          XSECT.29    
      REAL :: TB, UB, VB                                                   XSECT.30    
      REAL :: VT                                                           XSECT.31    
      REAL :: RMG                                                          XSECT.32    
      INTEGER :: ISLT                                                      XSECT.33    
      INTEGER :: IX, J0, JJ                                                XSECT.34    
      INTEGER :: J                                                         XSECT.35    
      INTEGER :: iCol2, iRow2                                              XSECT.36    
! Loop variables                                                           XSECT.37    
      INTEGER :: I, IHEM, iPe, J2, L                                       XSECT.38    
!-----------------------------------------------------                     XSECT.39    
! Set ISLT, The default being to have 16 I5 integers per level.            XSECT.40    
!-----------------------------------------------------                     XSECT.41    
      IF (ISKIP.EQ.0) THEN                                                 XSECT.42    
         RETURN                                                            XSECT.43    
      ELSE IF (ISKIP.GT.0) THEN                                            XSECT.44    
         ISLT = ISKIP                                                      XSECT.45    
      ELSE                                                                 XSECT.46    
         ISLT = (NHEM*JG-1)/18 + 1                                         XSECT.47    
      ENDIF                                                                XSECT.48    
!-----------------------------------------------------                     XSECT.49    
! Output is wanted. Read grid point fields from stream 24                  XSECT.50    
!-----------------------------------------------------                     XSECT.51    
      RMG=1./REAL(MG)                                                      XSECT.52    
*IF DEF,ONLY_V3                                                            XSECT.53    
      IF (MyPe.EQ.0) WRITE (2,104) DAY,DOY                                 XSECT.54    
  104 FORMAT(/' CROSS SECTIONS FOR DAY, DOY',2F6.1)                        XSECT.55    
*ELSE                                                                      XSECT.56    
      IF (MyPe.EQ.0) WRITE (2,104) DAY                                     XSECT.57    
  104 FORMAT(/' CROSS SECTIONS FOR DAY',F6.1)                              XSECT.58    
*ENDIF                                                                     XSECT.59    
!-----------------------------------------------------                     XSECT.60    
! Loop through latitudes                                                   XSECT.61    
!-----------------------------------------------------                     XSECT.62    
      DO J=1,JGyy(iRow)                                                    XSECT.63    
         !-----------------------------------------------------            XSECT.64    
         ! Loop over latitudes to read gridpoint data, dimensionalise      XSECT.65    
         ! and calculate zonal means                                       XSECT.66    
         !-----------------------------------------------------            XSECT.67    
         SEC=ALAT(JJ1(iRow)+J,1)/57.29578                                  XSECT.68    
         SEC=10.*CV/COS(SEC)                                               XSECT.69    
         !-----------------------------------------------------            XSECT.70    
         ! Loop for [U] and [T] sections                                   XSECT.71    
         !-----------------------------------------------------            XSECT.72    
         DO L=1,NLxx(iCol)                                                 XSECT.73    
            DO IHEM=1,NHEM                                                 XSECT.74    
               UB=0.                                                       XSECT.75    
               DO I=1,MG                                                   XSECT.76    
                  UB=UB+UG2(I,IHEM,J,L)                                    XSECT.77    
               ENDDO                                                       XSECT.78    
               UB=UB*RMG                                                   XSECT.79    
               TB=0.                                                       XSECT.80    
               DO I=1,MG                                                   XSECT.81    
                  TB=TB+TG2(I,IHEM,J,L)                                    XSECT.82    
               ENDDO                                                       XSECT.83    
               TB=TB*RMG+T0(L)                                             XSECT.84    
                                                                           XSECT.85    
               SLICE(J,IHEM,L,1)=NINT(UB*SEC)                              XSECT.86    
               SLICE(J,IHEM,L,2)=NINT(TB*CT)                               XSECT.87    
            ENDDO                                                          XSECT.88    
         ENDDO                                                             XSECT.89    
         !-----------------------------------------------------            XSECT.90    
         ! Loop for temperature flux section                               XSECT.91    
         !-----------------------------------------------------            XSECT.92    
         DO L=1,NLxx(iCol)                                                 XSECT.93    
            DO IHEM=1,NHEM                                                 XSECT.94    
               VT=0.                                                       XSECT.95    
               DO I=1,MG                                                   XSECT.96    
                  VT=VT+TG2(I,IHEM,J,L)*VG2(I,IHEM,J,L)                    XSECT.97    
               ENDDO                                                       XSECT.98    
               VT=RMG*VT                                                   XSECT.99    
               TB=0.                                                       XSECT.100   
               DO I=1,MG                                                   XSECT.101   
                  TB=TB+TG2(I,IHEM,J,L)                                    XSECT.102   
               ENDDO                                                       XSECT.103   
               TB=TB*RMG                                                   XSECT.104   
               VB=0.                                                       XSECT.105   
               DO I=1,MG                                                   XSECT.106   
                  VB=VB+VG2(I,IHEM,J,L)                                    XSECT.107   
               ENDDO                                                       XSECT.108   
               VB=VB*RMG                                                   XSECT.109   
               SLICE(J,IHEM,L,3)=NINT((VT-VB*TB)*SEC*CT)                   XSECT.110   
            ENDDO                                                          XSECT.111   
         ENDDO                                                             XSECT.112   
      ENDDO                                                                XSECT.113   
!-----------------------------------------------------                     XSECT.114   
! Pass data to PE 0                                                        XSECT.115   
!-----------------------------------------------------                     XSECT.116   
      IF (MyPe.GT.0) THEN                                                  XSECT.117   
         !-----------------------------------------------------            XSECT.118   
         ! Send arrays to PE 0                                             XSECT.119   
         !-----------------------------------------------------            XSECT.120   
         iRecv=0                                                           XSECT.121   
         nBuffSize=JGy*NHEM*NLx*3                                          XSECT.122   
         iTag=TagRef+MyPe                                                  XSECT.123   
         CALL MPI_BSEND(SLICE, nBuffSize, ParaInt, iRecv,                  XSECT.124   
     &        iTag, MPI_COMM_WORLD, ierr)                                  XSECT.125   
      ELSE                                                                 XSECT.126   
         DO iPe=0,NPE-1                                                    XSECT.127   
            IF (iPe.GT.0) THEN                                             XSECT.128   
               !-----------------------------------------------------      XSECT.129   
               ! Receive arrays                                            XSECT.130   
               !-----------------------------------------------------      XSECT.131   
               iSend=iPe                                                   XSECT.132   
               nBuffSize=JGy*NHEM*NLx*3                                    XSECT.133   
               iTag=TagRef+iPe                                             XSECT.134   
               CALL MPI_RECV(SLICE, nBuffSize, ParaInt, iSend,             XSECT.135   
     &              iTag, MPI_COMM_WORLD, istat, ierr)                     XSECT.136   
            ENDIF                                                          XSECT.137   
            !-----------------------------------------------------         XSECT.138   
            ! Write them into full size arrays                             XSECT.139   
            !-----------------------------------------------------         XSECT.140   
            iCol2=GRID(1,iPe)                                              XSECT.141   
            iRow2=GRID(2,iPe)                                              XSECT.142   
            DO I=1,3                                                       XSECT.143   
               DO L=1,NLxx(iCol2)                                          XSECT.144   
                  DO IHEM=1,NHEM                                           XSECT.145   
                     DO J=1,JGyy(iRow2)                                    XSECT.146   
                        SliceFull(JJ1(iRow2)+J,IHEM,KK1(iCol2)+L,I)=       XSECT.147   
     &                       SLICE(J,IHEM,L,I)                             XSECT.148   
                     ENDDO                                                 XSECT.149   
                  ENDDO                                                    XSECT.150   
               ENDDO                                                       XSECT.151   
            ENDDO                                                          XSECT.152   
         ENDDO                                                             XSECT.153   
         !-----------------------------------------------------            XSECT.154   
         ! Printing sections - separate loop for each field.               XSECT.155   
         ! First the zonal wind                                            XSECT.156   
         !-----------------------------------------------------            XSECT.157   
         WRITE (2,100)                                                     XSECT.158   
 100     FORMAT(' ZONAL WIND IN 0.1 m/s')                                  XSECT.159   
         DO L=1,NL                                                         XSECT.160   
            WRITE(2,101)((SliceFull(J+(IHEM-1)*(JG-2*J+1),IHEM,L,1),       XSECT.161   
     &           J=1,JG,ISLT),IHEM=1,NHEM)                                 XSECT.162   
         ENDDO                                                             XSECT.163   
 101     FORMAT(18I4)                                                      XSECT.164   
         !-----------------------------------------------------            XSECT.165   
         ! Secondly the temperature                                        XSECT.166   
         !-----------------------------------------------------            XSECT.167   
         WRITE(2,102)                                                      XSECT.168   
 102     FORMAT(' TEMPERATURE IN K')                                       XSECT.169   
         DO L=1,NL                                                         XSECT.170   
            WRITE(2,101)((SliceFull(J+(IHEM-1)*(JG-2*J+1),IHEM,L,2),       XSECT.171   
     &           J=1,JG,ISLT),IHEM=1,NHEM)                                 XSECT.172   
         ENDDO                                                             XSECT.173   
         !-----------------------------------------------------            XSECT.174   
         ! Thirdly temperature flux                                        XSECT.175   
         !-----------------------------------------------------            XSECT.176   
         WRITE(2,103)                                                      XSECT.177   
*IF DEF,ONLY_V2                                                            XSECT.178   
 103     FORMAT(' NORTHWARD EDDY TEMPERATURE FLUX IN 0.1Km/s')             XSECT.179   
*ELSE                                                                      XSECT.180   
 103     FORMAT(' POLEWARD TEMPERATURE FLUX IN 0.1Km/s')                   XSECT.181   
*ENDIF                                                                     XSECT.182   
         DO L=1,NL                                                         XSECT.183   
            WRITE(2,101)((SliceFull(J+(IHEM-1)*(JG-2*J+1),IHEM,L,3),       XSECT.184   
     &           J=1,JG,ISLT),IHEM=1,NHEM)                                 XSECT.185   
         ENDDO                                                             XSECT.186   
      ENDIF                                                                XSECT.187   
      RETURN                                                               XSECT.188   
      END                                                                  XSECT.189   
*DECK FTSL                                                                 FTSL.1     
*IF DEF,ABOVE_V1                                                           FTSL.2     
!=====================================================                     FTSL.3     
! Function used in CUBM and CUDIF                                          FTSL.4     
!=====================================================                     FTSL.5     
      FUNCTION FTSL(T,Q,P)                                                 FTSL.6     
      IMPLICIT NONE                                                        FTSL.7     
*CALL PARAM1                                                               FTSL.8     
*CALL PARAM2                                                               FTSL.9     
*CALL PARAM3                                                               FTSL.10    
*CALL PHYSCA                                                               FTSL.11    
!-----------------------------------------------------                     FTSL.12    
! Passed variables                                                         FTSL.13    
!-----------------------------------------------------                     FTSL.14    
      REAL :: FTSL                                                         FTSL.15    
      REAL :: T                                                            FTSL.16    
      REAL :: Q                                                            FTSL.17    
      REAL :: P                                                            FTSL.18    
!-----------------------------------------------------                     FTSL.19    
! Define function                                                          FTSL.20    
!-----------------------------------------------------                     FTSL.21    
      FTSL=TSLA+TSLB/(TSLC*LOG(T)-LOG(Q*P)+TSLD)                           FTSL.22    
      END FUNCTION                                                         FTSL.23    
*ENDIF                                                                     FTSL.24    
*DECK POLAR                                                                POLAR.1     
!=====================================================                     POLAR.2     
! Function that takes the complex number Z and return a complex            POLAR.3     
! number that contains the magnitude of Z in the real part and             POLAR.4     
! the angle in radians of the arctangent of the complex number.            POLAR.5     
!=====================================================                     POLAR.6     
      FUNCTION POLAR(Z)                                                    POLAR.7     
      IMPLICIT NONE                                                        POLAR.8     
!-----------------------------------------------------                     POLAR.9     
! Passed variable                                                          POLAR.10    
!-----------------------------------------------------                     POLAR.11    
      COMPLEX :: POLAR                                                     POLAR.12    
      COMPLEX :: Z                                                         POLAR.13    
!-----------------------------------------------------                     POLAR.14    
! Local variables                                                          POLAR.15    
!-----------------------------------------------------                     POLAR.16    
! Value of pi                                                              POLAR.17    
      REAL, PARAMETER :: PI=3.14159265359                                  POLAR.18    
! One radian                                                               POLAR.19    
      REAL, PARAMETER :: RAD=180./PI                                       POLAR.20    
!-----------------------------------------------------                     POLAR.21    
! Define the function. (Atan2 is a standard Fortran function, which        POLAR.22    
! calculates the arctangent of the complex number (X+iY).)                 POLAR.23    
!-----------------------------------------------------                     POLAR.24    
      POLAR=CMPLX(ABS(Z),ATAN2(AIMAG(Z),REAL(Z)+1.0E-20)*RAD)              POLAR.25    
      RETURN                                                               POLAR.26    
      END FUNCTION                                                         POLAR.27    
*DECK PQSAT                                                                PQSAT.1     
*IF DEF,ONLY_V3                                                            PQSAT.2     
!=====================================================                     PQSAT.3     
! Exponential function involving tendency of temperature                   PQSAT.4     
!=====================================================                     PQSAT.5     
      REAL FUNCTION PQSAT(T)                                               PQSAT.6     
      IMPLICIT NONE                                                        PQSAT.7     
*CALL QSTABS                                                               PQSAT.8     
!-----------------------------------------------------                     PQSAT.9     
! Local variables                                                          PQSAT.10    
!-----------------------------------------------------                     PQSAT.11    
      REAL :: T                                                            PQSAT.12    
!-----------------------------------------------------                     PQSAT.13    
! Carry out calculation                                                    PQSAT.14    
!-----------------------------------------------------                     PQSAT.15    
      PQSAT=PQSVAL(int(T*1e5))                                             PQSAT.16    
      END                                                                  PQSAT.17    
*ENDIF                                                                     PQSAT.18    
*DECK NOISEold                                                             NOISEold.1     
!=====================================================                     NOISEold.2     
! Marc 14 Jul 2010                                                         NOISEold.3     
! The new version of the code creates random number with the               NOISEold.4     
! routine, random_number, which should be available on any                 NOISEold.5     
! platform - unlike RANF. But we need to keep the old NOISE                NOISEold.6     
! subroutine to compare results with the old version of the                NOISEold.7     
! code. Also need the subroutines NEW2OLD and OLD2NEW for                  NOISEold.8     
! this.                                                                    NOISEold.9     
!                                                                          NOISEold.10    
! Will need to replace the call to NOISE with call to                      NOISEold.11    
! NOISEold to use the old method of generating random                      NOISEold.12    
! numbers.                                                                 NOISEold.13    
!=====================================================                     NOISEold.14    
C**********************************************************                NOISEold.15    
C             SUBROUTINE NOISE                                             NOISEold.16    
C**********************************************************                NOISEold.17    
      SUBROUTINE NOISEold                                                  NOISEold.18    
C                                                                          NOISEold.19    
C     Adds white noise perturbation to ln(surface pressure)                NOISEold.20    
C     balanced initial state at T=0.                                       NOISEold.21    
C                                                                          NOISEold.22    
*CALL PARAM1                                                               NOISEold.23    
*CALL PARAM2                                                               NOISEold.24    
*CALL PARAM3                                                               NOISEold.25    
*CALL SPECTR                                                               NOISEold.26    
*CALL OUTCON                                                               NOISEold.27    
      COMPLEX :: SPold(NWJ2*NHEM), SPMIold(NWJ2*NHEM)                      NOISEold.28    
      EXTERNAL RANF                                                        NOISEold.29    
  200 FORMAT(' WHITE NOISE SURFACE PRESSURE PERTURBATION AT T=0'/)         NOISEold.30    
! store new format surface presssure in the old format - marc              NOISEold.31    
      call new2old(nhem,sp,spold)                                          NOISEold.32    
      call new2old(nhem,spmi,spmiold)                                      NOISEold.33    
C                                                                          NOISEold.34    
C     Eps sets magnitude of the noise                                      NOISEold.35    
C                                                                          NOISEold.36    
      EPS=1.E-4                                                            NOISEold.37    
      WRITE (2,200)                                                        NOISEold.38    
      SCALE=EPS/SQRT(2.0)                                                  NOISEold.39    
      IBAS=IDM+1                                                           NOISEold.40    
      IEND=NWJ2                                                            NOISEold.41    
      IDUM=-1                                                              NOISEold.42    
      DO 800 IHEM=1,NHEM                                                   NOISEold.43    
         DO 10 I=IBAS,IEND                                                 NOISEold.44    
            ZR1=RANF(IDUM)-0.5                                             NOISEold.45    
            ZR2=RANF(IDUM)-0.5                                             NOISEold.46    
            SPold(I)=SPold(I)+SCALE*CMPLX(ZR1,ZR2)                         NOISEold.47    
            SPMIold(I)=SPold(I)                                            NOISEold.48    
10       CONTINUE                                                          NOISEold.49    
         IBAS=IBAS+NWJ2                                                    NOISEold.50    
         IEND=IEND+NWJ2                                                    NOISEold.51    
800   CONTINUE                                                             NOISEold.52    
C                                                                          NOISEold.53    
! store old format surface presssure in the new format - marc              NOISEold.54    
      call old2new(nhem,spold,sp)                                          NOISEold.55    
      call old2new(nhem,spmiold,spmi)                                      NOISEold.56    
!                                                                          NOISEold.57    
      RETURN                                                               NOISEold.58    
      END                                                                  NOISEold.59    
*DECK OLD2NEW                                                              OLD2NEW.1     
!=====================================================                     OLD2NEW.2     
! Convert from the old coefficient formation to the new one                OLD2NEW.3     
!=====================================================                     OLD2NEW.4     
      SUBROUTINE OLD2NEW(nLevels, InArray, OutArray)                       OLD2NEW.5     
      IMPLICIT NONE                                                        OLD2NEW.6     
*CALL PARAM1                                                               OLD2NEW.7     
*CALL PARAM3                                                               OLD2NEW.8     
*CALL MPIDECK                                                              OLD2NEW.9     
!-----------------------------------------------------                     OLD2NEW.10    
! Passed variable                                                          OLD2NEW.11    
!-----------------------------------------------------                     OLD2NEW.12    
! Number of levels                                                         OLD2NEW.13    
      INTEGER, INTENT(IN) :: nLevels                                       OLD2NEW.14    
! In array                                                                 OLD2NEW.15    
      COMPLEX, INTENT(IN) :: InArray(NWJ2,nLevels)                         OLD2NEW.16    
! Out array                                                                OLD2NEW.17    
      COMPLEX, INTENT(OUT) :: OutArray(NNT,MMT,nLevels)                    OLD2NEW.18    
!-----------------------------------------------------                     OLD2NEW.19    
! Local variables                                                          OLD2NEW.20    
!-----------------------------------------------------                     OLD2NEW.21    
      INTEGER :: IM, IN, L                                                 OLD2NEW.22    
!-----------------------------------------------------                     OLD2NEW.23    
! Loop through the levels                                                  OLD2NEW.24    
!-----------------------------------------------------                     OLD2NEW.25    
      DO L=1,nLevels                                                       OLD2NEW.26    
         DO IM=1,MMT                                                       OLD2NEW.27    
            DO IN=1,NNT                                                    OLD2NEW.28    
               OutArray(IN,IM,L)=InArray(CoefConv(IN,IM,0),L)              OLD2NEW.29    
            ENDDO                                                          OLD2NEW.30    
         ENDDO                                                             OLD2NEW.31    
      ENDDO                                                                OLD2NEW.32    
      END                                                                  OLD2NEW.33    
*DECK NEW2OLD                                                              NEW2OLD.1     
!=====================================================                     NEW2OLD.2     
! Convert from the old coefficient formation to the new one                NEW2OLD.3     
!=====================================================                     NEW2OLD.4     
      SUBROUTINE NEW2OLD(nLevels, InArray, OutArray)                       NEW2OLD.5     
      IMPLICIT NONE                                                        NEW2OLD.6     
*CALL PARAM1                                                               NEW2OLD.7     
*CALL PARAM3                                                               NEW2OLD.8     
*CALL MPIDECK                                                              NEW2OLD.9     
!-----------------------------------------------------                     NEW2OLD.10    
! Passed variable                                                          NEW2OLD.11    
!-----------------------------------------------------                     NEW2OLD.12    
! Number of levels                                                         NEW2OLD.13    
      INTEGER, INTENT(IN) :: nLevels                                       NEW2OLD.14    
! In array                                                                 NEW2OLD.15    
      COMPLEX, INTENT(IN) :: InArray(NNT,MMT,nLevels)                      NEW2OLD.16    
! Out array                                                                NEW2OLD.17    
      COMPLEX, INTENT(OUT) :: OutArray(NWJ2,nLevels)                       NEW2OLD.18    
!-----------------------------------------------------                     NEW2OLD.19    
! Local variables                                                          NEW2OLD.20    
!-----------------------------------------------------                     NEW2OLD.21    
      INTEGER :: IM, IN, L                                                 NEW2OLD.22    
!-----------------------------------------------------                     NEW2OLD.23    
! Loop through the levels                                                  NEW2OLD.24    
!-----------------------------------------------------                     NEW2OLD.25    
      DO L=1,nLevels                                                       NEW2OLD.26    
         DO IM=1,MMT                                                       NEW2OLD.27    
            DO IN=1,NNT                                                    NEW2OLD.28    
               OutArray(CoefConv(IN,IM,0),L)=InArray(IN,IM,L)              NEW2OLD.29    
            ENDDO                                                          NEW2OLD.30    
         ENDDO                                                             NEW2OLD.31    
      ENDDO                                                                NEW2OLD.32    
      END                                                                  NEW2OLD.33    
*DECK NEW2OLD2                                                             NEW2OLD2.1     
!=====================================================                     NEW2OLD2.2     
! Convert from the old coefficient formation to the new one                NEW2OLD2.3     
!=====================================================                     NEW2OLD2.4     
      SUBROUTINE NEW2OLD2(nLevels, InArray, OutArray)                      NEW2OLD2.5     
      IMPLICIT NONE                                                        NEW2OLD2.6     
*CALL PARAM1                                                               NEW2OLD2.7     
*CALL PARAM3                                                               NEW2OLD2.8     
*CALL MPIDECK                                                              NEW2OLD2.9     
!-----------------------------------------------------                     NEW2OLD2.10    
! Passed variable                                                          NEW2OLD2.11    
!-----------------------------------------------------                     NEW2OLD2.12    
! Number of levels                                                         NEW2OLD2.13    
      INTEGER, INTENT(IN) :: nLevels                                       NEW2OLD2.14    
! In array                                                                 NEW2OLD2.15    
      REAL, INTENT(IN) :: InArray(NNT,MMT,nLevels)                         NEW2OLD2.16    
! Out array                                                                NEW2OLD2.17    
      REAL, INTENT(OUT) :: OutArray(NWJ2,nLevels)                          NEW2OLD2.18    
!-----------------------------------------------------                     NEW2OLD2.19    
! Local variables                                                          NEW2OLD2.20    
!-----------------------------------------------------                     NEW2OLD2.21    
      INTEGER :: IM, IN, L                                                 NEW2OLD2.22    
!-----------------------------------------------------                     NEW2OLD2.23    
! Loop through the levels                                                  NEW2OLD2.24    
!-----------------------------------------------------                     NEW2OLD2.25    
      DO L=1,nLevels                                                       NEW2OLD2.26    
         DO IM=1,MMT                                                       NEW2OLD2.27    
            DO IN=1,NNT                                                    NEW2OLD2.28    
               OutArray(CoefConv(IN,IM,0),L)=InArray(IN,IM,L)              NEW2OLD2.29    
            ENDDO                                                          NEW2OLD2.30    
         ENDDO                                                             NEW2OLD2.31    
      ENDDO                                                                NEW2OLD2.32    
      END                                                                  NEW2OLD2.33    
*DECK alterwater                                                           alterwater.1     
      SUBROUTINE alterwater(exwaflx,exiwaflx,exinwaflx,waflx,waflx2)       alterwater.2     
c----------------------------------------------------                      alterwater.3     
c rssmi: 14-11-01                                                          alterwater.4     
c deals with the lack of run-off in the coupled model                      alterwater.5     
c reads in a preprepared drainage basin mask and passes                    alterwater.6     
c excess water from land to those basins. Careful to                       alterwater.7     
c ensure that the drainage mask fits your other land                       alterwater.8     
c masks...                                                                 alterwater.9     
c----------------------------------------------------                      alterwater.10    
C Alterwater only be run on one processor MYPE=0 because it uses           alterwater.11    
C the RUNOFF array which is global, not local to processors                alterwater.12    
                                                                           alterwater.13    
*CALL PARAM1                                                               alterwater.14    
*CALL PARAM2                                                               alterwater.15    
*CALL PARAM3                                                               alterwater.16    
*CALL OROG_G                                                               alterwater.17    
*CALL PARAMH                                                               alterwater.18    
*CALL OAfields                                                             alterwater.19    
                                                                           alterwater.20    
      integer ymax,iarea,ncoast                                            alterwater.21    
      parameter(ymax=jm)                                                   alterwater.22    
                                                                           alterwater.23    
C NOTE: WAFLX2 IS THE FULL 2D VERSION OF OFRAC which is needed below       alterwater.24    
                                                                           alterwater.25    
      real waflx(mg,nhem,jg), exwaflx(mg,nhem,jg), exiwaflx(mg,nhem,jg)    alterwater.26    
      real waflx2(mg,nhem,jg), exinwaflx(mg,nhem,jg)                       alterwater.27    
                                                                           alterwater.28    
      real wagrid(mg,ymax),exgrid(mg,ymax), exigrid(mg,ymax)               alterwater.29    
      real exgrid2(mg,ymax), exingrid(mg,ymax)                             alterwater.30    
      real exgrid3(mg,ymax)                                                alterwater.31    
      real exgrid4(mg,ymax)                                                alterwater.32    
      real exgrid5(mg,ymax)                                                alterwater.33    
      real exgrid9(mg,ymax)                                                alterwater.34    
      real newagrid(mg,ymax)                                               alterwater.35    
      real newagrid2(mg,ymax)                                              alterwater.36    
                                                                           alterwater.37    
      integer iland(2), jland(2), icoast, jcoast                           alterwater.38    
      real totalrain, yagrid                                               alterwater.39    
      real ddxx(ymax),ddyy(ymax),rlat(ymax)                                alterwater.40    
      data ddyy/3.42217100000001, 2.82076499999999,                        alterwater.41    
     1  2.80203100000000, 2.79667400000000, 2.79441100000001,              alterwater.42    
     1  2.79322999999999, 2.79255999999999, 2.79211800000000,              alterwater.43    
     1  2.79182700000000, 2.79162800000000, 2.79147200000000,              alterwater.44    
     1  2.79135000000000, 2.79127300000000, 2.79119100000000,              alterwater.45    
     1  2.79114700000000, 2.79108799999999, 2.79106400000001,              alterwater.46    
     1  2.79103000000000, 2.79100400000000, 2.79098399999999,              alterwater.47    
     1  2.79096700000000, 2.79095000000000, 2.79093800000000,              alterwater.48    
     1  2.79092500000000, 2.79092000000000, 2.79090900000000,              alterwater.49    
     1  2.79090600000000, 2.79089900000000, 2.79089530000000,              alterwater.50    
     1  2.79089230000000, 2.79089080000000, 2.79088960000000,              alterwater.51    
     1  2.79088960000000, 2.79089080000000, 2.79089230000000,              alterwater.52    
     1  2.79089530000000, 2.79089900000000, 2.79090600000000,              alterwater.53    
     1  2.79090900000000, 2.79092000000000, 2.79092500000000,              alterwater.54    
     1  2.79093800000000, 2.79095000000000, 2.79096700000000,              alterwater.55    
     1  2.79098399999999, 2.79100400000000, 2.79103000000000,              alterwater.56    
     1  2.79106400000001, 2.79108799999999, 2.79114700000000,              alterwater.57    
     1  2.79119100000000, 2.79127300000000, 2.79135000000000,              alterwater.58    
     1  2.79147200000000, 2.79162800000000, 2.79182700000000,              alterwater.59    
     1  2.79211800000000, 2.79255999999999, 2.79322999999999,              alterwater.60    
     1  2.79441100000001, 2.79667400000000, 2.80203100000000,              alterwater.61    
     1  2.82076499999999, 3.42217100000001/                                alterwater.62    
      data rlat/ -87.8638460000000,                                        alterwater.63    
     1  -85.0965120000000, -82.3129040000000, -79.5256120000000,           alterwater.64    
     1  -76.7368930000000, -73.9475170000000, -71.1577450000000,           alterwater.65    
     1  -68.3677600000000, -65.5776060000000, -62.7873540000000,           alterwater.66    
     1  -59.9970170000000, -57.2066270000000, -54.4161990000000,           alterwater.67    
     1  -51.6257320000000, -48.8352360000000, -46.0447200000000,           alterwater.68    
     1  -43.2541920000000, -40.4636460000000, -37.6730840000000,           alterwater.69    
     1  -34.8825190000000, -32.0919420000000, -29.3013570000000,           alterwater.70    
     1  -26.5107670000000, -23.7201710000000, -20.9295770000000,           alterwater.71    
     1  -18.1389690000000, -15.3483650000000, -12.5577550000000,           alterwater.72    
     1  -9.76714520000000, -6.97653390000000, -4.18592020000000,           alterwater.73    
     1  -1.39530680000000,  1.39530680000000,  4.18592020000000,           alterwater.74    
     1   6.97653390000000,  9.76714520000000,  12.5577550000000,           alterwater.75    
     1   15.3483650000000,  18.1389690000000,  20.9295770000000,           alterwater.76    
     1   23.7201710000000,  26.5107670000000,  29.3013570000000,           alterwater.77    
     1   32.0919420000000,  34.8825190000000,  37.6730840000000,           alterwater.78    
     1   40.4636460000000,  43.2541920000000,  46.0447200000000,           alterwater.79    
     1   48.8352360000000,  51.6257320000000,  54.4161990000000,           alterwater.80    
     1   57.2066270000000,  59.9970170000000,  62.7873540000000,           alterwater.81    
     1   65.5776060000000,  68.3677600000000,  71.1577450000000,           alterwater.82    
     1   73.9475170000000,  76.7368930000000,  79.5256120000000,           alterwater.83    
     1   82.3129040000000,  85.0965120000000,  87.8638460000000/           alterwater.84    
      do i=1,ymax                                                          alterwater.85    
      ddxx(i)=ddyy(i)*cos(rlat(i)*3.1415927/180.)                          alterwater.86    
      end do                                                               alterwater.87    
                                                                           alterwater.88    
c      reformat (ex)waflx onto same grid and initialize the 'new' array    alterwater.89    
                                                                           alterwater.90    
      do i=1,mg                                                            alterwater.91    
      do j=1,ymax                                                          alterwater.92    
c the next 3 lines are the correct ones: waflx2 is OFRAC                   alterwater.93    
      if(j.gt.JG)ofr=waflx2(i,1,ymax+1-j)                                  alterwater.94    
      if(j.le.JG)ofr=waflx2(i,2,j)                                         alterwater.95    
           exgrid3(i,j)=ofr                                                alterwater.96    
      end do                                                               alterwater.97    
      end do                                                               alterwater.98    
                                                                           alterwater.99    
      do i=1,mg                                                            alterwater.100   
      do j=1,ymax                                                          alterwater.101   
C runoff and snow excess > 55S & < 66N                                     alterwater.102   
      if(j.gt.JG)ofr=exwaflx(i,1,ymax+1-j)                                 alterwater.103   
      if(j.le.JG)ofr=exwaflx(i,2,j)                                        alterwater.104   
         exgrid(i,ymax+1-j)=ofr                                            alterwater.105   
C snow excess < 58S                                                        alterwater.106   
      if(j.gt.JG)ofr=exiwaflx(i,1,ymax+1-j)                                alterwater.107   
      if(j.le.JG)ofr=exiwaflx(i,2,j)                                       alterwater.108   
         exigrid(i,ymax+1-j)=ofr                                           alterwater.109   
C snow excess > 66N                                                        alterwater.110   
      if(j.gt.JG)ofr=exinwaflx(i,1,ymax+1-j)                               alterwater.111   
      if(j.le.JG)ofr=exinwaflx(i,2,j)                                      alterwater.112   
         exingrid(i,ymax+1-j)=ofr                                          alterwater.113   
C surface water balance P minus E correction                               alterwater.114   
      if(j.gt.JG)ofr=waflx(i,1,ymax+1-j)                                   alterwater.115   
      if(j.le.JG)ofr=waflx(i,2,j)                                          alterwater.116   
C Do not Multiply by OFRAC since land coast P-E counted in runoff          alterwater.117   
         newagrid2(i,ymax+1-j)=ofr                                         alterwater.118   
      end do                                                               alterwater.119   
      end do                                                               alterwater.120   
                                                                           alterwater.121   
      do iarea=1,iareanum-5                                                alterwater.122   
      totalrain=0.                                                         alterwater.123   
                                                                           alterwater.124   
c      read in the land box perimeter                                      alterwater.125   
      iland(1)=runoff(1,1,iarea)                                           alterwater.126   
      iland(2)=runoff(1,2,iarea)                                           alterwater.127   
      jland(1)=runoff(2,1,iarea)                                           alterwater.128   
      jland(2)=runoff(2,2,iarea)                                           alterwater.129   
      ncoast=runoff(3,1,iarea)                                             alterwater.130   
                                                                           alterwater.131   
c add up area-weighted excess runoff over land in box IAREA                alterwater.132   
                                                                           alterwater.133   
         do i=iland(1),iland(2)                                            alterwater.134   
         do j=jland(1),jland(2)                                            alterwater.135   
             totalrain=totalrain+exgrid(i,j)*ddxx(j)                       alterwater.136   
C     1   *(1.-exgrid3(icoast,ymax+1-jcoast))                              alterwater.137   
C MMJ 9 Sep Fix                                                            alterwater.138   
     1   *(1.-exgrid3(i,ymax+1-j))                                         alterwater.139   
         end do                                                            alterwater.140   
         end do                                                            alterwater.141   
                                                                           alterwater.142   
c calculate the total (2D) sum of coastal points                           alterwater.143   
c total is area-weighted sum of gridpoints and not ocean fractions         alterwater.144   
c since flux to ocean only depends on total incoming runoff                alterwater.145   
C SUM fluxes not volumes                                                   alterwater.146   
         yagrid=0                                                          alterwater.147   
         do n=1,ncoast                                                     alterwater.148   
            icoast=runoff(3+n,1,iarea)                                     alterwater.149   
            jcoast=runoff(3+n,2,iarea)                                     alterwater.150   
!            yagrid=yagrid+ddxx(jcoast)*exgrid3(icoast,ymax+1-jcoast)      alterwater.151   
            yagrid=yagrid+ddxx(jcoast)*ddxx(jcoast)                        alterwater.152   
         end do                                                            alterwater.153   
                                                                           alterwater.154   
c      divide runoff total by the (2D) area of coastal points              alterwater.155   
         totalrain=totalrain/yagrid                                        alterwater.156   
c        totalrain=totalrain/real(ncoast)                                  alterwater.157   
                                                                           alterwater.158   
c      and add it to the dumps for that coastal point                      alterwater.159   
         do n=1,ncoast                                                     alterwater.160   
            icoast=runoff(3+n,1,iarea)                                     alterwater.161   
            jcoast=runoff(3+n,2,iarea)                                     alterwater.162   
      newagrid2(icoast,jcoast)=newagrid2(icoast,jcoast)                    alterwater.163   
     $                           +totalrain*ddxx(jcoast)                   alterwater.164   
         end do                                                            alterwater.165   
                                                                           alterwater.166   
      end do                                                               alterwater.167   
                                                                           alterwater.168   
c  distribute Antarctic runoff over Southern Ocean                         alterwater.169   
c  distribute snowdiff (icebergs) over southern ocean                      alterwater.170   
C  Antarctic runoff is different continent in runoff array                 alterwater.171   
c     (iceberg fw flux is much larger than runoff in reality)              alterwater.172   
                                                                           alterwater.173   
      totaliberg=0.                                                        alterwater.174   
                                                                           alterwater.175   
      do iarea=iareanum-4,iareanum                                         alterwater.176   
                                                                           alterwater.177   
c      read in the land box perimeter                                      alterwater.178   
      iland(1)=runoff(1,1,iarea)                                           alterwater.179   
      iland(2)=runoff(1,2,iarea)                                           alterwater.180   
      jland(1)=runoff(2,1,iarea)                                           alterwater.181   
      jland(2)=runoff(2,2,iarea)                                           alterwater.182   
                                                                           alterwater.183   
c add up area-weighted excess runoff over land in box IAREA                alterwater.184   
                                                                           alterwater.185   
         do i=iland(1),iland(2)                                            alterwater.186   
         do j=jland(1),jland(2)                                            alterwater.187   
             totaliberg=totaliberg+exgrid(i,j)*ddxx(j)                     alterwater.188   
C     1   *(1.-exgrid3(icoast,ymax+1-jcoast))                              alterwater.189   
C MMJ 9 Sep Fix                                                            alterwater.190   
     1   *(1.-exgrid3(i,ymax+1-j))                                         alterwater.191   
         end do                                                            alterwater.192   
         end do                                                            alterwater.193   
      end do                                                               alterwater.194   
                                                                           alterwater.195   
C add up excess snowfall over SHSMAX south of 55S                          alterwater.196   
                                                                           alterwater.197   
      do i=1,mg                                                            alterwater.198   
      do j=ymax/2+1,ymax                                                   alterwater.199   
          totaliberg=totaliberg+exigrid(i,j)*ddxx(j)                       alterwater.200   
C     1   *(1.-exgrid3(icoast,ymax+1-jcoast))                              alterwater.201   
C MMJ 9 Sep Fix                                                            alterwater.202   
     1   *(1.-exgrid3(i,ymax+1-j))                                         alterwater.203   
      end do                                                               alterwater.204   
      end do                                                               alterwater.205   
                                                                           alterwater.206   
c calculate the total (2D) area of dumps in S Ocean                        alterwater.207   
      yagrid=0                                                             alterwater.208   
      do i=1,mg                                                            alterwater.209   
      do j=53,ymax                                                         alterwater.210   
          yagrid=yagrid+ddxx(j)*exgrid3(i,ymax+1-j)                        alterwater.211   
!         yagrid=yagrid+ddxx(j)                                            alterwater.212   
      end do                                                               alterwater.213   
      end do                                                               alterwater.214   
                                                                           alterwater.215   
c      divide that total by the (2D) area of coastal dumps                 alterwater.216   
      totaliberg=totaliberg/yagrid                                         alterwater.217   
                                                                           alterwater.218   
c      and add it to the dumps for that area                               alterwater.219   
      do i=1,mg                                                            alterwater.220   
      do j=53,ymax                                                         alterwater.221   
      if(exgrid3(i,ymax+1-j).gt.0.)then                                    alterwater.222   
      newagrid2(i,j)=newagrid2(i,j)+totaliberg                             alterwater.223   
      endif                                                                alterwater.224   
      end do                                                               alterwater.225   
      end do                                                               alterwater.226   
                                                                           alterwater.227   
c---Also distribute NH iceberg calving over whole arctic                   alterwater.228   
C  Antarctic runoff done earlier                                           alterwater.229   
                                                                           alterwater.230   
      totaliberg=0.                                                        alterwater.231   
                                                                           alterwater.232   
c Snowfall to iceberg flux added up in Arctic                              alterwater.233   
C exingrid should only contain values north of 66N                         alterwater.234   
                                                                           alterwater.235   
      do i=1,mg                                                            alterwater.236   
      do j=1,ymax/2                                                        alterwater.237   
          totaliberg=totaliberg+exingrid(i,j)*ddxx(j)                      alterwater.238   
C     1   *(1.-exgrid3(icoast,ymax+1-jcoast))                              alterwater.239   
C MMJ 9 Sep Fix                                                            alterwater.240   
     1   *(1.-exgrid3(i,ymax+1-j))                                         alterwater.241   
      end do                                                               alterwater.242   
      end do                                                               alterwater.243   
                                                                           alterwater.244   
c calculate the total (2D) area of dumps in Arctic circle                  alterwater.245   
      yagrid=0                                                             alterwater.246   
      do i=1,mg                                                            alterwater.247   
      do j=1,8                                                             alterwater.248   
         yagrid=yagrid+ddxx(j)*exgrid3(i,ymax+1-j)                         alterwater.249   
!         yagrid=yagrid+ddxx(j)                                            alterwater.250   
      end do                                                               alterwater.251   
      end do                                                               alterwater.252   
                                                                           alterwater.253   
c      divide that total by the (2D) area of coastal dumps                 alterwater.254   
      totaliberg=totaliberg/yagrid                                         alterwater.255   
                                                                           alterwater.256   
c      and add it to the dumps for that area                               alterwater.257   
      do i=1,mg                                                            alterwater.258   
      do j=1,8                                                             alterwater.259   
      if(exgrid3(i,ymax+1-j).gt.0.)then                                    alterwater.260   
      newagrid2(i,j)=newagrid2(i,j)+totaliberg                             alterwater.261   
      endif                                                                alterwater.262   
      end do                                                               alterwater.263   
      end do                                                               alterwater.264   
                                                                           alterwater.265   
c      now, give the field back                                            alterwater.266   
                                                                           alterwater.267   
      do j=ymax,1,-1                                                       alterwater.268   
      do i=1,mg                                                            alterwater.269   
         if(exgrid3(i,ymax+1-j).eq.0.)then                                 alterwater.270   
         exgrid4(i,j)=0.                                                   alterwater.271   
         else                                                              alterwater.272   
C Normalise flux by ocean fraction                                         alterwater.273   
         exgrid4(i,j)=newagrid2(i,j)/exgrid3(i,ymax+1-j)                   alterwater.274   
         endif                                                             alterwater.275   
                                                                           alterwater.276   
         if(j.gt.32)waflx(i,2,65-j)=exgrid4(i,j)                           alterwater.277   
         if(j.le.32)waflx(i,1,j)=exgrid4(i,j)                              alterwater.278   
         ofr=exgrid4(i,ymax+1-j)                                           alterwater.279   
      end do                                                               alterwater.280   
      end do                                                               alterwater.281   
                                                                           alterwater.282   
      sum1=0.                                                              alterwater.283   
      sum4b=0.                                                             alterwater.284   
      do i=1,mg                                                            alterwater.285   
      do j=1,ymax                                                          alterwater.286   
      sum1=sum1+exgrid(i,j)*ddxx(j)                                        alterwater.287   
      sum4b=sum4b+exgrid4(i,j)*ddxx(j)*exgrid3(i,ymax+1-j)                 alterwater.288   
      end do                                                               alterwater.289   
      end do                                                               alterwater.290   
      write(6,*) " SUM1 ",sum1                                             alterwater.291   
      write(6,*) " SUM4b ",sum4b                                           alterwater.292   
                                                                           alterwater.293   
      return                                                               alterwater.294   
      end                                                                  alterwater.295   
                                                                           alterwater.296   
*DECK ZMORC                                                                ZMORC.1     
C PMF 13-8-97 Modified to provide interface to IGCM and include his        ZMORC.2     
C dignostic clouds - similar ro morcigcm_clouds.f                          ZMORC.3     
C      PROGRAM NEWRAD                                                      ZMORC.4     
C                                                                          ZMORC.5     
       SUBROUTINE MORCIGCM(PR,T,H2O,O3,alat,HTLW,HTSW,DOY,cf,ic,           ZMORC.6     
     $     rfluxes,SWALB,alon)                                             ZMORC.7     
C                                                                          ZMORC.8     
C modified by Piers Forster for plug and play IGCM fun                     ZMORC.9     
C 29.10.96 and again 1-7-97, For clouds                                    ZMORC.10    
                                                                           ZMORC.11    
C P  Pressure on Full levels(Pa) level 1 is ground                         ZMORC.12    
C T Temperature on Full levels(K) level 1 is ground                        ZMORC.13    
C H2O water vapour mmr on full levels level 1 is ground                    ZMORC.14    
C O3 ozone mmr on full levels level 1 is ground                            ZMORC.15    
C DOY Julian Day wanted (real)                                             ZMORC.16    
C NLEV number of levles                                                    ZMORC.17    
C ALAT Latitude in degrees                                                 ZMORC.18    
c alon longitude in degrees                                                ZMORC.19    
C HTLW Output: lomgwave Heating Rate full levels etc (K/day)               ZMORC.20    
C HTSW Output: shortwave heating rate (K/DAY)                              ZMORC.21    
C RFLUXES  Array to hold fluxes at top and bottom of atmosphere            ZMORC.22    
C     1st index - flux 1=SW, 2=LW                                          ZMORC.23    
C     2nd index - Direction 1=DN, 2=UP                                     ZMORC.24    
C     3rd index - Where 1=TOP, 2=SURFACE                                   ZMORC.25    
C SWALB SW albedo                                                          ZMORC.26    
C                 -----------                                              ZMORC.27    
C  Driving program for the extended atmospheric radiation scheme           ZMORC.28    
C   of Morcrette.                                                          ZMORC.29    
*CALL ZPARB                                                                ZMORC.30    
c       INCLUDE 'zparb.upd'                                                ZMORC.31    
C                                                                          ZMORC.32    
C Piers'  stuff (defines arrays)                                           ZMORC.33    
       REAL PR(NRLEV),T(NRLEV),H2O(NRLEV),O3(NRLEV),alat                   ZMORC.34    
       real htlw(nrlev),htsw(nrlev),swalb,DOY,alon                         ZMORC.35    
       REAL CF(4,2)     !cloud fractions,lwps                              ZMORC.36    
       INTEGER IC(4,2)   ! cloud positions                                 ZMORC.37    
       REAL RFLUXES(2,2,2)                                                 ZMORC.38    
C                                                                          ZMORC.39    
C                                                                          ZMORC.40    
C          1.     DEFINITIONS                                              ZMORC.41    
C                 -----------                                              ZMORC.42    
C                                                                          ZMORC.43    
C definitions for temperature profile                                      ZMORC.44    
                                                                           ZMORC.45    
      REAL ZTEMP(NLEVP1), ZPRES(NLEVP1), ZHEIG(NLEVP1)                     ZMORC.46    
                                                                           ZMORC.47    
C definitions for read in                                                  ZMORC.48    
                                                                           ZMORC.49    
c      REAL DUMMY, T(NLEV), H2O(NLEV), O3(NLEV)                            ZMORC.50    
c     *                ,ZTM1(NLON,NLEV)                                    ZMORC.51    
       REAL DUMMY,ZTM1(NLON,NLEV),zzztm1(NLEV),zzzqm1(nlev),               ZMORC.52    
     *  zzzo3(nlev)                                                        ZMORC.53    
                                                                           ZMORC.54    
C channel number                                                           ZMORC.55    
                                                                           ZMORC.56    
      INTEGER C3EQUIL, IBRUEHL                                             ZMORC.57    
                                                                           ZMORC.58    
      CHARACTER*40 EQUILIB,IN_FILE                                         ZMORC.59    
                                                                           ZMORC.60    
      PARAMETER (C3EQUIL=14)                                               ZMORC.61    
                                                                           ZMORC.62    
C     COMMON BLOCK FOR GAS ABUNDANCES                                      UPDMORCMB.1     
*CALL MORCGAS                                                              UPDMORCMB.2     
C                                                                          ZMORC.63    
C local arrays                                                             ZMORC.64    
C                                                                          ZMORC.65    
C      DIMENSION ZCDIS(5)                                                  ZMORC.66    
      DIMENSION ZALP(66),ZFOZQ(11),ZFOZH(11),ZFAES(21),ZFAEL(21),          ZMORC.67    
     #          ZFAEU(21),ZFAED(21), ZCDIS(5), ZCDEC(5), ZCEQT(5)          ZMORC.68    
C                                                                          ZMORC.69    
      INTEGER  ILAT, ILHT, ILST, IDIAL, IDIAS                              ZMORC.70    
c      INTEGER MMNTH(12), JDAY                                             ZMORC.71    
c      DATA MMNTH/15,45,74,105,135,166,196,227,258,288,319,349/            ZMORC.72    
c      REAL YTIME                                                          ZMORC.73    
C                                                                          ZMORC.74    
      ITASK=3                                                              ZMORC.75    
C                                                                          ZMORC.76    
C                                                                          ZMORC.77    
C define all constants                                                     ZMORC.78    
C                                                                          ZMORC.79    
      CALL INICON                                                          ZMORC.80    
C                                                                          ZMORC.81    
C define the latitude points                                               ZMORC.82    
C                                                                          ZMORC.83    
C Set up latitude grid                                                     ZMORC.84    
                                                                           ZMORC.85    
      XLAT(1)=3.141579*alat/180.0                                          ZMORC.86    
C calculate day                                                            ZMORC.87    
C                                                                          ZMORC.88    
C  loop over latitudes                                                     ZMORC.89    
C                                                                          ZMORC.90    
      DO 1111 ILAT=1,NLAT                                                  ZMORC.91    
C                                                                          ZMORC.92    
C      WRITE(6,*) '***CALCULATE LATITUDE NUMBER ',ILAT,'***'               ZMORC.93    
C                                                                          ZMORC.94    
C Set up height grid (in terms of pressure)                                ZMORC.95    
C                                                                          ZMORC.96    
      IF (NLP2 .NE. NLON) WRITE(6,*) ' problems with vertical velocity'    ZMORC.97    
C      OPEN (11,FILE=IN_FILE,STATUS='OLD',FORM='FORMATTED')                ZMORC.98    
C                                                                          ZMORC.99    
C remark: Temp, vmrH2O, vmrO3 and vmrCO2 where changed to use              ZMORC.100   
C            bruehl.dat (IBRUEHL=1)                                        ZMORC.101   
C    important: see ZCARDI for changed vmrCO2, independent of IBRUEHL      ZMORC.102   
C                                                                          ZMORC.103   
      IBRUEHL=1                                                            ZMORC.104   
C                                                                          ZMORC.105   
C      READ(11,*) TSUPAR                                                   ZMORC.106   
      DO 36 ILST=1,NLON                                                    ZMORC.107   
       DO 35 ILHT=1,NRLEV                                                  ZMORC.108   
          JKL = NRLEV + 1 - ILHT                                           ZMORC.109   
          APM1(ILST,ILHT)=PR(JKL)                                          ZMORC.110   
          ZZZTM1(ILHT)=T(JKL)                                              ZMORC.111   
          ZZZQM1(ILHT)=H2O(JKL)                                            ZMORC.112   
          ZZZO3(ILHT)=O3(JKL)                                              ZMORC.113   
c          IF (JKL .NE. NRLEV) THEN                                        ZMORC.114   
c             APHM1(ILST,JKL+1) = (APM1(ILST,JKL+1)+APM1(ILST,JKL))/2.     ZMORC.115   
c          END IF                                                          ZMORC.116   
 35    CONTINUE                                                            ZMORC.117   
       DO 29 JKL=1,NRLEV                                                   ZMORC.118   
          IF (JKL .NE. NRLEV) THEN                                         ZMORC.119   
             APHM1(ILST,JKL+1) = (APM1(ILST,JKL+1)+APM1(ILST,JKL))/2.      ZMORC.120   
          END IF                                                           ZMORC.121   
 29    CONTINUE                                                            ZMORC.122   
                                                                           ZMORC.123   
C                                                                          ZMORC.124   
        TSUPAR = ZZZTM1(NRLEV)                                             ZMORC.125   
        APHM1(ILST,1) = 0.                                                 ZMORC.126   
C        APHM1(ILST,NRLEVP1)=101325.                                       ZMORC.127   
        APHM1(ILST,NRLEVP1)=APM1(ILST,NRLEV)                               ZMORC.128   
c        print *, 'surface press ',aphm1(ilst,nrlevp1)                     ZMORC.129   
C                                                                          ZMORC.130   
C                                                                          ZMORC.131   
C define moisture and vertical velocity  ==>  clouds                       ZMORC.132   
C                                                                          ZMORC.133   
       DO 37 ILHT=1,NRLEV                                                  ZMORC.134   
c        print *, 'input ',ilht,apm1(ilst,ilht),zzztm1(ilht),              ZMORC.135   
c     $   zzzqm1(ilht),zzzo3(ilht),aphm1(1,ilht)                           ZMORC.136   
        VERVEL(ILST,ILHT)=0.                                               ZMORC.137   
        QM1(ILST,ILHT)=ZZZQM1(ILHT)                                        ZMORC.138   
 37    CONTINUE                                                            ZMORC.139   
                                                                           ZMORC.140   
 36   CONTINUE                                                             ZMORC.141   
C                                                                          ZMORC.142   
C      REWIND(11)                                                          ZMORC.143   
C      REWIND(12)                                                          ZMORC.144   
C                                                                          ZMORC.145   
C define maximal relative humidity                                         ZMORC.146   
C                                                                          ZMORC.147   
      DO 38 JK=1,NLEV                                                      ZMORC.148   
         CCRH(JK) = 1.                                                     ZMORC.149   
 38   CONTINUE                                                             ZMORC.150   
C                                                                          ZMORC.151   
      DO 33 J=1,NLEV                                                       ZMORC.152   
            TM1(1,J) = ZZZTM1(J)                                           ZMORC.153   
 33   CONTINUE                                                             ZMORC.154   
C                                                                          ZMORC.155   
      DO 39 JK=1,NLP2                                                      ZMORC.156   
        ALBM(JK) = SWALB                                                   ZMORC.157   
        SNM1M(JK) = SNPAR                                                  ZMORC.158   
        TSM1M(JK) = TSUPAR                                                 ZMORC.159   
        LOLAND(JK) = LOLPAR                                                ZMORC.160   
        COSLON(JK) = 1.                                                    ZMORC.161   
        SINLON(JK) = 0.                                                    ZMORC.162   
 39   CONTINUE                                                             ZMORC.163   
      DATA ZALBICE/0.55/                                                   ZMORC.164   
      DATA ZALBSEA/0.07/                                                   ZMORC.165   
      DATA ZALBSNO/0.80/                                                   ZMORC.166   
      DATA ZSNOWAL/0.01/                                                   ZMORC.167   
C                                                                          UPDMORCMB.79    
C     ZCARDI is the concentration of CO2 in mass mix. ratio                UPDMORCMB.80    
C                                                                          UPDMORCMB.81    
C                                                                          ZMORC.174   
      DATA ZEMISS/0.996/                                                   ZMORC.175   
      DATA ZSUPSAT/0.01/                                                   ZMORC.176   
      DATA ZCDIS/+1.000110,+0.034221,+0.001280,+0.000719,+0.000077/        ZMORC.177   
      DATA CRAE/+0.1277E-02/                                               ZMORC.178   
      DATA ZCDEC/+0.006918,-0.399912,+0.070257,-0.006758,+0.000907/        ZMORC.179   
      DATA ZCEQT/+0.000075,+0.001868,-0.032077,-0.014615,-0.040849/        ZMORC.180   
C                                                                          ZMORC.181   
C*    PHYSICAL CONSTANTS.                                                  ZMORC.182   
C     -------- ----------                                                  ZMORC.183   
C                                                                          ZMORC.184   
C          *ZQWSSAT* AND *ZQSNCR* ARE THE INVERSES OF CRITICAL VALUES      ZMORC.185   
C     FOR SOIL WATER AND SNOW DEPTH (SEE *VDIFF*). IN THE CODE ALSO        ZMORC.186   
C     APPEARS *ZCRH* FOR A MAXIMUM ALLOWED ATMOSPHERIC RELATIVE            ZMORC.187   
C     HUMIDITY.                                                            ZMORC.188   
C                                                                          ZMORC.189   
C      CQWSSAT = 1. / (0.75*0.02)                                          ZMORC.190   
C      ZQWSSAT=CQWSSAT                                                     ZMORC.191   
C      ZQSNCR=CQSNCR                                                       ZMORC.192   
C                                                                          ZMORC.193   
C*    SECURITY PARAMETER.                                                  ZMORC.194   
C     -------- ----------                                                  ZMORC.195   
C                                                                          ZMORC.196   
C     *ZEPSEC* AVOIDS 0/0 IN THE DIAGNOSTIC OF TOTAL CLOUD COVER.          ZMORC.197   
C     *ZEPCLC* IS A SECURITY TO AVOID ZERO OR ONE CLOUD COVERS AND         ZMORC.198   
C     *ZEPH2O* IS A SECURITY TO AVOID WATER VAPOUR CONTENT IN A LAYER      ZMORC.199   
C    *         TO BE MORE THEN THE RESPECTIVE VALUE AT SATURATION.         ZMORC.200   
C     *ZEPALB* IS A SECURITY TO AVOID ZERO ALBEDOS.                        ZMORC.201   
C                                                                          ZMORC.202   
      ZEPSEC=1.E-12                                                        ZMORC.203   
      ZEPCLC=1.E-12                                                        ZMORC.204   
      ZEPH2O=1.E-12                                                        ZMORC.205   
      ZEPALB=1.E-12                                                        ZMORC.206   
C                                                                          ZMORC.207   
C Setup SW code                                                            ZMORC.208   
C     Solar constant SOLC is now uniquely defined in INICON.               UPDMORCMB.121   
C     M. Bourqui 15 nov 2001.                                              UPDMORCMB.122   
                                                                           ZMORC.210   
      LDIUR=.FALSE.   !Diurnally averaged if false                         ZMORC.211   
C      LDIUR=.TRUE.   !Diurnally averaged if false                         ZMORC.212   
C                                                                          ZMORC.213   
       YCLOCK=3.14159      !time of day in radians                         ZMORC.214   
C       YCLOCK= (DOY-FLOAT(INT(DOY))*2.*3.14159                            ZMORC.215   
c       print *,doy,int(doy)                                               ZMORC.216   
C                                                                          ZMORC.217   
      CALL SOLANG(LDIUR,DOY,YCLOCK,ALAT,ALON,AMU0,RDAYL(1),CDISSEM)        ZMORC.218   
C                                                                          ZMORC.219   
                                                                           ZMORC.220   
      ZSCT=SOLC*CDISSEM   ! Solar const * earth-sun distance               ZMORC.221   
      PSOL=ZSCT*RDAYL(1)     ! * fractional day lengthC                    ZMORC.222   
C     OLD AEROSOL MODEL USED (NO DISTRIBUTION).                            ZMORC.223   
C                                                                          ZMORC.224   
      CAEROS=0.1462E-16                                                    ZMORC.225   
C                                                                          ZMORC.226   
C  ----------------------------------------------------------              ZMORC.227   
C                                                                          ZMORC.228   
C*         3.     FULL GRID COMPUTATIONS.                                  ZMORC.229   
C                 ---- ---- -------------                                  ZMORC.230   
C                                                                          ZMORC.231   
  300 CONTINUE                                                             ZMORC.232   
C                                                                          ZMORC.233   
C*         3.2     SATURATION SPECIFIC HUMIDITY AT ALL LAYERS.             ZMORC.234   
C                                                                          ZMORC.235   
  320 CONTINUE                                                             ZMORC.236   
      DO 322 JK=1,NLEV                                                     ZMORC.237   
      ZCRH=CCRH(JK)                                                        ZMORC.238   
      DO 321 JL=1,NLON                                                     ZMORC.239   
      LO=(TM1(JL,JK)-TMELT).GT.0.                                          ZMORC.240   
      ZCVM3=CVMGT(C3LES,C3IES,LO)                                          ZMORC.241   
      ZCVM4=CVMGT(C4LES,C4IES,LO)                                          ZMORC.242   
      ZQS(JL,JK)=ZCRH*C2ES*EXP(ZCVM3*(TM1(JL,JK)-TMELT)/(TM1(JL,JK)        ZMORC.243   
     *           -ZCVM4))/APM1(JL,JK)                                      ZMORC.244   
      ZQS(JL,JK)=ZQS(JL,JK)/(1.-VTMPC1*ZQS(JL,JK))                         ZMORC.245   
  321 CONTINUE                                                             ZMORC.246   
  322 CONTINUE                                                             ZMORC.247   
c      print *,'2.2'                                                       ZMORC.248   
C                                                                          ZMORC.249   
C*          3.3    EXTRAPOLATION AT THE TOP.                               ZMORC.250   
C                                                                          ZMORC.251   
  330 CONTINUE                                                             ZMORC.252   
C      DO 331 JL=1,NLON                                                    ZMORC.253   
C      ZTI(JL,1)=TM1(JL,1)-APM1(JL,1)*(TM1(JL,1)-TM1(JL,2))                ZMORC.254   
C     *                              /(APM1(JL,1)-APM1(JL,2))              ZMORC.255   
  331 CONTINUE                                                             ZMORC.256   
c      print *,'3.3',nlev                                                  ZMORC.257   
                                                                           ZMORC.258   
C                                                                          ZMORC.259   
C*         3.4     VERTICAL INTERPOLATION.                                 ZMORC.260   
C                                                                          ZMORC.261   
  340 CONTINUE                                                             ZMORC.262   
      DO 342 JK=2,NLEV                                                     ZMORC.263   
      DO 341 JL=1,NLON                                                     ZMORC.264   
c       print *,' vert ',jk,jl,aphm1(jl,jk)                                ZMORC.265   
      ZTI(JL,JK)=(TM1(JL,JK-1)*APM1(JL,JK-1)*(APM1(JL,JK)-APHM1(JL,JK))    ZMORC.266   
     *           +TM1(JL,JK)*APM1(JL,JK)*(APHM1(JL,JK)-APM1(JL,JK-1)))     ZMORC.267   
     *           *(1./(APHM1(JL,JK)*(APM1(JL,JK)-APM1(JL,JK-1))))          ZMORC.268   
  341 CONTINUE                                                             ZMORC.269   
  342 CONTINUE                                                             ZMORC.270   
C                                                                          ZMORC.271   
c      print *,'3.4'                                                       ZMORC.272   
                                                                           ZMORC.273   
C*         3.5     SURFACE VALUES AND TOP BOUNDARY TEMPERATURE.            ZMORC.274   
C                                                                          ZMORC.275   
  350 CONTINUE                                                             ZMORC.276   
      DO 351 JL=1,NLON                                                     ZMORC.277   
      ZTI(JL,NLEVP1)=TSM1M(JL)                                             ZMORC.278   
      ZTI(JL,1)=TM1(JL,1)-APM1(JL,1)*(TM1(JL,1)-ZTI(JL,2))                 ZMORC.279   
     *                              /(APM1(JL,1)-APHM1(JL,2))              ZMORC.280   
  351 CONTINUE                                                             ZMORC.281   
C                                                                          ZMORC.282   
c      print *,'3.5'                                                       ZMORC.283   
                                                                           ZMORC.284   
C*         3.6     MOISTURE AND CLOUDS.                                    ZMORC.285   
C                                                                          ZMORC.286   
  360 CONTINUE                                                             ZMORC.287   
C   Prescribe cloud amout and height                                       ZMORC.288   
      DO 361 JL=1,NLON                                                     ZMORC.289   
       ZCC(JL)=MIN(CF(1,1),1.0)                                            ZMORC.290   
       ZCH(JL)=MIN(CF(2,1),1.0)                                            ZMORC.291   
       ZCM(JL)=MIN(CF(3,1),1.0)                                            ZMORC.292   
       ZCL(JL)=MIN(CF(4,1),1.0)                                            ZMORC.293   
C Correction of the levels M.B. and PMF 27.06.01                           ZMORC.294   
       NTOP=NLEV+1-IC(1,2)                                                 ZMORC.295   
       NBASE=NLEV+1-IC(1,1)                                                ZMORC.296   
       ITCC=NLEV+1-IC(1,1)                                                 ZMORC.297   
       ITH=NLEV+1-IC(2,1)                                                  ZMORC.298   
       ITM=NLEV+1-IC(3,1)                                                  ZMORC.299   
       ITL=NLEV+1-IC(4,1)                                                  ZMORC.300   
C***************************************                                   ZMORC.301   
       DO JK=NRLEV,1,-1                                                    ZMORC.302   
        ZCLC(JL,JK)=0.0                                                    ZMORC.303   
        ZQLWP(JL,JK)=0.0                                                   ZMORC.304   
       ENDDO                                                               ZMORC.305   
c Piers diagnostic cloud 1-7-97                                            ZMORC.306   
      IF (NBASE.GT.0.and.ZCC(JL).gt.1.0E-5)THEN                            RAD_CL_SEBAL.71    
C cloud water ~< 15-20 mg/m3 in tropics from Su et al JGR 2011             RAD_CL_SEBAL.72    
        DO ITCC=NTOP,NBASE                                                 RAD_CL_SEBAL.73    
          ZQLWP(JL,ITCC)=ZCC(JL)*5.0E-5                                    RAD_CL_SEBAL.74    
          ZCLC(JL,ITCC)=ZCC(JL)                                            RAD_CL_SEBAL.75    
        ENDDO                                                              RAD_CL_SEBAL.76    
C deep conv cloudbase is 4x rest of cloud from Slingo et al 1987           RAD_CL_SEBAL.77    
        if(apm1(jl,ntop)/apm1(jl,nrlev).lt.0.7)THEN                        RAD_CL_SEBAL.78    
          ZQLWP(JL,NBASE)=ZQLWP(JL,NBASE)*4.0                              RAD_CL_SEBAL.79    
          ZCLC(JL,NBASE)=ZCLC(JL,NBASE)*4.0                                RAD_CL_SEBAL.80    
        ENDIF                                                              RAD_CL_SEBAL.81    
      ENDIF                                                                RAD_CL_SEBAL.82    
C LARGE SCALE CLOUDS parameterised by supersaturation.                     RAD_CL_SEBAL.83    
C Note clouds occur at one level in IGCM so tuning to match                RAD_CL_SEBAL.84    
C observations takes account of this esp for mid-level cloud               RAD_CL_SEBAL.85    
                                                                           RAD_CL_SEBAL.86    
      ZQLWP(JL,ITL)=ZQLWP(JL,ITL)+0.05*ZQS(JL,ITL)*ZCL(JL)                 RAD_CL_SEBAL.87    
      ZQLWP(JL,ITM)=ZQLWP(JL,ITM)+0.05*ZQS(JL,ITM)*ZCM(JL)                 RAD_CL_SEBAL.88    
      ZQLWP(JL,ITH)=ZQLWP(JL,ITH)+0.05*ZQS(JL,ITH)*ZCH(JL)                 RAD_CL_SEBAL.89    
      ZCLC(JL,ITL)=ZCLC(JL,ITL)+ZCL(JL)                                    RAD_CL_SEBAL.90    
      ZCLC(JL,ITM)=ZCLC(JL,ITM)+ZCM(JL)                                    RAD_CL_SEBAL.91    
      ZCLC(JL,ITH)=ZCLC(JL,ITH)+ZCH(JL)                                    RAD_CL_SEBAL.92    
                                                                           RAD_CL_SEBAL.93    
 361  CONTINUE                                                             ZMORC.326   
C                                                                          ZMORC.327   
      DO 363 JK=IRLEV,1,-1                                                 ZMORC.328   
      DO 362 JL=1,NLON                                                     ZMORC.329   
      ZSW(JL,JK)=ZQS(JL,JK)                                                ZMORC.330   
c      IF (ZCLC(JL,JK).GT.0.0) THEN                                        ZMORC.331   
c       print '(a10,i5,2E13.3)','cloud ',jk,zclc(jl,jk),zqlwp(jl,jk)       ZMORC.332   
c      ENDIF                                                               ZMORC.333   
      ZCLC(JL,JK)=MIN(MAX(ZCLC(JL,JK),ZEPCLC),1.-ZEPCLC)                   ZMORC.334   
      ZWV(JL,JK)=QM1(JL,JK)                                                ZMORC.335   
c zqlwp now mmr not g/m-2                                                  ZMORC.336   
      LO=ZCLC(JL,JK).GT.ZEPCLC                                             ZMORC.337   
C      ZQLWP(JL,JK)=CVMGT(ZQLWP(JL,JK)/ZCLC(JL,JK),0.0,LO)                 ZMORC.338   
C piers 10-6-97  as KPS changed ZQLWP i do too, LWP to g/m2                ZMORC.339   
C No extra tuning                                                          RAD_CL_SEBAL.94    
C      ZQLWP(JL,JK)=CVMGT(ZQLWP(JL,JK),0.0,LO)/4.0                         RAD_CL_SEBAL.95    
       if (ZCLC(JL,JK).le.ZEPCLC) then                                     RAD_CL_SEBAL.96    
          ZQLWP(JL,JK)=0.0                                                 RAD_CL_SEBAL.97    
       endif                                                               RAD_CL_SEBAL.98    
 362  CONTINUE                                                             ZMORC.343   
 363  CONTINUE                                                             ZMORC.344   
c         print *,' did clouds'                                            ZMORC.345   
C                                                                          ZMORC.346   
C*         3.7     INPUT DIAGNOSTICS FOR TEMPERATURE AND CLOUDS.           ZMORC.347   
C                                                                          ZMORC.348   
  370 CONTINUE                                                             ZMORC.349   
C                                                                          ZMORC.350   
C*         3.8     ALBEDO.                                                 ZMORC.351   
C                                                                          ZMORC.352   
  380 CONTINUE                                                             ZMORC.353   
C                                                                          ZMORC.354   
      DO 381 JL=1,NLON                                                     ZMORC.355   
      LO1=TSM1M(JL)-CTFREEZ.GT.0.0                                         ZMORC.356   
      ZALTE(JL)=1.0-ZEMISS                                                 ZMORC.357   
      ZALTE(JL)=MAX(ZALTE(JL),ZEPALB)                                      ZMORC.358   
      ZALSO(JL)=ALBM(JL)                                                   ZMORC.359   
C     Bug fix: wrong lines of code removed. M. Bourqui 15 nov 2001         UPDMORCMB.117   
  381 CONTINUE                                                             ZMORC.367   
C                                                                          ZMORC.368   
C     -------------------------------------------------                    ZMORC.369   
C                                                                          ZMORC.370   
c        print *,' 3.8'                                                    ZMORC.371   
C*         5.      SPLITTED LOOP OVER LATITUDE.                            ZMORC.372   
C*                 -------- ---- ---- ---------                            ZMORC.373   
C                                                                          ZMORC.374   
  500 CONTINUE                                                             ZMORC.375   
C                                                                          ZMORC.376   
      ISHIFT=0                                                             ZMORC.377   
      DO 551 JLOOP=1,NRPARTI                                               ZMORC.378   
C remark: change ishift if you really want splitted loop                   ZMORC.379   
C                                                                          ZMORC.380   
C                                                                          ZMORC.381   
C*         5.1     INPUT: ALBEDO,ZENITH ANGLE, CO2, O3 AND AEROSOLS.       ZMORC.382   
C                                                                          ZMORC.383   
  510 CONTINUE                                                             ZMORC.384   
C                                                                          ZMORC.385   
      DO 511 JL=1,IRLONI                                                   ZMORC.386   
      APRE(JL)=APHM1(JL+ISHIFT,NLEVP1)                                     ZMORC.387   
c      print *, ' apre ',apre(jl),nlevp1                                   ZMORC.388   
      SMU0(JL)=AMU0(JL+ISHIFT)                                             ZMORC.389   
      ALSO(JL)=ZALSO(JL+ISHIFT)                                            ZMORC.390   
      ALTE(JL)=ZALTE(JL+ISHIFT)                                            ZMORC.391   
  511 CONTINUE                                                             ZMORC.392   
      DO 513 JK=1,IRLVP1                                                   ZMORC.393   
      DO 512 JL=1,IRLONI                                                   ZMORC.394   
      TI(JL,JK)=ZTI(JL+ISHIFT,JK)                                          ZMORC.395   
  512 CONTINUE                                                             ZMORC.396   
  513 CONTINUE                                                             ZMORC.397   
      DO 514 JL=1,IRLONI                                                   ZMORC.398   
      ZDPO(JL)=APHM1(JL+ISHIFT,1)                                          ZMORC.399   
      ZQCFO(JL)=ZCARDI*ZDPO(JL)                                            ZMORC.400   
      ZAEQSO(JL)=CAEROS*APHM1(JL+ISHIFT,1)**3                              ZMORC.401   
c      ZQOFO(JL)=ZOZQ(JL+ISHIFT)*SQRT(ZDPO(JL)**3)/(SQRT(ZDPO(JL)**3)      ZMORC.402   
c     *          +ZOZH(JL+ISHIFT))                                         ZMORC.403   
  514 CONTINUE                                                             ZMORC.404   
      DO 517 JK=1,IRLEV                                                    ZMORC.405   
      DO 515 JL=1,IRLONI                                                   ZMORC.406   
      ZDPN(JL)=APHM1(JL+ISHIFT,JK+1)                                       ZMORC.407   
      ZQCFN(JL)=ZCARDI*ZDPN(JL)                                            ZMORC.408   
      ZAEQSN(JL)=CAEROS*APHM1(JL+ISHIFT,JK+1)**3                           ZMORC.409   
c      ZQOFN(JL)=ZOZQ(JL+ISHIFT)*SQRT(ZDPN(JL)**3)/(SQRT(ZDPN(JL)**3)      ZMORC.410   
c     *          +ZOZH(JL+ISHIFT))                                         ZMORC.411   
      DP(JL,JK)=ZDPN(JL)-ZDPO(JL)                                          ZMORC.412   
      QCF(JL,JK)=ZQCFN(JL)-ZQCFO(JL)                                       ZMORC.413   
      AEQ1(JL,JK)=ZAEQSN(JL)-ZAEQSO(JL)                                    ZMORC.414   
      AADS(JL,JK)=0.001089*AEQ1(JL,JK)/DP(JL,JK)                           ZMORC.415   
c      QOF(JL,JK)=ZQOFN(JL)-ZQOFO(JL)                                      ZMORC.416   
  515 CONTINUE                                                             ZMORC.417   
      DO 516 JL=1,IRLONI                                                   ZMORC.418   
      ZDPO(JL)=ZDPN(JL)                                                    ZMORC.419   
      ZQCFO(JL)=ZQCFN(JL)                                                  ZMORC.420   
c      ZQOFO(JL)=ZQOFN(JL)                                                 ZMORC.421   
      ZAEQSO(JL)=ZAEQSN(JL)                                                ZMORC.422   
  516 CONTINUE                                                             ZMORC.423   
  517 CONTINUE                                                             ZMORC.424   
c       print *,'5.1'                                                      ZMORC.425   
C                                                                          ZMORC.426   
C*         5.2     INPUT: MOISTURE AND CLOUDS.                             ZMORC.427   
C                                                                          ZMORC.428   
  520 CONTINUE                                                             ZMORC.429   
C                                                                          ZMORC.430   
      DO 522 JK=1,IRLEV                                                    ZMORC.431   
      DO 521 JL=1,IRLONI                                                   ZMORC.432   
      SSW(JL,JK)=ZSW(JL+ISHIFT,JK)                                         ZMORC.433   
      WV(JL,JK)=ZWV(JL+ISHIFT,JK)                                          ZMORC.434   
      CLC(JL,JK)=ZCLC(JL+ISHIFT,JK)                                        ZMORC.435   
C      CLWA(JL,JK)=ZQLWP(JL+ISHIFT,JK)*ZCLC(JL+ISHIFT,JK)                  ZMORC.436   
C Piers LWP g/m2                                                           ZMORC.437   
      CLWA(JL,JK)=ZQLWP(JL+ISHIFT,JK)                                      ZMORC.438   
  521 CONTINUE                                                             ZMORC.439   
  522 CONTINUE                                                             ZMORC.440   
c        print *,'5.2'                                                     ZMORC.441   
C                                                                          ZMORC.442   
C*         5.3     CALL TO *RADIA*.                                        ZMORC.443   
C                                                                          ZMORC.444   
  530 CONTINUE                                                             ZMORC.445   
C                                                                          ZMORC.446   
      IF (CAEROS.LT.1.E-14) THEN                                           ZMORC.447   
         DO 532 JK = 1 , IRLEV                                             ZMORC.448   
         DO 531 JL = 1 , IRLONI                                            ZMORC.449   
         AEQ1(JL,JK) = CAEROS                                              ZMORC.450   
         AEQ2(JL,JK) = CAEROS                                              ZMORC.451   
         AEQ3(JL,JK) = CAEROS                                              ZMORC.452   
         AEQ4(JL,JK) = CAEROS                                              ZMORC.453   
         AEQ5(JL,JK) = CAEROS                                              ZMORC.454   
 531     CONTINUE                                                          ZMORC.455   
 532     CONTINUE                                                          ZMORC.456   
      END IF                                                               ZMORC.457   
C                                                                          ZMORC.458   
      KRLEV2 = 2 * NRLEV                                                   ZMORC.459   
      KNGL = 3 * NRLEV                                                     ZMORC.460   
      KNGLP1 = KNGL + 1                                                    ZMORC.461   
C                                                                          ZMORC.462   
C  Changes in case of IBRUEHL=1                                            ZMORC.463   
C                                                                          ZMORC.464   
c      print *, 'got hre'                                                  ZMORC.465   
C  QOF is the mmr*DP                                                       ZMORC.466   
C                                                                          ZMORC.467   
      IF (IBRUEHL .EQ. 1) THEN                                             ZMORC.468   
         DO 533 JK=1,NLEV                                                  ZMORC.469   
c           WV(1,JK) = 0.                                                  ZMORC.470   
            WV(1,JK) = ZZZQM1(JK)                                          ZMORC.471   
C            CLC(1,JK) = 0.                                                ZMORC.472   
C            CLWA(1,JK) = 0.                                               ZMORC.473   
C            QOF(1,JK) = 0.                                                ZMORC.474   
C            QOF(1,JK) = O3(JK) * 48./28.96 * DP(1,JK)                     ZMORC.475   
             QOF(1,JK) = ZZZO3(JK)*DP(1,JK)                                ZMORC.476   
 533     CONTINUE                                                          ZMORC.477   
      END IF                                                               ZMORC.478   
C                                                                          ZMORC.479   
      DO 538 JK=1,NLEV                                                     ZMORC.480   
        DO 538 JL=1,NLON                                                   ZMORC.481   
          ZTM1(JL,JK)=ZZZTM1(JK)                                           ZMORC.482   
 538  CONTINUE                                                             ZMORC.483   
C                                                                          ZMORC.484   
c      print *,' before call'                                              ZMORC.485   
c      print *,ztm1,pierslwp                                               ZMORC.486   
      CALL RADLSW (IRLONI, IRLST, IRLEV, IRLVP1, KRLEV2, KNGL, KNGLP1,     ZMORC.487   
     S             STBO, zsct, ZCARDI, ITASK, ZTM1,PIERSLWP)               ZMORC.488   
c      print *,' after call'                                               ZMORC.489   
C                                                                          ZMORC.490   
C                                                                          ZMORC.491   
C*         5.4     STORAGE OF THE OUTPUT.                                  ZMORC.492   
C                                                                          ZMORC.493   
  540 CONTINUE                                                             ZMORC.494   
  550 CONTINUE                                                             ZMORC.495   
  551 CONTINUE                                                             ZMORC.496   
C***                                                                       ZMORC.497   
C*         6.2    STORAGE OF TRANSMISSIVITY AND EMISSIVITY.                ZMORC.498   
C                                                                          ZMORC.499   
  620 CONTINUE                                                             ZMORC.500   
C                                                                          ZMORC.501   
C                                                                          ZMORC.502   
C*         6.3    OUTPUT DIAGNOSTICS FOR HEATING RATES AND FLUXES.         ZMORC.503   
C                                                                          ZMORC.504   
  630 CONTINUE                                                             ZMORC.505   
C                                                                          ZMORC.506   
C write out damping rate at the various height levels                      ZMORC.507   
                                                                           ZMORC.508   
c         WRITE(C3EQUIL,*) '   '                                           ZMORC.509   
c         IF (LDIUR) THEN                                                  ZMORC.510   
c           WRITE(C3EQUIL,188) JDAY, XLAT(ILAT),                           ZMORC.511   
c     #      YCLOCK*13750.987                                              ZMORC.512   
 188       FORMAT(' jday  =', I4, 6X, ' external',                         ZMORC.513   
     #            ' latitude =', F8.2, 10X,                                ZMORC.514   
     #            ' time in seconds (GMT) =', F12.2)                       ZMORC.515   
c         ELSE                                                             ZMORC.516   
c            WRITE(C3EQUIL,1881) JDAY, XLAT(ILAT)                          ZMORC.517   
 1881       FORMAT(' jday  =', I4, 6X, ' external',                        ZMORC.518   
     #            ' latitude =', F8.2, 10X,                                ZMORC.519   
     #            ' diurnally averaged ')                                  ZMORC.520   
c         END IF                                                           ZMORC.521   
                                                                           ZMORC.522   
c         WRITE(C3EQUIL,*) '   '                                           ZMORC.523   
c         WRITE(C3EQUIL,*) '   '                                           ZMORC.524   
c         DO 181 JK=1,NLEVP1                                               ZMORC.525   
c            JKL = NLEVP1 + 1 - JK                                         ZMORC.526   
c            WRITE(C3EQUIL,191) ZFLUX(1,1,JKL), -ZFLUX(1,2,JKL),           ZMORC.527   
c     #               -FLT(1,JK),PPMB(1,JKL)*100., PTL(1,JKL),             ZMORC.528   
c     #               ZFSDWN(1,JKL), ZFSUP(1,JKL), FLS(1,JK)               ZMORC.529   
 191        FORMAT(8E15.4)                                                 ZMORC.530   
 181     CONTINUE                                                          ZMORC.531   
c         WRITE(C3EQUIL,192)                                               ZMORC.532   
 192     FORMAT(6X,                                                        ZMORC.533   
     #     ' flxupLW ',6X,' flxdwLW ',6x,' netflxL ',6X,                   ZMORC.534   
     #     ' half pr ',6X,' half te ',6X,' flxdwSW ',6X,                   ZMORC.535   
     #     ' flxupSW ',6X,' netflxS ')                                     ZMORC.536   
c         WRITE(C3EQUIL,*) '   '                                           ZMORC.537   
c         WRITE(C3EQUIL,*) '   '                                           ZMORC.538   
c         WRITE(C3EQUIL,*) '   '                                           ZMORC.539   
c         DO 180 JL=1,NLON                                                 ZMORC.540   
c           DO 180 JK=1,NLEV                                               ZMORC.541   
c            JKL = NLEV + 1 - JK                                           ZMORC.542   
c            PKASCH = -ZCOOLR(JL,JKL) + ZHEATR(JL,JKL)                     ZMORC.543   
cccm            DUMMY = PQOF(JL,JK)/DP(1,JK)*28.96/48.                     ZMORC.544   
c            DUMMY = PQOF(JL,JK)/DP(1,JK)                                  ZMORC.545   
c            WRITE(C3EQUIL,190) JL, ILAT, JK,                              ZMORC.546   
c     >             ZHEATR(JL,JKL), WV(JL,JK),                             ZMORC.547   
c     >             DUMMY, PCLDLW(JL,JK),                                  ZMORC.548   
c     >             -ZCOOLR(JL,JKL), PKASCH, APM1(JL,JK),                  ZMORC.549   
c     >             TM1(JL,JK)                                             ZMORC.550   
c            WRITE(8,*) -ZCOOLR(JL,JKL),APM1(JL,JK)                        ZMORC.551   
c            WRITE(9,*)  ZHEATR(JL,JKL),APM1(JL,JK)                        ZMORC.552   
c 180     CONTINUE                                                         ZMORC.553   
 190     FORMAT(I3,1x,I4,1x,I4,1x,8E14.4)                                  ZMORC.554   
c         WRITE(C3EQUIL,189)                                               ZMORC.555   
 189     FORMAT('Long  Lati  H ',4X,                                       ZMORC.556   
     #     'solar h ',6X,'moistur ',6X,' O3conc ',6X,                      ZMORC.557   
     #     'cldfrac ',6x,' netlwh ',6X,' nethrt ',6X,                      ZMORC.558   
     #     'pressur ',6X,'tempera ')                                       ZMORC.559   
c         WRITE(C3EQUIL,*) '   '                                           ZMORC.560   
C                                                                          ZMORC.561   
C  write out temperature and ozone column amounts                          ZMORC.562   
C                                                                          ZMORC.563   
C      OPEN (77,FILE='MIDTO3B6.BIN',FORM='UNFORMATTED',STATUS='NEW')       ZMORC.564   
C      DO 997 JL=1,NLON                                                    ZMORC.565   
C       ZCOLUM = 0.                                                        ZMORC.566   
C       DO 998 JK=1,NLEV                                                   ZMORC.567   
CC         ZCOLUM=ZCOLUM+PQOF(JL,JK)*48./29./G*                            ZMORC.568   
CC     #          (APHM1(JL,JK+1)-APHM1(JL,JK))                            ZMORC.569   
C         ZCOLUM=ZCOLUM+PQOF(JL,JK)/G*100.*8314.3*273.16/101325./48.       ZMORC.570   
C         WRITE(77) ZCOLUM, APHM1(JL,JK), TM1(JL,JK)                       ZMORC.571   
CC         WRITE(6,*) 'JL,JK,ZCOLUM,APHM1:',JL,JK,ZCOLUM,APHM1(JL,JK)      ZMORC.572   
C 998   CONTINUE                                                           ZMORC.573   
C 997  CONTINUE                                                            ZMORC.574   
C      CLOSE (77)                                                          ZMORC.575   
C                                                                          ZMORC.576   
C  end loop over latitudes                                                 ZMORC.577   
C                                                                          ZMORC.578   
 1111 CONTINUE                                                             ZMORC.579   
C                                                                          ZMORC.580   
      DO JKL=1,NLEV                                                        ZMORC.581   
        HTLW(JKL)=-ZCOOLR(1,JKL)                                           ZMORC.582   
        HTSW(JKL)=ZHEATR(1,JKL)                                            ZMORC.583   
c        print *,'zmorc ',jkl,htsw(jkl),htlw(jkl)                          ZMORC.584   
      ENDDO                                                                ZMORC.585   
c level 1 surface nrlevp1=top                                              ZMORC.586   
Crfluxes                                                                   ZMORC.587   
C     1st index - flux 1=SW, 2=LW                                          ZMORC.588   
C     2nd index - Direction 1=DN, 2=UP                                     ZMORC.589   
C     3rd index - Where 1=TOP, 2=SURFACE                                   ZMORC.590   
      rfluxes(1,1,1)=zfsdwn(1,nrlevp1)                                     ZMORC.591   
      rfluxes(1,1,2)=zfsdwn(1,1)                                           ZMORC.592   
      rfluxes(1,2,1)=zfsup(1,nrlevp1)                                      ZMORC.593   
      rfluxes(1,2,2)=zfsup(1,1)                                            ZMORC.594   
      rfluxes(2,1,1)=-zflux(1,2,nrlevp1)                                   ZMORC.595   
      rfluxes(2,1,2)=-zflux(1,2,1)                                         ZMORC.596   
      rfluxes(2,2,1)=zflux(1,1,nrlevp1)                                    ZMORC.597   
      rfluxes(2,2,2)=zflux(1,1,1)                                          ZMORC.598   
                                                                           ZMORC.599   
ccc1      CLOSE (C2TEMP)                                                   ZMORC.600   
C                                                                          ZMORC.601   
C     ---------------------------------------------------                  ZMORC.602   
      END                                                                  ZMORC.603   
C                                                                          ZMORC.604   
*DECK DEDD                                                                 DEDD.1     
      SUBROUTINE DEDD ( KDLON, KRLST, KFLEV, ITASK )                       DEDD.2     
C                                                                          DEDD.3     
C**** *DEDD* - COMPUTES REFLECTIVITY, TRANSMISSIVITY OF A CLOUDY LAYER     DEDD.4     
C                                                                          DEDD.5     
C     PURPOSE.                                                             DEDD.6     
C     --------                                                             DEDD.7     
C           COMPUTES THE REFLECTIVITY AND TRANSMISSIVITY OF A CLOUDY       DEDD.8     
C     LAYER USING THE DELTA-EDDINGTON'S APPROXIMATION.                     DEDD.9     
C                                                                          DEDD.10    
C**   INTERFACE.                                                           DEDD.11    
C     ----------                                                           DEDD.12    
C          *DEDD* IS CALLED BY *SW*.                                       DEDD.13    
C                                                                          DEDD.14    
C                                                                          DEDD.15    
C        IMPLICIT ARGUMENTS                                                DEDD.16    
C        --------------------                                              DEDD.17    
C                                                                          DEDD.18    
C     ==== INPUTS ===                                                      DEDD.19    
C PGG    : (NDLON)             ; ASSYMETRY FACTOR                          DEDD.20    
C PREF   : (NDLON)             ; REFLECTIVITY OF THE UNDERLYING LAYER      DEDD.21    
C PRMUZ  : (NDLON)             ; COSINE OF SOLAR ZENITH ANGLE              DEDD.22    
C PTO1   : (NDLON)             ; OPTICAL THICKNESS                         DEDD.23    
C PW     : (NDLON)             ; SINGLE SCATTERING ALBEDO                  DEDD.24    
C     ==== OUTPUTS ===                                                     DEDD.25    
C PRE1   : (NDLON)             ; LAYER REFLECTIVITY ASSUMING NO            DEDD.26    
C                              ; REFLECTION FROM UNDERLYING LAYER          DEDD.27    
C PTR1   : (NDLON)             ; LAYER TRANSMISSIVITY ASSUMING NO          DEDD.28    
C                              ; REFLECTION FROM UNDERLYING LAYER          DEDD.29    
C PRE2   : (NDLON)             ; LAYER REFLECTIVITY ASSUMING               DEDD.30    
C                              ; REFLECTION FROM UNDERLYING LAYER          DEDD.31    
C PTR2   : (NDLON)             ; LAYER TRANSMISSIVITY ASSUMING             DEDD.32    
C                              ; REFLECTION FROM UNDERLYING LAYER          DEDD.33    
C                                                                          DEDD.34    
C     METHOD.                                                              DEDD.35    
C     -------                                                              DEDD.36    
C                                                                          DEDD.37    
C          STANDARD DELTA-EDDINGTON LAYER CALCULATIONS.                    DEDD.38    
C                                                                          DEDD.39    
C     EXTERNALS.                                                           DEDD.40    
C     ----------                                                           DEDD.41    
C                                                                          DEDD.42    
C          NONE                                                            DEDD.43    
C                                                                          DEDD.44    
C     REFERENCE.                                                           DEDD.45    
C     ----------                                                           DEDD.46    
C                                                                          DEDD.47    
C        SEE RADIATION'S PART OF THE MODEL'S DOCUMENTATION AND             DEDD.48    
C        ECMWF RESEARCH DEPARTMENT DOCUMENTATION                           DEDD.49    
C                                                                          DEDD.50    
C     AUTHOR.                                                              DEDD.51    
C     -------                                                              DEDD.52    
C        JEAN-JACQUES MORCRETTE  *ECMWF*                                   DEDD.53    
C                                                                          DEDD.54    
C     MODIFICATIONS.                                                       DEDD.55    
C     --------------                                                       DEDD.56    
C        ORIGINAL : 88-12-15                                               DEDD.57    
C     -----------------------------------------------------------          DEDD.58    
C                                                                          DEDD.59    
*CALL ZPARB                                                                DEDD.60    
c      INCLUDE 'zparb.upd'                                                 DEDD.61    
C                                                                          DEDD.62    
C     -------------------------------------------------------------        DEDD.63    
C                                                                          DEDD.64    
      DO 99 JL=1,NRLST                                                     DEDD.65    
         PGG  (JL) = ZGG  (JL)                                             DEDD.66    
         PREF (JL) = ZREF (JL)                                             DEDD.67    
         PRE1 (JL) = ZRE1 (JL)                                             DEDD.68    
         PRE2 (JL) = ZRE2 (JL)                                             DEDD.69    
         PRMUZ(JL) = ZRMUZ(JL)                                             DEDD.70    
         PTO1 (JL) = ZTO1 (JL)                                             DEDD.71    
         PTR1 (JL) = ZTR1 (JL)                                             DEDD.72    
         PTR2 (JL) = ZTR2 (JL)                                             DEDD.73    
         PW   (JL) = ZW   (JL)                                             DEDD.74    
 99   CONTINUE                                                             DEDD.75    
C                                                                          DEDD.76    
C*         1.      DELTA-EDDINGTON CALCULATIONS                            DEDD.77    
C                                                                          DEDD.78    
 100  CONTINUE                                                             DEDD.79    
C                                                                          DEDD.80    
      DO 131 JL   =   1 , KDLON                                            DEDD.81    
C                                                                          DEDD.82    
C*         1.1     SET UP THE DELTA-MODIFIED PARAMETERS                    DEDD.83    
C                                                                          DEDD.84    
 110  CONTINUE                                                             DEDD.85    
C                                                                          DEDD.86    
         ZFF = PGG(JL)*PGG(JL)                                             DEDD.87    
         ZGP = PGG(JL)/(1.+PGG(JL))                                        DEDD.88    
         ZTOP = (1.- PW(JL) * ZFF) * PTO1(JL)                              DEDD.89    
         ZWCP = (1-ZFF)* PW(JL) /(1.- PW(JL) * ZFF)                        DEDD.90    
         ZDT = 2./3.                                                       DEDD.91    
         ZX1 = 1.-ZWCP*ZGP                                                 DEDD.92    
         ZWM = 1.-ZWCP                                                     DEDD.93    
         ZRM2 =  PRMUZ(JL) * PRMUZ(JL)                                     DEDD.94    
         ZZRK = SQRT(3.*ZWM*ZX1)                                           DEDD.95    
         ZX2 = 4.*(1.-ZZRK*ZZRK*ZRM2)                                      DEDD.96    
         ZRP = SQRT(3.*ZWM/ZX1)                                            DEDD.97    
         ZALPHA = 3.*ZWCP*ZRM2*(1.+ZGP*ZWM)/ZX2                            DEDD.98    
         ZBETA = 3.*ZWCP* PRMUZ(JL) *(1.+3.*ZGP*ZRM2*ZWM)/ZX2              DEDD.99    
         ZEXMUO = EXP(-ZTOP/ PRMUZ(JL) )                                   DEDD.100   
         ZEXKP = EXP(ZZRK*ZTOP)                                            DEDD.101   
         ZEXKM = 1./ZEXKP                                                  DEDD.102   
         ZXP2P = 1.+ZDT*ZRP                                                DEDD.103   
         ZXM2P = 1.-ZDT*ZRP                                                DEDD.104   
         ZAP2B = ZALPHA+ZDT*ZBETA                                          DEDD.105   
         ZAM2B = ZALPHA-ZDT*ZBETA                                          DEDD.106   
C                                                                          DEDD.107   
C*         1.2     WITHOUT REFLECTION FROM THE UNDERLYING LAYER            DEDD.108   
C                                                                          DEDD.109   
 120  CONTINUE                                                             DEDD.110   
C                                                                          DEDD.111   
         ZA11 = ZXP2P                                                      DEDD.112   
         ZA12 = ZXM2P                                                      DEDD.113   
         ZA13 = ZAP2B                                                      DEDD.114   
         ZA22 = ZXP2P*ZEXKP                                                DEDD.115   
         ZA21 = ZXM2P*ZEXKM                                                DEDD.116   
         ZA23 = ZAM2B*ZEXMUO                                               DEDD.117   
         ZDENA = ZA11 * ZA22 - ZA21 * ZA12                                 DEDD.118   
         ZC1A = (ZA22*ZA13-ZA12*ZA23)/ZDENA                                DEDD.119   
         ZC2A = (ZA11*ZA23-ZA21*ZA13)/ZDENA                                DEDD.120   
         ZRI0A = ZC1A+ZC2A-ZALPHA                                          DEDD.121   
         ZRI1A = ZRP*(ZC1A-ZC2A)-ZBETA                                     DEDD.122   
         PRE1(JL) = (ZRI0A-ZDT*ZRI1A)/ PRMUZ(JL)                           DEDD.123   
         ZRI0B = ZC1A*ZEXKM+ZC2A*ZEXKP-ZALPHA*ZEXMUO                       DEDD.124   
         ZRI1B = ZRP*(ZC1A*ZEXKM-ZC2A*ZEXKP)-ZBETA*ZEXMUO                  DEDD.125   
         PTR1(JL) = ZEXMUO+(ZRI0B+ZDT*ZRI1B)/ PRMUZ(JL)                    DEDD.126   
C                                                                          DEDD.127   
C*         1.3     WITH REFLECTION FROM THE UNDERLYING LAYER               DEDD.128   
C                                                                          DEDD.129   
 130  CONTINUE                                                             DEDD.130   
C                                                                          DEDD.131   
         ZB21 = ZA21- PREF(JL) *ZXP2P*ZEXKM                                DEDD.132   
         ZB22 = ZA22- PREF(JL) *ZXM2P*ZEXKP                                DEDD.133   
         ZB23 = ZA23- PREF(JL) *ZEXMUO*(ZAP2B - PRMUZ(JL) )                DEDD.134   
         ZDENB = ZA11 * ZB22 - ZB21 * ZA12                                 DEDD.135   
         ZC1B = (ZB22*ZA13-ZA12*ZB23)/ZDENB                                DEDD.136   
         ZC2B = (ZA11*ZB23-ZB21*ZA13)/ZDENB                                DEDD.137   
         ZRI0C = ZC1B+ZC2B-ZALPHA                                          DEDD.138   
         ZRI1C = ZRP*(ZC1B-ZC2B)-ZBETA                                     DEDD.139   
         PRE2(JL) = (ZRI0C-ZDT*ZRI1C) / PRMUZ(JL)                          DEDD.140   
         ZRI0D = ZC1B*ZEXKM + ZC2B*ZEXKP - ZALPHA*ZEXMUO                   DEDD.141   
         ZRI1D = ZRP * (ZC1B*ZEXKM - ZC2B*ZEXKP) - ZBETA*ZEXMUO            DEDD.142   
         PTR2(JL) = ZEXMUO + (ZRI0D + ZDT*ZRI1D) / PRMUZ(JL)               DEDD.143   
C                                                                          DEDD.144   
 131  CONTINUE                                                             DEDD.145   
      DO 132 JL=1,NRLST                                                    DEDD.146   
         ZGG  (JL) = PGG  (JL)                                             DEDD.147   
         ZREF (JL) = PREF (JL)                                             DEDD.148   
         ZRE1 (JL) = PRE1 (JL)                                             DEDD.149   
         ZRE2 (JL) = PRE2 (JL)                                             DEDD.150   
         ZRMUZ(JL) = PRMUZ(JL)                                             DEDD.151   
         ZTO1 (JL) = PTO1 (JL)                                             DEDD.152   
         ZTR1 (JL) = PTR1 (JL)                                             DEDD.153   
         ZTR2 (JL) = PTR2 (JL)                                             DEDD.154   
         ZW   (JL) = PW   (JL)                                             DEDD.155   
 132     CONTINUE                                                          DEDD.156   
      RETURN                                                               DEDD.157   
      END                                                                  DEDD.158   
C                                                                          DEDD.159   
*DECK LW                                                                   LW.1     
      SUBROUTINE LW (KDLON,KRLST,KFLEV,KFLVP1,KFLEV2,KNGL,                 LW.2     
     S                      KNGLP1, PSIG,PSCT,PCCO2,ITASK )                LW.3     
C                                                                          LW.4     
C**** *LW*   - COMPUTES LONGWAVE RADIATION QUANTITIES                      LW.5     
C                                                                          LW.6     
C     PURPOSE.                                                             LW.7     
C     --------                                                             LW.8     
C           COMPUTES LONGWAVE FLUXES                                       LW.9     
C                                                                          LW.10    
C**   INTERFACE.                                                           LW.11    
C     ----------                                                           LW.12    
C                                                                          LW.13    
C        EXPLICIT ARGUMENTS                                                LW.14    
C        --------------------                                              LW.15    
C                                                                          LW.16    
C        IMPLICIT ARGUMENTS                                                LW.17    
C        --------------------                                              LW.18    
C                                                                          LW.19    
C     ==== INPUTS ===                                                      LW.20    
C PEMIS  : (KDLON)             ; SURFACE EMISSIVITY                        LW.21    
C PCCO2  :                     ; CONCENTRATION IN CO2 (PA/PA)              LW.22    
C PQOF   : (KDLON,KFLEV)       ; CONCENTRATION IN OZONE (PA/PA)            LW.23    
C PTAVE  : (KDLON,KFLEV)       ; TEMPERATURE                               LW.24    
C PTL    : (KDLON,0:KFLEV)     ; HALF LEVEL TEMPERATURE                    LW.25    
C PPMB   : (KDLON,0:KFLEV)     ; HALF LEVEL PRESSURE                       LW.26    
C PWV    : (KDLSUR,KFLEV)      ; SPECIFIC HUMIDITY PA/PA                   LW.27    
C PCLDLW : (KDLON,KFLEV)       ; CLOUD FRACTIONAL COVER                    LW.28    
C PAER   : (KDLON,KFLEV,5)     ; OPTICAL THICKNESS OF THE AEROSOLS         LW.29    
C     ==== OUTPUTS ===                                                     LW.30    
C PFLUX(KDLON,2,KFLEV)         ; RADIATIVE FLUXES                          LW.31    
C                     1  ==>  UPWARD   FLUX TOTAL                          LW.32    
C                     2  ==>  DOWNWARD FLUX TOTAL                          LW.33    
C                                                                          LW.34    
C     METHOD.                                                              LW.35    
C     -------                                                              LW.36    
C                                                                          LW.37    
C          1. COMPUTES THE PRESSURE AND TEMPERATURE WEIGHTED AMOUNTS OF    LW.38    
C     ABSORBERS, AND THE VARIOUS RELEVANT PLANCK FUNCTIONS                 LW.39    
C          2. PERFORMS THE VERTICAL INTEGRATION DISTINGUISHING THE CON-    LW.40    
C     TRIBUTIONS OF THE ADJACENT AND DISTANT LAYERS AND THOSE FROM THE     LW.41    
C     BOUNDARIES.                                                          LW.42    
C          3. COMPUTES THE CLEAR-SKY DOWNWARD AND UPWARD EMISSIVITIES.     LW.43    
C          4. INTRODUCES THE EFFECTS OF THE CLOUDS ON THE FLUXES.          LW.44    
C                                                                          LW.45    
C     EXTERNALS.                                                           LW.46    
C     ----------                                                           LW.47    
C                                                                          LW.48    
C          *LWTT*                                                          LW.49    
C                                                                          LW.50    
C     REFERENCE.                                                           LW.51    
C     ----------                                                           LW.52    
C                                                                          LW.53    
C        SEE RADIATION'S PART OF THE MODEL'S DOCUMENTATION                 LW.54    
C                                                                          LW.55    
C     AUTHOR.                                                              LW.56    
C     -------                                                              LW.57    
C        JEAN-JACQUES MORCRETTE  *ECMWF*                                   LW.58    
C                                                                          LW.59    
C     MODIFICATIONS.                                                       LW.60    
C     --------------                                                       LW.61    
C        ORIGINAL : 88-12-15                                               LW.62    
C------------------------------------------------------------------        LW.63    
C      IMPLICIT LOGICAL (L)                                                LW.64    
C                                                                          LW.65    
*CALL ZPARB                                                                LW.66    
c      INCLUDE 'zparb.upd'                                                 LW.67    
                                                                           LW.68    
C__________________________________________________________________        LW.69    
C                                                                          LW.70    
      REAL ZPHM6(NLON),ZPSM6(NLON),ZPHN6(NLON),                            LW.71    
     *     ZPSN6(NLON)                                                     LW.72    
      REAL ZEPSH7(NLON),ZEPSH8(NLON),ZEPSH9(NLON)                          LW.73    
      REAL ZFACTC1(NLON),ZFACTC2(NLON),                                    LW.74    
     *     ZFACTC3(NLON), ZFACTC4(NLON),ZFACTC5(NLON),                     LW.75    
     *     ZFN10(NLON)                                                     LW.76    
      INTEGER IXTP(NLON),IXTB(NLON),IXTS(NLON)                             LW.77    
      REAL PGA(NLON,12,2,NLEV),PGB(NLON,12,2,NLEV),                        LW.78    
     *     PPTY(NLON,12,NLEV),PETY(NLON,12,NLEV),                          LW.79    
     *     PGATOP(NLON,12,2), PGBTOP(NLON,12,2),                           LW.80    
     *     PGASUR(NLON,12,2), PGBSUR(NLON,12,2),                           LW.81    
     *     PTYTOP(NLON,12),    ETYTOP(NLON,12),                            LW.82    
     *     PTYSUR(NLON,12),    ETYSUR(NLON,12)                             LW.83    
C     COMMON BLOCK FOR GAS ABUNDANCES                                      UPDMORCMB.3     
*CALL MORCGAS                                                              UPDMORCMB.4     
C                                                                          LW.84    
C  *******************************************************************     LW.85    
C                                                                          UPDMORCMB.82    
C     Concentration of the various trace gases                             UPDMORCMB.83    
C     now entered in INIPHYS, Namelist INMORCGAS.                          UPDMORCMB.84    
C     M. Bourqui Nov. 2001.                                                UPDMORCMB.85    
C                                                                          UPDMORCMB.86    
C                                                                          LW.101   
      DO 97 JL=1,NRLST                                                     LW.102   
         DO 98 JK=1,NRLEV                                                  LW.103   
C            PCLD  (JL,JK) = PCLFR (JL,JK)                                 LW.104   
C            PQLW  (JL,JK) = PQLWP (JL,JK)                                 LW.105   
            PCLDLW(JL,JK) = ZCLDLW(JL,JK)                                  LW.106   
            DO 99 II=1,2                                                   LW.107   
               PFLUX (JL,II,JK) = ZFLUX (JL,II,JK)                         LW.108   
               PTAU  (JL,II,JK) = ZTAU  (JL,II,JK)                         LW.109   
 99         CONTINUE                                                       LW.110   
            PPMB  (JL,JK) = ZPMB  (JL,JK)                                  LW.111   
            PTAVE (JL,JK) = ZTAVE (JL,JK)                                  LW.112   
            PTL   (JL,JK) = ZTL   (JL,JK)                                  LW.113   
 98      CONTINUE                                                          LW.114   
         DO 96 II=1,2                                                      LW.115   
            PFLUX (JL,II,NRLEV+1) = ZFLUX (JL,II,NRLEV+1)                  LW.116   
 96      CONTINUE                                                          LW.117   
         PDT0(JL) = ZDT0(JL)                                               LW.118   
         PPMB(JL,NRLEV+1) = ZPMB(JL,NRLEV+1)                               LW.119   
         PTL (JL,NRLEV+1) = ZTL (JL,NRLEV+1)                               LW.120   
 97   CONTINUE                                                             LW.121   
      ZCCO2 = PCCO2                                                        LW.122   
C                                                                          LW.123   
C*         1.     COMPUTES ABSORBER AMOUNTS                                LW.124   
C                 -------------------------                                LW.125   
C                                                                          LW.126   
C*         1.0    INITIALIZATION                                           LW.127   
C                 --------------                                           LW.128   
C                                                                          LW.129   
 100  CONTINUE                                                             LW.130   
                                                                           LW.131   
      IMAXC = 0                                                            LW.132   
                                                                           LW.133   
! changing - marc 30/3/10                                                  LW.134   
c      DO 101 JL = 1 , (KFLEV+1)*KDLON                                     LW.135   
c        ZADJD(JL,1) = 0.                                                  LW.136   
c        ZADJU(JL,1) = 0.                                                  LW.137   
c        ZBINT(JL,1) = 0.                                                  LW.138   
c        ZDISTD(JL,1)= 0.                                                  LW.139   
c        ZDISTU(JL,1)= 0.                                                  LW.140   
 101  CONTINUE                                                             LW.141   
      ZADJD(:,:)=0.0                                                       LW.142   
      ZADJU(:,:)=0.0                                                       LW.143   
      ZBINT(:,:)=0.0                                                       LW.144   
      ZDISTD(:,:)=0.0                                                      LW.145   
      ZDISTU(:,:)=0.0                                                      LW.146   
!                                                                          LW.147   
      DO 114 JK=1,KFLEV                                                    LW.148   
        DO 113 JL = 1 , KDLON                                              LW.149   
          PCTS(JL,JK)=0.                                                   LW.150   
 113    CONTINUE                                                           LW.151   
 114  CONTINUE                                                             LW.152   
      DO 103 JL = 1 , KDLON                                                LW.153   
        IXTP(JL)    = 1                                                    LW.154   
        ZBSUIN(JL) = 0.                                                    LW.155   
        IMX(JL)    = 0                                                     LW.156   
        IMXP(JL)   = 0                                                     LW.157   
 103  CONTINUE                                                             LW.158   
C                                                                          LW.159   
C*         1.1    SEARCH THE LAYER INDEX OF THE HIGHEST CLOUD              LW.160   
C                 -------------------------------------------              LW.161   
C                                                                          LW.162   
 110  CONTINUE                                                             LW.163   
                                                                           LW.164   
      DO 112 JK = 1 , KFLEV                                                LW.165   
        DO 111 JL = 1 , KDLON                                              LW.166   
          IF (PCLDLW(JL,JK).GT.ZEPSC) THEN                                 LW.167   
            IMXP(JL)=JK                                                    LW.168   
           ELSE                                                            LW.169   
            IMXP(JL)=IMX(JL)                                               LW.170   
          ENDIF                                                            LW.171   
          IMAXC=MAX(IMXP(JL),IMAXC)                                        LW.172   
          IMX(JL)=IMXP(JL)                                                 LW.173   
 111    CONTINUE                                                           LW.174   
 112  CONTINUE                                                             LW.175   
C                                                                          LW.176   
C                                                                          LW.177   
C*         1.2    PRESSURE OVER GAUSS SUB-LEVELS                           LW.178   
C                 ------------------------------                           LW.179   
C                                                                          LW.180   
 120  CONTINUE                                                             LW.181   
                                                                           LW.182   
      DO 121 JL = 1 , KDLON                                                LW.183   
        ZSSIG(JL, 1 ) = 1.0                                                LW.184   
 121  CONTINUE                                                             LW.185   
                                                                           LW.186   
      DO 126 JK = 1 , KFLEV                                                LW.187   
        JKJ=(JK-1)*NG1P1+1                                                 LW.188   
        JKJR = JKJ                                                         LW.189   
        JKJP = JKJ + NG1P1                                                 LW.190   
        DO 123 JL = 1 , KDLON                                              LW.191   
          ZSSIG(JL,JKJP)=PPMB(JL,JK+1)/PPMB(JL,1)                          LW.192   
 123    CONTINUE                                                           LW.193   
        DO 125 IG1=1,NG1                                                   LW.194   
          JKJ=JKJ+1                                                        LW.195   
          DO 124 JL = 1 , KDLON                                            LW.196   
            ZSSIG(JL,JKJ)= (ZSSIG(JL,JKJR)+ZSSIG(JL,JKJP))*0.5             LW.197   
     *     + RT1(IG1) * (ZSSIG(JL,JKJP) - ZSSIG(JL,JKJR)) * 0.5            LW.198   
 124      CONTINUE                                                         LW.199   
 125    CONTINUE                                                           LW.200   
 126  CONTINUE                                                             LW.201   
C                                                                          LW.202   
C                                                                          LW.203   
C*         1.3    PRESSURE-WEIGHTED TEMPERATURE AND TRANSMISSIVITY INDEX   LW.204   
C                 ------------------------------------------------------   LW.205   
C                                                                          LW.206   
 130  CONTINUE                                                             LW.207   
                                                                           LW.208   
      DO 131 JK = 1 , KFLEV                                                LW.209   
        DO 132 JL = 1 , KDLON                                              LW.210   
          ZDST1 = (PTAVE(JL,JK)-TINTP(1)) / TSTP                           LW.211   
          IXTX = MAX( 1, MIN( MXIXT, INT( ZDST1 + 1. ) ) )                 LW.212   
          ZDSTX = (PTAVE(JL,JK)-TINTP(IXTX))/TSTP                          LW.213   
          IF (ZDSTX.LT.0.5) THEN                                           LW.214   
            IXTP(JL) = IXTX                                                LW.215   
           ELSE                                                            LW.216   
            IXTP(JL) = IXTX+1                                              LW.217   
          ENDIF                                                            LW.218   
 132    CONTINUE                                                           LW.219   
        DO 133 JG=1,12                                                     LW.220   
          DO 134 JL = 1 , KDLON                                            LW.221   
            INDT=IXTP(JL)                                                  LW.222   
            PGA(JL,JG,1,JK)=GA(INDT,2*JG,1)                                LW.223   
            PGA(JL,JG,2,JK)=GA(INDT,2*JG,2)                                LW.224   
            PGB(JL,JG,1,JK)=GB(INDT,2*JG,1)                                LW.225   
            PGB(JL,JG,2,JK)=GB(INDT,2*JG,2)                                LW.226   
 134      CONTINUE                                                         LW.227   
 133    CONTINUE                                                           LW.228   
        DO 1331 JG=1,10                                                    LW.229   
          DO 1341 JL = 1 , KDLON                                           LW.230   
            INDT=IXTP(JL)                                                  LW.231   
            PPTY(JL,JG,JK)=PTY(INDT,2*JG)                                  LW.232   
            PETY(JL,JG,JK)=ETY(INDT,2*JG)                                  LW.233   
 1341     CONTINUE                                                         LW.234   
 1331   CONTINUE                                                           LW.235   
 131  CONTINUE                                                             LW.236   
                                                                           LW.237   
      DO 135 JL=1,KDLON                                                    LW.238   
        ZDST1 = (PTL(JL,NLEV+1)-TINTP(1)) / TSTP                           LW.239   
        IXTX = MAX( 1, MIN( MXIXT, INT( ZDST1 + 1. ) ) )                   LW.240   
        ZDSTX = (PTL(JL,KFLEV+1)-TINTP(IXTX))/TSTP                         LW.241   
        IF (ZDSTX.LT.0.5) THEN                                             LW.242   
          IXTB(JL)=IXTX                                                    LW.243   
        ELSE                                                               LW.244   
          IXTB(JL)=IXTX+1                                                  LW.245   
        ENDIF                                                              LW.246   
        ZDST1 = (PTL(JL,1)-TINTP(1)) / TSTP                                LW.247   
        IXTX = MAX( 1, MIN( MXIXT, INT( ZDST1 + 1. ) ) )                   LW.248   
        ZDSTX = (PTL(JL,1)-TINTP(IXTX))/TSTP                               LW.249   
        IF (ZDSTX.LT.0.5) THEN                                             LW.250   
          IXTS(JL)=IXTX                                                    LW.251   
        ELSE                                                               LW.252   
          IXTS(JL)=IXTX+1                                                  LW.253   
        END IF                                                             LW.254   
 135  CONTINUE                                                             LW.255   
                                                                           LW.256   
      DO 136 JG=1, 12                                                      LW.257   
        DO 137 JL=1,KDLON                                                  LW.258   
          INDSU=IXTS(JL)                                                   LW.259   
          PGASUR(JL,JG,1)=GA(INDSU,2*JG-1,1)                               LW.260   
          PGBSUR(JL,JG,1)=GB(INDSU,2*JG-1,1)                               LW.261   
          PGASUR(JL,JG,2)=GA(INDSU,2*JG-1,2)                               LW.262   
          PGBSUR(JL,JG,2)=GB(INDSU,2*JG-1,2)                               LW.263   
          INDTP=IXTB(JL)                                                   LW.264   
          PGATOP(JL,JG,1)=GA(INDTP,2*JG-1,1)                               LW.265   
          PGBTOP(JL,JG,1)=GB(INDTP,2*JG-1,1)                               LW.266   
          PGATOP(JL,JG,2)=GA(INDTP,2*JG-1,2)                               LW.267   
          PGBTOP(JL,JG,2)=GB(INDTP,2*JG-1,2)                               LW.268   
 137    CONTINUE                                                           LW.269   
 136  CONTINUE                                                             LW.270   
                                                                           LW.271   
      DO 139 JG=1, 10                                                      LW.272   
        DO 1391 JL=1,KDLON                                                 LW.273   
          INDSU=IXTS(JL)                                                   LW.274   
          PTYSUR(JL,JG)=PTY(INDSU,2*JG-1)                                  LW.275   
          ETYSUR(JL,JG)=ETY(INDSU,2*JG-1)                                  LW.276   
          INDTP=IXTB(JL)                                                   LW.277   
          PTYTOP(JL,JG)=PTY(INDTP,2*JG-1)                                  LW.278   
          ETYTOP(JL,JG)=ETY(INDTP,2*JG-1)                                  LW.279   
 1391   CONTINUE                                                           LW.280   
 139  CONTINUE                                                             LW.281   
C                                                                          LW.282   
C*         1.4    PRESSURE THICKNESS AND MEAN PRESSURE OF SUB-LAYERS       LW.283   
C                 --------------------------------------------------       LW.284   
C                                                                          LW.285   
 140  CONTINUE                                                             LW.286   
                                                                           LW.287   
      DO 142 JKI=1,3*KFLEV                                                 LW.288   
        JKIP1=JKI+1                                                        LW.289   
        DO 141 JL = 1 , KDLON                                              LW.290   
          ZABSLY(JL,5,JKI)=(ZSSIG(JL,JKI)+ZSSIG(JL,JKIP1))*0.5             LW.291   
          ZABSLY(JL,3,JKI)=(ZSSIG(JL,JKI)-ZSSIG(JL,JKIP1))                 LW.292   
     *                     *PPSOL(JL)/(10.*G)                              LW.293   
 141    CONTINUE                                                           LW.294   
 142  CONTINUE                                                             LW.295   
                                                                           LW.296   
      DO 146 JK = 1 , KFLEV                                                LW.297   
        JKP1=JK+1                                                          LW.298   
        JKL = KFLEV+1 - JK                                                 LW.299   
        DO 143 JL = 1 , KDLON                                              LW.300   
          ZXWV(JL) = MAX(PWV(JL,JKL) , ZEPSCQ )                            LW.301   
          ZXOZ(JL) = MAX(PQOF(JL,JKL) / PDP(JL,JKL) , ZEPSCO )             LW.302   
 143    CONTINUE                                                           LW.303   
        JKJ=(JK-1)*NG1P1+1                                                 LW.304   
        JKJPN=JKJ+NG1                                                      LW.305   
                                                                           LW.306   
        DO 145 JKK=JKJ,JKJPN                                               LW.307   
          DO 144 JL = 1 , KDLON                                            LW.308   
            ZDPM = ZABSLY(JL,3,JKK)                                        LW.309   
            ZUPM = ZABSLY(JL,5,JKK) * PPSOL(JL) * ZDPM / 101325.           LW.310   
            ZDUC(JL,JKK)=ZDPM                                              LW.311   
                                                                           LW.312   
            ZABSLY(JL,12,JKK)=ZXOZ(JL)*ZDPM*208.333                        LW.313   
            ZABSLY(JL,8,JKK) =PCCO2   *ZDPM*227.2159                       LW.314   
            ZABSLY(JL,13,JKK)=ZXOZ(JL)*ZUPM*208.333 *1013.25               LW.315   
            ZABSLY(JL,7,JKK) =PCCO2   *ZUPM*227.2159*1013.25               LW.316   
            ZABSLY(JL,32,JKK)=ZXOZ(JL)*ZDPM*208.333 *PTAVE(JL,JK)          LW.317   
            ZABSLY(JL,33,JKK)=PCCO2   *ZDPM*227.2159*PTAVE(JL,JK)          LW.318   
                                                                           LW.319   
            ZU6=ZXWV(JL) * ZUPM                                            LW.320   
            ZFPPW= 1.6078 *ZXWV(JL)/(1.+0.608*ZXWV(JL))                    LW.321   
            ZABSLY(JL,6,JKK)=ZU6                                           LW.322   
     #            * (1. + DELTAH/ZABSLY(JL,5,JKK))                         LW.323   
            ZABSLY(JL,11,JKK)=ZU6*ZFPPW                                    LW.324   
            ZABSLY(JL,10,JKK)=ZU6*(1.-ZFPPW)                               LW.325   
            ZABSLY(JL,9,JKK) = PCCO2 * ZUPM                                LW.326   
     #            * (1. + DELTAC/ZABSLY(JL,5,JKK))                         LW.327   
 144      CONTINUE                                                         LW.328   
 145    CONTINUE                                                           LW.329   
 146  CONTINUE                                                             LW.330   
C                                                                          LW.331   
C*         1.5    CUMULATIVE ABSORBER AMOUNTS FROM TOP OF ATMOSPHERE       LW.332   
C                 --------------------------------------------------       LW.333   
C                                                                          LW.334   
 150  CONTINUE                                                             LW.335   
                                                                           LW.336   
! changing - marc 30/3/10                                                  LW.337   
c      DO 151 JL = 1 , NUA*KDLON                                           LW.338   
c        ZABSCU(JL,1,3*KFLEV+1)=0.                                         LW.339   
c 151  CONTINUE                                                            LW.340   
      ZABSCU(:,1,3*KFLEV+1)=0.                                             LW.341   
                                                                           LW.342   
      DO 159 JK = 1 , KFLEV                                                LW.343   
        JJ=(JK-1)*NG1P1+1                                                  LW.344   
        JJPN=JJ+NG1                                                        LW.345   
        JKL=KFLEV+1-JK                                                     LW.346   
C                                                                          LW.347   
C*         1.5.1  CUMULATIVE AEROSOL AMOUNTS FROM TOP OF ATMOSPHERE        LW.348   
C                 --------------------------------------------------       LW.349   
C                                                                          LW.350   
 1510   CONTINUE                                                           LW.351   
                                                                           LW.352   
        JAE1=3*KFLEV+1-JJ                                                  LW.353   
        JAE2=3*KFLEV+1-(JJ+1)                                              LW.354   
        JAE3=3*KFLEV+1-JJPN                                                LW.355   
        DO 1512 IAE=1,5                                                    LW.356   
          DO 1511 JL = 1 , KDLON                                           LW.357   
            ZUAER(JL,IAE) = (CAER(IAE,1)*PAER(JL,JKL,1)                    LW.358   
     *      +CAER(IAE,2)*PAER(JL,JKL,2)+CAER(IAE,3)*PAER(JL,JKL,3)         LW.359   
     *      +CAER(IAE,4)*PAER(JL,JKL,4)+CAER(IAE,5)*PAER(JL,JKL,5))        LW.360   
     *      /(ZDUC(JL,JAE1)+ZDUC(JL,JAE2)+ZDUC(JL,JAE3))                   LW.361   
 1511     CONTINUE                                                         LW.362   
 1512   CONTINUE                                                           LW.363   
C                                                                          LW.364   
C*         1.5.2  INTRODUCES TEMPERATURE EFFECTS ON ABSORBER AMOUNTS       LW.365   
C                                                                          LW.366   
 1520   CONTINUE                                                           LW.367   
                                                                           LW.368   
        DO 1521 JL = 1 , KDLON                                             LW.369   
          ZTAVIC(JL)=PTAVE(JL,JKL)                                         LW.370   
C                                                                          LW.371   
C- TEMPERATURE DEPENDENCE FOR WATER VAPOR CONTINUUM (FROM CKD MODEL)       LW.372   
C                                                                          LW.373   
          ZFACTC(JL)  = 296./ZTAVIC(JL)                                    LW.374   
          ZZZZ         = (1.0-ZTAVIC(JL)/296.)                             LW.375   
          ZFACTC1(JL) = EXP(3.3338*ZZZZ)                                   LW.376   
          ZFACTC2(JL) = EXP(5.2775*ZZZZ)                                   LW.377   
          ZFACTC3(JL) = EXP(5.9022*ZZZZ)                                   LW.378   
          ZFACTC4(JL) = EXP(6.2938*ZZZZ)                                   LW.379   
          ZFACTC5(JL) = EXP(7.0252*ZZZZ)                                   LW.380   
                                                                           LW.381   
          ZTX=ZTAVIC(JL)-TREF                                              LW.382   
          ZTX2=ZTX*ZTX                                                     LW.383   
          ZZABSLY = ZABSLY(JL,6,JAE1)                                      LW.384   
     *             +ZABSLY(JL,6,JAE2)                                      LW.385   
     *             +ZABSLY(JL,6,JAE3)                                      LW.386   
          ZUP=MIN(MAX( 0.5*X10E*LOG( ZZABSLY ) +5., 0.), 6.0)              LW.387   
          ZCAH1=AT(1,1)+ZUP*(AT(1,2)+ZUP*(AT(1,3)))                        LW.388   
          ZCBH1=BT(1,1)+ZUP*(BT(1,2)+ZUP*(BT(1,3)))                        LW.389   
          ZEPSH1(JL)=EXP( ZCAH1 * ZTX + ZCBH1 * ZTX2 )                     LW.390   
          ZCAH2=AT(2,1)+ZUP*(AT(2,2)+ZUP*(AT(2,3)))                        LW.391   
          ZCBH2=BT(2,1)+ZUP*(BT(2,2)+ZUP*(BT(2,3)))                        LW.392   
          ZEPSH2(JL)=EXP( ZCAH2 * ZTX + ZCBH2 * ZTX2 )                     LW.393   
          ZCAH3=AT(3,1)+ZUP*(AT(3,2)+ZUP*(AT(3,3)))                        LW.394   
          ZCBH3=BT(3,1)+ZUP*(BT(3,2)+ZUP*(BT(3,3)))                        LW.395   
          ZEPSH3(JL)=EXP( ZCAH3 * ZTX + ZCBH3 * ZTX2 )                     LW.396   
          ZCAH4=AT(4,1)+ZUP*(AT(4,2)+ZUP*(AT(4,3)))                        LW.397   
          ZCBH4=BT(4,1)+ZUP*(BT(4,2)+ZUP*(BT(4,3)))                        LW.398   
          ZEPSH4(JL)=EXP( ZCAH4 * ZTX + ZCBH4 * ZTX2 )                     LW.399   
          ZCAH5=AT(5,1)+ZUP*(AT(5,2)+ZUP*(AT(5,3)))                        LW.400   
          ZCBH5=BT(5,1)+ZUP*(BT(5,2)+ZUP*(BT(5,3)))                        LW.401   
          ZEPSH5(JL)=EXP( ZCAH5 * ZTX + ZCBH5 * ZTX2 )                     LW.402   
          ZCAH6=AT(6,1)+ZUP*(AT(6,2)+ZUP*(AT(6,3)))                        LW.403   
          ZCBH6=BT(6,1)+ZUP*(BT(6,2)+ZUP*(BT(6,3)))                        LW.404   
          ZEPSH6(JL)=EXP( ZCAH6 * ZTX + ZCBH6 * ZTX2 )                     LW.405   
C                                                                          LW.406   
C*--1250-1450 CM-1 H2O                                                     LW.407   
C                                                                          LW.408   
          ZCAH7=AT(7,1)+ZUP*(AT(7,2)+ZUP*(AT(7,3)))                        LW.409   
          ZCBH7=BT(7,1)+ZUP*(BT(7,2)+ZUP*(BT(7,3)))                        LW.410   
          ZEPSH7(JL)=EXP( ZCAH7 * ZTX + ZCBH7 * ZTX2 )                     LW.411   
C                                                                          LW.412   
C*--800-970 CM-1 H2O                                                       LW.413   
C                                                                          LW.414   
          ZCAH8=AT(8,1)+ZUP*(AT(8,2)+ZUP*(AT(8,3)))                        LW.415   
          ZCBH8=BT(8,1)+ZUP*(BT(8,2)+ZUP*(BT(8,3)))                        LW.416   
          ZEPSH8(JL)=EXP( ZCAH8 * ZTX + ZCBH8 * ZTX2 )                     LW.417   
C                                                                          LW.418   
C*--650-800 CM-1 H2O                                                       LW.419   
C                                                                          LW.420   
          ZCAH9=AT(9,1)+ZUP*(AT(9,2)+ZUP*(AT(9,3)))                        LW.421   
          ZCBH9=BT(9,1)+ZUP*(BT(9,2)+ZUP*(BT(9,3)))                        LW.422   
          ZEPSH9(JL)=EXP( ZCAH9 * ZTX + ZCBH9 * ZTX2 )                     LW.423   
                                                                           LW.424   
          ZPHM6(JL)=EXP(-5.81E-4 * ZTX - 1.13E-6 * ZTX2)                   LW.425   
          ZPSM6(JL)=EXP(-5.57E-4 * ZTX - 3.30E-6 * ZTX2)                   LW.426   
          ZPHN6(JL)=EXP(-3.46E-5 * ZTX + 2.05E-6 * ZTX2)                   LW.427   
          ZPSN6(JL)=EXP( 3.70E-3 * ZTX - 2.30E-6 * ZTX2)                   LW.428   
 1521   CONTINUE                                                           LW.429   
                                                                           LW.430   
        DO 1522 JL = 1 , KDLON                                             LW.431   
          ZTAVIC(JL)=PTAVE(JL,JKL)                                         LW.432   
          ZTX=ZTAVIC(JL)-TREF                                              LW.433   
          ZTX2=ZTX*ZTX                                                     LW.434   
          ZZABSLY= ZABSLY(JL,9,JAE1)                                       LW.435   
     *            +ZABSLY(JL,9,JAE2)                                       LW.436   
     *            +ZABSLY(JL,9,JAE3)                                       LW.437   
          ZALUP = X10E * LOG( ZZABSLY )                                    LW.438   
          ZUP   = MAX( 0.00 , 5.00 + 0.50 * ZALUP )                        LW.439   
          ZEPSC2(JL) = (ZTAVIC(JL)/TREF) ** ZUP                            LW.440   
          ZCAC8=AT(11,1)+ZUP*(AT(11,2)+ZUP*(AT(11,3)))                     LW.441   
          ZCBC8=BT(11,1)+ZUP*(BT(11,2)+ZUP*(BT(11,3)))                     LW.442   
          ZEPSC3(JL) = EXP( ZCAC8  * ZTX + ZCBC8  * ZTX2 )                 LW.443   
          ZEPHIO(JL) = EXP( OCT(1) * ZTX + OCT(2) * ZTX2)                  LW.444   
C          ZEPSIO(JL) = EXP( 2.* (OCT(3) * ZTX+OCT(4)*ZTX2))               LW.445   
 1522   CONTINUE                                                           LW.446   
                                                                           LW.447   
        DO 1524 JKK=JJ,JJPN                                                LW.448   
          JC=3*KFLEV+1-JKK                                                 LW.449   
          JCP1=JC+1                                                        LW.450   
          DO 1523 JL = 1 , KDLON                                           LW.451   
            ZABSCU(JL,10,JC)=ZABSCU(JL,10,JCP1)                            LW.452   
     *                 +ZABSLY(JL,10,JC)  * ZFACTC(JL)                     LW.453   
            ZABSCU(JL,25,JC)=ZABSCU(JL,25,JCP1)                            LW.454   
     *                 +ZABSLY(JL,11,JC)  * ZFACTC2(JL)                    LW.455   
            ZABSCU(JL,26,JC)=ZABSCU(JL,26,JCP1)                            LW.456   
     *                 +ZABSLY(JL,11,JC)  * ZFACTC3(JL)                    LW.457   
            ZABSCU(JL,27,JC)=ZABSCU(JL,27,JCP1)                            LW.458   
     *                 +ZABSLY(JL,11,JC)  * ZFACTC4(JL)                    LW.459   
            ZABSCU(JL,28,JC)=ZABSCU(JL,28,JCP1)                            LW.460   
     *                 +ZABSLY(JL,11,JC)  * ZFACTC5(JL)                    LW.461   
            ZABSCU(JL,11,JC)=ZABSCU(JL,11,JCP1)                            LW.462   
     *                 +ZABSLY(JL,11,JC)  * ZFACTC1(JL)                    LW.463   
c                                                                          LW.464   
            ZABSCU(JL,12,JC)=ZABSCU(JL,12,JCP1)+ZABSLY(JL,12,JC)           LW.465   
            ZABSCU(JL,13,JC)=ZABSCU(JL,13,JCP1)+ZABSLY(JL,13,JC)           LW.466   
            ZABSCU(JL,32,JC)=ZABSCU(JL,32,JCP1)+ZABSLY(JL,32,JC)           LW.467   
            ZABSCU(JL, 7,JC)=ZABSCU(JL, 7,JCP1)+ZABSLY(JL, 7,JC)           LW.468   
            ZABSCU(JL,34,JC)=ZABSCU(JL,34,JCP1)+ZABSLY(JL, 8,JC)           LW.469   
            ZABSCU(JL,33,JC)=ZABSCU(JL,33,JCP1)+ZABSLY(JL,33,JC)           LW.470   
c                                                                          LW.471   
            ZABSCU(JL,1,JC)=ZABSCU(JL,1,JCP1)                              LW.472   
     *                +ZABSLY(JL,6,JC)  * ZEPSH1(JL)                       LW.473   
            ZABSCU(JL,2,JC)=ZABSCU(JL,2,JCP1)                              LW.474   
     *                +ZABSLY(JL,6,JC)  * ZEPSH2(JL)                       LW.475   
            ZABSCU(JL,3,JC)=ZABSCU(JL,3,JCP1)                              LW.476   
     *                +ZABSLY(JL,6,JC)  * ZEPSH5(JL)                       LW.477   
            ZABSCU(JL,4,JC)=ZABSCU(JL,4,JCP1)                              LW.478   
     *                +ZABSLY(JL,6,JC)  * ZEPSH3(JL)                       LW.479   
            ZABSCU(JL,5,JC)=ZABSCU(JL,5,JCP1)                              LW.480   
     *                +ZABSLY(JL,6,JC)  * ZEPSH4(JL)                       LW.481   
                                                                           LW.482   
            ZABSCU(JL,29,JC)=ZABSCU(JL,29,JCP1)                            LW.483   
     *                +ZABSLY(JL,6,JC)  * ZEPSH7(JL)                       LW.484   
            ZABSCU(JL,30,JC)=ZABSCU(JL,30,JCP1)                            LW.485   
     *                +ZABSLY(JL,6,JC)  * ZEPSH8(JL)                       LW.486   
            ZABSCU(JL,31,JC)=ZABSCU(JL,31,JCP1)                            LW.487   
     *                +ZABSLY(JL,6,JC)  * ZEPSH9(JL)                       LW.488   
                                                                           LW.489   
            ZABSCU(JL,6,JC)=ZABSCU(JL,6,JCP1)                              LW.490   
     *                +ZABSLY(JL,6,JC)  * ZEPSH6(JL)                       LW.491   
                                                                           LW.492   
            ZABSCU(JL,14,JC)=ZABSCU(JL,14,JCP1)                            LW.493   
     *                +ZUAER(JL,1)    * ZDUC(JL,JC)*DIFF                   LW.494   
            ZABSCU(JL,15,JC)=ZABSCU(JL,15,JCP1)                            LW.495   
     *                +ZUAER(JL,2)    * ZDUC(JL,JC)*DIFF                   LW.496   
            ZABSCU(JL,16,JC)=ZABSCU(JL,16,JCP1)                            LW.497   
     *                +ZUAER(JL,3)    * ZDUC(JL,JC)*DIFF                   LW.498   
            ZABSCU(JL,17,JC)=ZABSCU(JL,17,JCP1)                            LW.499   
     *                +ZUAER(JL,4)    * ZDUC(JL,JC)*DIFF                   LW.500   
            ZABSCU(JL,18,JC)=ZABSCU(JL,18,JCP1)                            LW.501   
     *                +ZUAER(JL,5)    * ZDUC(JL,JC)*DIFF                   LW.502   
                                                                           LW.503   
           ZABSCU(JL,19,JC)=ZABSCU(JL,19,JCP1)                             LW.504   
     *         +ZABSLY(JL,8,JC)*RCH4/PCCO2/227.2159*ZPHM6(JL)*DIFF         LW.505   
            ZABSCU(JL,20,JC)=ZABSCU(JL,20,JCP1)                            LW.506   
     *               +ZABSLY(JL,9,JC)*RCH4/PCCO2*ZPSM6(JL)*DIFF            LW.507   
            ZABSCU(JL,21,JC)=ZABSCU(JL,21,JCP1)                            LW.508   
     *         +ZABSLY(JL,8,JC)*RN2O/PCCO2/227.2159*ZPHN6(JL)*DIFF         LW.509   
            ZABSCU(JL,22,JC)=ZABSCU(JL,22,JCP1)                            LW.510   
     *               +ZABSLY(JL,9,JC)*RN2O/PCCO2*ZPSN6(JL)*DIFF            LW.511   
                                                                           LW.512   
            ZABSCU(JL,23,JC)=ZABSCU(JL,23,JCP1)                            LW.513   
     *               +ZABSLY(JL,8,JC)*RCFC11/PCCO2/227.2159  *DIFF         LW.514   
           ZABSCU(JL,24,JC)=ZABSCU(JL,24,JCP1)                             LW.515   
     *               +ZABSLY(JL,8,JC)*RCFC12/PCCO2/227.2159  *DIFF         LW.516   
                                                                           LW.517   
            ZABSCU(JL,8,JC)=ZABSCU(JL,8,JCP1)                              LW.518   
     *               +ZABSLY(JL,9,JC)*ZEPSC3(JL)*DIFF                      LW.519   
            ZABSCU(JL,9,JC)=ZABSCU(JL,9,JCP1)                              LW.520   
     *               +ZABSLY(JL,9,JC)*ZEPSC3(JL)*DIFF                      LW.521   
 1523     CONTINUE                                                         LW.522   
 1524   CONTINUE                                                           LW.523   
 159  CONTINUE                                                             LW.524   
C                                                                          LW.525   
C*         1.6     PLANCK FUNCTIONS AND GRADIENTS                          LW.526   
C                  ------------------------------                          LW.527   
C                                                                          LW.528   
 160  CONTINUE                                                             LW.529   
                                                                           LW.530   
      DO 168 JNU=1,NINT                                                    LW.531   
C                                                                          LW.532   
C*         1.6.1   LEVELS FROM SURFACE TO KFLEV                            LW.533   
C                  ----------------------------                            LW.534   
C                                                                          LW.535   
 1610   CONTINUE                                                           LW.536   
                                                                           LW.537   
        DO 1612 JK = 1 , KFLEV                                             LW.538   
          DO 1611 JL = 1 , KDLON                                           LW.539   
            ZTI(JL,JK)=(PTL(JL,JK)-TSTAND)/TSTAND                          LW.540   
            ZRES(JL) = XP(1,JNU)+ZTI(JL,JK)*(XP(2,JNU)+ZTI(JL,JK)          LW.541   
     *      *(XP(3,JNU)                                                    LW.542   
     *     +ZTI(JL,JK)*(XP(4,JNU)+ZTI(JL,JK)*(XP(5,JNU)+ZTI(JL,JK)         LW.543   
     *      *(XP(6,JNU)                                                    LW.544   
     *       )))))                                                         LW.545   
            ZBINT(JL,JK)=ZBINT(JL,JK)+ZRES(JL)                             LW.546   
            PB(JL,JNU,JK)= ZRES(JL)                                        LW.547   
            ZBLEV(JL,JK) = ZRES(JL)                                        LW.548   
            ZTI2(JL)=(PTAVE(JL,JK)-TSTAND)/TSTAND                          LW.549   
            ZRES2(JL)=XP(1,JNU)+ZTI2(JL)*(XP(2,JNU)+ZTI2(JL)*(XP(3,JNU)    LW.550   
     *     +ZTI2(JL)*(XP(4,JNU)+ZTI2(JL)*(XP(5,JNU)+ZTI2(JL)*(XP(6,JNU)    LW.551   
     *       )))))                                                         LW.552   
            ZBLAY(JL,JK) = ZRES2(JL)                                       LW.553   
 1611     CONTINUE                                                         LW.554   
 1612   CONTINUE                                                           LW.555   
C                                                                          LW.556   
C*         1.6.2   TOP OF THE ATMOSPHERE AND SURFACE                       LW.557   
C                  ---------------------------------                       LW.558   
C                                                                          LW.559   
 1620   CONTINUE                                                           LW.560   
                                                                           LW.561   
        DO 1621 JL = 1 , KDLON                                             LW.562   
          ZTI(JL,JK)=(PTL(JL,KFLEV+1)-TSTAND)/TSTAND                       LW.563   
          ZTI2(JL) = (PTL(JL,1) + PDT0(JL) - TSTAND) / TSTAND              LW.564   
          ZRES(JL) = XP(1,JNU)+ZTI(JL,JK)*(XP(2,JNU)+ZTI(JL,JK)            LW.565   
     *     *(XP(3,JNU)                                                     LW.566   
     *     +ZTI(JL,JK)*(XP(4,JNU)+ZTI(JL,JK)*(XP(5,JNU)+ZTI(JL,JK)         LW.567   
     *     *(XP(6,JNU)                                                     LW.568   
     *        )))))                                                        LW.569   
          ZRES2(JL) = XP(1,JNU)+ZTI2(JL)*(XP(2,JNU)+ZTI2(JL)*(XP(3,JNU)    LW.570   
     *     +ZTI2(JL)*(XP(4,JNU)+ZTI2(JL)*(XP(5,JNU)+ZTI2(JL)*(XP(6,JNU)    LW.571   
     *        )))))                                                        LW.572   
          ZBINT(JL,KFLEV+1) = ZBINT(JL,KFLEV+1)+ZRES(JL)                   LW.573   
          PB(JL,JNU,KFLEV+1)= ZRES(JL)                                     LW.574   
          ZBLEV(JL,KFLEV+1) = ZRES(JL)                                     LW.575   
          ZBTOP(JL,JNU) = ZRES(JL)                                         LW.576   
          ZBSUR(JL,JNU) = ZRES2(JL)                                        LW.577   
          ZBSUIN(JL) = ZBSUIN(JL) + ZRES2(JL)                              LW.578   
 1621   CONTINUE                                                           LW.579   
C                                                                          LW.580   
C*         1.6.3   GRADIENTS IN SUB-LAYERS                                 LW.581   
C                  -----------------------                                 LW.582   
C                                                                          LW.583   
 1630   CONTINUE                                                           LW.584   
                                                                           LW.585   
        DO 1632 JK = 1 , KFLEV                                             LW.586   
          JK2 = 2 * JK                                                     LW.587   
          JK1 = JK2 - 1                                                    LW.588   
          DO 1631 JL = 1 , KDLON                                           LW.589   
            ZDBSL(JL,JNU,JK1) = ZBLAY(JL,JK  ) - ZBLEV(JL,JK)              LW.590   
            ZDBSL(JL,JNU,JK2) = ZBLEV(JL,JK+1) - ZBLAY(JL,JK)              LW.591   
 1631     CONTINUE                                                         LW.592   
 1632   CONTINUE                                                           LW.593   
 168  CONTINUE                                                             LW.594   
C                                                                          LW.595   
C*         1.7     INITIALIZE TRANSMISSION FUNCTIONS                       LW.596   
C                  ---------------------------------                       LW.597   
C                                                                          LW.598   
 170  CONTINUE                                                             LW.599   
                                                                           LW.600   
! changing - marc 30/3/10                                                  LW.601   
c      DO 171 JL = 1 , NTRA*KDLON                                          LW.602   
c        ZTT (JL,1) = 1.0                                                  LW.603   
c        ZTT1(JL,1) = 1.0                                                  LW.604   
c        ZTT2(JL,1) = 1.0                                                  LW.605   
c 171  CONTINUE                                                            LW.606   
      ZTT (:,:) = 1.0                                                      LW.607   
      ZTT1(:,:) = 1.0                                                      LW.608   
      ZTT2(:,:) = 1.0                                                      LW.609   
C                                                                          LW.610   
C     --------------------------------------------------------             LW.611   
C                                                                          LW.612   
C*         2.      VERTICAL INTEGRATION                                    LW.613   
C                  --------------------                                    LW.614   
C                                                                          LW.615   
 200  CONTINUE                                                             LW.616   
C                                                                          LW.617   
C*         2.1     CONTRIBUTION FROM ADJACENT LAYERS                       LW.618   
C                  ---------------------------------                       LW.619   
C                                                                          LW.620   
 210  CONTINUE                                                             LW.621   
                                                                           LW.622   
      DO 215 JK = 1 , KFLEV                                                LW.623   
C                                                                          LW.624   
C*         2.1.1   DOWNWARD LAYERS                                         LW.625   
C                  ---------------                                         LW.626   
C                                                                          LW.627   
 2110   CONTINUE                                                           LW.628   
                                                                           LW.629   
        KM12 = 2 * (JK - 1)                                                LW.630   
        KND = (JK - 1) * NG1P1 + 1                                         LW.631   
        KNU = JK * NG1P1 + 1                                               LW.632   
                                                                           LW.633   
        DO 2111 JL = 1 , KDLON                                             LW.634   
          ZGLAYD(JL) = 0.                                                  LW.635   
          ZGLAYU(JL) = 0.                                                  LW.636   
 2111   CONTINUE                                                           LW.637   
                                                                           LW.638   
        DO 213 IG = 1 , NG1                                                LW.639   
          KBS = KM12 + IG                                                  LW.640   
          KDD = KND + IG                                                   LW.641   
! changing - marc 30/3/10                                                  LW.642   
c          DO 2112 JL = 1 , NUAER*KDLON                                    LW.643   
c            ZUU(JL,1) = ZABSCU(JL,1,KND) - ZABSCU(JL,1,KDD)               LW.644   
c 2112     CONTINUE                                                        LW.645   
          DO I=1,NUAER                                                     LW.646   
             DO JL=1,KDLON                                                 LW.647   
                ZUU(JL,I) = ZABSCU(JL,I,KND) - ZABSCU(JL,I,KDD)            LW.648   
             ENDDO                                                         LW.649   
          ENDDO                                                            LW.650   
C                                                                          LW.651   
          CALL LWTT0(KDLON,KRLST,KFLEV,ITASK,                              LW.652   
     *               PGA(1,1,1,JK),PGB(1,1,1,JK),                          LW.653   
     *               PPTY(1,1,JK), PETY(1,1,JK))                           LW.654   
                                                                           LW.655   
          DO 2114 JL = 1 , KDLON                                           LW.656   
            ZWTR=ZDBSL(JL,1,KBS)*ZTT(JL,1)          *ZTT(JL,10)            LW.657   
     *          +ZDBSL(JL,2,KBS)*ZTT(JL,2)*ZTT(JL,7)*ZTT(JL,11)            LW.658   
     *          +ZDBSL(JL,3,KBS)*ZTT(JL,4)*ZTT(JL,8)*ZTT(JL,12)            LW.659   
     *          +ZDBSL(JL,4,KBS)*ZTT(JL,5)*ZTT(JL,9)*ZTT(JL,13)            LW.660   
     *          +ZDBSL(JL,5,KBS)*ZTT(JL,3)          *ZTT(JL,14)            LW.661   
     *          +ZDBSL(JL,6,KBS)*ZTT(JL,6)          *ZTT(JL,15)            LW.662   
            ZGLAYD(JL)=ZGLAYD(JL)+ZWTR*WG1(IG)                             LW.663   
 2114     CONTINUE                                                         LW.664   
C                                                                          LW.665   
C*         2.1.2   DOWNWARD LAYERS                                         LW.666   
C                  ---------------                                         LW.667   
C                                                                          LW.668   
 2120     CONTINUE                                                         LW.669   
                                                                           LW.670   
! changing - marc 30/3/10                                                  LW.671   
c          DO 2121 JL = 1 , NUAER*KDLON                                    LW.672   
c            ZUU(JL,1) = ZABSCU(JL,1,KDD) - ZABSCU(JL,1,KNU)               LW.673   
c 2121     CONTINUE                                                        LW.674   
         DO I=1,NUAER                                                      LW.675   
            DO JL=1,KDLON                                                  LW.676   
               ZUU(JL,I) = ZABSCU(JL,I,KDD) - ZABSCU(JL,I,KNU)             LW.677   
            ENDDO                                                          LW.678   
         ENDDO                                                             LW.679   
                                                                           LW.680   
          CALL LWTT0(KDLON,KRLST,KFLEV,ITASK,                              LW.681   
     *               PGA(1,1,1,JK),PGB(1,1,1,JK),                          LW.682   
     *               PPTY(1,1,JK), PETY(1,1,JK))                           LW.683   
                                                                           LW.684   
          DO 2123 JL = 1 , KDLON                                           LW.685   
            ZWTR=ZDBSL(JL,1,KBS)*ZTT(JL,1)          *ZTT(JL,10)            LW.686   
     *          +ZDBSL(JL,2,KBS)*ZTT(JL,2)*ZTT(JL,7)*ZTT(JL,11)            LW.687   
     *          +ZDBSL(JL,3,KBS)*ZTT(JL,4)*ZTT(JL,8)*ZTT(JL,12)            LW.688   
     *          +ZDBSL(JL,4,KBS)*ZTT(JL,5)*ZTT(JL,9)*ZTT(JL,13)            LW.689   
     *          +ZDBSL(JL,5,KBS)*ZTT(JL,3)          *ZTT(JL,14)            LW.690   
     *          +ZDBSL(JL,6,KBS)*ZTT(JL,6)          *ZTT(JL,15)            LW.691   
            ZGLAYU(JL)=ZGLAYU(JL)+ZWTR*WG1(IG)                             LW.692   
 2123     CONTINUE                                                         LW.693   
 213    CONTINUE                                                           LW.694   
                                                                           LW.695   
        DO 214 JL = 1 , KDLON                                              LW.696   
          ZADJD(JL,JK) = ZGLAYD(JL)                                        LW.697   
          ZCNTRB(JL,JK,JK+1  ) = ZGLAYD(JL)                                LW.698   
          ZADJU(JL,JK+1) = ZGLAYU(JL)                                      LW.699   
          ZCNTRB(JL,JK+1,JK  ) = ZGLAYU(JL)                                LW.700   
          ZCNTRB(JL,JK  ,JK  ) = 0.0                                       LW.701   
 214    CONTINUE                                                           LW.702   
 215  CONTINUE                                                             LW.703   
C                                                                          LW.704   
C                                                                          LW.705   
      DO 218 JK = 1 , KFLEV                                                LW.706   
        JK2 = 2 * JK                                                       LW.707   
        JK1 = JK2 - 1                                                      LW.708   
! changing - marc 8/3/10                                                   LW.709   
!        DO 216 JL = 1 , NINT*KDLON                                        LW.710   
!          ZDBDT(JL,1,JK) = ZDBSL(JL,1,JK1) + ZDBSL(JL,1,JK2)              LW.711   
! 216    CONTINUE                                                          LW.712   
        DO I=1,NINT                                                        LW.713   
           DO JL=1,KDLON                                                   LW.714   
               ZDBDT(JL,I,JK) = ZDBSL(JL,I,JK1) + ZDBSL(JL,I,JK2)          LW.715   
            ENDDO                                                          LW.716   
         ENDDO                                                             LW.717   
                                                                           LW.718   
 218  CONTINUE                                                             LW.719   
C                                                                          LW.720   
C*         2.2     CONTRIBUTION FROM DISTANT LAYERS                        LW.721   
C                  ---------------------------------                       LW.722   
C                                                                          LW.723   
 220  CONTINUE                                                             LW.724   
C                                                                          LW.725   
C*         2.2.1   DISTANT AND ABOVE LAYERS                                LW.726   
C                  ------------------------                                LW.727   
C                                                                          LW.728   
 2210 CONTINUE                                                             LW.729   
C                                                                          LW.730   
C*         2.2.2   FIRST UPPER LEVEL                                       LW.731   
C                  -----------------                                       LW.732   
C                                                                          LW.733   
 2220 CONTINUE                                                             LW.734   
                                                                           LW.735   
      DO 225 JK = 1 , KFLEV-1                                              LW.736   
        JKP1=JK+1                                                          LW.737   
        KN = (JK-1)*NG1P1+1                                                LW.738   
        KD1= KN+NG1P1                                                      LW.739   
                                                                           LW.740   
! changing - marc 30/3/10                                                  LW.741   
c        DO 2222 JL = 1 , NUAER*KDLON                                      LW.742   
c          ZUU(JL,1) = ZABSCU(JL,1,KN) - ZABSCU(JL,1,KD1)                  LW.743   
c 2222   CONTINUE                                                          LW.744   
          DO I=1,NUAER                                                     LW.745   
             DO JL=1,KDLON                                                 LW.746   
               ZUU(JL,I) = ZABSCU(JL,I,KN) - ZABSCU(JL,I,KD1)              LW.747   
             ENDDO                                                         LW.748   
          ENDDO                                                            LW.749   
                                                                           LW.750   
        CALL LWTT0(KDLON,KRLST,KFLEV,ITASK,                                LW.751   
     *             PGA(1,1,1,JK),PGB(1,1,1,JK),                            LW.752   
     *             PPTY(1,1,JK), PETY(1,1,JK))                             LW.753   
                                                                           LW.754   
! changing - marc 30/3/10                                                  LW.755   
c        DO 2224 JL = 1 , NTRAER*KDLON                                     LW.756   
c          ZTT1(JL,1)=ZTT(JL,1)                                            LW.757   
c 2224   CONTINUE                                                          LW.758   
        DO I=1,NTRAER                                                      LW.759   
           DO JL=1,KDLON                                                   LW.760   
              ZTT1(JL,I)=ZTT(JL,I)                                         LW.761   
           ENDDO                                                           LW.762   
        ENDDO                                                              LW.763   
C                                                                          LW.764   
C*         2.2.3   HIGHER UP                                               LW.765   
C                  ---------                                               LW.766   
C                                                                          LW.767   
 2230   CONTINUE                                                           LW.768   
                                                                           LW.769   
        DO 224 JKJ=JKP1,KFLEV                                              LW.770   
          KJP1=JKJ+1                                                       LW.771   
          KD2= JKJ  *NG1P1+1                                               LW.772   
                                                                           LW.773   
! changing - marc 30/3/10                                                  LW.774   
c          DO 2232 JL = 1 , NUAER*KDLON                                    LW.775   
c            ZUU(JL,1) = ZABSCU(JL,1,KN) - ZABSCU(JL,1,KD2)                LW.776   
c 2232     CONTINUE                                                        LW.777   
          DO I=1,NUAER                                                     LW.778   
             DO JL=1,KDLON                                                 LW.779   
                ZUU(JL,I) = ZABSCU(JL,I,KN) - ZABSCU(JL,I,KD2)             LW.780   
             ENDDO                                                         LW.781   
          ENDDO                                                            LW.782   
                                                                           LW.783   
          CALL LWTT0(KDLON,KRLST,KFLEV,ITASK,                              LW.784   
     *               PGA(1,1,1,JKJ),PGB(1,1,1,JKJ),                        LW.785   
     *               PPTY(1,1,JKJ), PETY(1,1,JKJ))                         LW.786   
! changing - marc 30/3/10                                                  LW.787   
c          DO 2234 JL = 1 , NTRAER*KDLON                                   LW.788   
c            ZTT2(JL,1)=(ZTT1(JL,1)+ZTT(JL,1))*0.5                         LW.789   
c            ZTT1(JL,1)=ZTT(JL,1)                                          LW.790   
c 2234     CONTINUE                                                        LW.791   
          DO I=1,NTRAER                                                    LW.792   
             DO JL=1,KDLON                                                 LW.793   
                ZTT2(JL,I)=(ZTT1(JL,I)+ZTT(JL,I))*0.5                      LW.794   
                ZTT1(JL,I)=ZTT(JL,I)                                       LW.795   
             ENDDO                                                         LW.796   
          ENDDO                                                            LW.797   
                                                                           LW.798   
          DO 2236 JL = 1 , KDLON                                           LW.799   
            ZWW=ZDBDT(JL,1,JKJ)*ZTT2(JL,1)           *ZTT2(JL,10)          LW.800   
     *        + ZDBDT(JL,2,JKJ)*ZTT2(JL,2)*ZTT2(JL,7)*ZTT2(JL,11)          LW.801   
     *        + ZDBDT(JL,3,JKJ)*ZTT2(JL,4)*ZTT2(JL,8)*ZTT2(JL,12)          LW.802   
     *        + ZDBDT(JL,4,JKJ)*ZTT2(JL,5)*ZTT2(JL,9)*ZTT2(JL,13)          LW.803   
     *        + ZDBDT(JL,5,JKJ)*ZTT2(JL,3)           *ZTT2(JL,14)          LW.804   
     *        + ZDBDT(JL,6,JKJ)*ZTT2(JL,6)           *ZTT2(JL,15)          LW.805   
            ZGLAYD(JL)=ZWW                                                 LW.806   
            ZDZXDG=ZGLAYD(JL)                                              LW.807   
            ZDISTD(JL,JK)=ZDISTD(JL,JK)+ZDZXDG                             LW.808   
            ZCNTRB(JL,JK,KJP1)=ZDZXDG                                      LW.809   
 2236     CONTINUE                                                         LW.810   
 224    CONTINUE                                                           LW.811   
 225  CONTINUE                                                             LW.812   
C                                                                          LW.813   
C*         2.2.4   DISTANT AND BELOW LAYERS                                LW.814   
C                  ------------------------                                LW.815   
C                                                                          LW.816   
 2240 CONTINUE                                                             LW.817   
C                                                                          LW.818   
C*         2.2.5   FIRST LOWER LEVEL                                       LW.819   
C                  -----------------                                       LW.820   
C                                                                          LW.821   
 2250 CONTINUE                                                             LW.822   
                                                                           LW.823   
      DO 228 JK=3,KFLEV+1                                                  LW.824   
        KM1= JK-1                                                          LW.825   
        KJ=JK-2                                                            LW.826   
        KN = KM1*NG1P1+1                                                   LW.827   
        KU1= KN-NG1P1                                                      LW.828   
                                                                           LW.829   
! changing - marc 30/3/10                                                  LW.830   
c        DO 2252 JL = 1 , NUAER*KDLON                                      LW.831   
c          ZUU(JL,1) = ZABSCU(JL,1,KU1) - ZABSCU(JL,1,KN)                  LW.832   
c 2252   CONTINUE                                                          LW.833   
        DO I=1,NUAER                                                       LW.834   
           DO JL=1,KDLON                                                   LW.835   
              ZUU(JL,I) = ZABSCU(JL,I,KU1) - ZABSCU(JL,I,KN)               LW.836   
           ENDDO                                                           LW.837   
        ENDDO                                                              LW.838   
                                                                           LW.839   
        CALL LWTT0(KDLON,KRLST,KFLEV,ITASK,                                LW.840   
     *             PGA(1,1,1,KJ),PGB(1,1,1,KJ),                            LW.841   
     *             PPTY(1,1,KJ), PETY(1,1,KJ))                             LW.842   
                                                                           LW.843   
                                                                           LW.844   
! changing - marc 30/3/10                                                  LW.845   
c        DO 2254 JL = 1 , NTRAER*KDLON                                     LW.846   
c          ZTT1(JL,1)=ZTT(JL,1)                                            LW.847   
c 2254   CONTINUE                                                          LW.848   
        DO I=1,NTRAER                                                      LW.849   
           DO JL=1,KDLON                                                   LW.850   
              ZTT1(JL,I)=ZTT(JL,I)                                         LW.851   
           ENDDO                                                           LW.852   
        ENDDO                                                              LW.853   
C                                                                          LW.854   
C                                                                          LW.855   
C*         2.2.6   DOWN BELOW                                              LW.856   
C                  ----------                                              LW.857   
C                                                                          LW.858   
 2260   CONTINUE                                                           LW.859   
                                                                           LW.860   
        DO 227 JLK=1,JK-2                                                  LW.861   
          JKL=KM1-JLK                                                      LW.862   
          KU2=(JKL-1)*NG1P1+1                                              LW.863   
                                                                           LW.864   
! changing - marc 30/3/10                                                  LW.865   
c          DO 2262 JL = 1 , NUAER*KDLON                                    LW.866   
c            ZUU(JL,1) = ZABSCU(JL,1,KU2) - ZABSCU(JL,1,KN)                LW.867   
c 2262     CONTINUE                                                        LW.868   
        DO I=1,NUAER                                                       LW.869   
           DO JL=1,KDLON                                                   LW.870   
              ZUU(JL,I) = ZABSCU(JL,I,KU2) - ZABSCU(JL,I,KN)               LW.871   
           ENDDO                                                           LW.872   
        ENDDO                                                              LW.873   
                                                                           LW.874   
          CALL LWTT0(KDLON,KRLST,KFLEV,ITASK,                              LW.875   
     *               PGA(1,1,1,JKL),PGB(1,1,1,JKL),                        LW.876   
     *               PPTY(1,1,JKL), PETY(1,1,JKL))                         LW.877   
                                                                           LW.878   
! changing - marc 30/3/10                                                  LW.879   
c          DO 2264 JL = 1 , NTRAER*KDLON                                   LW.880   
c            ZTT2(JL,1)=(ZTT1(JL,1)+ZTT(JL,1))*0.5                         LW.881   
c            ZTT1(JL,1)=ZTT(JL,1)                                          LW.882   
c 2264     CONTINUE                                                        LW.883   
          DO I=1,NTRAER                                                    LW.884   
             DO JL=1,KDLON                                                 LW.885   
                ZTT2(JL,I)=(ZTT1(JL,I)+ZTT(JL,I))*0.5                      LW.886   
                ZTT1(JL,I)=ZTT(JL,I)                                       LW.887   
             ENDDO                                                         LW.888   
          ENDDO                                                            LW.889   
                                                                           LW.890   
          DO 2266 JL = 1 , KDLON                                           LW.891   
            ZWW=ZDBDT(JL,1,JKL)*ZTT2(JL,1)           *ZTT2(JL,10)          LW.892   
     *        + ZDBDT(JL,2,JKL)*ZTT2(JL,2)*ZTT2(JL,7)*ZTT2(JL,11)          LW.893   
     *        + ZDBDT(JL,3,JKL)*ZTT2(JL,4)*ZTT2(JL,8)*ZTT2(JL,12)          LW.894   
     *        + ZDBDT(JL,4,JKL)*ZTT2(JL,5)*ZTT2(JL,9)*ZTT2(JL,13)          LW.895   
     *        + ZDBDT(JL,5,JKL)*ZTT2(JL,3)           *ZTT2(JL,14)          LW.896   
     *        + ZDBDT(JL,6,JKL)*ZTT2(JL,6)           *ZTT2(JL,15)          LW.897   
            ZGLAYU(JL)=ZWW                                                 LW.898   
            ZDZXMG=ZGLAYU(JL)                                              LW.899   
            ZDISTU(JL,JK)=ZDISTU(JL,JK)+ZDZXMG                             LW.900   
            ZCNTRB(JL,JK,JKL)=ZDZXMG                                       LW.901   
 2266     CONTINUE                                                         LW.902   
 227    CONTINUE                                                           LW.903   
 228  CONTINUE                                                             LW.904   
C                                                                          LW.905   
C*         2.3     EXCHANGE WITH TOP OF THE ATMOSPHERE                     LW.906   
C                  -----------------------------------                     LW.907   
C                                                                          LW.908   
 230  CONTINUE                                                             LW.909   
                                                                           LW.910   
      DO 235 JK = 1 , KFLEV                                                LW.911   
        KN=(JK-1)*NG1P1+1                                                  LW.912   
                                                                           LW.913   
! changing - marc 30/3/10                                                  LW.914   
c        DO 231 JL = 1 , NUAER*KDLON                                       LW.915   
c          ZUU(JL,1) = ZABSCU(JL,1,KN)                                     LW.916   
c 231    CONTINUE                                                          LW.917   
        DO I=1,NUAER                                                       LW.918   
           DO JL=1,KDLON                                                   LW.919   
              ZUU(JL,I) = ZABSCU(JL,I,KN)                                  LW.920   
           ENDDO                                                           LW.921   
        ENDDO                                                              LW.922   
                                                                           LW.923   
        CALL LWTT1(KDLON,KRLST,KFLEV,ITASK,PGATOP,PGBTOP,                  LW.924   
     *             PTYTOP,ETYTOP)                                          LW.925   
                                                                           LW.926   
        DO 234 JL = 1 , KDLON                                              LW.927   
          ZCNTOP=ZBTOP(JL,1)*ZTT(JL,1)          *ZTT(JL,10)                LW.928   
     *         + ZBTOP(JL,2)*ZTT(JL,2)*ZTT(JL,7)*ZTT(JL,11)                LW.929   
     *         + ZBTOP(JL,3)*ZTT(JL,4)*ZTT(JL,8)*ZTT(JL,12)                LW.930   
     *         + ZBTOP(JL,4)*ZTT(JL,5)*ZTT(JL,9)*ZTT(JL,13)                LW.931   
     *         + ZBTOP(JL,5)*ZTT(JL,3)          *ZTT(JL,14)                LW.932   
     *         + ZBTOP(JL,6)*ZTT(JL,6)          *ZTT(JL,15)                LW.933   
          ZFD(JL,JK)=ZCNTOP-ZBINT(JL,JK)-ZDISTD(JL,JK)-ZADJD(JL,JK)        LW.934   
          ZFDN(JL,JK)=ZFD(JL,JK)                                           LW.935   
          PFLUC(JL,2,JK)=ZFD(JL,JK)                                        LW.936   
 234    CONTINUE                                                           LW.937   
 235  CONTINUE                                                             LW.938   
                                                                           LW.939   
      JK = KFLEV+1                                                         LW.940   
                                                                           LW.941   
      DO 236 JL = 1 , KDLON                                                LW.942   
        ZCNTOP= ZBTOP(JL,1)                                                LW.943   
     *        + ZBTOP(JL,2)                                                LW.944   
     *        + ZBTOP(JL,3)                                                LW.945   
     *        + ZBTOP(JL,4)                                                LW.946   
     *        + ZBTOP(JL,5)                                                LW.947   
     *        + ZBTOP(JL,6)                                                LW.948   
        ZFD(JL,JK)=ZCNTOP-ZBINT(JL,JK)-ZDISTD(JL,JK)-ZADJD(JL,JK)          LW.949   
        ZFDN(JL,JK)=ZFD(JL,JK)                                             LW.950   
        PFLUC(JL,2,JK)=ZFD(JL,JK)                                          LW.951   
 236  CONTINUE                                                             LW.952   
C                                                                          LW.953   
C                                                                          LW.954   
C*         2.4     COOLING-TO-SPACE OF LAYERS ABOVE 0.0001 HPA             LW.955   
C                  ---------------------------------------                 LW.956   
C                                                                          LW.957   
 240  CONTINUE                                                             LW.958   
C                                                                          LW.959   
C                                                                          LW.960   
C*         2.4.1   INITIALIZATION                                          LW.961   
C                  --------------                                          LW.962   
C                                                                          LW.963   
 2410 CONTINUE                                                             LW.964   
C                                                                          LW.965   
      JLIM = KFLEV                                                         LW.966   
C                                                                          LW.967   
      DO 2412 JK = KFLEV,1,-1                                              LW.968   
      IF(PPMB(1,JK).LT.0.0001) THEN                                        LW.969   
         JLIM=JK                                                           LW.970   
      ENDIF                                                                LW.971   
 2412 CONTINUE                                                             LW.972   
      KLIM=JLIM                                                            LW.973   
C                                                                          LW.974   
! changing - marc 30/3/10                                                  LW.975   
c      DO 2414 JL = 1 , NTRAER*KDLON                                       LW.976   
c        ZTT1(JL,1)=1.0                                                    LW.977   
c 2414 CONTINUE                                                            LW.978   
      DO I=1,NTRAER                                                        LW.979   
         DO JL=1,KDLON                                                     LW.980   
            ZTT1(JL,I)=1.0                                                 LW.981   
         ENDDO                                                             LW.982   
      ENDDO                                                                LW.983   
C                                                                          LW.984   
C*         2.4.2   LOOP OVER LAYERS ABOVE 0.0001 HPA                       LW.985   
C                  -----------------------------                           LW.986   
C                                                                          LW.987   
 2420 CONTINUE                                                             LW.988   
C                                                                          LW.989   
      DO 2427 JSTRA = KFLEV,JLIM,-1                                        LW.990   
      JSTRU=(JSTRA-1)*NG1P1+1                                              LW.991   
C                                                                          LW.992   
! changing - marc 30/3/10                                                  LW.993   
c      DO 2422 JL = 1 , NUAER*KDLON                                        LW.994   
c        ZUU(JL,1) = ZABSCU(JL,1,JSTRU)                                    LW.995   
c 2422 CONTINUE                                                            LW.996   
        DO I=1,NUAER                                                       LW.997   
           DO JL=1,KDLON                                                   LW.998   
              ZUU(JL,I) = ZABSCU(JL,I,JSTRU)                               LW.999   
           ENDDO                                                           LW.1000  
        ENDDO                                                              LW.1001  
C                                                                          LW.1002  
        CALL LWTT1(KDLON,KRLST,KFLEV,ITASK,PGATOP,PGBTOP,                  LW.1003  
     *             PTYTOP,ETYTOP)                                          LW.1004  
c                                                                          LW.1005  
      DO 2424 JL = 1, KDLON                                                LW.1006  
      ZCTSTR =                                                             LW.1007  
     1 (PB(JL,1,JSTRA)+PB(JL,1,JSTRA+1))                                   LW.1008  
     1     *(ZTT1(JL,1)           *ZTT1(JL,10)                             LW.1009  
     1     - ZTT (JL,1)           *ZTT (JL,10))                            LW.1010  
     2+(PB(JL,2,JSTRA)+PB(JL,2,JSTRA+1))                                   LW.1011  
     2     *(ZTT1(JL,2)*ZTT1(JL,7)*ZTT1(JL,11)                             LW.1012  
     2     - ZTT (JL,2)*ZTT (JL,7)*ZTT (JL,11))                            LW.1013  
     3+(PB(JL,3,JSTRA)+PB(JL,3,JSTRA+1))                                   LW.1014  
     3     *(ZTT1(JL,4)*ZTT1(JL,8)*ZTT1(JL,12)                             LW.1015  
     3     - ZTT (JL,4)*ZTT (JL,8)*ZTT (JL,12))                            LW.1016  
     4+(PB(JL,4,JSTRA)+PB(JL,4,JSTRA+1))                                   LW.1017  
     4     *(ZTT1(JL,5)*ZTT1(JL,9)*ZTT1(JL,13)                             LW.1018  
     4     - ZTT (JL,5)*ZTT (JL,9)*ZTT (JL,13))                            LW.1019  
     5+(PB(JL,5,JSTRA)+PB(JL,5,JSTRA+1))                                   LW.1020  
     5     *(ZTT1(JL,3)           *ZTT1(JL,14)                             LW.1021  
     5     - ZTT (JL,3)           *ZTT (JL,14))                            LW.1022  
     6+(PB(JL,6,JSTRA)+PB(JL,6,JSTRA+1))                                   LW.1023  
     6     *(ZTT1(JL,6)           *ZTT1(JL,15)                             LW.1024  
     6     - ZTT (JL,6)           *ZTT (JL,15))                            LW.1025  
      PCTS(JL,JSTRA)=ZCTSTR*0.5                                            LW.1026  
 2424 CONTINUE                                                             LW.1027  
! changing - marc 30/3/10                                                  LW.1028  
c      DO 2426 JL = 1 , NTRAER*KDLON                                       LW.1029  
c        ZTT1(JL,1)=ZTT(JL,1)                                              LW.1030  
c 2426 CONTINUE                                                            LW.1031  
      DO I=1,NTRAER                                                        LW.1032  
         DO JL=1,KDLON                                                     LW.1033  
            ZTT1(JL,I)=ZTT(JL,I)                                           LW.1034  
         ENDDO                                                             LW.1035  
      ENDDO                                                                LW.1036  
                                                                           LW.1037  
 2427 CONTINUE                                                             LW.1038  
C                                                                          LW.1039  
C*         2.5     EXCHANGE WITH LOWER LIMIT                               LW.1040  
C                  -------------------------                               LW.1041  
C                                                                          LW.1042  
 250  CONTINUE                                                             LW.1043  
                                                                           LW.1044  
      DO 251 JL = 1 , KDLON                                                LW.1045  
        ZBGND(JL)=ZBSUIN(JL)*PEMIS(JL)-(1.-PEMIS(JL))                      LW.1046  
     *           *PFLUC(JL,2,1)-ZBINT(JL,1)                                LW.1047  
 251  CONTINUE                                                             LW.1048  
                                                                           LW.1049  
! JK wasn't set before, I'm guessing what is needed - marc 30/3/10         LW.1050  
      DO JK = 2 , KFLEV+1                                                  LW.1051  
!                                                                          LW.1052  
      DO 252 JL = 1 , KDLON                                                LW.1053  
        ZCNSOL = ZBSUR(JL,1)                                               LW.1054  
     *          +ZBSUR(JL,2)                                               LW.1055  
     *          +ZBSUR(JL,3)                                               LW.1056  
     *          +ZBSUR(JL,4)                                               LW.1057  
     *          +ZBSUR(JL,5)                                               LW.1058  
     *          +ZBSUR(JL,6)                                               LW.1059  
        ZCNSOL=ZCNSOL*ZBGND(JL)/ZBSUIN(JL)                                 LW.1060  
        ZFU(JL,JK)=ZCNSOL+ZBINT(JL,1)-ZDISTU(JL,1)-ZADJU(JL,1)             LW.1061  
        ZFUP(JL,1)=ZFU(JL,JK)                                              LW.1062  
        PFLUC(JL,1,1)=ZFU(JL,JK)                                           LW.1063  
 252  CONTINUE                                                             LW.1064  
      enddo                                                                LW.1065  
                                                                           LW.1066  
      DO 255 JK = 2 , KFLEV+1                                              LW.1067  
        KN=(JK-1)*NG1P1+1                                                  LW.1068  
                                                                           LW.1069  
! changing -marc                                                           LW.1070  
c        DO 2521 JL = 1 , NUAER*KDLON                                      LW.1071  
c          ZUU(JL,1) = ZABSCU(JL,1,1) - ZABSCU(JL,1,KN)                    LW.1072  
c2521    CONTINUE                                                          LW.1073  
        DO I=1,NUAER                                                       LW.1074  
           DO JL=1,KDLON                                                   LW.1075  
              ZUU(JL,I) = ZABSCU(JL,I,1) - ZABSCU(JL,I,KN)                 LW.1076  
           ENDDO                                                           LW.1077  
        ENDDO                                                              LW.1078  
                                                                           LW.1079  
        CALL LWTT1(KDLON,KRLST,KFLEV,ITASK,PGASUR,PGBSUR,                  LW.1080  
     *             PTYSUR,ETYSUR)                                          LW.1081  
                                                                           LW.1082  
        DO 254 JL = 1 , KDLON                                              LW.1083  
          ZCNSOL=ZBSUR(JL,1)*ZTT(JL,1)          *ZTT(JL,10)                LW.1084  
     *          +ZBSUR(JL,2)*ZTT(JL,2)*ZTT(JL,7)*ZTT(JL,11)                LW.1085  
     *          +ZBSUR(JL,3)*ZTT(JL,4)*ZTT(JL,8)*ZTT(JL,12)                LW.1086  
     *          +ZBSUR(JL,4)*ZTT(JL,5)*ZTT(JL,9)*ZTT(JL,13)                LW.1087  
     *          +ZBSUR(JL,5)*ZTT(JL,3)          *ZTT(JL,14)                LW.1088  
     *          +ZBSUR(JL,6)*ZTT(JL,6)          *ZTT(JL,15)                LW.1089  
          ZCNSOL  =ZCNSOL*ZBGND(JL)/ZBSUIN(JL)                             LW.1090  
          ZFU(JL,JK)=ZCNSOL+ZBINT(JL,JK)-ZDISTU(JL,JK)-ZADJU(JL,JK)        LW.1091  
          ZFUP(JL,JK)=ZFU(JL,JK)                                           LW.1092  
          PFLUC(JL,1,JK)=ZFU(JL,JK)                                        LW.1093  
          ZCNTRB(JL,JK,JK) = 0.0                                           LW.1094  
 254    CONTINUE                                                           LW.1095  
 255  CONTINUE                                                             LW.1096  
C                                                                          LW.1097  
C*         2.6     HEATING-FROM-GROUND OF UPPERMOST LAYER                  LW.1098  
C                  --------------------------------------                  LW.1099  
C                                                                          LW.1100  
 260  CONTINUE                                                             LW.1101  
C                                                                          LW.1102  
C*         2.7     CLEAR-SKY FLUXES                                        LW.1103  
C                  ----------------                                        LW.1104  
C                                                                          LW.1105  
 270  CONTINUE                                                             LW.1106  
C                                                                          LW.1107  
      DO 271 JL = 1 , KDLON                                                LW.1108  
      ZFN10(JL) = ZFUP(JL,JLIM) + ZFDN(JL,JLIM)                            LW.1109  
 271  CONTINUE                                                             LW.1110  
      DO 273 JK = JLIM+1,KFLEV+1                                           LW.1111  
      DO 272 JL = 1 , KDLON                                                LW.1112  
      ZFN10(JL) = ZFN10(JL) + PCTS(JL,JK-1)                                LW.1113  
      ZFUP(JL,JK) = ZFN10(JL)                                              LW.1114  
      ZFDN(JL,JK) = 0.                                                     LW.1115  
 272  CONTINUE                                                             LW.1116  
 273  CONTINUE                                                             LW.1117  
      DO 275 JK = 1 , KFLEV+1                                              LW.1118  
      DO 274 JL = 1 , KDLON                                                LW.1119  
      PFLUC(JL,1,JK) = ZFUP(JL,JK)                                         LW.1120  
      PFLUC(JL,2,JK) = ZFDN(JL,JK)                                         LW.1121  
 274  CONTINUE                                                             LW.1122  
 275  CONTINUE                                                             LW.1123  
c      IF (IMP.LT.4) THEN                                                  LW.1124  
c        WRITE(NOUT,884) (PFLUX(1,1,JK),JK = 1 , KFLEV+1)                  LW.1125  
c        WRITE(NOUT,884) (PFLUX(1,2,JK),JK = 1 , KFLEV+1)                  LW.1126  
c      END IF                                                              LW.1127  
C                                                                          LW.1128  
C     --------------------------------------------------------------       LW.1129  
C                                                                          LW.1130  
C*         3.      EFFECTIVE DOWNWARD AND UPWARD CLEAR-SKY EMISSIVITIES    LW.1131  
C                  ----------------------------------------------------    LW.1132  
C                                                                          LW.1133  
 300  CONTINUE                                                             LW.1134  
                                                                           LW.1135  
      DO 302 JKL = 1 , KFLEV                                               LW.1136  
        JK = KFLEV+1 - JKL                                                 LW.1137  
        DO 301 JL = 1 , KDLON                                              LW.1138  
          ZDFNET = PFLUC(JL,1,JK+1) + PFLUC(JL,2,JK+1)                     LW.1139  
     *            -PFLUC(JL,1,JK  ) - PFLUC(JL,2,JK  )                     LW.1140  
          ZEMD(JL,JK)= (-PFLUC(JL,2,JK)+PFLUC(JL,2,JK+1))                  LW.1141  
     *             /(PSIG*PTAVE(JL,JK)**4.+PFLUC(JL,2,JK+1))               LW.1142  
          ZEMU(JL,JKL)=(PFLUC(JL,1,JKL+1)-PFLUC(JL,1,JKL))                 LW.1143  
     *             /(PSIG*PTAVE(JL,JKL)**4.-PFLUC(JL,1,JKL))               LW.1144  
 301    CONTINUE                                                           LW.1145  
 302  CONTINUE                                                             LW.1146  
C                                                                          LW.1147  
C     ----------------------------------------------------------           LW.1148  
C                                                                          LW.1149  
C*         4.      EFFECT OF CLOUDINESS ON LONGWAVE FLUXES                 LW.1150  
C                  ---------------------------------------                 LW.1151  
C                                                                          LW.1152  
      DO 4004 JK = 1 , KFLEV+1                                             LW.1153  
        DO 4003 JL = 1 , KDLON                                             LW.1154  
          PFLUX(JL,1,JK) = ZFUP(JL,JK)                                     LW.1155  
          PFLUX(JL,2,JK) = ZFDN(JL,JK)                                     LW.1156  
 4003   CONTINUE                                                           LW.1157  
 4004 CONTINUE                                                             LW.1158  
C                                                                          LW.1159  
c      IF (IMP.LT.4) THEN                                                  LW.1160  
c        PRINT 886,IMAXC                                                   LW.1161  
c      END IF                                                              LW.1162  
                                                                           LW.1163  
      IF (IMAXC.GT.0) THEN                                                 LW.1164  
        IMXP1 = IMAXC + 1                                                  LW.1165  
        IMXM1 = IMAXC - 1                                                  LW.1166  
C                                                                          LW.1167  
C*         4.0     INITIALIZE TO CLEAR-SKY FLUXES                          LW.1168  
C                  ------------------------------                          LW.1169  
C                                                                          LW.1170  
 400    CONTINUE                                                           LW.1171  
c                                                                          LW.1172  
        DO 403 JK1=1,KFLEV+1                                               LW.1173  
          DO 402 JK2=1,KFLEV+1                                             LW.1174  
            DO 401 JL = 1 , KDLON                                          LW.1175  
              ZUPF(JL,JK2,JK1)=ZFUP(JL,JK1)                                LW.1176  
              ZDNF(JL,JK2,JK1)=ZFDN(JL,JK1)                                LW.1177  
 401        CONTINUE                                                       LW.1178  
 402      CONTINUE                                                         LW.1179  
 403    CONTINUE                                                           LW.1180  
C                                                                          LW.1181  
C*         4.1     FLUXES FOR ONE OVERCAST UNITY EMISSIVITY CLOUD          LW.1182  
C                  ----------------------------------------------          LW.1183  
C                                                                          LW.1184  
 410  CONTINUE                                                             LW.1185  
                                                                           LW.1186  
        DO 413 JKC = 1 , IMAXC                                             LW.1187  
          JCLOUD=JKC                                                       LW.1188  
          JKCP1=JCLOUD+1                                                   LW.1189  
C                                                                          LW.1190  
C*         4.1.1   ABOVE THE CLOUD                                         LW.1191  
C                  ---------------                                         LW.1192  
C                                                                          LW.1193  
 4110     CONTINUE                                                         LW.1194  
                                                                           LW.1195  
          DO 4115 JK=JKCP1,KFLEV+1                                         LW.1196  
            JKM1=JK-1                                                      LW.1197  
            DO 4111 JL = 1 , KDLON                                         LW.1198  
              ZFU(JL,JK)=0.                                                LW.1199  
 4111       CONTINUE                                                       LW.1200  
            IF (JK .GT. JKCP1) THEN                                        LW.1201  
              DO 4113 JKJ=JKCP1,JKM1                                       LW.1202  
                DO 4112 JL = 1 , KDLON                                     LW.1203  
                  ZFU(JL,JK) = ZFU(JL,JK) + ZCNTRB(JL,JK,JKJ)              LW.1204  
 4112           CONTINUE                                                   LW.1205  
 4113         CONTINUE                                                     LW.1206  
            ENDIF                                                          LW.1207  
                                                                           LW.1208  
            DO 4114 JL = 1 , KDLON                                         LW.1209  
              ZUPF(JL,JKCP1,JK)=ZBINT(JL,JK)-ZFU(JL,JK)                    LW.1210  
 4114       CONTINUE                                                       LW.1211  
 4115     CONTINUE                                                         LW.1212  
C                                                                          LW.1213  
C*         4.1.2   FLUXES FOR ONE OVERCAST UNITY EMISSIVITY CLOUD          LW.1214  
C                  ----------------------------------------------          LW.1215  
C                                                                          LW.1216  
 4120     CONTINUE                                                         LW.1217  
                                                                           LW.1218  
          DO 4125 JK=1,JCLOUD                                              LW.1219  
            JKP1=JK+1                                                      LW.1220  
            DO 4121 JL = 1 , KDLON                                         LW.1221  
              ZFD(JL,JK)=0.                                                LW.1222  
 4121       CONTINUE                                                       LW.1223  
                                                                           LW.1224  
            IF (JK .LT. JCLOUD) THEN                                       LW.1225  
              DO 4123 JKJ=JKP1,JCLOUD                                      LW.1226  
                DO 4122 JL = 1 , KDLON                                     LW.1227  
                  ZFD(JL,JK) = ZFD(JL,JK) + ZCNTRB(JL,JK,JKJ)              LW.1228  
 4122           CONTINUE                                                   LW.1229  
 4123         CONTINUE                                                     LW.1230  
            ENDIF                                                          LW.1231  
            DO 4124 JL = 1 , KDLON                                         LW.1232  
              ZDNF(JL,JKCP1,JK)=-ZBINT(JL,JK)-ZFD(JL,JK)                   LW.1233  
 4124       CONTINUE                                                       LW.1234  
 4125     CONTINUE                                                         LW.1235  
 413    CONTINUE                                                           LW.1236  
c        IF (IMP.LT.2) THEN                                                LW.1237  
c          WRITE(NOUT,884) ((ZUPF(1,JK1,JK),JK=1,KFLEV+1),JK1=1,IMXP1)     LW.1238  
c          WRITE(NOUT,884) ((ZDNF(1,JK1,JK),JK=1,KFLEV+1),JK1=1,IMXP1)     LW.1239  
c        END IF                                                            LW.1240  
C                                                                          LW.1241  
C*         4.2     FLUXES FOR PARTIAL/MULTIPLE LAYERED CLOUDINESS          LW.1242  
C                  ----------------------------------------------          LW.1243  
C                                                                          LW.1244  
 420    CONTINUE                                                           LW.1245  
C                                                                          LW.1246  
C                                                                          LW.1247  
C*         4.2.1   DOWNWARD FLUXES                                         LW.1248  
C                  ---------------                                         LW.1249  
C                                                                          LW.1250  
 4210   CONTINUE                                                           LW.1251  
                                                                           LW.1252  
        DO 4212 JK= IMXP1 , KFLEV+1                                        LW.1253  
          DO 4211 JL = 1 , KDLON                                           LW.1254  
            PFLUX(JL,2,JK)=ZDNF(JL,1,JK)                                   LW.1255  
 4211     CONTINUE                                                         LW.1256  
 4212   CONTINUE                                                           LW.1257  
                                                                           LW.1258  
        IF(IMXM1.GE.1) THEN                                                LW.1259  
          DO 4217 JK=1,IMXM1                                               LW.1260  
            JKP1=JK+1                                                      LW.1261  
            DO 4213 JL = 1 , KDLON                                         LW.1262  
              ZCLOUD(JL)=1.                                                LW.1263  
              ZFD(JL,JK)=ZDNF(JL,JKP1,JK)*PCLDLW(JL,JK)                    LW.1264  
 4213       CONTINUE                                                       LW.1265  
            DO 4215 JKJ=JK,IMXM1                                           LW.1266  
              JKJ1=JKJ+1                                                   LW.1267  
              JKJ2=JKJ+2                                                   LW.1268  
              DO 4214 JL = 1 , KDLON                                       LW.1269  
                ZCLOUD(JL)=ZCLOUD(JL)*(1.-PCLDLW(JL,JKJ))                  LW.1270  
                ZCCLD=ZCLOUD(JL)*PCLDLW(JL,JKJ1)                           LW.1271  
                ZFD(JL,JK)=ZFD(JL,JK)+ZDNF(JL,JKJ2,JK)*ZCCLD               LW.1272  
 4214         CONTINUE                                                     LW.1273  
 4215       CONTINUE                                                       LW.1274  
            JKJ=IMAXC                                                      LW.1275  
            DO 4216 JL = 1 , KDLON                                         LW.1276  
              ZCLOUD(JL)=ZCLOUD(JL)*(1.-PCLDLW(JL,JKJ))                    LW.1277  
              ZFD(JL,JK)=ZFD(JL,JK)+ZDNF(JL,1,JK)*ZCLOUD(JL)               LW.1278  
              PFLUX(JL,2,JK)=ZFD(JL,JK)                                    LW.1279  
 4216       CONTINUE                                                       LW.1280  
 4217     CONTINUE                                                         LW.1281  
        ENDIF                                                              LW.1282  
C                                                                          LW.1283  
C*         4.2.2   UPWARD FLUX AT THE SURFACE                              LW.1284  
C                  --------------------------                              LW.1285  
C                                                                          LW.1286  
 4220   CONTINUE                                                           LW.1287  
                                                                           LW.1288  
        JK=IMAXC                                                           LW.1289  
        JKP1=JK+1                                                          LW.1290  
        DO 4221 JL = 1 , KDLON                                             LW.1291  
          ZFD(JL,JK)=ZDNF(JL,JKP1,JK)*PCLDLW(JL,JK)                        LW.1292  
     *           +ZDNF(JL,1,JK)*(1.-PCLDLW(JL,JK))                         LW.1293  
          PFLUX(JL,2,JK)=ZFD(JL,JK)                                        LW.1294  
          PFLUX(JL,1,1)=PEMIS(JL)*ZBSUIN(JL)-(1.-PEMIS(JL))                LW.1295  
     *                 *PFLUX(JL,2,1)                                      LW.1296  
 4221   CONTINUE                                                           LW.1297  
C                                                                          LW.1298  
C*         4.2.3   UPWARD FLUXES                                           LW.1299  
C                  -------------                                           LW.1300  
C                                                                          LW.1301  
 4230   CONTINUE                                                           LW.1302  
                                                                           LW.1303  
        DO 4235 JK = 2 , KFLEV+1                                           LW.1304  
          JK1=MIN(JK,IMXP1)                                                LW.1305  
          JK2=JK1-1                                                        LW.1306  
          JK2M1=JK2-1                                                      LW.1307  
          DO 4231 JL = 1 , KDLON                                           LW.1308  
            ZCLOUD(JL)=1.                                                  LW.1309  
            ZFU(JL,JK)=ZUPF(JL,JK1,JK)*PCLDLW(JL,JK2)                      LW.1310  
 4231     CONTINUE                                                         LW.1311  
                                                                           LW.1312  
          IF(JK2M1.GE.1) THEN                                              LW.1313  
            DO 4233 JKJ=1,JK2M1                                            LW.1314  
              JKIJ=JK1-JKJ                                                 LW.1315  
              DO 4232 JL = 1 , KDLON                                       LW.1316  
                ZCLOUD(JL)=ZCLOUD(JL)*(1.-PCLDLW(JL,JKIJ))                 LW.1317  
                ZCCLD=ZCLOUD(JL)*PCLDLW(JL,JKIJ-1)                         LW.1318  
                ZFU(JL,JK)=ZFU(JL,JK)+ZUPF(JL,JKIJ,JK)*ZCCLD               LW.1319  
 4232         CONTINUE                                                     LW.1320  
 4233       CONTINUE                                                       LW.1321  
          ENDIF                                                            LW.1322  
                                                                           LW.1323  
          JKJ=JK2                                                          LW.1324  
          JKIJ=1                                                           LW.1325  
          DO 4234 JL = 1 , KDLON                                           LW.1326  
            ZCLOUD(JL)=ZCLOUD(JL)*(1.-PCLDLW(JL,JKIJ))                     LW.1327  
            ZFU(JL,JK)=ZFU(JL,JK)+ZUPF(JL,1,JK)*ZCLOUD(JL)                 LW.1328  
            PFLUX(JL,1,JK)=ZFU(JL,JK)                                      LW.1329  
 4234     CONTINUE                                                         LW.1330  
 4235   CONTINUE                                                           LW.1331  
      ENDIF                                                                LW.1332  
C                                                                          LW.1333  
C*         4.3     END OF CLOUD EFFECT COMPUTATIONS                        LW.1334  
C                                                                          LW.1335  
 430  CONTINUE                                                             LW.1336  
                                                                           LW.1337  
C                                                                          LW.1338  
      DO 431 JL = 1 , KDLON                                                LW.1339  
        ZFN10(JL) = PFLUX(JL,1,KLIM) + PFLUX(JL,2,KLIM)                    LW.1340  
 431  CONTINUE                                                             LW.1341  
      DO 433 JK = KLIM+1 , KFLEV+1                                         LW.1342  
        DO 432 JL = 1 , KDLON                                              LW.1343  
          ZFN10(JL) = ZFN10(JL) + PCTS(JL,JK-1)                            LW.1344  
          PFLUX(JL,1,JK) = ZFN10(JL)                                       LW.1345  
          PFLUX(JL,2,JK) = 0.0                                             LW.1346  
 432    CONTINUE                                                           LW.1347  
 433  CONTINUE                                                             LW.1348  
C                                                                          LW.1349  
c      DO 431 JL = 1 , KDLON                                               LW.1350  
c        PFLUX(JL,1,KFLEV+1) = PFLUX(JL,1,KFLEV)                           LW.1351  
c 431  CONTINUE                                                            LW.1352  
                                                                           LW.1353  
c      IF (IMP.LT.4) THEN                                                  LW.1354  
c        WRITE(NOUT,884) (PFLUX(1,1,JK),JK = 1 , KFLEV+1)                  LW.1355  
c        WRITE(NOUT,884) (PFLUX(1,2,JK),JK = 1 , KFLEV+1)                  LW.1356  
c      END IF                                                              LW.1357  
C                                                                          LW.1358  
      DO 501 JL=1,NRLST                                                    LW.1359  
         DO 502 JK=1,NRLEV                                                 LW.1360  
C            PCLFR (JL,JK) = PCLD  (JL,JK)                                 LW.1361  
C            PQLWP (JL,JK) = PQLW  (JL,JK)                                 LW.1362  
            ZCLDLW(JL,JK) = PCLDLW(JL,JK)                                  LW.1363  
            DO 503 II=1,2                                                  LW.1364  
               ZFLUX (JL,II,JK) = PFLUX (JL,II,JK)                         LW.1365  
               ZTAU  (JL,II,JK) = PTAU  (JL,II,JK)                         LW.1366  
 503        CONTINUE                                                       LW.1367  
            ZPMB  (JL,JK) = PPMB  (JL,JK)                                  LW.1368  
            ZTAVE (JL,JK) = PTAVE (JL,JK)                                  LW.1369  
            ZTL   (JL,JK) = PTL   (JL,JK)                                  LW.1370  
 502     CONTINUE                                                          LW.1371  
         DO 504 II=1,2                                                     LW.1372  
            ZFLUX (JL,II,NRLEV+1) = PFLUX (JL,II,NRLEV+1)                  LW.1373  
 504      CONTINUE                                                         LW.1374  
         ZDT0(JL) = PDT0(JL)                                               LW.1375  
         ZPMB(JL,NRLEV+1) = PPMB(JL,NRLEV+1)                               LW.1376  
         ZTL (JL,NRLEV+1) = PTL (JL,NRLEV+1)                               LW.1377  
 501  CONTINUE                                                             LW.1378  
C                                                                          LW.1379  
      RETURN                                                               LW.1380  
C                                                                          LW.1381  
C-----------------------------------------------------------------         LW.1382  
C                       FORMATS                                            LW.1383  
C                       -------                                            LW.1384  
C                                                                          LW.1385  
 884  FORMAT (1X,F7.2,18F6.1,F7.2)                                         LW.1386  
 886  FORMAT (1X,20I5)                                                     LW.1387  
 888  FORMAT (1X,13E9.2)                                                   LW.1388  
 890  FORMAT (1X,2I4,13F9.2)                                               LW.1389  
      END                                                                  LW.1390  
C__________________________________________________________________        LW.1391  
C                                                                          LW.1392  
*DECK LWTT0                                                                LWTT0.1     
C ii) Replace the old LWTT with the new improved version.                  LWTT0.2     
C                                                                          LWTT0.3     
      SUBROUTINE LWTT0(KDLON,KRLST,KFLEV,ITASK,PGGA,PGGB,PPPTY,PPETY)      LWTT0.4     
*CALL ZPARB                                                                LWTT0.5     
c      INCLUDE 'zparb.upd'                                                 LWTT0.6     
C     COMMON BLOCK FOR GAS ABUNDANCES                                      UPDMORCMB.5     
*CALL MORCGAS                                                              UPDMORCMB.6     
      REAL PGGA(KDLON,12,2),PGGB(KDLON,12,2),                              LWTT0.7     
     *                 PPPTY(KDLON,12), PPETY(KDLON,12)                    LWTT0.8     
                                                                           LWTT0.9     
      DO 97 JL=1,NRLST                                                     LWTT0.10    
         DO 98 II=1,NUA                                                    LWTT0.11    
            PUU(JL,II) = ZUU(JL,II)                                        LWTT0.12    
 98      CONTINUE                                                          LWTT0.13    
         DO 99 JJ=1,NTRA                                                   LWTT0.14    
            PTT(JL,JJ) = ZTT(JL,JJ)                                        LWTT0.15    
 99      CONTINUE                                                          LWTT0.16    
 97       CONTINUE                                                         LWTT0.17    
C                                                                          LWTT0.18    
C                                                                          LWTT0.19    
C*         1.     HORNER'S ALGORITHM FOR H2O AND CO2 TRANSMISSION          LWTT0.20    
C                 -----------------------------------------                LWTT0.21    
C                                                                          LWTT0.22    
 100  CONTINUE                                                             LWTT0.23    
                                                                           LWTT0.24    
! changing - marc 30/3/10                                                  LWTT0.25    
!      DO 101 JL = 1 , 6*KDLON                                             LWTT0.26    
!        ZZ(JL) = SQRT (PUU(JL,1))                                         LWTT0.27    
!        ZXN(JL) = PGGA(JL,1,1) + ZZ(JL)*(PGGA(JL,1,2))                    LWTT0.28    
!        ZXD(JL) = PGGB(JL,1,1) + ZZ(JL)*(PGGB(JL,1,2)+ZZ(JL))             LWTT0.29    
!        PTT(JL,1) = ZXN(JL) / ZXD(JL)                                     LWTT0.30    
! 101  CONTINUE                                                            LWTT0.31    
      DO I=1,6                                                             LWTT0.32    
         DO JL=1,KDLON                                                     LWTT0.33    
            ZZ(JL) = SQRT (PUU(JL,i))                                      LWTT0.34    
            ZXN(JL) = PGGA(JL,i,1) + ZZ(JL)*(PGGA(JL,i,2))                 LWTT0.35    
            ZXD(JL) = PGGB(JL,i,1) + ZZ(JL)*(PGGB(JL,i,2)+ZZ(JL))          LWTT0.36    
            PTT(JL,i) = ZXN(JL) / ZXD(JL)                                  LWTT0.37    
         ENDDO                                                             LWTT0.38    
      ENDDO                                                                LWTT0.39    
                                                                           LWTT0.40    
      DO 1003 JL = 1 , KDLON                                               LWTT0.41    
C                                                                          LWTT0.42    
        ZZ(JL) = SQRT (PUU(JL,8))                                          LWTT0.43    
        ZXN(JL) = PGGA(JL,8,1) + ZZ(JL)*(PGGA(JL,8,2))                     LWTT0.44    
        ZXD(JL) = PGGB(JL,8,1) + ZZ(JL)*(PGGB(JL,8,2)+ZZ(JL))              LWTT0.45    
        PTT(JL,8) = ZXN(JL)/ZXD(JL)                                        LWTT0.46    
C                                                                          LWTT0.47    
C  1250-1450 CM-1 H2O                                                      LWTT0.48    
C                                                                          LWTT0.49    
        ZZ(JL) = SQRT (PUU(JL,29))                                         LWTT0.50    
        ZXN(JL)= PGGA(JL,9,1) + ZZ(JL)*(PGGA(JL,9,2) )                     LWTT0.51    
        ZXD(JL)= PGGB(JL,9,1) + ZZ(JL)*(PGGB(JL,9,2) + ZZ(JL))             LWTT0.52    
        PTT(JL,16) = ZXN(JL)/ZXD(JL)                                       LWTT0.53    
C                                                                          LWTT0.54    
C  800-970 CM-1 H2O                                                        LWTT0.55    
C                                                                          LWTT0.56    
        ZZ(JL) = SQRT (PUU(JL,30))                                         LWTT0.57    
        ZXN(JL)= PGGA(JL,10,1) + ZZ(JL)*(PGGA(JL,10,2) )                   LWTT0.58    
        ZXD(JL)= PGGB(JL,10,1) + ZZ(JL)*(PGGB(JL,10,2) + ZZ(JL))           LWTT0.59    
        PTT(JL,17) = ZXN(JL)/ZXD(JL)                                       LWTT0.60    
C                                                                          LWTT0.61    
C  650-800 CM-1 H2O                                                        LWTT0.62    
C                                                                          LWTT0.63    
        ZZ(JL) = SQRT (PUU(JL,31))                                         LWTT0.64    
        ZXN(JL)= PGGA(JL,11,1) + ZZ(JL)*(PGGA(JL,11,2) )                   LWTT0.65    
        ZXD(JL)= PGGB(JL,11,1) + ZZ(JL)*(PGGB(JL,11,2) + ZZ(JL))           LWTT0.66    
        PTT(JL,18) = ZXN(JL)/ZXD(JL)                                       LWTT0.67    
1003  CONTINUE                                                             LWTT0.68    
C     --------------------------------------------------------             LWTT0.69    
C                                                                          LWTT0.70    
C*         1.1    2-D INTERPOLATION BETWEEN LBL CO2 TRANSMISSION           LWTT0.71    
C                 -----------------------------------------------          LWTT0.72    
C                                                                          LWTT0.73    
      DO 1011 JL = 1 , KDLON                                               LWTT0.74    
        CGU  = LOG(PUU(JL,34))                                             LWTT0.75    
        CGP  = LOG(PUU(JL,7)/PUU(JL,34))                                   LWTT0.76    
        CGT  = PUU(JL,33)/PUU(JL,34)                                       LWTT0.77    
        DTX  = CGT-TREF                                                    LWTT0.78    
        JU   =INT((CGU+13.)*2.)+1                                          LWTT0.79    
        JP   =INT((CGP+8.)*2.)+1                                           LWTT0.80    
        XIU  = (CGU - ULG(JU))*2.0                                         LWTT0.81    
        XIP  = (CGP - PLG(JP))*2.0                                         LWTT0.82    
        JP1  = JP+1                                                        LWTT0.83    
        JU1  = JU+1                                                        LWTT0.84    
        XUP0 = XIU * XIP                                                   LWTT0.85    
        XUP1 = 1.0 - XIP -XIU + XUP0                                       LWTT0.86    
        XUP2 = XIU - XUP0                                                  LWTT0.87    
        XUP3 = XIP - XUP0                                                  LWTT0.88    
        TBUP = XUP1 * TB (  JU ,   JP ,   2)                               LWTT0.89    
     S       + XUP2 * TB (  JU1,   JP ,   2)                               LWTT0.90    
     S       + XUP3 * TB (  JU ,   JP1,   2)                               LWTT0.91    
     S       + XUP0 * TB (  JU1,   JP1,   2)                               LWTT0.92    
        ALUP = XUP1 * ALP(  JU ,   JP,    2)                               LWTT0.93    
     S       + XUP2 * ALP(  JU1,   JP,    2)                               LWTT0.94    
     S       + XUP3 * ALP(  JU ,   JP1,   2)                               LWTT0.95    
     S       + XUP0 * ALP(  JU1,   JP1,   2)                               LWTT0.96    
        BTUP = XUP1 * BET(  JU ,   JP,    2)                               LWTT0.97    
     S       + XUP2 * BET(  JU1,   JP,    2)                               LWTT0.98    
     S       + XUP3 * BET(  JU ,   JP1,   2)                               LWTT0.99    
     S       + XUP0 * BET(  JU1,   JP1,   2)                               LWTT0.100   
        TTRR=1.0-EXP(-TBUP/1000.)                                          LWTT0.101   
        PTT(JL,7)=TTRR - (1.-TTRR)*DTX*(ALUP + BTUP*DTX)                   LWTT0.102   
c        print*,'ptt7',ptt(jl,7)                                           LWTT0.103   
 1011 CONTINUE                                                             LWTT0.104   
C                                                                          LWTT0.105   
C*         1.2    2-D INTERPOLATION BETWEEN LBL O3 TRANSMISSION            LWTT0.106   
C                 -----------------------------------------------          LWTT0.107   
C                                                                          LWTT0.108   
      DO 1021 JL = 1 , KDLON                                               LWTT0.109   
        CGU  = MAX( LOG(PUU(JL,12)), -17.5)                                LWTT0.110   
        CGP  = MAX( LOG(PUU(JL,13)/PUU(JL,12)), -8.0)                      LWTT0.111   
        CGT  = PUU(JL,32)/PUU(JL,12)                                       LWTT0.112   
        DTX  = CGT-TREF                                                    LWTT0.113   
        JU   = INT((CGU+17.5)*2.)+1.                                       LWTT0.114   
        JP   = INT((CGP+8.)*2.)+1.                                         LWTT0.115   
        XIU  = (CGU - ULGO(JU))*2.0                                        LWTT0.116   
        XIP  = (CGP - PLG (JP))*2.0                                        LWTT0.117   
        JU1  = JU+1                                                        LWTT0.118   
        JP1  = JP+1                                                        LWTT0.119   
        XUP0 = XIU * XIP                                                   LWTT0.120   
        XUP1 = 1.0 - XIP -XIU + XUP0                                       LWTT0.121   
        XUP2 = XIU - XUP0                                                  LWTT0.122   
        XUP3 = XIP - XUP0                                                  LWTT0.123   
                                                                           LWTT0.124   
        TBUP = XUP1 * TBO3( JU,   JP )                                     LWTT0.125   
     S       + XUP2 * TBO3( JU1,  JP )                                     LWTT0.126   
     S       + XUP3 * TBO3( JU,   JP1)                                     LWTT0.127   
     S       + XUP0 * TBO3( JU1,  JP1)                                     LWTT0.128   
        ALUP = XUP1 * AO3(  JU,   JP )                                     LWTT0.129   
     S       + XUP2 * AO3(  JU1,  JP )                                     LWTT0.130   
     S       + XUP3 * AO3(  JU,   JP1)                                     LWTT0.131   
     S       + XUP0 * AO3(  JU1,  JP1)                                     LWTT0.132   
        BTUP = XUP1 * BO3(  JU,   JP )                                     LWTT0.133   
     S       + XUP2 * BO3(  JU1,  JP )                                     LWTT0.134   
     S       + XUP3 * BO3(  JU,   JP1)                                     LWTT0.135   
     S       + XUP0 * BO3(  JU1,  JP1)                                     LWTT0.136   
        TBUP2= XUP1 * TO3B( JU,   JP )                                     LWTT0.137   
     S       + XUP2 * TO3B( JU1,  JP )                                     LWTT0.138   
     S       + XUP3 * TO3B( JU,   JP1)                                     LWTT0.139   
     S       + XUP0 * TO3B( JU1,  JP1)                                     LWTT0.140   
        ALUP2= XUP1 * O3A(  JU,   JP )                                     LWTT0.141   
     S       + XUP2 * O3A(  JU1,  JP )                                     LWTT0.142   
     S       + XUP3 * O3A(  JU,   JP1)                                     LWTT0.143   
     S       + XUP0 * O3A(  JU1,  JP1)                                     LWTT0.144   
        BTUP2= XUP1 * O3B(  JU,   JP )                                     LWTT0.145   
     S       + XUP2 * O3B(  JU1,  JP )                                     LWTT0.146   
     S       + XUP3 * O3B(  JU,   JP1)                                     LWTT0.147   
     S       + XUP0 * O3B(  JU1,  JP1)                                     LWTT0.148   
        TTRR=1.0-EXP(-TBUP/100.)                                           LWTT0.149   
        PTT(JL,13)=TTRR - (1.-TTRR)*DTX*(ALUP + BTUP*DTX)                  LWTT0.150   
        TTRR2=1.0-EXP(-TBUP2/100.)                                         LWTT0.151   
        PTT(JL,16)=TTRR2 - (1.-TTRR2)*DTX*(ALUP2 + BTUP2*DTX)              LWTT0.152   
 1021 CONTINUE                                                             LWTT0.153   
C     -------------------------------------------------------              LWTT0.154   
C                                                                          LWTT0.155   
 200  CONTINUE                                                             LWTT0.156   
                                                                           LWTT0.157   
      DO 201 JL = 1 , KDLON                                                LWTT0.158   
        PTT(JL, 9) = PTT(JL, 8)                                            LWTT0.159   
        PTT(JL, 7) = PTT(JL, 7)*PTT(JL,16)                                 LWTT0.160   
C                                                                          LWTT0.161   
C-  CONTINUUM ABSORPTION: E- AND P-TYPE                                    LWTT0.162   
C                                                                          LWTT0.163   
        ZPU   = PUU(JL,10)                                                 LWTT0.164   
        ZPU2  = ZPU*ZPU                                                    LWTT0.165   
        ZPU10 = PPPTY(JL,1)*(ZPU+0.3*ZPU2)/(1.+9.*ZPU)                     LWTT0.166   
        ZPU11 = 0.7*PPPTY(JL,2)*(ZPU+0.34*ZPU2)/(1.+2.*ZPU)                LWTT0.167   
        ZPU12A= PPPTY(JL,3)*(ZPU+0.066*ZPU2)/(1.+0.27*ZPU)                 LWTT0.168   
        ZPU12B= PPPTY(JL,4)*(ZPU+0.057*ZPU2)/(1.+0.095*ZPU)                LWTT0.169   
        ZPU13 = 0.017 * ZPU                                                LWTT0.170   
        ZPU14 = 0.041 * ZPU                                                LWTT0.171   
        ZPU12 = 0.017 * ZPU                                                LWTT0.172   
        ZPU16 = PPPTY(JL,8)*(ZPU+0.19*ZPU2)/(1.+0.85*ZPU)                  LWTT0.173   
        ZPU17 = PPPTY(JL,9)*(ZPU+0.035*ZPU2)/(1.+0.71*ZPU)                 LWTT0.174   
                                                                           LWTT0.175   
        ZEUB  = PUU(JL,11)                                                 LWTT0.176   
        ZEUB2 = ZEUB*ZEUB                                                  LWTT0.177   
        ZEUC  = PUU(JL,25)                                                 LWTT0.178   
        ZEUD  = PUU(JL,26)                                                 LWTT0.179   
        ZEUE  = PUU(JL,27)                                                 LWTT0.180   
        ZEUF  = PUU(JL,28)                                                 LWTT0.181   
                                                                           LWTT0.182   
        ZEU10 = PPETY(JL,1)*(ZEUB+5.*ZEUB2)/(1.+150.*ZEUB)                 LWTT0.183   
        ZEU11 = PPETY(JL,2)*(ZEUB+15.5*ZEUB2)/(1.+42.*ZEUB)                LWTT0.184   
        ZEU12A= PPETY(JL,3)*(1.+7.*ZEUC)/(1.+17.5*ZEUC)*ZEUC               LWTT0.185   
        ZEU12B= PPETY(JL,4)*(1.+4.2*ZEUD)/(1.+9.5*ZEUD)*ZEUD               LWTT0.186   
        ZEU13 = PPETY(JL,5)*(1.+3.8*ZEUE)/(1.+7.1*ZEUE)*ZEUE               LWTT0.187   
        ZEU14 = 6.5 * ZEUC                                                 LWTT0.188   
        ZEU12 = 7.0 * ZEUD                                                 LWTT0.189   
        ZEU16 = PPETY(JL,8)*(ZEUB+4.3*ZEUB2)/(1.+11.8*ZEUB)                LWTT0.190   
        ZEU17 = PPETY(JL,9)*(1.+1.*ZEUF)/(1.+9.*ZEUF)*ZEUF                 LWTT0.191   
C                                                                          LWTT0.192   
C                                                                          LWTT0.193   
C     ---------------------------------------------------------            LWTT0.194   
C                                                                          LWTT0.195   
C*         2     OZONE AND AEROSOL TRANSMISSION FUNCTIONS                  LWTT0.196   
C                 -----------------------------------------                LWTT0.197   
C                                                                          LWTT0.198   
C-  OZONE ABSORPTION                                                       LWTT0.199   
C                                                                          LWTT0.200   
c        ZX = MAX(1.0E-15, PUU(JL,12))                                     LWTT0.201   
c        ZY = MAX(1.0E-15, PUU(JL,13))                                     LWTT0.202   
c        ZUXY = 4. * ZX * ZX / (PIALF0 * ZY)                               LWTT0.203   
c        ZSQ1 = SQRT(1. + O1H * ZUXY ) - 1.                                LWTT0.204   
c        ZSQ2 = SQRT(1. + O2H * ZUXY ) - 1.                                LWTT0.205   
c        ZVXY = PIALF0 * ZY / (2. * ZX)                                    LWTT0.206   
c        ZAERCN = PUU(JL,17) + ZEU12 + ZPU12                               LWTT0.207   
c        ZTO11 = EXP( - ZVXY * ZSQ1 - ZAERCN )                             LWTT0.208   
c        ZTO2 = EXP( - ZVXY * ZSQ2 - ZAERCN )                              LWTT0.209   
C                                                                          LWTT0.210   
C-- TRACE GASES (CH4, N2O, CFC-11, CFC-12)                                 LWTT0.211   
C                                                                          LWTT0.212   
C* CH4 IN INTERVAL 800-970 + 1110-1250 CM-1                                LWTT0.213   
C                                                                          LWTT0.214   
      IF (NEXOTIC) THEN                                                    UPDMORCMB.87    
                                                                           LWTT0.217   
      ZXCH4 = MAX(1.0D-12, PUU(JL,19))                                     LWTT0.218   
      ZYCH4 = MAX(1.0D-12, PUU(JL,20))                                     LWTT0.219   
      ZUXY = 4. * ZXCH4*ZXCH4/(0.103*ZYCH4)                                LWTT0.220   
      ZSQH41 = SQRT(1. + 33.7 * ZUXY) - 1.                                 LWTT0.221   
      ZVXY = 0.103 * ZYCH4 / (2. * ZXCH4)                                  LWTT0.222   
      ZODH41 = ZVXY * ZSQH41                                               LWTT0.223   
C                                                                          LWTT0.224   
C* N2O IN INTERVAL 800-970 + 1110-1250 CM-1                                LWTT0.225   
C                                                                          LWTT0.226   
      ZXN2O = MAX(1.0D-12, PUU(JL,21))                                     LWTT0.227   
      ZYN2O = MAX(1.0D-12, PUU(JL,22))                                     LWTT0.228   
      ZUXY = 4. * ZXN2O*ZXN2O/(0.416*ZYN2O)                                LWTT0.229   
      ZSQN21 = SQRT(1. + 21.3 * ZUXY) - 1.                                 LWTT0.230   
      ZVXY = 0.416 * ZYN2O / (2. * ZXN2O)                                  LWTT0.231   
      ZODN21 = ZVXY * ZSQN21                                               LWTT0.232   
C                                                                          LWTT0.233   
C* CH4 IN INTERVAL 1250-1450 + 1880-2820 CM-1                              LWTT0.234   
C                                                                          LWTT0.235   
      ZUXY = 4. * ZXCH4*ZXCH4/(0.113*ZYCH4)                                LWTT0.236   
      ZSQH42 = SQRT(1. + 400. * ZUXY) - 1.                                 LWTT0.237   
      ZVXY = 0.113 * ZYCH4 / (2. * ZXCH4)                                  LWTT0.238   
      ZODH42 = ZVXY * ZSQH42                                               LWTT0.239   
C                                                                          LWTT0.240   
C* N2O IN INTERVAL 1250-1450 + 1880-2820 CM-1                              LWTT0.241   
C                                                                          LWTT0.242   
      ZUXY = 4. * ZXN2O*ZXN2O/(0.197*ZYN2O)                                LWTT0.243   
      ZSQN22 = SQRT(1. + 2000. * ZUXY) - 1.                                LWTT0.244   
      ZVXY = 0.416 * ZYN2O / (2. * ZXN2O)                                  LWTT0.245   
      ZODN22 = ZVXY * ZSQN22                                               LWTT0.246   
C                                                                          LWTT0.247   
C* CFC-11 IN INTERVAL 800-970 + 1110-1250 CM-1                             LWTT0.248   
C                                                                          LWTT0.249   
      ZA11 = 2. * PUU(JL,23) * 4.404E+05                                   LWTT0.250   
      ZTTF11 = 1. - ZA11 * 0.003225                                        LWTT0.251   
C                                                                          LWTT0.252   
C* CFC-12 IN INTERVAL 800-970 + 1110-1250 CM-1                             LWTT0.253   
C                                                                          LWTT0.254   
      ZA12 = 2. * PUU(JL,24) * 6.7435E+05                                  LWTT0.255   
      ZTTF12 = 1. - ZA12 * 0.003225                                        LWTT0.256   
      ELSE                                                                 LWTT0.257   
         ZODH41=0.                                                         LWTT0.258   
         ZODN21=0.                                                         LWTT0.259   
         ZODH42=0.                                                         LWTT0.260   
         ZODN22=0.                                                         LWTT0.261   
         ZTTF11=1.                                                         LWTT0.262   
         ZTTF12=1.                                                         LWTT0.263   
      END IF                                                               LWTT0.264   
C                                                                          LWTT0.265   
      TC1=EXP(-ZEU12A-ZPU12A)                                              LWTT0.266   
      TC2=EXP(-ZEU12B-ZPU12B)                                              LWTT0.267   
      PTT2=PTT(JL, 2)                                                      LWTT0.268   
      PTTB=PTT(JL,18)                                                      LWTT0.269   
      PTT(JL, 2) = 0.5 *(PTTB*TC2 + (2.*PTT2-PTTB)*TC1)                    LWTT0.270   
C                                                                          LWTT0.271   
      TC1=EXP(-ZEU13-ZPU13)                                                LWTT0.272   
      TC2=EXP(-ZEU14-ZPU14)                                                LWTT0.273   
      PTT4=PTT(JL, 4)                                                      LWTT0.274   
      PTTB=PTT(JL,17)                                                      LWTT0.275   
      PTT(JL, 4) =  PTT4*TC2 + 0.54839*PTTB*(TC1-TC2)                      LWTT0.276   
C                                                                          LWTT0.277   
      TC1=EXP(-ZEU16-ZPU16)                                                LWTT0.278   
      TC2=EXP(-ZEU17-ZPU17)                                                LWTT0.279   
      PTT6=PTT(JL, 6)                                                      LWTT0.280   
      PTTB=PTT(JL,16)                                                      LWTT0.281   
      PTT(JL, 6) =  PTT6*TC2 + 0.17544*PTTB*(TC1-TC2)                      LWTT0.282   
C                                                                          LWTT0.283   
      ZUU11 = - PUU(JL,15)                                                 LWTT0.284   
      ZUU12 = - PUU(JL,16) - ZODH41 - ZODN21                               LWTT0.285   
      PTT(JL,10) = EXP( - PUU(JL,14) -ZEU10 -ZPU10 )                       LWTT0.286   
      PTT(JL,11) = EXP( ZUU11 )                                            LWTT0.287   
      PTT(JL,12) = EXP( ZUU12 ) * ZTTF11 * ZTTF12                          LWTT0.288   
      PTT(JL,14) = EXP( -PUU(JL,14) - ZEU11 - ZPU11 )                      LWTT0.289   
      PTT(JL,15) = EXP ( - PUU(JL,14) - ZODH42 - ZODN22 )                  LWTT0.290   
C                                                                          LWTT0.291   
c        TC1=EXP(-ZEU12A-ZPU12A)                                           LWTT0.292   
c        TC2=EXP(-ZEU12B-ZPU12B)                                           LWTT0.293   
c        PTT2=PTT(JL, 2)                                                   LWTT0.294   
c        PTTB=PTT(JL,18)                                                   LWTT0.295   
c        PTT(JL, 2) = 0.5 *(PTTB*TC2 + (2.*PTT2-PTTB)*TC1)                 LWTT0.296   
c                                                                          LWTT0.297   
c        TC1=EXP(-ZEU13-ZPU13)                                             LWTT0.298   
c        TC2=EXP(-ZEU14-ZPU14)                                             LWTT0.299   
c        PTT4=PTT(JL, 4)                                                   LWTT0.300   
c        PTTB=PTT(JL,17)                                                   LWTT0.301   
c        PTT(JL, 4) =  PTT4*TC2 + 0.54839*PTTB*(TC1-TC2)                   LWTT0.302   
c                                                                          LWTT0.303   
c        TC1=EXP(-ZEU16-ZPU16)                                             LWTT0.304   
c        TC2=EXP(-ZEU17-ZPU17)                                             LWTT0.305   
c        PTT6=PTT(JL, 6)                                                   LWTT0.306   
c        PTTB=PTT(JL,16)                                                   LWTT0.307   
c        PTT(JL, 6) =  PTT6*TC2 + 0.17544*PTTB*(TC1-TC2)                   LWTT0.308   
c                                                                          LWTT0.309   
c        ZUU11 = - PUU(JL,15)                                              LWTT0.310   
c        ZUU12 = - PUU(JL,16)                                              LWTT0.311   
c        PTT(JL,10) = EXP( - PUU(JL,14) -ZEU10 -ZPU10 )                    LWTT0.312   
c        PTT(JL,11) = EXP( ZUU11 )                                         LWTT0.313   
c        PTT(JL,12) = EXP( ZUU12 )                                         LWTT0.314   
c        PTT(JL,14) = EXP( -PUU(JL,14) - ZEU11 - ZPU11 )                   LWTT0.315   
c        PTT(JL,15) = EXP ( - PUU(JL,14) )                                 LWTT0.316   
 201  CONTINUE                                                             LWTT0.317   
      DO 301 JL=1,NRLST                                                    LWTT0.318   
         DO 302 II=1,NUA                                                   LWTT0.319   
           ZUU(JL,II) = PUU(JL,II)                                         LWTT0.320   
 302     CONTINUE                                                          LWTT0.321   
         DO 303 JJ=1,NTRA                                                  LWTT0.322   
           ZTT(JL,JJ) = 1.0                                                LWTT0.323   
 303     CONTINUE                                                          LWTT0.324   
         IF(ITASK.EQ.1)THEN                                                LWTT0.325   
           ZTT(JL,1)  = PTT(JL,1)                                          LWTT0.326   
           ZTT(JL,2)  = PTT(JL,2)                                          LWTT0.327   
           ZTT(JL,3)  = PTT(JL,3)                                          LWTT0.328   
           ZTT(JL,4)  = PTT(JL,4)                                          LWTT0.329   
           ZTT(JL,5)  = PTT(JL,5)                                          LWTT0.330   
           ZTT(JL,6)  = PTT(JL,6)                                          LWTT0.331   
         ELSE IF(ITASK.EQ.2)THEN                                           LWTT0.332   
           ZTT(JL,1)  = PTT(JL,1)                                          LWTT0.333   
           ZTT(JL,2)  = PTT(JL,2)                                          LWTT0.334   
           ZTT(JL,3)  = PTT(JL,3)                                          LWTT0.335   
           ZTT(JL,4)  = PTT(JL,4)                                          LWTT0.336   
           ZTT(JL,5)  = PTT(JL,5)                                          LWTT0.337   
           ZTT(JL,6)  = PTT(JL,6)                                          LWTT0.338   
           ZTT(JL,10) = PTT(JL,10)                                         LWTT0.339   
           ZTT(JL,11) = PTT(JL,11)                                         LWTT0.340   
           ZTT(JL,12) = PTT(JL,12)                                         LWTT0.341   
           ZTT(JL,14) = PTT(JL,14)                                         LWTT0.342   
           ZTT(JL,15) = PTT(JL,15)                                         LWTT0.343   
         ELSE IF(ITASK.EQ.3)THEN                                           LWTT0.344   
           DO 3031 JJ=1,NTRA                                               LWTT0.345   
             ZTT(JL,JJ) = PTT(JL,JJ)                                       LWTT0.346   
c        print*,'lwtt0 ptt(jj)=',ptt(jl,jj) , jj                           LWTT0.347   
 3031       CONTINUE                                                       LWTT0.348   
         ENDIF                                                             LWTT0.349   
 301  CONTINUE                                                             LWTT0.350   
      RETURN                                                               LWTT0.351   
      END                                                                  LWTT0.352   
C________________________________________________                          LWTT0.353   
*DECK LWTT1                                                                LWTT1.1     
C ii) Replace the old LWTT1 with the new improved version.                 LWTT1.2     
C                                                                          LWTT1.3     
      SUBROUTINE LWTT1(KDLON,KRLST,KFLEV,ITASK,PGGA,PGGB,PPPTY,PPETY)      LWTT1.4     
*CALL ZPARB                                                                LWTT1.5     
c      INCLUDE 'zparb.upd'                                                 LWTT1.6     
C     COMMON BLOCK FOR GAS ABUNDANCES                                      UPDMORCMB.7     
*CALL MORCGAS                                                              UPDMORCMB.8     
      REAL PGGA(KDLON,12,2),PGGB(KDLON,12,2),                              LWTT1.7     
     *                 PPPTY(KDLON,12), PPETY(KDLON,12)                    LWTT1.8     
                                                                           LWTT1.9     
      DO 97 JL=1,NRLST                                                     LWTT1.10    
         DO 98 II=1,NUA                                                    LWTT1.11    
            PUU(JL,II) = ZUU(JL,II)                                        LWTT1.12    
 98      CONTINUE                                                          LWTT1.13    
         DO 99 JJ=1,NTRA                                                   LWTT1.14    
            PTT(JL,JJ) = ZTT(JL,JJ)                                        LWTT1.15    
 99      CONTINUE                                                          LWTT1.16    
 97   CONTINUE                                                             LWTT1.17    
C                                                                          LWTT1.18    
C*         1.     HORNER'S ALGORITHM FOR H2O AND CO2 TRANSMISSION          LWTT1.19    
C                 -----------------------------------------------          LWTT1.20    
C                                                                          LWTT1.21    
 100  CONTINUE                                                             LWTT1.22    
                                                                           LWTT1.23    
! changing - marc 30/3/10                                                  LWTT1.24    
c      DO 101 JL = 1 , 6*KDLON                                             LWTT1.25    
c        ZZ(JL) = SQRT (PUU(JL,1))                                         LWTT1.26    
c        ZXN(JL) = PGGA(JL,1,1) + ZZ(JL)*(PGGA(JL,1,2))                    LWTT1.27    
c        ZXD(JL) = PGGB(JL,1,1) + ZZ(JL)*(PGGB(JL,1,2)+ZZ(JL))             LWTT1.28    
c        PTT(JL,1) = ZXN(JL) / ZXD(JL)                                     LWTT1.29    
c 101  CONTINUE                                                            LWTT1.30    
      DO I=1,6                                                             LWTT1.31    
         DO JL=1,KDLON                                                     LWTT1.32    
            ZZ(JL) = SQRT (PUU(JL,i))                                      LWTT1.33    
            ZXN(JL) = PGGA(JL,i,1) + ZZ(JL)*(PGGA(JL,i,2))                 LWTT1.34    
            ZXD(JL) = PGGB(JL,i,1) + ZZ(JL)*(PGGB(JL,i,2)+ZZ(JL))          LWTT1.35    
            PTT(JL,i) = ZXN(JL) / ZXD(JL)                                  LWTT1.36    
         ENDDO                                                             LWTT1.37    
      ENDDO                                                                LWTT1.38    
                                                                           LWTT1.39    
      DO 1003 JL = 1 , KDLON                                               LWTT1.40    
C                                                                          LWTT1.41    
        ZZ(JL) = SQRT (PUU(JL,8))                                          LWTT1.42    
        ZXN(JL) = PGGA(JL,8,1) + ZZ(JL)*(PGGA(JL,8,2))                     LWTT1.43    
        ZXD(JL) = PGGB(JL,8,1) + ZZ(JL)*(PGGB(JL,8,2)+ZZ(JL))              LWTT1.44    
        PTT(JL,8) = ZXN(JL)/ZXD(JL)                                        LWTT1.45    
C                                                                          LWTT1.46    
C  1250-1450 CM-1 H2O                                                      LWTT1.47    
C                                                                          LWTT1.48    
        ZZ(JL) = SQRT (PUU(JL,29))                                         LWTT1.49    
        ZXN(JL)= PGGA(JL,9,1) + ZZ(JL)*(PGGA(JL,9,2) )                     LWTT1.50    
        ZXD(JL)= PGGB(JL,9,1) + ZZ(JL)*(PGGB(JL,9,2) + ZZ(JL))             LWTT1.51    
        PTT(JL,16) = ZXN(JL)/ZXD(JL)                                       LWTT1.52    
C                                                                          LWTT1.53    
C  800-970 CM-1 H2O                                                        LWTT1.54    
C                                                                          LWTT1.55    
        ZZ(JL) = SQRT (PUU(JL,30))                                         LWTT1.56    
        ZXN(JL)= PGGA(JL,10,1) + ZZ(JL)*(PGGA(JL,10,2) )                   LWTT1.57    
        ZXD(JL)= PGGB(JL,10,1) + ZZ(JL)*(PGGB(JL,10,2) + ZZ(JL))           LWTT1.58    
        PTT(JL,17) = ZXN(JL)/ZXD(JL)                                       LWTT1.59    
C                                                                          LWTT1.60    
C  650-800 CM-1 H2O                                                        LWTT1.61    
C                                                                          LWTT1.62    
        ZZ(JL) = SQRT (PUU(JL,31))                                         LWTT1.63    
        ZXN(JL)= PGGA(JL,11,1) + ZZ(JL)*(PGGA(JL,11,2) )                   LWTT1.64    
        ZXD(JL)= PGGB(JL,11,1) + ZZ(JL)*(PGGB(JL,11,2) + ZZ(JL))           LWTT1.65    
        PTT(JL,18) = ZXN(JL)/ZXD(JL)                                       LWTT1.66    
1003  CONTINUE                                                             LWTT1.67    
C     -----------------------------------------------------------          LWTT1.68    
C                                                                          LWTT1.69    
C*         1.1    2-D INTERPOLATION BETWEEN LBL CO2 TRANSMISSION           LWTT1.70    
C                 -----------------------------------------------          LWTT1.71    
C                                                                          LWTT1.72    
      DO 1011 JL = 1 , KDLON                                               LWTT1.73    
        CGU  = LOG(PUU(JL,34))                                             LWTT1.74    
        CGP  = LOG(PUU(JL,7)/PUU(JL,34))                                   LWTT1.75    
        CGT  = PUU(JL,33)/PUU(JL,34)                                       LWTT1.76    
        DTX  = CGT-TREF                                                    LWTT1.77    
        JU   =INT((CGU+13.)*2.)+1                                          LWTT1.78    
        JP   =INT((CGP+8.)*2.)+1                                           LWTT1.79    
        XIU  = (CGU - ULG(JU))*2.0                                         LWTT1.80    
        XIP  = (CGP - PLG(JP))*2.0                                         LWTT1.81    
        JP1  = JP+1                                                        LWTT1.82    
        JU1  = JU+1                                                        LWTT1.83    
        XUP0 = XIU * XIP                                                   LWTT1.84    
        XUP1 = 1.0 - XIP -XIU + XUP0                                       LWTT1.85    
        XUP2 = XIU - XUP0                                                  LWTT1.86    
        XUP3 = XIP - XUP0                                                  LWTT1.87    
        TBUP = XUP1 * TB (  JU ,   JP ,   1)                               LWTT1.88    
     S       + XUP2 * TB (  JU1,   JP ,   1)                               LWTT1.89    
     S       + XUP3 * TB (  JU ,   JP1,   1)                               LWTT1.90    
     S       + XUP0 * TB (  JU1,   JP1,   1)                               LWTT1.91    
        ALUP = XUP1 * ALP(  JU ,   JP,    1)                               LWTT1.92    
     S       + XUP2 * ALP(  JU1,   JP,    1)                               LWTT1.93    
     S       + XUP3 * ALP(  JU ,   JP1,   1)                               LWTT1.94    
     S       + XUP0 * ALP(  JU1,   JP1,   1)                               LWTT1.95    
        BTUP = XUP1 * BET(  JU ,   JP,    1)                               LWTT1.96    
     S       + XUP2 * BET(  JU1,   JP,    1)                               LWTT1.97    
     S       + XUP3 * BET(  JU ,   JP1,   1)                               LWTT1.98    
     S       + XUP0 * BET(  JU1,   JP1,   1)                               LWTT1.99    
        TTRR=1.0-EXP(-TBUP/1000.)                                          LWTT1.100   
        PTT(JL,7)=TTRR - (1.-TTRR)*DTX*(ALUP + BTUP*DTX)                   LWTT1.101   
 1011 CONTINUE                                                             LWTT1.102   
C                                                                          LWTT1.103   
C*         1.2    2-D INTERPOLATION BETWEEN LBL O3 TRANSMISSION            LWTT1.104   
C                 -----------------------------------------------          LWTT1.105   
C                                                                          LWTT1.106   
      DO 1021 JL = 1 , KDLON                                               LWTT1.107   
        CGU  = MAX( LOG(PUU(JL,12)), -17.5)                                LWTT1.108   
        CGP  = MAX( LOG(PUU(JL,13)/PUU(JL,12)), -8.0)                      LWTT1.109   
        CGT  = PUU(JL,32)/PUU(JL,12)                                       LWTT1.110   
        DTX  = CGT-TREF                                                    LWTT1.111   
        JU   = INT((CGU+17.5)*2.)+1.                                       LWTT1.112   
        JP   = INT((CGP+8.)*2.)+1.                                         LWTT1.113   
        XIU  = (CGU - ULGO(JU))*2.0                                        LWTT1.114   
        XIP  = (CGP - PLG (JP))*2.0                                        LWTT1.115   
        JU1  = JU+1                                                        LWTT1.116   
        JP1  = JP+1                                                        LWTT1.117   
        XUP0 = XIU * XIP                                                   LWTT1.118   
        XUP1 = 1.0 - XIP -XIU + XUP0                                       LWTT1.119   
        XUP2 = XIU - XUP0                                                  LWTT1.120   
        XUP3 = XIP - XUP0                                                  LWTT1.121   
        TBUP = XUP1 * TBO3( JU,   JP )                                     LWTT1.122   
     S       + XUP2 * TBO3( JU1,  JP )                                     LWTT1.123   
     S       + XUP3 * TBO3( JU,   JP1)                                     LWTT1.124   
     S       + XUP0 * TBO3( JU1,  JP1)                                     LWTT1.125   
        ALUP = XUP1 * AO3(  JU,   JP )                                     LWTT1.126   
     S       + XUP2 * AO3(  JU1,  JP )                                     LWTT1.127   
     S       + XUP3 * AO3(  JU,   JP1)                                     LWTT1.128   
     S       + XUP0 * AO3(  JU1,  JP1)                                     LWTT1.129   
        BTUP = XUP1 * BO3(  JU,   JP )                                     LWTT1.130   
     S       + XUP2 * BO3(  JU1,  JP )                                     LWTT1.131   
     S       + XUP3 * BO3(  JU,   JP1)                                     LWTT1.132   
     S       + XUP0 * BO3(  JU1,  JP1)                                     LWTT1.133   
        TBUP2= XUP1 * TO3B( JU,   JP )                                     LWTT1.134   
     S       + XUP2 * TO3B( JU1,  JP )                                     LWTT1.135   
     S       + XUP3 * TO3B( JU,   JP1)                                     LWTT1.136   
     S       + XUP0 * TO3B( JU1,  JP1)                                     LWTT1.137   
        ALUP2= XUP1 * O3A(  JU,   JP )                                     LWTT1.138   
     S       + XUP2 * O3A(  JU1,  JP )                                     LWTT1.139   
     S       + XUP3 * O3A(  JU,   JP1)                                     LWTT1.140   
     S       + XUP0 * O3A(  JU1,  JP1)                                     LWTT1.141   
        BTUP2= XUP1 * O3B(  JU,   JP )                                     LWTT1.142   
     S       + XUP2 * O3B(  JU1,  JP )                                     LWTT1.143   
     S       + XUP3 * O3B(  JU,   JP1)                                     LWTT1.144   
     S       + XUP0 * O3B(  JU1,  JP1)                                     LWTT1.145   
        TTRR=1.0-EXP(-TBUP/100.)                                           LWTT1.146   
        PTT(JL,13)=TTRR - (1.-TTRR)*DTX*(ALUP + BTUP*DTX)                  LWTT1.147   
        TTRR2=1.0-EXP(-TBUP2/100.)                                         LWTT1.148   
        PTT(JL,16)=TTRR2 - (1.-TTRR2)*DTX*(ALUP2 + BTUP2*DTX)              LWTT1.149   
 1021 CONTINUE                                                             LWTT1.150   
C     -----------------------------------------------------                LWTT1.151   
C                                                                          LWTT1.152   
 200  CONTINUE                                                             LWTT1.153   
                                                                           LWTT1.154   
      DO 201 JL = 1 , KDLON                                                LWTT1.155   
        PTT(JL, 9) = PTT(JL, 8)                                            LWTT1.156   
        PTT(JL, 7) = PTT(JL, 7)*PTT(JL,16)                                 LWTT1.157   
C                                                                          LWTT1.158   
C-  CONTINUUM ABSORPTION: E- AND P-TYPE                                    LWTT1.159   
C                                                                          LWTT1.160   
        ZPU   = PUU(JL,10)                                                 LWTT1.161   
        ZPU2  = ZPU*ZPU                                                    LWTT1.162   
        ZPU10 = PPPTY(JL,1)*(ZPU+0.3*ZPU2)/(1.+9.*ZPU)                     LWTT1.163   
        ZPU11 = 0.7*PPPTY(JL,2)*(ZPU+0.34*ZPU2)/(1.+2.*ZPU)                LWTT1.164   
        ZPU12A= PPPTY(JL,3)*(ZPU+0.066*ZPU2)/(1.+0.27*ZPU)                 LWTT1.165   
        ZPU12B= PPPTY(JL,4)*(ZPU+0.057*ZPU2)/(1.+0.095*ZPU)                LWTT1.166   
        ZPU13 = 0.017 * ZPU                                                LWTT1.167   
        ZPU14 = 0.041 * ZPU                                                LWTT1.168   
        ZPU12 = 0.017 * ZPU                                                LWTT1.169   
        ZPU16 = PPPTY(JL,8)*(ZPU+0.19*ZPU2)/(1.+0.85*ZPU)                  LWTT1.170   
        ZPU17 = PPPTY(JL,9)*(ZPU+0.035*ZPU2)/(1.+0.71*ZPU)                 LWTT1.171   
                                                                           LWTT1.172   
        ZEUB  = PUU(JL,11)                                                 LWTT1.173   
        ZEUB2 = ZEUB*ZEUB                                                  LWTT1.174   
        ZEUC  = PUU(JL,25)                                                 LWTT1.175   
        ZEUD  = PUU(JL,26)                                                 LWTT1.176   
        ZEUE  = PUU(JL,27)                                                 LWTT1.177   
        ZEUF  = PUU(JL,28)                                                 LWTT1.178   
                                                                           LWTT1.179   
        ZEU10 = PPETY(JL,1)*(ZEUB+5.*ZEUB2)/(1.+150.*ZEUB)                 LWTT1.180   
        ZEU11 = PPETY(JL,2)*(ZEUB+15.5*ZEUB2)/(1.+42.*ZEUB)                LWTT1.181   
        ZEU12A= PPETY(JL,3)*(1.+7.*ZEUC)/(1.+17.5*ZEUC)*ZEUC               LWTT1.182   
        ZEU12B= PPETY(JL,4)*(1.+4.2*ZEUD)/(1.+9.5*ZEUD)*ZEUD               LWTT1.183   
        ZEU13 = PPETY(JL,5)*(1.+3.8*ZEUE)/(1.+7.1*ZEUE)*ZEUE               LWTT1.184   
        ZEU14 = 6.5 * ZEUC                                                 LWTT1.185   
        ZEU12 = 7.0 * ZEUD                                                 LWTT1.186   
        ZEU16 = PPETY(JL,8)*(ZEUB+4.3*ZEUB2)/(1.+11.8*ZEUB)                LWTT1.187   
        ZEU17 = PPETY(JL,9)*(1.+1.*ZEUF)/(1.+9.*ZEUF)*ZEUF                 LWTT1.188   
C                                                                          LWTT1.189   
C                                                                          LWTT1.190   
C     ---------------------------------------------------------            LWTT1.191   
C                                                                          LWTT1.192   
C*         2     OZONE AND AEROSOL TRANSMISSION FUNCTIONS                  LWTT1.193   
C                 -----------------------------------------                LWTT1.194   
C                                                                          LWTT1.195   
C-  OZONE ABSORPTION                                                       LWTT1.196   
C                                                                          LWTT1.197   
c        ZX = MAX(1.0E-15, PUU(JL,12))                                     LWTT1.198   
c        ZY = MAX(1.0E-15, PUU(JL,13))                                     LWTT1.199   
c        ZUXY = 4. * ZX * ZX / (PIALF0 * ZY)                               LWTT1.200   
c        ZSQ1 = SQRT(1. + O1H * ZUXY ) - 1.                                LWTT1.201   
c        ZSQ2 = SQRT(1. + O2H * ZUXY ) - 1.                                LWTT1.202   
c        ZVXY = PIALF0 * ZY / (2. * ZX)                                    LWTT1.203   
c        ZAERCN = PUU(JL,17) + ZEU12 + ZPU12                               LWTT1.204   
c        ZTO11 = EXP( - ZVXY * ZSQ1 - ZAERCN )                             LWTT1.205   
c        ZTO2 = EXP( - ZVXY * ZSQ2 - ZAERCN )                              LWTT1.206   
C                                                                          LWTT1.207   
C-- TRACE GASES (CH4, N2O, CFC-11, CFC-12)                                 LWTT1.208   
C                                                                          LWTT1.209   
C* CH4 IN INTERVAL 800-970 + 1110-1250 CM-1                                LWTT1.210   
C                                                                          LWTT1.211   
      IF (NEXOTIC) THEN                                                    UPDMORCMB.88    
      ZXCH4 = MAX(1.0D-12, PUU(JL,19))                                     LWTT1.214   
      ZYCH4 = MAX(1.0D-12, PUU(JL,20))                                     LWTT1.215   
      ZUXY = 4. * ZXCH4*ZXCH4/(0.103*ZYCH4)                                LWTT1.216   
      ZSQH41 = SQRT(1. + 33.7 * ZUXY) - 1.                                 LWTT1.217   
      ZVXY = 0.103 * ZYCH4 / (2. * ZXCH4)                                  LWTT1.218   
      ZODH41 = ZVXY * ZSQH41                                               LWTT1.219   
C                                                                          LWTT1.220   
C* N2O IN INTERVAL 800-970 + 1110-1250 CM-1                                LWTT1.221   
C                                                                          LWTT1.222   
      ZXN2O = MAX(1.0D-12, PUU(JL,21))                                     LWTT1.223   
      ZYN2O = MAX(1.0D-12, PUU(JL,22))                                     LWTT1.224   
      ZUXY = 4. * ZXN2O*ZXN2O/(0.416*ZYN2O)                                LWTT1.225   
      ZSQN21 = SQRT(1. + 21.3 * ZUXY) - 1.                                 LWTT1.226   
      ZVXY = 0.416 * ZYN2O / (2. * ZXN2O)                                  LWTT1.227   
      ZODN21 = ZVXY * ZSQN21                                               LWTT1.228   
C                                                                          LWTT1.229   
C* CH4 IN INTERVAL 1250-1450 + 1880-2820 CM-1                              LWTT1.230   
C                                                                          LWTT1.231   
      ZUXY = 4. * ZXCH4*ZXCH4/(0.113*ZYCH4)                                LWTT1.232   
      ZSQH42 = SQRT(1. + 400. * ZUXY) - 1.                                 LWTT1.233   
      ZVXY = 0.113 * ZYCH4 / (2. * ZXCH4)                                  LWTT1.234   
      ZODH42 = ZVXY * ZSQH42                                               LWTT1.235   
C                                                                          LWTT1.236   
C* N2O IN INTERVAL 1250-1450 + 1880-2820 CM-1                              LWTT1.237   
C                                                                          LWTT1.238   
      ZUXY = 4. * ZXN2O*ZXN2O/(0.197*ZYN2O)                                LWTT1.239   
      ZSQN22 = SQRT(1. + 2000. * ZUXY) - 1.                                LWTT1.240   
      ZVXY = 0.416 * ZYN2O / (2. * ZXN2O)                                  LWTT1.241   
      ZODN22 = ZVXY * ZSQN22                                               LWTT1.242   
C                                                                          LWTT1.243   
C* CFC-11 IN INTERVAL 800-970 + 1110-1250 CM-1                             LWTT1.244   
C                                                                          LWTT1.245   
      ZA11 = 2. * PUU(JL,23) * 4.404E+05                                   LWTT1.246   
      ZTTF11 = 1. - ZA11 * 0.003225                                        LWTT1.247   
C                                                                          LWTT1.248   
C* CFC-12 IN INTERVAL 800-970 + 1110-1250 CM-1                             LWTT1.249   
C                                                                          LWTT1.250   
      ZA12 = 2. * PUU(JL,24) * 6.7435E+05                                  LWTT1.251   
      ZTTF12 = 1. - ZA12 * 0.003225                                        LWTT1.252   
      ELSE                                                                 LWTT1.253   
         ZODH41=0.                                                         LWTT1.254   
         ZODN21=0.                                                         LWTT1.255   
         ZODH42=0.                                                         LWTT1.256   
         ZODN22=0.                                                         LWTT1.257   
         ZTTF11=1.                                                         LWTT1.258   
         ZTTF12=1.                                                         LWTT1.259   
      END IF                                                               LWTT1.260   
C                                                                          LWTT1.261   
      TC1=EXP(-ZEU12A-ZPU12A)                                              LWTT1.262   
      TC2=EXP(-ZEU12B-ZPU12B)                                              LWTT1.263   
      PTT2=PTT(JL, 2)                                                      LWTT1.264   
      PTTB=PTT(JL,18)                                                      LWTT1.265   
      PTT(JL, 2) = 0.5 *(PTTB*TC2 + (2.*PTT2-PTTB)*TC1)                    LWTT1.266   
C                                                                          LWTT1.267   
      TC1=EXP(-ZEU13-ZPU13)                                                LWTT1.268   
      TC2=EXP(-ZEU14-ZPU14)                                                LWTT1.269   
      PTT4=PTT(JL, 4)                                                      LWTT1.270   
      PTTB=PTT(JL,17)                                                      LWTT1.271   
      PTT(JL, 4) =  PTT4*TC2 + 0.54839*PTTB*(TC1-TC2)                      LWTT1.272   
C                                                                          LWTT1.273   
      TC1=EXP(-ZEU16-ZPU16)                                                LWTT1.274   
      TC2=EXP(-ZEU17-ZPU17)                                                LWTT1.275   
      PTT6=PTT(JL, 6)                                                      LWTT1.276   
      PTTB=PTT(JL,16)                                                      LWTT1.277   
      PTT(JL, 6) =  PTT6*TC2 + 0.17544*PTTB*(TC1-TC2)                      LWTT1.278   
C                                                                          LWTT1.279   
      ZUU11 = - PUU(JL,15)                                                 LWTT1.280   
      ZUU12 = - PUU(JL,16) - ZODH41 - ZODN21                               LWTT1.281   
      PTT(JL,10) = EXP( - PUU(JL,14) -ZEU10 -ZPU10 )                       LWTT1.282   
      PTT(JL,11) = EXP( ZUU11 )                                            LWTT1.283   
      PTT(JL,12) = EXP( ZUU12 ) * ZTTF11 * ZTTF12                          LWTT1.284   
      PTT(JL,14) = EXP( -PUU(JL,14) - ZEU11 - ZPU11 )                      LWTT1.285   
      PTT(JL,15) = EXP ( - PUU(JL,14) - ZODH42 - ZODN22 )                  LWTT1.286   
c                                                                          LWTT1.287   
c        TC1=EXP(-ZEU12A-ZPU12A)                                           LWTT1.288   
c        TC2=EXP(-ZEU12B-ZPU12B)                                           LWTT1.289   
c        PTT2=PTT(JL, 2)                                                   LWTT1.290   
c        PTTB=PTT(JL,18)                                                   LWTT1.291   
c        PTT(JL, 2) = 0.5 *(PTTB*TC2 + (2.*PTT2-PTTB)*TC1)                 LWTT1.292   
c                                                                          LWTT1.293   
c        TC1=EXP(-ZEU13-ZPU13)                                             LWTT1.294   
c        TC2=EXP(-ZEU14-ZPU14)                                             LWTT1.295   
c        PTT4=PTT(JL, 4)                                                   LWTT1.296   
c        PTTB=PTT(JL,17)                                                   LWTT1.297   
c        PTT(JL, 4) =  PTT4*TC2 + 0.54839*PTTB*(TC1-TC2)                   LWTT1.298   
c                                                                          LWTT1.299   
c        TC1=EXP(-ZEU16-ZPU16)                                             LWTT1.300   
c        TC2=EXP(-ZEU17-ZPU17)                                             LWTT1.301   
c        PTT6=PTT(JL, 6)                                                   LWTT1.302   
c        PTTB=PTT(JL,16)                                                   LWTT1.303   
c        PTT(JL, 6) =  PTT6*TC2 + 0.17544*PTTB*(TC1-TC2)                   LWTT1.304   
c                                                                          LWTT1.305   
c        ZUU11 = - PUU(JL,15)                                              LWTT1.306   
c        ZUU12 = - PUU(JL,16)                                              LWTT1.307   
c        PTT(JL,10) = EXP( - PUU(JL,14) -ZEU10 -ZPU10 )                    LWTT1.308   
c        PTT(JL,11) = EXP( ZUU11 )                                         LWTT1.309   
c        PTT(JL,12) = EXP( ZUU12 )                                         LWTT1.310   
c        PTT(JL,14) = EXP( -PUU(JL,14) - ZEU11 - ZPU11 )                   LWTT1.311   
c        PTT(JL,15) = EXP ( - PUU(JL,14) )                                 LWTT1.312   
c        print*,'lwtt1 ptt(jj)=',ptt(jl,jj),jj                             LWTT1.313   
 201  CONTINUE                                                             LWTT1.314   
      DO 301 JL=1,NRLST                                                    LWTT1.315   
         DO 302 II=1,NUA                                                   LWTT1.316   
           ZUU(JL,II) = PUU(JL,II)                                         LWTT1.317   
 302     CONTINUE                                                          LWTT1.318   
         DO 303 JJ=1,NTRA                                                  LWTT1.319   
           ZTT(JL,JJ) = 1.0                                                LWTT1.320   
 303     CONTINUE                                                          LWTT1.321   
         IF(ITASK.EQ.1)THEN                                                LWTT1.322   
           ZTT(JL,1)  = PTT(JL,1)                                          LWTT1.323   
           ZTT(JL,2)  = PTT(JL,2)                                          LWTT1.324   
           ZTT(JL,3)  = PTT(JL,3)                                          LWTT1.325   
           ZTT(JL,4)  = PTT(JL,4)                                          LWTT1.326   
           ZTT(JL,5)  = PTT(JL,5)                                          LWTT1.327   
           ZTT(JL,6)  = PTT(JL,6)                                          LWTT1.328   
         ELSE IF(ITASK.EQ.2)THEN                                           LWTT1.329   
           ZTT(JL,1)  = PTT(JL,1)                                          LWTT1.330   
           ZTT(JL,2)  = PTT(JL,2)                                          LWTT1.331   
           ZTT(JL,3)  = PTT(JL,3)                                          LWTT1.332   
           ZTT(JL,4)  = PTT(JL,4)                                          LWTT1.333   
           ZTT(JL,5)  = PTT(JL,5)                                          LWTT1.334   
           ZTT(JL,6)  = PTT(JL,6)                                          LWTT1.335   
           ZTT(JL,10) = PTT(JL,10)                                         LWTT1.336   
           ZTT(JL,11) = PTT(JL,11)                                         LWTT1.337   
           ZTT(JL,12) = PTT(JL,12)                                         LWTT1.338   
           ZTT(JL,14) = PTT(JL,14)                                         LWTT1.339   
           ZTT(JL,15) = PTT(JL,15)                                         LWTT1.340   
         ELSE IF(ITASK.EQ.3)THEN                                           LWTT1.341   
           DO 3031 JJ=1,NTRA                                               LWTT1.342   
             ZTT(JL,JJ) = PTT(JL,JJ)                                       LWTT1.343   
 3031       CONTINUE                                                       LWTT1.344   
         ENDIF                                                             LWTT1.345   
 301  CONTINUE                                                             LWTT1.346   
      RETURN                                                               LWTT1.347   
      END                                                                  LWTT1.348   
C                                                                          LWTT1.349   
*DECK RADLSW                                                               RADLSW.1     
      SUBROUTINE RADLSW ( KDLON, KRLST, KFLEV, KFLVP1, KFLEV2,             RADLSW.2     
     S            KNGL, KNGLP1, PSIG,  PSCT, PCARDI, ITASK, ZTM1           RADLSW.3     
     S ,PIERSLWP)                                                          RADLSW.4     
C                                                                          RADLSW.5     
C**** *RADLSW* - RADIATION INTERFACE                                       RADLSW.6     
C                                                                          RADLSW.7     
C     PURPOSE.                                                             RADLSW.8     
C     --------                                                             RADLSW.9     
C           CONTROLS RADIATION TRANSFER COMPUTATIONS                       RADLSW.10    
C                                                                          RADLSW.11    
C**   INTERFACE.                                                           RADLSW.12    
C     ----------                                                           RADLSW.13    
C                                                                          RADLSW.14    
C          *RADLSW* IS CALLED FROM *RADINT*                                RADLSW.15    
C                                                                          RADLSW.16    
C        EXPLICIT ARGUMENTS                                                RADLSW.17    
C        --------------------                                              RADLSW.18    
C                                                                          RADLSW.19    
C        IMPLICIT ARGUMENTS                                                RADLSW.20    
C        --------------------                                              RADLSW.21    
C                                                                          RADLSW.22    
C     ==== INPUTS ===                                                      RADLSW.23    
C     ==== OUTPUTS ===                                                     RADLSW.24    
C FLS(KDLON,KFLEV)            ; NET SHORTWAVE RADIATIVE FLUXES             RADLSW.25    
C FLT(KDLON,KFLEV)            ; NET LONGWAVE RADIATIVE FLUXES              RADLSW.26    
C                                                                          RADLSW.27    
C     METHOD.                                                              RADLSW.28    
C     -------                                                              RADLSW.29    
C        SEE DOCUMENTATION                                                 RADLSW.30    
C                                                                          RADLSW.31    
C     EXTERNALS.                                                           RADLSW.32    
C     ----------                                                           RADLSW.33    
C                                                                          RADLSW.34    
C     REFERENCE.                                                           RADLSW.35    
C     ----------                                                           RADLSW.36    
C        ECMWF MODEL DOCUMENTATION                                         RADLSW.37    
C                                                                          RADLSW.38    
C     AUTHORS.                                                             RADLSW.39    
C     --------                                                             RADLSW.40    
C        JEAN-JACQUES MORCRETTE  *ECMWF*                                   RADLSW.41    
C                                                                          RADLSW.42    
C     MODIFICATIONS.                                                       RADLSW.43    
C     --------------                                                       RADLSW.44    
C        ORIGINAL : 88-02-04                                               RADLSW.45    
C------------------------------------------------------------              RADLSW.46    
C      IMPLICIT LOGICAL (L)                                                RADLSW.47    
C                                                                          RADLSW.48    
*CALL ZPARB                                                                RADLSW.49    
c      INCLUDE 'zparb.upd'                                                 RADLSW.50    
      REAL ZTM1(NLON,NLEV)                                                 RADLSW.51    
      integer ipass                                                        RADLSW.52    
      data ipass/1/                                                        RADLSW.53    
C                                                                          RADLSW.54    
C----------------------------------------------------------------          RADLSW.55    
C                                                                          RADLSW.56    
C     ----------------------------------------------------------           RADLSW.57    
C                                                                          RADLSW.58    
C                                                                          RADLSW.59    
CDIR$ VFUNCTION ALOG,EXP                                                   RADLSW.60    
C     ----------------------                                               RADLSW.61    
C                                                                          RADLSW.62    
C    -----------------------------------------------------------           RADLSW.63    
C     ----------------------------------------------------------           RADLSW.64    
C                                                                          RADLSW.65    
C*       0.3   SET-UP RADIATION ROUTINE COEFFICIENTS                       RADLSW.66    
C              -------------------------------------                       RADLSW.67    
C                                                                          RADLSW.68    
  30  CONTINUE                                                             RADLSW.69    
                                                                           RADLSW.70    
      IF (IPASS.eq.1) THEN                                                 RADLSW.71    
       IPASS=0                                                             RADLSW.72    
      CALL SUAER                                                           RADLSW.73    
      CALL SULW                                                            RADLSW.74    
      CALL SUSW                                                            RADLSW.75    
       ENDIF                                                               RADLSW.76    
C                                                                          RADLSW.77    
      IMP=2                                                                RADLSW.78    
ccc1      NOUT=6                                                           RADLSW.79    
cc      NOUT=2                                                             RADLSW.80    
cc      open(2,FILE='termout.dat',STATUS='unknown')                        RADLSW.81    
      IABS=5                                                               RADLSW.82    
      IAER=0                                                               RADLSW.83    
      LORAD = .TRUE.                                                       RADLSW.84    
C                                                                          RADLSW.85    
      ZEPSC  = 1.E-04                                                      RADLSW.86    
      ZEPSCO = 1.E-10                                                      RADLSW.87    
      ZEPSCQ = 1.E-07                                                      RADLSW.88    
      ZEPSCT = 1.E-04                                                      RADLSW.89    
      ZEPSCW = 1.E-12                                                      RADLSW.90    
      ZEELOG = 1.E-10                                                      RADLSW.91    
C                                                                          RADLSW.92    
      CDAY   = DAYL * G / CPD                                              RADLSW.93    
      CH2O   = 5.3669274E-03                                               RADLSW.94    
      CCO2   = 5.8269497E-03                                               RADLSW.95    
      DIFF   = 1.66                                                        RADLSW.96    
      X10E   = 0.4342945                                                   RADLSW.97    
      CCLWMR = 0.2                                                         RADLSW.98    
C                                                                          RADLSW.99    
C     ---------------------------------------------------------            RADLSW.100   
C                                                                          RADLSW.101   
C*         1.     SET-UP INPUT QUANTITIES FOR RADIATION                    RADLSW.102   
C                 -------------------------------------                    RADLSW.103   
C                                                                          RADLSW.104   
 100  CONTINUE                                                             RADLSW.105   
      DO 101 JL=1,NRLST                                                    RADLSW.106   
       DO 102 JK=1,NRLEV                                                   RADLSW.107   
        PCLFR(JL,JK) = CLC (JL,JK)                                         RADLSW.108   
        PT   (JL,JK) = TI  (JL,JK)                                         RADLSW.109   
        PDP  (JL,JK) = DP  (JL,JK)                                         RADLSW.110   
        PWV  (JL,JK) = WV  (JL,JK)                                         RADLSW.111   
        PQOF (JL,JK) = QOF (JL,JK)                                         RADLSW.112   
C        PQCF (JL,JK) = QCF (JL,JK)                                        RADLSW.113   
        PQLWP(JL,JK) = CLWA(JL,JK)                                         RADLSW.114   
        PAER (JL,JK,1) = AEQ1(JL,JK)                                       RADLSW.115   
        PAER (JL,JK,2) = AEQ2(JL,JK)                                       RADLSW.116   
        PAER (JL,JK,3) = AEQ3(JL,JK)                                       RADLSW.117   
        PAER (JL,JK,4) = AEQ4(JL,JK)                                       RADLSW.118   
        PAER (JL,JK,5) = AEQ5(JL,JK)                                       RADLSW.119   
 102   CONTINUE                                                            RADLSW.120   
       PT (JL,NRLEV+1) = TI(JL,NRLEV+1)                                    RADLSW.121   
       PPSOL (JL) = APRE(JL)                                               RADLSW.122   
c       print *, ' ppsol ', ppsol(jl)                                      RADLSW.123   
       PRMU0 (JL) = SMU0(JL)                                               RADLSW.124   
       PEMIS (JL) = ALTE(JL)                                               RADLSW.125   
       PALBSN(JL) = ALSO(JL)                                               RADLSW.126   
 101  CONTINUE                                                             RADLSW.127   
C                                                                          RADLSW.128   
C                                                                          RADLSW.129   
C*         1.1    INITIALIZE VARIOUS FIELDS                                RADLSW.130   
C                 -------------------------                                RADLSW.131   
C                                                                          RADLSW.132   
 110  CONTINUE                                                             RADLSW.133   
C                                                                          RADLSW.134   
      DO 112 JK = 1 , KFLEV                                                RADLSW.135   
      DO 111 JL = 1 , KDLON                                                RADLSW.136   
      ZCOOLR(JL,JK) = 0.                                                   RADLSW.137   
      ZHEATR(JL,JK) = 0.                                                   RADLSW.138   
 111  CONTINUE                                                             RADLSW.139   
 112  CONTINUE                                                             RADLSW.140   
C                                                                          RADLSW.141   
      DO 113 JL = 1 , KDLON                                                RADLSW.142   
         ZALBSU(JL,1)=PALBSN(JL)                                           RADLSW.143   
         ZALBSU(JL,2)=PALBSN(JL)                                           RADLSW.144   
         ZFSUP(JL,KFLEV+1) = 0.                                            RADLSW.145   
         ZFSDWN(JL,KFLEV+1) = ZEPSCO                                       RADLSW.146   
         ZFLUX(JL,1,KFLEV+1) = 0.                                          RADLSW.147   
         ZFLUX(JL,2,KFLEV+1) = 0.                                          RADLSW.148   
         PEMIS(JL) = 1. - PEMIS(JL)                                        RADLSW.149   
         ZPMB(JL,1) = PPSOL(JL)/100.                                       RADLSW.150   
c         print *,' zpmb ',zpmb(jl,1)                                      RADLSW.151   
         ZTL(JL,KFLEV+1) = PT(JL,1)                                        RADLSW.152   
         ZDT0(JL) = 0.                                                     RADLSW.153   
 113  CONTINUE                                                             RADLSW.154   
C                                                                          RADLSW.155   
      DO 115 JK = 1 , KFLEV                                                RADLSW.156   
         JKP1 = JK + 1                                                     RADLSW.157   
         JKL = KFLEV+ 1 - JK                                               RADLSW.158   
         JKLP1 = JKL + 1                                                   RADLSW.159   
         DO 114 JL = 1 , KDLON                                             RADLSW.160   
         ZPMB(JL,JK+1) = ZPMB(JL,JK) - PDP(JL,JKL) / 100.                  RADLSW.161   
         ZTL(JL,JK) = PT(JL,JKLP1)                                         RADLSW.162   
C         ZTAVE(JL,JK) = 0.5*(PT(JL,JKL)+PT(JL,JKLP1))                     RADLSW.163   
         ZTAVE(JL,JK) = ZTM1(JL,JKL)                                       RADLSW.164   
         ZOZ(JL,JK)   = PQOF(JL,JKL) * 46.6968 / G                         RADLSW.165   
         ZCLDSW(JL,JK) = PCLFR(JL,JKL)                                     RADLSW.166   
         ZCLDLW(JL,JK) = PCLFR(JL,JKL)                                     RADLSW.167   
                                                                           RADLSW.168   
         ZTAU(JL,1,JK) = ZEPSCW                                            RADLSW.169   
         ZTAU(JL,2,JK) = ZEPSCW                                            RADLSW.170   
         ZOMEGA(JL,1,JK) = 0.9994                                          RADLSW.171   
         ZOMEGA(JL,2,JK) = 0.9963                                          RADLSW.172   
         ZCG(JL,1,JK) = 0.865                                              RADLSW.173   
         ZCG(JL,2,JK) = 0.910                                              RADLSW.174   
         ZCOOLR(JL,JK) = 0.                                                RADLSW.175   
         ZHEATR(JL,JK) = 0.                                                RADLSW.176   
         ZFSUP(JL,JK) = 0.                                                 RADLSW.177   
         ZFSDWN(JL,JK) = 0.                                                RADLSW.178   
         ZFLUX(JL,1,JK) = 0.                                               RADLSW.179   
         ZFLUX(JL,2,JK) = 0.                                               RADLSW.180   
 114     CONTINUE                                                          RADLSW.181   
 115  CONTINUE                                                             RADLSW.182   
C                                                                          RADLSW.183   
C     --------------------------------------------------------             RADLSW.184   
C                                                                          RADLSW.185   
C*         2.     CLOUD AND AEROSOL PARAMETERS                             RADLSW.186   
C                 ----------------------------                             RADLSW.187   
C                                                                          RADLSW.188   
 200  CONTINUE                                                             RADLSW.189   
C                                                                          RADLSW.190   
      PIERSLWP=0.0                                                         RADLSW.191   
      DO 202 JK = 2 , KFLEV-1                                              RADLSW.192   
         JKL = KFLEV + 1 - JK                                              RADLSW.193   
         DO 201 JL = 1 , KDLON                                             RADLSW.194   
         LO1 = PCLFR(JL,JKL).GT.ZEPSC                                      RADLSW.195   
         ZLWGKG = CVMGT(PQLWP(JL,JKL)*1000./PCLFR(JL,JKL),0.D0,LO1)        RADLSW.196   
         ZFCCA = MIN( PCLFR(JL,JKL) , PCLFR(JL,JKL-1) )                    RADLSW.197   
         ZFCCB = MIN( PCLFR(JL,JKL) , PCLFR(JL,JKL+1) )                    RADLSW.198   
         ZFCC  = MAX( ZFCCA , ZFCCB )                                      RADLSW.199   
         ZFCC = 0.0                                                        RADLSW.200   
         ZLWGKG = ZFCC * CCLWMR + (PCLFR(JL,JKL) - ZFCC) * ZLWGKG          RADLSW.201   
         ZFLWP(JL) = CVMGT( ZLWGKG*PDP(JL,JKL)/(G*PCLFR(JL,JKL)) ,         RADLSW.202   
     S                    ZEPSCW , LO1 )                                   RADLSW.203   
         PIERSLWP=PIERSLWP+ZFLWP(JL)                                       RADLSW.204   
         ZCLDSW(JL,JK) = PCLFR(JL,JKL)                                     RADLSW.205   
         ZCLDLW(JL,JK) = PCLFR(JL,JKL)*(1. - EXP(-0.158 * ZFLWP(JL)))      RADLSW.206   
         ZRADEF = 15.0                                                     RADLSW.207   
         ZTAUEQ = 1.5 * ZFLWP(JL) / ZRADEF                                 RADLSW.208   
         ZTAU(JL,1,JK) = ZTAUEQ                                            RADLSW.209   
         ZTAU(JL,2,JK) = ZTAUEQ                                            RADLSW.210   
         ZOMEGA(JL,1,JK) = 0.9999 - 5.0E-04*EXP(-0.5 * ZTAUEQ)             RADLSW.211   
         ZOMEGA(JL,2,JK) = 0.9988 - 2.5E-03*EXP(-0.05 * ZTAUEQ)            RADLSW.212   
         ZCG(JL,1,JK)=0.865                                                RADLSW.213   
         ZCG(JL,2,JK)=0.910                                                RADLSW.214   
 201     CONTINUE                                                          RADLSW.215   
 202  CONTINUE                                                             RADLSW.216   
C                                                                          RADLSW.217   
      DO 203 JL = 1 , KDLON                                                RADLSW.218   
      ZPMB(JL,KFLEV+1)=0.0                                                 RADLSW.219   
      ZTAVE(JL,KFLEV)=ZTL(JL,KFLEV+1)                                      RADLSW.220   
 203  CONTINUE                                                             RADLSW.221   
C                                                                          RADLSW.222   
      NUAER = NUA                                                          RADLSW.223   
      NTRAER = NTRA                                                        RADLSW.224   
C                                                                          RADLSW.225   
      IF (IAER.EQ.0) THEN                                                  RADLSW.226   
C         NUAER = 13                                                       RADLSW.227   
C         NUAER = 13                                                       RADLSW.228   
C         NTRAER = 14                                                      RADLSW.229   
         DO 206 JK = 1 , KFLEV                                             RADLSW.230   
         DO 205 JAE = 1 , 5                                                RADLSW.231   
         DO 204 JL = 1 , KDLON                                             RADLSW.232   
         PAER(JL,JK,JAE)=1.E-15                                            RADLSW.233   
 204     CONTINUE                                                          RADLSW.234   
 205     CONTINUE                                                          RADLSW.235   
 206     CONTINUE                                                          RADLSW.236   
      END IF                                                               RADLSW.237   
C                                                                          RADLSW.238   
C                                                                          RADLSW.239   
C      END IF                                                              RADLSW.240   
C                                                                          RADLSW.241   
C     -----------------------------------------------------------------    RADLSW.242   
C                                                                          RADLSW.243   
C*         3.     CALL LONGWAVE RADIATION CODE                             RADLSW.244   
C                 ----------------------------                             RADLSW.245   
C                                                                          RADLSW.246   
 300  CONTINUE                                                             RADLSW.247   
c      print *,' hi ',kflev+1,ZPMB(1,KFLEV+1),zpmb(1,1)                    RADLSW.248   
c      DO JK=KFLEV,1,-1                                                    RADLSW.249   
c       JKL=KFLEV+1-JK                                                     RADLSW.250   
c        print *,jk,zpmb(1,jk),pdp(1,jkl),ztave(1,jk),                     RADLSW.251   
c     $      qof(1,jkl)/pdp(1,jkl),wv(1,jkl),pqlwp(1,jkl)                  RADLSW.252   
c      enddo                                                               RADLSW.253   
c zflux is as tave and zpmb with level 1 the surface                       RADLSW.254   
C                                                                          RADLSW.255   
      CALL LW ( KDLON, KRLST, KFLEV, KFLVP1, KFLEV2, KNGL, KNGLP1,         RADLSW.256   
     S          PSIG, PSCT, PCARDI, ITASK                         )        RADLSW.257   
C                                                                          RADLSW.258   
C     -----------------------------------------------------------------    RADLSW.259   
C                                                                          RADLSW.260   
C*         4.     CALL SHORTWAVE RADIATION CODE                            RADLSW.261   
C                 -----------------------------                            RADLSW.262   
C                                                                          RADLSW.263   
 400  CONTINUE                                                             RADLSW.264   
C                                                                          RADLSW.265   
      ZZRMUZ=0.                                                            RADLSW.266   
      DO 401 JL = 1 , KDLON                                                RADLSW.267   
         ZZRMUZ = MAX(ZZRMUZ, PRMU0(JL))                                   RADLSW.268   
 401  CONTINUE                                                             RADLSW.269   
C                                                                          RADLSW.270   
      IF (ZZRMUZ.GT.0.) THEN                                               RADLSW.271   
C                                                                          RADLSW.272   
         CALL SW ( KDLON, KRLST, KFLEV, KFLVP1, PSIG, PSCT, PCARDI,        RADLSW.273   
     S             ITASK )                                                 RADLSW.274   
C                                                                          RADLSW.275   
      END IF                                                               RADLSW.276   
C                                                                          RADLSW.277   
C                                                                          RADLSW.278   
C     ---------------------------------------------------------------      RADLSW.279   
C                                                                          RADLSW.280   
C*         5.     FILL UP THE MODEL NET LW AND SW RADIATIVE FLUXES         RADLSW.281   
C                 ------------------------------------------------         RADLSW.282   
C                                                                          RADLSW.283   
 500  CONTINUE                                                             RADLSW.284   
C                                                                          RADLSW.285   
      DO 501 JL = 1 , KDLON                                                RADLSW.286   
       PEMIS(JL) = 1. - PEMIS(JL)                                          RADLSW.287   
 501  CONTINUE                                                             RADLSW.288   
C                                                                          RADLSW.289   
      DO 503 JKL = 1 , KFLEV+1                                             RADLSW.290   
         JK = KFLVP1 + 1 - JKL                                             RADLSW.291   
         DO 502 JL = 1 , KDLON                                             RADLSW.292   
            FLS(JL,JKL) = ZFSDWN(JL,JK) - ZFSUP(JL,JK)                     RADLSW.293   
            FLT(JL,JKL) = - ZFLUX(JL,1,JK) - ZFLUX(JL,2,JK)                RADLSW.294   
 502     CONTINUE                                                          RADLSW.295   
 503  CONTINUE                                                             RADLSW.296   
C                                                                          RADLSW.297   
C                                                                          RADLSW.298   
C*         5.1     HEATING/COOLING RATES (K/DAY)                           RADLSW.299   
C                  -----------------------------                           RADLSW.300   
 510  CONTINUE                                                             RADLSW.301   
C                                                                          RADLSW.302   
      DO 512 JK = 1 , KFLEV                                                RADLSW.303   
      JKL = KFLEV+1 - JK                                                   RADLSW.304   
      DO 511 JL = 1 , KDLON                                                RADLSW.305   
      ZDFNET = ZFLUX(JL,1,JK+1) + ZFLUX(JL,2,JK+1)                         RADLSW.306   
     S              -ZFLUX(JL,1,JK  ) - ZFLUX(JL,2,JK  )                   RADLSW.307   
      ZCOOLR(JL,JK) = CDAY * ZDFNET / PDP(JL,JKL)                          RADLSW.308   
      ZDFNET = ZFSUP(JL,JK  ) - ZFSDWN(JL,JK  )                            RADLSW.309   
     S        -ZFSUP(JL,JK+1) + ZFSDWN(JL,JK+1)                            RADLSW.310   
      ZHEATR(JL,JK) = CDAY * ZDFNET / PDP(JL,JKL)                          RADLSW.311   
 511  CONTINUE                                                             RADLSW.312   
 512  CONTINUE                                                             RADLSW.313   
CCC  Combine the lowerest two layer as one layer to correspond             RADLSW.314   
CCC  the radiative convective model. (leave the lowerest level             RADLSW.315   
CCC  heating rate undefined---set to zero)   D.LI 8/8 1991                 RADLSW.316   
      DO 518 JL = 1, KDLON                                                 RADLSW.317   
      ZDFNET = ZFLUX(JL,1,3) + ZFLUX(JL,2,3)                               RADLSW.318   
     S        -ZFLUX(JL,1,1) - ZFLUX(JL,2,1)                               RADLSW.319   
      ZCOOLR(JL,2) = CDAY*ZDFNET/(PDP(JL,KFLEV-1)+PDP(JL,KFLEV))           RADLSW.320   
      ZCOOLR(JL,1)=0.0D0                                                   RADLSW.321   
      ZDFNET = ZFSUP(JL,1) - ZFSDWN(JL,1)                                  RADLSW.322   
     S        -ZFSUP(JL,3) + ZFSDWN(JL,3)                                  RADLSW.323   
      ZHEATR(JL,2) = CDAY*ZDFNET/(PDP(JL,KFLEV-1)+PDP(JL,KFLEV))           RADLSW.324   
      ZHEATR(JL,1)=0.0D0                                                   RADLSW.325   
 518  CONTINUE                                                             RADLSW.326   
CCC                                                                        RADLSW.327   
C                                                                          RADLSW.328   
c      IF (IMP.LT.4) THEN                                                  RADLSW.329   
c       JL = 1                                                             RADLSW.330   
c       WRITE(NOUT,891) (ZFLUX(JL,1,JK),JK = 1 , KFLVP1)                   RADLSW.331   
c       WRITE(NOUT,891) (ZFLUX(JL,2,JK),JK = 1 , KFLVP1)                   RADLSW.332   
c       WRITE(NOUT,889) (ZCOOLR(JL,JK),JK = 1 , KFLEV)                     RADLSW.333   
c      WRITE(NOUT,891) (ZFSUP(JL,JK),JK = 1 , KFLVP1)                      RADLSW.334   
c      WRITE(NOUT,891) (ZFSDWN(JL,JK),JK = 1 , KFLVP1)                     RADLSW.335   
c      WRITE(NOUT,889) (ZHEATR(JL,JK),JK = 1 , KFLEV)                      RADLSW.336   
C      END IF                                                              RADLSW.337   
C                                                                          RADLSW.338   
C-----------------------------------------------------------------         RADLSW.339   
C                       FORMATS                                            RADLSW.340   
C                       -------                                            RADLSW.341   
C                                                                          RADLSW.342   
C                                                                          RADLSW.343   
 883  FORMAT(2X,16E8.2)                                                    RADLSW.344   
 884  FORMAT(4X,18F7.4)                                                    RADLSW.345   
 885  FORMAT(4X,18F7.1)                                                    RADLSW.346   
 887  FORMAT(1X,10E12.6)                                                   RADLSW.347   
 889  FORMAT(4X,18F7.3)                                                    RADLSW.348   
 891  FORMAT(1X,18F7.1)                                                    RADLSW.349   
C                                                                          RADLSW.350   
C     ------------------------------------------------------               RADLSW.351   
C                                                                          RADLSW.352   
      RETURN                                                               RADLSW.353   
      END                                                                  RADLSW.354   
C                                                                          RADLSW.355   
*DECK SW                                                                   SW.1     
      SUBROUTINE SW ( KDLON,KRLST,KFLEV,KFLVP1,PSIG,PSCT,PCARDI,ITASK )    SW.2     
C                                                                          SW.3     
C**** *SW* - COMPUTES THE SHORTWAVE RADIATION FLUXES.                      SW.4     
C                                                                          SW.5     
C     PURPOSE.                                                             SW.6     
C     --------                                                             SW.7     
C           COMPUTES THE SHORTWAVE RADIATION FLUXES IN TWO SPECTRAL        SW.8     
C     INTERVALS FOLLOWING FOUQUART AND BONNEL (1980).                      SW.9     
C                                                                          SW.10    
C**   INTERFACE.                                                           SW.11    
C     ----------                                                           SW.12    
C          *SW* IS CALLED BY *RADLSW*                                      SW.13    
C                                                                          SW.14    
C                                                                          SW.15    
C        IMPLICIT ARGUMENTS                                                SW.16    
C        --------------------                                              SW.17    
C                                                                          SW.18    
C     ==== INPUTS ===                                                      SW.19    
C     ==== OUTPUTS ===                                                     SW.20    
C                                                                          SW.21    
C     METHOD.                                                              SW.22    
C     -------                                                              SW.23    
C                                                                          SW.24    
C          1. COMPUTES ABSORBER AMOUNTS WITH TEMPERATURE AND PRESSURE      SW.25    
C     SCALING.                                                             SW.26    
C          2. COMPUTES UPWARD AND DOWNWARD FLUXES IN THE 0.25-0.68         SW.27    
C     MICRON SPECTRAL INTERVAL.                                            SW.28    
C          3. COMPUTES UPWARD AND DOWNWARD FLUXES IN THE 0.68-4.0          SW.29    
C     MICRON SPECTRAL INTERVAL.                                            SW.30    
C                                                                          SW.31    
C     EXTERNALS.                                                           SW.32    
C     ----------                                                           SW.33    
C                                                                          SW.34    
C          *DEDD*, *SWTT*                                                  SW.35    
C                                                                          SW.36    
C     REFERENCE.                                                           SW.37    
C     ----------                                                           SW.38    
C                                                                          SW.39    
C        SEE RADIATION'S PART OF THE ECMWF RESEARCH DEPARTMENT             SW.40    
C        DOCUMENTATION, AND FOUQUART AND BONNEL (1980)                     SW.41    
C                                                                          SW.42    
C     AUTHOR.                                                              SW.43    
C     -------                                                              SW.44    
C        JEAN-JACQUES MORCRETTE  *ECMWF*                                   SW.45    
C                                                                          SW.46    
C     MODIFICATIONS.                                                       SW.47    
C     --------------                                                       SW.48    
C        ORIGINAL : 88-12-15                                               SW.49    
C     ----------------------------------------------------------------     SW.50    
C                                                                          SW.51    
C      IMPLICIT LOGICAL (L)                                                SW.52    
C                                                                          SW.53    
*CALL ZPARB                                                                SW.54    
c      INCLUDE 'zparb.upd'                                                 SW.55    
      REAL XL2, XL3, ALOS                                                  SW.56    
      REAL FOXDWN(IRLST, IRLVP1)                                           SW.57    
C     ----------------------------------------------------------------     SW.58    
C                                                                          SW.59    
CDIR$ VFUNCTION ALOG, EXP                                                  SW.60    
C     -----------------------                                              SW.61    
C                                                                          SW.62    
C                                                                          SW.63    
C     ----------------------------------------------------------------     SW.64    
C                                                                          SW.65    
C      WRITE(6,*) ' ***SUBROUTINE SW*** '                                  SW.66    
C                                                                          SW.67    
      DO 96 JL=1,NRLST                                                     SW.68    
         DO 97 JK=1,NLEV                                                   SW.69    
            PCLDSW(JL,JK) = ZCLDSW(JL,JK)                                  SW.70    
            POZ   (JL,JK) = ZOZ   (JL,JK)                                  SW.71    
            PPMB  (JL,JK) = ZPMB  (JL,JK)                                  SW.72    
            PTAVE (JL,JK) = ZTAVE (JL,JK)                                  SW.73    
            PFDOWN(JL,JK) = ZFSDWN(JL,JK)                                  SW.74    
            PFUP  (JL,JK) = ZFSUP (JL,JK)                                  SW.75    
            DO 98 II=1,2                                                   SW.76    
               PCG   (JL,II,JK) = ZCG   (JL,II,JK)                         SW.77    
               POMEGA(JL,II,JK) = ZOMEGA(JL,II,JK)                         SW.78    
               PTAU  (JL,II,JK) = ZTAU  (JL,II,JK)                         SW.79    
 98         CONTINUE                                                       SW.80    
 97      CONTINUE                                                          SW.81    
         DO 99 II=1,2                                                      SW.82    
            PALBS(JL,II) = ZALBSU(JL,II)                                   SW.83    
 99      CONTINUE                                                          SW.84    
         PPMB  (JL,NRLEV+1) = ZPMB  (JL,NRLEV+1)                           SW.85    
         PFDOWN(JL,NRLEV+1) = ZFSDWN(JL,NRLEV+1)                           SW.86    
         PFUP  (JL,NRLEV+1) = ZFSUP (JL,NRLEV+1)                           SW.87    
 96   CONTINUE                                                             SW.88    
C                                                                          SW.89    
C*         1.     COMPUTES AMOUNTS OF ABSORBERS                            SW.90    
C                 -----------------------------                            SW.91    
C                                                                          SW.92    
 100  CONTINUE                                                             SW.93    
C                                                                          SW.94    
C                                                                          SW.95    
C*         1.1    INITIALIZES QUANTITIES                                   SW.96    
C                 ----------------------                                   SW.97    
C                                                                          SW.98    
 110  CONTINUE                                                             SW.99    
C                                                                          SW.100   
      DO 111 JL = 1 , KDLON                                                SW.101   
         ZC1I(JL,KFLEV+1)=0.                                               SW.102   
         ZUD(JL,1,KFLEV+1)=0.                                              SW.103   
         ZUD(JL,2,KFLEV+1)=0.                                              SW.104   
         ZUD(JL,3,KFLEV+1)=0.                                              SW.105   
         ZFACT(JL)= PRMU0(JL) * PSCT * RDAYL(JL)                           SW.106   
         ZRMU(JL)=SQRT(1224.* PRMU0(JL) * PRMU0(JL) + 1.) / 35.            SW.107   
         ZSEC(JL)=1./ZRMU(JL)                                              SW.108   
 111  CONTINUE                                                             SW.109   
C                                                                          SW.110   
C                                                                          SW.111   
C*         1.2    OZONE FOR DOWNWARD LOOKING PATH                          SW.112   
C                 -------------------------------                          SW.113   
C                                                                          SW.114   
 120  CONTINUE                                                             SW.115   
C                                                                          SW.116   
      DO 122 JK = 1 , KFLEV                                                SW.117   
         JKL = KFLEV+1 - JK                                                SW.118   
         JKLP1 = JKL + 1                                                   SW.119   
         DO 121 JL = 1 , KDLON                                             SW.120   
            ZUD(JL,3,JKL) = ZUD(JL,3,JKLP1) + POZ(JL,JKL) * ZSEC(JL)       SW.121   
 121     CONTINUE                                                          SW.122   
 122  CONTINUE                                                             SW.123   
C                                                                          SW.124   
c          SCHUMANN-RUNGE and HERZBERG CONTINUUM (0.12 - 0.25 MICRON)      SW.125   
c          ----------------------------------------------------------      SW.126   
c                                                                          SW.127   
      ALOS=2.687E19                                                        SW.128   
      DO 50 JL = 1 , KDLON                                                 SW.129   
        FOXDWN(JL,1)=0.0                                                   SW.130   
        IF (PRMU0(JL).GT.0.0001) THEN                                      SW.131   
          XL3=0.0                                                          SW.132   
          DO 55 JK=1,KFLEV                                                 SW.133   
            XL3=XL3+POZ(JL,JK)*ZSEC(JL)*ALOS                               SW.134   
   55     CONTINUE                                                         SW.135   
C                                                                          SW.136   
C set XL2O as mesopause value if too small                                 SW.137   
          XL2O=4.442E19*1.E-4*ZSEC(JL)                                     SW.138   
C                                                                          SW.139   
          DO 60 JK=1,KFLEV                                                 SW.140   
            XL3=XL3-POZ(JL,JK)*ZSEC(JL)*ALOS                               SW.141   
C            XL2=4.442E19*PPMB(JL,JK+1)*ZSEC(JL)*100.0                     SW.142   
            XL2=MAX(4.442E19*PPMB(JL,JK+1)*ZSEC(JL)*100.0, XL2O)           SW.143   
C                                                                          SW.144   
            FOXDWN(JL,JK+1) =                                              SW.145   
     *      (  0.913 *EXP(-5.500E-24*XL2-6.215E-18*XL3)                    SW.146   
     *    + 0.6308 *EXP(-1.342E-26*XL2-1.656E-18*XL3)                      SW.147   
     *    + 0.4*2.30E-3*EXP(-3.159E-20*XL2-1.857E-06*XL2**0.33837)         SW.148   
     *    + 0.4*3.00E-3*EXP(-2.261E-24*XL2-1.917E-14*XL2**0.78903)         SW.149   
     *    + 0.3*3.50E-3*EXP(-5.399E-24*XL2-2.466E-17*XL2**0.92105)         SW.150   
     *    + 0.3*2.80E-3*EXP(-3.406E-24*XL2-7.787E-18*XL2**0.9269 )         SW.151   
     *    + 0.1*0.1466 *EXP(-2.915E-25*XL2**1.06135                        SW.152   
     *                   - 1.866E-07*XL2**0.2895) )/SOLC                   SW.153   
C                                                                          SW.154   
   60     CONTINUE                                                         SW.155   
        ELSE                                                               SW.156   
          DO 65 JK=KFLEV,1,-1                                              SW.157   
            FOXDWN(JL,JK)=0.0                                              SW.158   
   65     CONTINUE                                                         SW.159   
        ENDIF                                                              SW.160   
   50 CONTINUE                                                             SW.161   
C                                                                          SW.162   
C*         1.3    OZONE FOR UPWARD LOOKING PATH AND OTHER ABSORBERS        SW.163   
C                 -------------------------------------------------        SW.164   
C                                                                          SW.165   
 130  CONTINUE                                                             SW.166   
C                                                                          SW.167   
      DO 131 JL = 1 , KDLON                                                SW.168   
         ZUM(JL,1) = ZUD(JL,3,1)                                           SW.169   
         ZU1D(JL) = 0.                                                     SW.170   
         ZU2D(JL) = 0.                                                     SW.171   
         ZPSIG = PPSOL(JL) / 101325.                                       SW.172   
         ZP75(JL) = PPSOL(JL) * ZPSIG ** 0.75                              SW.173   
         ZP90(JL) = PPSOL(JL) * ZPSIG ** 0.90                              SW.174   
         ZO175(JL) = 1.0                                                   SW.175   
         ZO190(JL) = 1.0                                                   SW.176   
         ZSIGO(JL) = 1.0                                                   SW.177   
 131  CONTINUE                                                             SW.178   
C                                                                          SW.179   
      DO 133 JK = 1 , KFLEV                                                SW.180   
         JKP1 = JK + 1                                                     SW.181   
         JKL = KFLEV+1 - JK                                                SW.182   
         DO 132 JL = 1 , KDLON                                             SW.183   
            ZUM(JL,JKP1) = ZUM(JL,JK) + POZ(JL,JK) * 1.66                  SW.184   
            ZRT = 273.15 / PTAVE(JL,JK)                                    SW.185   
            ZWH2O = MAX(PWV(JL,JKL) , ZEPSCQ )                             SW.186   
            ZSIGN(JL) = 100. * PPMB(JL,JKP1) / PPSOL(JL)                   SW.187   
            ZDSIG(JL,JK) = ZSIGO(JL) - ZSIGN(JL)                           SW.188   
            ZN175(JL) = ZSIGN(JL) ** 1.75                                  SW.189   
            ZN190(JL) = ZSIGN(JL) ** 1.90                                  SW.190   
            ZDSCO2 = ZO175(JL) - ZN175(JL)                                 SW.191   
            ZDSH2O = ZO190(JL) - ZN190(JL)                                 SW.192   
            ZUD(JL,1,JK) = ZP90(JL) * ZDSH2O*CH2O*ZWH2O  * ZRT **0.45      SW.193   
            ZUD(JL,2,JK) = ZP75(JL) * ZDSCO2*CCO2*PCARDI * ZRT **0.375     SW.194   
            ZU1D(JL) = ZU1D(JL) + ZUD(JL,1,JK)                             SW.195   
            ZU2D(JL) = ZU2D(JL) + ZUD(JL,2,JK)                             SW.196   
            ZSIGO(JL) = ZSIGN(JL)                                          SW.197   
            ZO175(JL) = ZN175(JL)                                          SW.198   
            ZO190(JL) = ZN190(JL)                                          SW.199   
 132     CONTINUE                                                          SW.200   
 133  CONTINUE                                                             SW.201   
C                                                                          SW.202   
C*         1.4    COMPUTES CLEAR-SKY GREY ABSORPTION COEFFICIENTS          SW.203   
C                 -----------------------------------------------          SW.204   
C                                                                          SW.205   
 140  CONTINUE                                                             SW.206   
C                                                                          SW.207   
      DO 141 JL = 1 , KDLON                                                SW.208   
         ZU1D(JL) = ZU1D(JL) * ZSEC(JL)                                    SW.209   
         ZU2D(JL) = ZU2D(JL) * ZSEC(JL)                                    SW.210   
         ZW(JL) = ZU1D(JL)                                                 SW.211   
 141  CONTINUE                                                             SW.212   
C                                                                          SW.213   
      CALL SWTT ( 2, 1, KDLON,KRLST,KFLEV,ITASK )                          SW.214   
C                                                                          SW.215   
      DO 142 JL = 1 , KDLON                                                SW.216   
         ZAKI(JL,1) = -LOG( ZR1 (JL)) / ZU1D(JL)                           SW.217   
         ZW(JL) = ZU2D(JL)                                                 SW.218   
 142  CONTINUE                                                             SW.219   
C                                                                          SW.220   
      CALL SWTT ( 2, 2, KDLON,KRLST,KFLEV,ITASK )                          SW.221   
C                                                                          SW.222   
      DO 143 JL = 1 , KDLON                                                SW.223   
         ZAKI(JL,2) = -LOG( ZR1 (JL)) / ZU2D(JL)                           SW.224   
 143  CONTINUE                                                             SW.225   
C                                                                          SW.226   
C     ---------------------------------------------------------------      SW.227   
C                                                                          SW.228   
C*         2.     FIRST SPECTRAL INTERVAL (0.25-0.68 MICRON)               SW.229   
C                 ----------------------- ------------------               SW.230   
C                                                                          SW.231   
 200  CONTINUE                                                             SW.232   
C                                                                          SW.233   
      INU = 1                                                              SW.234   
C                                                                          SW.235   
C*         2.1    OPTICAL THICKNESS FOR RAYLEIGH SCATTERING                SW.236   
C                 -----------------------------------------                SW.237   
C                                                                          SW.238   
 210  CONTINUE                                                             SW.239   
C                                                                          SW.240   
      DO 211 JL = 1 , KDLON                                                SW.241   
          ZRAYL(JL) = CRAY(INU,1) + ZRMU(JL) * (CRAY(INU,2) + ZRMU(JL)     SW.242   
     S            * (CRAY(INU,3) + ZRMU(JL) * (CRAY(INU,4) + ZRMU(JL)      SW.243   
     S            * (CRAY(INU,5) + ZRMU(JL) *   CRAY(INU,6)       ))))     SW.244   
 211  CONTINUE                                                             SW.245   
C                                                                          SW.246   
C*         2.2    OPTICAL PARAMETERS FOR AEROSOLS AND RAYLEIGH             SW.247   
C                 --------------------------------------------             SW.248   
C                                                                          SW.249   
 220  CONTINUE                                                             SW.250   
C                                                                          SW.251   
      DO 225 JK = 1 , KFLEV                                                SW.252   
         DO 221 JL = 1 , KDLON                                             SW.253   
            ZCGAZ(JL,JK) = 0.                                              SW.254   
            ZPIZAZ(JL,JK) =  0.                                            SW.255   
            ZTAUAZ(JL,JK) = 0.                                             SW.256   
 221     CONTINUE                                                          SW.257   
         DO 223 JAE=1,5                                                    SW.258   
            DO 222 JL = 1 , KDLON                                          SW.259   
               ZTAUAZ(JL,JK)=ZTAUAZ(JL,JK)                                 SW.260   
     S                      +PAER(JL,JK,JAE)*TAUA(INU,JAE)                 SW.261   
               ZPIZAZ(JL,JK)=ZPIZAZ(JL,JK)+PAER(JL,JK,JAE)                 SW.262   
     S                   * TAUA(INU,JAE)*PIZA(INU,JAE)                     SW.263   
               ZCGAZ(JL,JK) =  ZCGAZ(JL,JK) +PAER(JL,JK,JAE)               SW.264   
     S                   * TAUA(INU,JAE)*PIZA(INU,JAE)*CGA(INU,JAE)        SW.265   
 222        CONTINUE                                                       SW.266   
 223     CONTINUE                                                          SW.267   
C                                                                          SW.268   
         DO 224 JL = 1 , KDLON                                             SW.269   
            ZCGAZ(JL,JK) = CVMGT( 0.D0, ZCGAZ(JL,JK) / ZPIZAZ(JL,JK),      SW.270   
     S                            IAER.EQ.0)                               SW.271   
             ZPIZAZ(JL,JK) = CVMGT( 1.D0, ZPIZAZ(JL,JK) / ZTAUAZ(JL,JK),   SW.272   
     S                            IAER.EQ.0)                               SW.273   
            ZTRAY = ZRAYL(JL) * ZDSIG(JL,JK)                               SW.274   
            ZRATIO = ZTRAY / (ZTRAY + ZTAUAZ(JL,JK))                       SW.275   
            ZGAR = ZCGAZ(JL,JK)                                            SW.276   
            ZFF = ZGAR * ZGAR                                              SW.277   
            ZTAUAZ(JL,JK)=ZTRAY+ZTAUAZ(JL,JK)*(1.-ZPIZAZ(JL,JK)*ZFF)       SW.278   
            ZCGAZ(JL,JK) = ZGAR * (1. - ZRATIO) / (1. + ZGAR)              SW.279   
            ZPIZAZ(JL,JK) =ZRATIO+(1.-ZRATIO)*ZPIZAZ(JL,JK)*(1.-ZFF)       SW.280   
     S                    / (1. - ZPIZAZ(JL,JK) * ZFF)                     SW.281   
 224     CONTINUE                                                          SW.282   
 225  CONTINUE                                                             SW.283   
C                                                                          SW.284   
C*         2.3    TOTAL EFFECTIVE CLOUDINESS ABOVE A GIVEN LEVEL           SW.285   
C                 ----------------------------------------------           SW.286   
C                                                                          SW.287   
 230  CONTINUE                                                             SW.288   
C                                                                          SW.289   
      DO 231 JL = 1 , KDLON                                                SW.290   
         ZR23(JL) = 0.                                                     SW.291   
         ZC1I(JL,KFLEV+1) = 0.                                             SW.292   
 231  CONTINUE                                                             SW.293   
C                                                                          SW.294   
      DO 233 JK = 1 , KFLEV                                                SW.295   
         JKL = KFLEV+1 - JK                                                SW.296   
         JKLP1 = JKL + 1                                                   SW.297   
         DO 232 JL = 1 , KDLON                                             SW.298   
            ZFAOA = 1.-ZPIZAZ(JL,JKL)*ZCGAZ(JL,JKL)*ZCGAZ(JL,JKL)          SW.299   
            ZFAOC = 1. - POMEGA(JL,INU,JKL) * PCG(JL,INU,JKL)              SW.300   
     S                                       * PCG(JL,INU,JKL)             SW.301   
            ZCORAE = ZFAOA * ZTAUAZ(JL,JKL) * ZSEC(JL)                     SW.302   
            ZCORCD = ZFAOC * PTAU(JL,INU,JKL) * ZSEC(JL)                   SW.303   
            ZR21(JL) = EXP(-ZCORAE   )                                     SW.304   
            ZR22(JL) = EXP(-ZCORCD   )                                     SW.305   
            ZSS1(JL) = PCLDSW(JL,JKL)*(1.0-ZR21(JL)*ZR22(JL))              SW.306   
     S               + (1.0-PCLDSW(JL,JKL))*(1.0-ZR21(JL))                 SW.307   
            ZC1I(JL,JKL) = 1.0-(1.0-ZSS1(JL))*(1.0-ZC1I(JL,JKLP1))         SW.308   
 232     CONTINUE                                                          SW.309   
 233  CONTINUE                                                             SW.310   
C                                                                          SW.311   
C*         2.4    REFLECTIVITY/TRANSMISSIVITY FOR PURE SCATTERING          SW.312   
C                 -----------------------------------------------          SW.313   
C                                                                          SW.314   
 240  CONTINUE                                                             SW.315   
C                                                                          SW.316   
      DO 241 JL = 1 , KDLON                                                SW.317   
         ZREFZ(JL,2,1) = PALBS(JL,INU)                                     SW.318   
         ZREFZ(JL,1,1) = PALBS(JL,INU)                                     SW.319   
 241  CONTINUE                                                             SW.320   
C                                                                          SW.321   
      DO 246 JK = 2 , KFLEV+1                                              SW.322   
         JKM1 = JK-1                                                       SW.323   
         DO 242 JL = 1 , KDLON                                             SW.324   
            ZRNEB(JL)= PCLDSW(JL,JKM1)                                     SW.325   
             ZRE1(JL)=0.                                                   SW.326   
            ZTR1(JL)=0.                                                    SW.327   
            ZRE2(JL)=0.                                                    SW.328   
            ZTR2(JL)=0.                                                    SW.329   
C                                                                          SW.330   
C*         2.4.1  EQUIVALENT ZENITH ANGLE                                  SW.331   
C                 -----------------------                                  SW.332   
C                                                                          SW.333   
 2410 CONTINUE                                                             SW.334   
C                                                                          SW.335   
            ZMUE = (1.-ZC1I(JL,JK)) * ZSEC(JL)                             SW.336   
     S            + ZC1I(JL,JK) * 1.66                                     SW.337   
            ZRMUE(JL,JK) = 1./ZMUE                                         SW.338   
C                                                                          SW.339   
C*         2.4.2  REFLECT./TRANSMISSIVITY DUE TO RAYLEIGH AND AEROSOLS     SW.340   
C                 ----------------------------------------------------     SW.341   
C                                                                          SW.342   
 2420 CONTINUE                                                             SW.343   
C                                                                          SW.344   
            ZGAP = ZCGAZ(JL,JKM1)                                          SW.345   
            ZBMU0 = 0.5 - 0.75 * ZGAP / ZMUE                               SW.346   
            ZWW = ZPIZAZ(JL,JKM1)                                          SW.347   
            ZTO = ZTAUAZ(JL,JKM1)                                          SW.348   
            ZDEN = 1. + (1. - ZWW + ZBMU0 * ZWW) * ZTO * ZMUE              SW.349   
     S           + (1-ZWW) * (1. - ZWW +2.*ZBMU0*ZWW)*ZTO*ZTO*ZMUE*ZMUE    SW.350   
            ZRAY1(JL,JKM1) = ZBMU0 * ZWW * ZTO * ZMUE / ZDEN               SW.351   
            ZTRA1(JL,JKM1) = 1. / ZDEN                                     SW.352   
C                                                                          SW.353   
            ZMU1 = 0.5                                                     SW.354   
            ZBMU1 = 0.5 - 0.75 * ZGAP * ZMU1                               SW.355   
            ZDEN1= 1. + (1. - ZWW + ZBMU1 * ZWW) * ZTO / ZMU1              SW.356   
     S           + (1-ZWW) * (1. - ZWW +2.*ZBMU1*ZWW)*ZTO*ZTO/ZMU1/ZMU1    SW.357   
            ZRAY2(JL,JKM1) = ZBMU1 * ZWW * ZTO / ZMU1 / ZDEN1              SW.358   
            ZTRA2(JL,JKM1) = 1. / ZDEN1                                    SW.359   
C                                                                          SW.360   
C*         2.4.3  EFFECT OF CLOUD LAYER                                    SW.361   
C                 ---------------------                                    SW.362   
C                                                                          SW.363   
 2430 CONTINUE                                                             SW.364   
C                                                                          SW.365   
            PTAU(JL,INU,JKM1) = MAX( PTAU(JL,INU,JKM1) , ZEPSCT )          SW.366   
            ZW(JL) = POMEGA(JL,INU,JKM1)                                   SW.367   
            ZTO1(JL) = PTAU(JL,INU,JKM1)/ZW(JL)                            SW.368   
     S            + ZTAUAZ(JL,JKM1)/ZPIZAZ(JL,JKM1)                        SW.369   
            ZR21(JL) = PTAU(JL,INU,JKM1) + ZTAUAZ(JL,JKM1)                 SW.370   
            ZR22(JL) = PTAU(JL,INU,JKM1) / ZR21(JL)                        SW.371   
            ZGG(JL) = ZR22(JL) * PCG(JL,INU,JKM1)                          SW.372   
     S              + (1. - ZR22(JL)) * ZCGAZ(JL,JKM1)                     SW.373   
            ZW(JL) = ZR21(JL) / ZTO1(JL)                                   SW.374   
            ZREF(JL) = ZREFZ(JL,1,JKM1)                                    SW.375   
            ZRMUZ(JL) = ZRMUE(JL,JK)                                       SW.376   
 242     CONTINUE                                                          SW.377   
C                                                                          SW.378   
         CALL DEDD ( KDLON,KRLST,KFLEV,ITASK )                             SW.379   
C                                                                          SW.380   
         DO 245 JL = 1 , KDLON                                             SW.381   
C                                                                          SW.382   
             ZREFZ(JL,1,JK) = (1.-ZRNEB(JL)) * (ZRAY1(JL,JKM1)             SW.383   
     S                     + ZREFZ(JL,1,JKM1) * ZTRA1(JL,JKM1)             SW.384   
     S                     * ZTRA2(JL,JKM1)                                SW.385   
     S                     /(1.-ZRAY2(JL,JKM1)*ZREFZ(JL,1,JKM1)))          SW.386   
     S                     + ZRNEB(JL) * ZRE2(JL)                          SW.387   
C                                                                          SW.388   
            ZTR(JL,1,JKM1) = ZRNEB(JL) * ZTR2(JL) + (ZTRA1(JL,JKM1)        SW.389   
     S                     /(1.-ZRAY2(JL,JKM1)*ZREFZ(JL,1,JKM1)))          SW.390   
     S                     * (1.-ZRNEB(JL))                                SW.391   
C                                                                          SW.392   
 245     CONTINUE                                                          SW.393   
 246  CONTINUE                                                             SW.394   
C                                                                          SW.395   
C*         2.5    REFLECT./TRANSMISSIVITY BETWEEN SURFACE AND LEVEL        SW.396   
C                 -------------------------------------------------        SW.397   
C                                                                          SW.398   
 250  CONTINUE                                                             SW.399   
C                                                                          SW.400   
      JAJ = 2                                                              SW.401   
      DO 251 JL = 1 , KDLON                                                SW.402   
         ZRJ(JL,JAJ,KFLEV+1) = 1.                                          SW.403   
         ZRK(JL,JAJ,KFLEV+1) = ZREFZ(JL, 1,KFLEV+1)                        SW.404   
 251  CONTINUE                                                             SW.405   
C                                                                          SW.406   
      DO 253 JK = 1 , KFLEV                                                SW.407   
         JKL = KFLEV+1 - JK                                                SW.408   
         JKLP1 = JKL + 1                                                   SW.409   
         DO 252 JL = 1 , KDLON                                             SW.410   
            ZRE11= ZRJ(JL,JAJ,JKLP1) * ZTR(JL, 1,JKL)                      SW.411   
            ZRJ(JL,JAJ,JKL) = ZRE11                                        SW.412   
            ZRK(JL,JAJ,JKL) = ZRE11 * ZREFZ(JL, 1,JKL)                     SW.413   
 252     CONTINUE                                                          SW.414   
 253  CONTINUE                                                             SW.415   
C                                                                          SW.416   
C*         2.6    OZONE ABSORPTION AND FLUXES                              SW.417   
C                 ---------------------------                              SW.418   
C                                                                          SW.419   
 260  CONTINUE                                                             SW.420   
C                                                                          SW.421   
      DO 264 JK = 1 , KFLEV+1                                              SW.422   
         JKL = KFLEV+1 - JK + 1                                            SW.423   
         DO 262 JL = 1 , KDLON                                             SW.424   
            ZW(JL) = ZUD(JL,3,JKL)                                         SW.425   
 262     CONTINUE                                                          SW.426   
C                                                                          SW.427   
         CALL SWTT ( INU, 3, KDLON,KRLST,KFLEV,ITASK )                     SW.428   
C                                                                          SW.429   
         DO 263 JL = 1 , KDLON                                             SW.430   
             ZFD(JL,JKL) = ZR1(JL) * ZRJ(JL,JAJ,JKL) * SUN(INU)            SW.431   
 263     CONTINUE                                                          SW.432   
 264  CONTINUE                                                             SW.433   
C                                                                          SW.434   
      DO 265 JL = 1 , KDLON                                                SW.435   
         ZFU(JL,1) = PALBS(JL,INU) * ZFD(JL,1)                             SW.436   
 265  CONTINUE                                                             SW.437   
C                                                                          SW.438   
      DO 268 JK = 1 , KFLEV+1                                              SW.439   
         DO 266 JL = 1 , KDLON                                             SW.440   
            ZW(JL) = ZUM(JL,JK)                                            SW.441   
 266     CONTINUE                                                          SW.442   
C                                                                          SW.443   
         CALL SWTT ( INU, 3, KDLON,KRLST,KFLEV,ITASK )                     SW.444   
C                                                                          SW.445   
         DO 267 JL = 1 , KDLON                                             SW.446   
            ZFU(JL,JK) = ZR1(JL) * ZRK(JL,JAJ,JK) * SUN(INU)               SW.447   
 267     CONTINUE                                                          SW.448   
 268  CONTINUE                                                             SW.449   
C                                                                          SW.450   
C                                                                          SW.451   
      IWHERE=268                                                           SW.452   
C     PRINT 878,IWHERE                                                     SW.453   
 878  FORMAT(1X,' LOOP ',I4,' SUCCESSFUL IN SW    INDEX=',I3)              SW.454   
C     ------------------------------------------------------------------   SW.455   
C                                                                          SW.456   
C*         3.     SECOND SPECTRAL INTERVAL (0.68-4.00 MICRON)              SW.457   
C                 ----------------------- -------------------              SW.458   
C                                                                          SW.459   
 300  CONTINUE                                                             SW.460   
C                                                                          SW.461   
      INU = 2                                                              SW.462   
C                                                                          SW.463   
C*         3.1    OPTICAL THICKNESS FOR RAYLEIGH SCATTERING                SW.464   
C                 -----------------------------------------                SW.465   
C                                                                          SW.466   
 310  CONTINUE                                                             SW.467   
C                                                                          SW.468   
      DO 311 JL = 1 , KDLON                                                SW.469   
         ZRMUM1 = 1. - ZRMU(JL)                                            SW.470   
         ZRAYL(JL) = CRAY(INU,1) + ZRMUM1   * (CRAY(INU,2) + ZRMUM1        SW.471   
     S            * (CRAY(INU,3) + ZRMUM1   * (CRAY(INU,4) + ZRMUM1        SW.472   
     S            * (CRAY(INU,5) + ZRMUM1   *  CRAY(INU,6)       ))))      SW.473   
 311  CONTINUE                                                             SW.474   
C                                                                          SW.475   
C*         3.2    OPTICAL PARAMETERS FOR AEROSOLS AND RAYLEIGH             SW.476   
C                 --------------------------------------------             SW.477   
C                                                                          SW.478   
 320  CONTINUE                                                             SW.479   
C                                                                          SW.480   
      DO 325 JK = 1 , KFLEV                                                SW.481   
         DO 321 JL = 1 , KDLON                                             SW.482   
            ZCGAZ(JL,JK) = 0.                                              SW.483   
            ZPIZAZ(JL,JK) = 0.                                             SW.484   
            ZTAUAZ(JL,JK) = 0.                                             SW.485   
 321     CONTINUE                                                          SW.486   
         DO 323 JAE=1,5                                                    SW.487   
            DO 322 JL = 1 , KDLON                                          SW.488   
               ZTAUAZ(JL,JK) = ZTAUAZ(JL,JK) + PAER(JL,JK,JAE)             SW.489   
     S                       * TAUA(INU,JAE)                               SW.490   
               ZPIZAZ(JL,JK) = ZPIZAZ(JL,JK) + PAER(JL,JK,JAE)             SW.491   
     S                       * TAUA(INU,JAE) * PIZA(INU,JAE)               SW.492   
               ZCGAZ(JL,JK) =  ZCGAZ(JL,JK) + PAER(JL,JK,JAE)              SW.493   
     S                   * TAUA(INU,JAE)*PIZA(INU,JAE)*CGA(INU,JAE)        SW.494   
 322        CONTINUE                                                       SW.495   
 323     CONTINUE                                                          SW.496   
         DO 324 JL = 1 , KDLON                                             SW.497   
            ZCGAZ(JL,JK) = CVMGT( 0.D0, ZCGAZ(JL,JK) / ZPIZAZ(JL,JK),      SW.498   
     S                            IAER.EQ.0)                               SW.499   
            ZPIZAZ(JL,JK) = CVMGT( 1.D0, ZPIZAZ(JL,JK) / ZTAUAZ(JL,JK),    SW.500   
     S                             IAER.EQ.0)                              SW.501   
            ZTRAY = ZRAYL(JL) * ZDSIG(JL,JK)                               SW.502   
            ZRATIO = ZTRAY / (ZTRAY + ZTAUAZ(JL,JK))                       SW.503   
            ZGAR = ZCGAZ(JL,JK)                                            SW.504   
            ZFF = ZGAR * ZGAR                                              SW.505   
            ZTAUAZ(JL,JK)=ZTRAY+ZTAUAZ(JL,JK)*(1.-ZPIZAZ(JL,JK)*ZFF)       SW.506   
            ZCGAZ(JL,JK) = ZGAR * (1. - ZRATIO) / (1. + ZGAR)              SW.507   
            ZPIZAZ(JL,JK) = ZRATIO+(1. - ZRATIO)*ZPIZAZ(JL,JK)*(1.-ZFF)    SW.508   
     S                    / (1. - ZPIZAZ(JL,JK) * ZFF)                     SW.509   
 324     CONTINUE                                                          SW.510   
 325  CONTINUE                                                             SW.511   
C                                                                          SW.512   
C*         3.3    TOTAL EFFECTIVE CLOUDINESS ABOVE A GIVEN LEVEL           SW.513   
C                 ----------------------------------------------           SW.514   
C                                                                          SW.515   
 330  CONTINUE                                                             SW.516   
C                                                                          SW.517   
      DO 331 JL = 1 , KDLON                                                SW.518   
         ZR23(JL) = 0.                                                     SW.519   
         ZC1I(JL,KFLEV+1) = 0.                                             SW.520   
 331  CONTINUE                                                             SW.521   
      DO 333 JK = 1 , KFLEV                                                SW.522   
         JKL = KFLEV+1 - JK                                                SW.523   
         JKLP1 = JKL + 1                                                   SW.524   
         DO 332 JL = 1 , KDLON                                             SW.525   
            ZFAOA = 1.-ZPIZAZ(JL,JKL)*ZCGAZ(JL,JKL)*ZCGAZ(JL,JKL)          SW.526   
            ZFAOC = 1. - POMEGA(JL,INU,JKL) * PCG(JL,INU,JKL)              SW.527   
     S                                       * PCG(JL,INU,JKL)             SW.528   
            ZCORAE = ZFAOA * ZTAUAZ(JL,JKL) * ZSEC(JL)                     SW.529   
            ZCORCD = ZFAOC * PTAU(JL,INU,JKL) * ZSEC(JL)                   SW.530   
            ZR21(JL) = EXP(-ZCORAE   )                                     SW.531   
            ZR22(JL) = EXP(-ZCORCD   )                                     SW.532   
            ZSS1(JL) = PCLDSW(JL,JKL)*(1.0-ZR21(JL)*ZR22(JL))              SW.533   
     S               + (1.0-PCLDSW(JL,JKL))*(1.0-ZR21(JL))                 SW.534   
            ZC1I(JL,JKL) = 1.0-(1.0-ZSS1(JL))*(1.0-ZC1I(JL,JKLP1))         SW.535   
 332     CONTINUE                                                          SW.536   
 333  CONTINUE                                                             SW.537   
C                                                                          SW.538   
C*         3.4    REFLECTIVITY/TRANSMISSIVITY FOR PURE SCATTERING          SW.539   
C                 -----------------------------------------------          SW.540   
C                                                                          SW.541   
 340  CONTINUE                                                             SW.542   
C                                                                          SW.543   
      DO 341 JL = 1 , KDLON                                                SW.544   
         ZREFZ(JL,2,1) = PALBS(JL,INU)                                     SW.545   
         ZREFZ(JL,1,1) = PALBS(JL,INU)                                     SW.546   
 341  CONTINUE                                                             SW.547   
C                                                                          SW.548   
      DO 346 JK = 2 , KFLEV+1                                              SW.549   
         JKM1 = JK - 1                                                     SW.550   
         DO 342 JL = 1 , KDLON                                             SW.551   
            ZRNEB(JL) = PCLDSW(JL,JKM1)                                    SW.552   
            ZRE1(JL)=0.                                                    SW.553   
            ZTR1(JL)=0.                                                    SW.554   
            ZRE2(JL)=0.                                                    SW.555   
            ZTR2(JL)=0.                                                    SW.556   
C                                                                          SW.557   
C*         3.4.1  EQUIVALENT ZENITH ANGLE                                  SW.558   
C                 -----------------------                                  SW.559   
C                                                                          SW.560   
 3410 CONTINUE                                                             SW.561   
C                                                                          SW.562   
            ZMUE = (1.-ZC1I(JL,JK)) * ZSEC(JL)                             SW.563   
     S           + ZC1I(JL,JK) * 1.66                                      SW.564   
            ZRMUE(JL,JK) = 1./ZMUE                                         SW.565   
C                                                                          SW.566   
C*         3.4.2  REFLECT./TRANSMISSIVITY DUE TO RAYLEIGH AND AEROSOLS     SW.567   
C                 ----------------------------------------------------     SW.568   
C                                                                          SW.569   
 3420 CONTINUE                                                             SW.570   
C                                                                          SW.571   
            ZGAP = ZCGAZ(JL,JKM1)                                          SW.572   
            ZBMU0 = 0.5 - 0.75 * ZGAP / ZMUE                               SW.573   
            ZWW = ZPIZAZ(JL,JKM1)                                          SW.574   
            ZTO = ZTAUAZ(JL,JKM1)                                          SW.575   
            ZDEN = 1. + (1. - ZWW + ZBMU0 * ZWW) * ZTO * ZMUE              SW.576   
     S           + (1-ZWW)*(1.-ZWW+2.*ZBMU0*ZWW)*ZTO*ZTO*ZMUE*ZMUE         SW.577   
            ZRAY1(JL,JKM1) = ZBMU0 * ZWW * ZTO * ZMUE / ZDEN               SW.578   
            ZTRA1(JL,JKM1) = 1. / ZDEN                                     SW.579   
C                                                                          SW.580   
            ZMU1 = 0.5                                                     SW.581   
            ZBMU1 = 0.5 - 0.75 * ZGAP * ZMU1                               SW.582   
            ZDEN1= 1. + (1. - ZWW + ZBMU1 * ZWW) * ZTO / ZMU1              SW.583   
     S           + (1.-ZWW)*(1.-ZWW+2.*ZBMU1*ZWW)*ZTO*ZTO/ZMU1/ZMU1        SW.584   
            ZRAY2(JL,JKM1) = ZBMU1 * ZWW * ZTO / ZMU1 / ZDEN1              SW.585   
            ZTRA2(JL,JKM1) = 1. / ZDEN1                                    SW.586   
C                                                                          SW.587   
C*         3.4.3  EFFECT OF CLOUD LAYER                                    SW.588   
C                 ---------------------                                    SW.589   
C                                                                          SW.590   
 3430 CONTINUE                                                             SW.591   
C                                                                          SW.592   
            PTAU(JL,INU,JKM1) = MAX( PTAU(JL,INU,JKM1) , ZEPSCT )          SW.593   
            ZW(JL) = POMEGA(JL,INU,JKM1)                                   SW.594   
            ZTO1(JL) = PTAU(JL,INU,JKM1)/ZW(JL)                            SW.595   
     S               + ZTAUAZ(JL,JKM1)/ZPIZAZ(JL,JKM1)                     SW.596   
            ZR21(JL) = PTAU(JL,INU,JKM1) + ZTAUAZ(JL,JKM1)                 SW.597   
            ZR22(JL) = PTAU(JL,INU,JKM1) / ZR21(JL)                        SW.598   
            ZGG(JL) = ZR22(JL) * PCG(JL,INU,JKM1)                          SW.599   
     S              + (1. - ZR22(JL)) * ZCGAZ(JL,JKM1)                     SW.600   
             ZW(JL) = ZR21(JL) / ZTO1(JL)                                  SW.601   
            ZREF(JL)=ZREFZ(JL,1,JKM1)                                      SW.602   
            ZRMUZ(JL)=ZRMUE(JL,JK)                                         SW.603   
 342     CONTINUE                                                          SW.604   
C                                                                          SW.605   
      CALL DEDD ( KDLON,KRLST,KFLEV,ITASK )                                SW.606   
C                                                                          SW.607   
         DO 345 JL = 1 , KDLON                                             SW.608   
C                                                                          SW.609   
            ZREFZ(JL,2,JK) = (1.-ZRNEB(JL)) * (ZRAY1(JL,JKM1)              SW.610   
     S                     + ZREFZ(JL,2,JKM1) * ZTRA1(JL,JKM1)             SW.611   
     S                     * ZTRA2(JL,JKM1) )                              SW.612   
     S                     + ZRNEB(JL) * ZRE1(JL)                          SW.613   
C                                                                          SW.614   
            ZTR(JL,2,JKM1) = ZRNEB(JL) * ZTR1(JL)                          SW.615   
     S                     + ZTRA1(JL,JKM1) * (1.-ZRNEB(JL))               SW.616   
C                                                                          SW.617   
            ZREFZ(JL,1,JK) = (1.-ZRNEB(JL)) * (ZRAY1(JL,JKM1)              SW.618   
     S                     + ZREFZ(JL,1,JKM1) * ZTRA1(JL,JKM1)             SW.619   
     S                     * ZTRA2(JL,JKM1)                                SW.620   
     S                     / (1.-ZRAY2(JL,JKM1)*ZREFZ(JL,1,JKM1)))         SW.621   
     S                     + ZRNEB(JL)*ZRE2(JL)                            SW.622   
C                                                                          SW.623   
            ZTR(JL,1,JKM1) = ZRNEB(JL) * ZTR2(JL) + (ZTRA1(JL,JKM1)        SW.624   
     S                     / (1.-ZRAY2(JL,JKM1) * ZREFZ(JL,1,JKM1)))       SW.625   
     S                     * (1.-ZRNEB(JL))                                SW.626   
C                                                                          SW.627   
 345     CONTINUE                                                          SW.628   
 346  CONTINUE                                                             SW.629   
      IWHERE=346                                                           SW.630   
C     PRINT 878,IWHERE                                                     SW.631   
C                                                                          SW.632   
C*         3.5    REFLECT./TRANSMISSIVITY BETWEEN SURFACE AND LEVEL        SW.633   
C                 -------------------------------------------------        SW.634   
C                                                                          SW.635   
 350  CONTINUE                                                             SW.636   
C                                                                          SW.637   
      DO 354 JABS = 1 , 2                                                  SW.638   
         DO 351 JL = 1 , KDLON                                             SW.639   
            ZRJ(JL,JABS,KFLEV+1) = 1.                                      SW.640   
            ZRK(JL,JABS,KFLEV+1) = ZREFZ(JL,JABS,KFLEV+1)                  SW.641   
 351     CONTINUE                                                          SW.642   
C                                                                          SW.643   
         DO 353 JK = 1 , KFLEV                                             SW.644   
            JKL = KFLEV+1 - JK                                             SW.645   
            JKLP1 = JKL + 1                                                SW.646   
            DO 352 JL = 1 , KDLON                                          SW.647   
               ZRE11 = ZRJ(JL,JABS,JKLP1) * ZTR(JL,JABS,JKL)               SW.648   
               ZRJ(JL,JABS,JKL) = ZRE11                                    SW.649   
               ZRK(JL,JABS,JKL) = ZRE11 * ZREFZ(JL,JABS,JKL)               SW.650   
 352        CONTINUE                                                       SW.651   
 353     CONTINUE                                                          SW.652   
 354  CONTINUE                                                             SW.653   
      IWHERE=354                                                           SW.654   
C     PRINT 878,IWHERE                                                     SW.655   
C                                                                          SW.656   
C*         3.6    REFLECT./TRANSMISSIVITY WITH GREY ABSORPTION             SW.657   
C                 --------------------------------------------             SW.658   
C                                                                          SW.659   
 360  CONTINUE                                                             SW.660   
C                                                                          SW.661   
      JN = 2                                                               SW.662   
C                                                                          SW.663   
      DO 369 JABS=1,2                                                      SW.664   
C                                                                          SW.665   
         DO 361 JL = 1 , KDLON                                             SW.666   
            ZREFZ(JL,2,1) = PALBS(JL,INU)                                  SW.667   
            ZREFZ(JL,1,1) = PALBS(JL,INU)                                  SW.668   
 361     CONTINUE                                                          SW.669   
      IWHERE=361                                                           SW.670   
C     PRINT 878,IWHERE,JABS                                                SW.671   
C                                                                          SW.672   
      DO 364 JK = 2 , KFLEV+1                                              SW.673   
         JKM1 = JK - 1                                                     SW.674   
         DO 362 JL = 1 , KDLON                                             SW.675   
            ZRNEB(JL) = PCLDSW(JL,JKM1)                                    SW.676   
            ZAA = ZUD(JL,JABS,JKM1)                                        SW.677   
            ZRKI = ZAKI(JL,JABS)                                           SW.678   
            ZS(JL) = EXP(-ZRKI * ZAA * 1.66)                               SW.679   
            ZG(JL) = EXP(-ZRKI * ZAA / ZRMUE(JL,JK))                       SW.680   
            ZTR1(JL) = 0.                                                  SW.681   
            ZRE1(JL) = 0.                                                  SW.682   
            ZTR2(JL) = 0.                                                  SW.683   
            ZRE2(JL) = 0.                                                  SW.684   
C                                                                          SW.685   
C*         3.6.1  INTRODUCING CLOUD EFFECTS                                SW.686   
C                 -------------------------                                SW.687   
C                                                                          SW.688   
 3610 CONTINUE                                                             SW.689   
C                                                                          SW.690   
            PTAU(JL,INU,JKM1) = MAX( PTAU(JL,INU,JKM1) , ZEPSCT )          SW.691   
            ZW(JL)= POMEGA(JL,INU,JKM1)                                    SW.692   
            ZTO1(JL) = PTAU(JL,INU,JKM1) / ZW(JL)                          SW.693   
     S               + ZTAUAZ(JL,JKM1) / ZPIZAZ(JL,JKM1)                   SW.694   
     S               + ZAA * ZRKI                                          SW.695   
            ZR21(JL) = PTAU(JL,INU,JKM1) + ZTAUAZ(JL,JKM1)                 SW.696   
            ZR22(JL) = PTAU(JL,INU,JKM1) / ZR21(JL)                        SW.697   
            ZGG(JL) = ZR22(JL) * PCG(JL,INU,JKM1)                          SW.698   
     S              + (1. - ZR22(JL)) * ZCGAZ(JL,JKM1)                     SW.699   
            ZW(JL) = ZR21(JL) / ZTO1(JL)                                   SW.700   
            ZREF(JL) = ZREFZ(JL,1,JKM1)                                    SW.701   
            ZRMUZ(JL) = ZRMUE(JL,JK)                                       SW.702   
 362     CONTINUE                                                          SW.703   
      IWHERE=362                                                           SW.704   
C     PRINT 878,IWHERE,JK                                                  SW.705   
C                                                                          SW.706   
         CALL DEDD ( KDLON,KRLST,KFLEV,ITASK )                             SW.707   
      IWHERE=3621                                                          SW.708   
C     PRINT 878,IWHERE,JK                                                  SW.709   
C                                                                          SW.710   
         DO 363 JL = 1 , KDLON                                             SW.711   
C                                                                          SW.712   
            ZREFZ(JL,2,JK) = (1.-ZRNEB(JL)) * (ZRAY1(JL,JKM1)              SW.713   
     S                     + ZREFZ(JL,2,JKM1) * ZTRA1(JL,JKM1)             SW.714   
     S                     * ZTRA2(JL,JKM1) ) * ZG(JL) * ZS(JL)            SW.715   
     S                     + ZRNEB(JL) * ZRE1(JL)                          SW.716   
C                                                                          SW.717   
            ZTR(JL,2,JKM1)=ZRNEB(JL)*ZTR1(JL)                              SW.718   
     S                    + (ZTRA1(JL,JKM1)) * ZG(JL) * (1.-ZRNEB(JL))     SW.719   
C                                                                          SW.720   
            ZREFZ(JL,1,JK)=(1.-ZRNEB(JL))*(ZRAY1(JL,JKM1)                  SW.721   
     S                  +ZREFZ(JL,1,JKM1)*ZTRA1(JL,JKM1)*ZTRA2(JL,JKM1)    SW.722   
     S             /(1.-ZRAY2(JL,JKM1)*ZREFZ(JL,1,JKM1)))*ZG(JL)*ZS(JL)    SW.723   
     S             + ZRNEB(JL) * ZRE2(JL)                                  SW.724   
C                                                                          SW.725   
            ZTR(JL,1,JKM1)= ZRNEB(JL) * ZTR2(JL)                           SW.726   
     S                    + (ZTRA1(JL,JKM1)/(1.-ZRAY2(JL,JKM1)             SW.727   
     S                    * ZREFZ(JL,1,JKM1)))                             SW.728   
     S                    * ZG(JL) * (1. -ZRNEB(JL))                       SW.729   
C                                                                          SW.730   
C                                                                          SW.731   
 363        CONTINUE                                                       SW.732   
      IWHERE=363                                                           SW.733   
C     PRINT 878,IWHERE,JK                                                  SW.734   
 364     CONTINUE                                                          SW.735   
      IWHERE=364                                                           SW.736   
C     PRINT 878,IWHERE                                                     SW.737   
C                                                                          SW.738   
C*         3.6.2  REFLECT./TRANSMISSIVITY BETWEEN SURFACE AND LEVEL        SW.739   
C                 -------------------------------------------------        SW.740   
C                                                                          SW.741   
 3620 CONTINUE                                                             SW.742   
C                                                                          SW.743   
         DO 368 KREF=1,2                                                   SW.744   
C                                                                          SW.745   
            JN = JN + 1                                                    SW.746   
C                                                                          SW.747   
            DO 365 JL = 1 , KDLON                                          SW.748   
               ZRJ(JL,JN,KFLEV+1) = 1.                                     SW.749   
               ZRK(JL,JN,KFLEV+1) = ZREFZ(JL,KREF,KFLEV+1)                 SW.750   
 365        CONTINUE                                                       SW.751   
C                                                                          SW.752   
            DO 367 JK = 1 , KFLEV                                          SW.753   
               JKL = KFLEV+1 - JK                                          SW.754   
               JKLP1 = JKL + 1                                             SW.755   
               DO 366 JL = 1 , KDLON                                       SW.756   
                  ZRE11 = ZRJ(JL,JN,JKLP1) * ZTR(JL,KREF,JKL)              SW.757   
                  ZRJ(JL,JN,JKL) = ZRE11                                   SW.758   
                  ZRK(JL,JN,JKL) = ZRE11 * ZREFZ(JL,KREF,JKL)              SW.759   
 366           CONTINUE                                                    SW.760   
 367        CONTINUE                                                       SW.761   
 368     CONTINUE                                                          SW.762   
 369  CONTINUE                                                             SW.763   
C                                                                          SW.764   
C*         3.7    UPWARD (ZRK) AND DOWNWARD (ZRJ) PSEUDO-FLUXES            SW.765   
C                 ---------------------------------------------            SW.766   
C                                                                          SW.767   
 370  CONTINUE                                                             SW.768   
C                                                                          SW.769   
      DO 374 JK = 1 , KFLEV+1                                              SW.770   
         DO 373 JAJ = 1 , 5 , 2                                            SW.771   
            JAJP = JAJ + 1                                                 SW.772   
            DO 372 JL = 1 , KDLON                                          SW.773   
               ZRJ(JL,JAJ,JK)=        ZRJ(JL,JAJ,JK) - ZRJ(JL,JAJP,JK)     SW.774   
               ZRK(JL,JAJ,JK)=        ZRK(JL,JAJ,JK) - ZRK(JL,JAJP,JK)     SW.775   
               ZRJ(JL,JAJ,JK)= MAX( ZRJ(JL,JAJ,JK) , ZEELOG )              SW.776   
               ZRK(JL,JAJ,JK)= MAX( ZRK(JL,JAJ,JK) , ZEELOG )              SW.777   
 372        CONTINUE                                                       SW.778   
 373     CONTINUE                                                          SW.779   
 374  CONTINUE                                                             SW.780   
C                                                                          SW.781   
      DO 377 JK = 1 , KFLEV+1                                              SW.782   
         DO 376 JAJ = 2 , 6 , 2                                            SW.783   
            DO 375 JL = 1 , KDLON                                          SW.784   
               ZRJ(JL,JAJ,JK)= MAX( ZRJ(JL,JAJ,JK) , ZEELOG )              SW.785   
               ZRK(JL,JAJ,JK)= MAX( ZRK(JL,JAJ,JK) , ZEELOG )              SW.786   
 375        CONTINUE                                                       SW.787   
 376     CONTINUE                                                          SW.788   
 377  CONTINUE                                                             SW.789   
      IWHERE=377                                                           SW.790   
C     PRINT 878,IWHERE                                                     SW.791   
C                                                                          SW.792   
C*         3.8    EFFECTIVE ABSORBER AMOUNTS BY INVERSE LAPLACE            SW.793   
C                 ---------------------------------------------            SW.794   
C                                                                          SW.795   
 380  CONTINUE                                                             SW.796   
C                                                                          SW.797   
      DO 387 JK = 1 , KFLEV+1                                              SW.798   
         JKKI = 1                                                          SW.799   
         DO 385 JAJ = 1 , 2                                                SW.800   
            DO 384 JN = 1 , 2                                              SW.801   
               JN2J = JN + 2 * JAJ                                         SW.802   
               JKKP4 = JKKI + 4                                            SW.803   
C                                                                          SW.804   
C*         3.8.1  EFFECTIVE ABSORBER AMOUNTS                               SW.805   
C                 ---------------------------------------------            SW.806   
C                                                                          SW.807   
 3810 CONTINUE                                                             SW.808   
C                                                                          SW.809   
C                                                                          SW.810   
               DO 3811 JL = 1 , KDLON                                      SW.811   
                  ZW(JL) = LOG( ZRJ(JL,JN,JK) / ZRJ(JL,JN2J,JK))           SW.812   
     S                   / ZAKI(JL,JAJ)                                    SW.813   
 3811          CONTINUE                                                    SW.814   
C                                                                          SW.815   
C*         3.8.2  TRANSMISSION FUNCTION                                    SW.816   
C                 ---------------------                                    SW.817   
C                                                                          SW.818   
 3820 CONTINUE                                                             SW.819   
C                                                                          SW.820   
                CALL SWTT ( INU, JAJ, KDLON,KRLST,KFLEV,ITASK )            SW.821   
C                                                                          SW.822   
                DO 3821 JL = 1 , KDLON                                     SW.823   
                   ZRL(JL,JKKI) = ZR1(JL)                                  SW.824   
                   ZRUEF(JL,JKKI) = ZW(JL)                                 SW.825   
                   ZW(JL) = LOG( ZRK(JL,JN,JK) / ZRK(JL,JN2J,JK))          SW.826   
     S                    / ZAKI(JL,JAJ)                                   SW.827   
 3821           CONTINUE                                                   SW.828   
C                                                                          SW.829   
                CALL SWTT ( INU, JAJ, KDLON,KRLST,KFLEV,ITASK )            SW.830   
C                                                                          SW.831   
                DO 383 JL = 1 , KDLON                                      SW.832   
                   ZRL(JL,JKKP4) = ZR1(JL)                                 SW.833   
                   ZRUEF(JL,JKKP4) = ZW(JL)                                SW.834   
 383            CONTINUE                                                   SW.835   
C                                                                          SW.836   
                JKKI=JKKI+1                                                SW.837   
 384         CONTINUE                                                      SW.838   
 385      CONTINUE                                                         SW.839   
      IWHERE=385                                                           SW.840   
C     PRINT 878,IWHERE                                                     SW.841   
C                                                                          SW.842   
C*         3.8.3  UPWARD AND DOWNWARD FLUXES WITH H2O AND UMG ABSORPTION   SW.843   
C                 ------------------------------------------------------   SW.844   
C                                                                          SW.845   
 3830 CONTINUE                                                             SW.846   
C                                                                          SW.847   
          DO 386 JL = 1 , KDLON                                            SW.848   
             PFDOWN(JL,JK) = ZRJ(JL,1,JK) * ZRL(JL,1) * ZRL(JL,3)          SW.849   
     S                    + ZRJ(JL,2,JK) * ZRL(JL,2) * ZRL(JL,4)           SW.850   
             PFUP(JL,JK)   = ZRK(JL,1,JK) * ZRL(JL,5) * ZRL(JL,7)          SW.851   
     S                    + ZRK(JL,2,JK) * ZRL(JL,6) * ZRL(JL,8)           SW.852   
 386      CONTINUE                                                         SW.853   
 387  CONTINUE                                                             SW.854   
      IWHERE=387                                                           SW.855   
C     PRINT 878,IWHERE                                                     SW.856   
C                                                                          SW.857   
C*         3.9    INTRODUCTION OF OZONE ABSORPTION                         SW.858   
C                 --------------------------------                         SW.859   
C                                                                          SW.860   
 390  CONTINUE                                                             SW.861   
C                                                                          SW.862   
      JABS=3                                                               SW.863   
      DO 395 JK = 1 , KFLEV+1                                              SW.864   
         DO 392 JL = 1 , KDLON                                             SW.865   
            ZW(JL) = ZUD(JL,JABS,JK)                                       SW.866   
 392     CONTINUE                                                          SW.867   
C                                                                          SW.868   
         CALL SWTT ( INU, JABS, KDLON,KRLST,KFLEV,ITASK )                  SW.869   
C                                                                          SW.870   
         DO 393 JL = 1 , KDLON                                             SW.871   
            PFDOWN(JL,JK) = ZR1(JL) * PFDOWN(JL,JK) * SUN(INU)             SW.872   
            ZW(JL) = ZUM(JL,JK)                                            SW.873   
 393     CONTINUE                                                          SW.874   
C                                                                          SW.875   
         CALL SWTT ( INU, JABS, KDLON,KRLST,KFLEV,ITASK )                  SW.876   
C                                                                          SW.877   
         DO 394 JL = 1 , KDLON                                             SW.878   
            PFUP(JL,JK) = ZR1(JL) * PFUP(JL,JK) * SUN(INU)                 SW.879   
 394     CONTINUE                                                          SW.880   
 395  CONTINUE                                                             SW.881   
      IWHERE=395                                                           SW.882   
C     PRINT 878,IWHERE                                                     SW.883   
C                                                                          SW.884   
C     ------------------------------------------------------------         SW.885   
C                                                                          SW.886   
C*         4.     NET TOTAL SHORTWAVE FLUXES                               SW.887   
C                 --------------------------                               SW.888   
C                                                                          SW.889   
C 400  CONTINUE                                                            SW.890   
CZ      DO 402 JK = 1 , KFLEV+1                                            SW.891   
C         DO 401 JL = 1 , KDLON                                            SW.892   
C            PFUP(JL,JK)   = (PFUP(JL,JK)   + ZFU(JL,JK)) * ZFACT(JL)      SW.893   
C            PFDOWN(JL,JK) = (PFDOWN(JL,JK) + ZFD(JL,JK)) * ZFACT(JL)      SW.894   
C 401     CONTINUE                                                         SW.895   
C 402  CONTINUE                                                            SW.896   
C      IWHERE=402                                                          SW.897   
C     PRINT 878,IWHERE                                                     SW.898   
C                                                                          SW.899   
C                                                                          SW.900   
C                                                                          SW.901   
C*         4.     NET TOTAL SHORTWAVE FLUXES                               SW.902   
C                 --------------------------                               SW.903   
C                                                                          SW.904   
 400  CONTINUE                                                             SW.905   
      DO 402 JK = 1 , KFLEV+1                                              SW.906   
         DO 401 JL = 1 , KDLON                                             SW.907   
c            IF(ITASK.EQ.1)THEN                                            SW.908   
c              PFUP(JL,JK)   = ZFU(JL,JK) * ZFACT(JL)                      SW.909   
c              PFDOWN(JL,JK) = ZFD(JL,JK) * ZFACT(JL)                      SW.910   
c            ELSE IF(ITASK.EQ.2)THEN                                       SW.911   
c              PFUP(JL,JK)   = PFUP(JL,JK) * ZFACT(JL)                     SW.912   
c              PFDOWN(JL,JK) = PFDOWN(JL,JK) * ZFACT(JL)                   SW.913   
c            ELSE IF(ITASK.EQ.3)THEN                                       SW.914   
              PFUP(JL,JK)   = (PFUP(JL,JK)   + ZFU(JL,JK)) * ZFACT(JL)     SW.915   
              PFDOWN(JL,JK) = (PFDOWN(JL,JK) + ZFD(JL,JK)                  SW.916   
     *                      + FOXDWN(JL,JK)) * ZFACT(JL)                   SW.917   
c            ENDIF                                                         SW.918   
 401     CONTINUE                                                          SW.919   
 402  CONTINUE                                                             SW.920   
      IWHERE=402                                                           SW.921   
C     PRINT 878,IWHERE                                                     SW.922   
C                                                                          SW.923   
      DO 501 JL=1,NRLST                                                    SW.924   
         DO 502 JK=1,NLEV                                                  SW.925   
            ZCLDSW(JL,JK) = PCLDSW(JL,JK)                                  SW.926   
            ZOZ   (JL,JK) = POZ   (JL,JK)                                  SW.927   
            ZPMB  (JL,JK) = PPMB  (JL,JK)                                  SW.928   
            ZTAVE (JL,JK) = PTAVE (JL,JK)                                  SW.929   
            ZFSDWN(JL,JK) = PFDOWN(JL,JK)                                  SW.930   
            ZFSUP (JL,JK) = PFUP  (JL,JK)                                  SW.931   
            DO 503 II=1,2                                                  SW.932   
               ZCG   (JL,II,JK) = PCG   (JL,II,JK)                         SW.933   
               ZOMEGA(JL,II,JK) = POMEGA(JL,II,JK)                         SW.934   
               ZTAU  (JL,II,JK) = PTAU  (JL,II,JK)                         SW.935   
 503        CONTINUE                                                       SW.936   
 502     CONTINUE                                                          SW.937   
         DO 504 II=1,2                                                     SW.938   
            ZALBSU(JL,II) = PALBS(JL,II)                                   SW.939   
 504     CONTINUE                                                          SW.940   
         ZPMB  (JL,NRLEV+1) = PPMB  (JL,NRLEV+1)                           SW.941   
         ZFSDWN(JL,NRLEV+1) = PFDOWN(JL,NRLEV+1)                           SW.942   
         ZFSUP (JL,NRLEV+1) = PFUP  (JL,NRLEV+1)                           SW.943   
 501  CONTINUE                                                             SW.944   
C                                                                          SW.945   
      RETURN                                                               SW.946   
      END                                                                  SW.947   
C                                                                          SW.948   
*DECK SWTT                                                                 SWTT.1     
      SUBROUTINE SWTT ( KNU, KA, KDLON, KRLST, KFLEV, ITASK)               SWTT.2     
C                                                                          SWTT.3     
C**** *SWTT* - COMPUTES THE SHORTWAVE TRANSMISSION FUNCTIONS               SWTT.4     
C                                                                          SWTT.5     
C     PURPOSE.                                                             SWTT.6     
C     --------                                                             SWTT.7     
C           THIS ROUTINE COMPUTES THE TRANSMISSION FUNCTIONS FOR ALL THE   SWTT.8     
C     ABSORBERS (H2O, UNIFORMLY MIXED GASES, AND O3) IN THE TWO SPECTRAL   SWTT.9     
C     INTERVALS.                                                           SWTT.10    
C                                                                          SWTT.11    
C**   INTERFACE.                                                           SWTT.12    
C     ----------                                                           SWTT.13    
C          *SWTT* IS CALLED FROM *SW*.                                     SWTT.14    
C                                                                          SWTT.15    
C        EXPLICIT ARGUMENTS                                                SWTT.16    
C        --------------------                                              SWTT.17    
C KNU    :                     ; INDEX OF THE SPECTRAL INTERVAL            SWTT.18    
C KA     :                     ; INDEX OF THE ABSORBER                     SWTT.19    
C                                                                          SWTT.20    
C        IMPLICIT ARGUMENTS                                                SWTT.21    
C        --------------------                                              SWTT.22    
C                                                                          SWTT.23    
C     ==== INPUTS ===                                                      SWTT.24    
C PU     : (KDLON)             ; ABSORBER AMOUNT                           SWTT.25    
C     ==== OUTPUTS ===                                                     SWTT.26    
C PTR    : (KDLON)             ; TRANSMISSION FUNCTION                     SWTT.27    
C                                                                          SWTT.28    
C     METHOD.                                                              SWTT.29    
C     -------                                                              SWTT.30    
C                                                                          SWTT.31    
C          TRANSMISSION FUNCTION ARE COMPUTED USING PADE APPROXIMANTS      SWTT.32    
C     AND HORNER'S ALGORITHM.                                              SWTT.33    
C                                                                          SWTT.34    
C     EXTERNALS.                                                           SWTT.35    
C     ----------                                                           SWTT.36    
C                                                                          SWTT.37    
C          NONE                                                            SWTT.38    
C                                                                          SWTT.39    
C     REFERENCE.                                                           SWTT.40    
C     ----------                                                           SWTT.41    
C                                                                          SWTT.42    
C        SEE RADIATION'S PART OF THE MODEL'S DOCUMENTATION                 SWTT.43    
C                                                                          SWTT.44    
C     AUTHOR.                                                              SWTT.45    
C     -------                                                              SWTT.46    
C        JEAN-JACQUES MORCRETTE  *ECMWF*                                   SWTT.47    
C                                                                          SWTT.48    
C     MODIFICATIONS.                                                       SWTT.49    
C     --------------                                                       SWTT.50    
C        ORIGINAL : 88-12-15                                               SWTT.51    
C------------------------------------------------------------------        SWTT.52    
C      IMPLICIT LOGICAL (L)                                                SWTT.53    
C                                                                          SWTT.54    
*CALL ZPARB                                                                SWTT.55    
c      INCLUDE 'zparb.upd'                                                 SWTT.56    
C                                                                          SWTT.57    
C-----------------------------------------------------------------         SWTT.58    
C                                                                          SWTT.59    
      DO 99 JL=1,NRLST                                                     SWTT.60    
         PTR(JL) = ZR1(JL)                                                 SWTT.61    
         PU (JL) = ZW (JL)                                                 SWTT.62    
 99   CONTINUE                                                             SWTT.63    
C                                                                          SWTT.64    
C-----------------------------------------------------------------         SWTT.65    
C                                                                          SWTT.66    
C*         1.      HORNER'S ALGORITHM TO COMPUTE TRANSMISSION FUNCTION     SWTT.67    
C                                                                          SWTT.68    
 100  CONTINUE                                                             SWTT.69    
C                                                                          SWTT.70    
      DO 101 JL = 1 , KDLON                                                SWTT.71    
         PTR(JL) = APAD(KNU,KA,1) + PU(JL) * (APAD(KNU,KA,2) + PU(JL)      SWTT.72    
     S         * ( APAD(KNU,KA,3) + PU(JL) * (APAD(KNU,KA,4) + PU(JL)      SWTT.73    
     S         * ( APAD(KNU,KA,5) + PU(JL) * (APAD(KNU,KA,6) + PU(JL)      SWTT.74    
     S         * ( APAD(KNU,KA,7) ))))))                                   SWTT.75    
C                                                                          SWTT.76    
         ZR2(JL) = BPAD(KNU,KA,1) + PU(JL) * (BPAD(KNU,KA,2) + PU(JL)      SWTT.77    
     S         * ( BPAD(KNU,KA,3) + PU(JL) * (BPAD(KNU,KA,4) + PU(JL)      SWTT.78    
     S         * ( BPAD(KNU,KA,5) + PU(JL) * (BPAD(KNU,KA,6) + PU(JL)      SWTT.79    
     S         * ( BPAD(KNU,KA,7) ))))))                                   SWTT.80    
 101  CONTINUE                                                             SWTT.81    
C                                                                          SWTT.82    
C*         2.      ADD THE BACKGROUND TRANSMISSION                         SWTT.83    
C                                                                          SWTT.84    
 200  CONTINUE                                                             SWTT.85    
C                                                                          SWTT.86    
      DO 201 JL = 1 , KDLON                                                SWTT.87    
         PTR(JL) = (PTR(JL) / ZR2(JL)) * (1. - D(KNU,KA)) + D(KNU,KA)      SWTT.88    
 201  CONTINUE                                                             SWTT.89    
C                                                                          SWTT.90    
C                                                                          SWTT.91    
      DO 301 JL=1,NRLST                                                    SWTT.92    
         ZR1(JL) = PTR(JL)                                                 SWTT.93    
         ZW (JL) = PU (JL)                                                 SWTT.94    
 301  CONTINUE                                                             SWTT.95    
C                                                                          SWTT.96    
      RETURN                                                               SWTT.97    
      END                                                                  SWTT.98    
C                                                                          SWTT.99    
*DECK SUAER                                                                SUAER.1     
      SUBROUTINE SUAER                                                     SUAER.2     
C                                                                          SUAER.3     
C**** *SUAER*   - INITIALIZE COMMON YOMAER                                 SUAER.4     
C                                                                          SUAER.5     
C     PURPOSE.                                                             SUAER.6     
C     --------                                                             SUAER.7     
C           INITIALIZE YOMAER, THE COMMON THAT CONTAINS THE                SUAER.8     
C           RADIATIVE CHARACTERISTICS OF THE AEROSOLS                      SUAER.9     
C                                                                          SUAER.10    
C**   INTERFACE.                                                           SUAER.11    
C     ----------                                                           SUAER.12    
C        *CALL* *SUAER*                                                    SUAER.13    
C                                                                          SUAER.14    
C        EXPLICIT ARGUMENTS                                                SUAER.15    
C        --------------------                                              SUAER.16    
C        NONE                                                              SUAER.17    
C                                                                          SUAER.18    
C        IMPLICIT ARGUMENTS                                                SUAER.19    
C        --------------------                                              SUAER.20    
C        COMMON YOMAER                                                     SUAER.21    
C                                                                          SUAER.22    
C     METHOD.                                                              SUAER.23    
C     -------                                                              SUAER.24    
C        SEE DOCUMENTATION                                                 SUAER.25    
C                                                                          SUAER.26    
C     EXTERNALS.                                                           SUAER.27    
C     ----------                                                           SUAER.28    
C                                                                          SUAER.29    
C     REFERENCE.                                                           SUAER.30    
C     ----------                                                           SUAER.31    
C        ECMWF RESEARCH DEPARTMENT DOCUMENTATION                           SUAER.32    
C                                                                          SUAER.33    
C     AUTHOR.                                                              SUAER.34    
C     -------                                                              SUAER.35    
C        JEAN-JACQUES MORCRETTE *ECMWF*                                    SUAER.36    
C                                                                          SUAER.37    
C     MODIFICATIONS.                                                       SUAER.38    
C     --------------                                                       SUAER.39    
C        ORIGINAL : 88-02-15                                               SUAER.40    
C     ---------------------------------------------------------------      SUAER.41    
C                                                                          SUAER.42    
*CALL ZPARB                                                                SUAER.43    
c      INCLUDE 'zparb.upd'                                                 SUAER.44    
C                                                                          SUAER.45    
C      -------------------------------------------------------------       SUAER.46    
C                                                                          SUAER.47    
C*       1.    SHORTWAVE COEFFICIENTS                                      SUAER.48    
C              ----------------------                                      SUAER.49    
C                                                                          SUAER.50    
      DATA ((TAUA(IN,JA),JA=1,5),IN=1,2) /                                 SUAER.51    
     S .730719, .912819, .725059, .745405, .682188 ,                       SUAER.52    
     S .730719, .912819, .725059, .745405, .682188 /                       SUAER.53    
      DATA ((PIZA(IN,JA),JA=1,5),IN=1,2) /                                 SUAER.54    
     S .872212, .982545, .623143, .944887, .997975 ,                       SUAER.55    
     S .872212, .982545, .623143, .944887, .997975 /                       SUAER.56    
      DATA ((CGA (IN,JA),JA=1,5),IN=1,2) /                                 SUAER.57    
     S .647596, .739002, .580845, .662657, .624246 ,                       SUAER.58    
     S .647596, .739002, .580845, .662657, .624246 /                       SUAER.59    
C      -------------------------------------------------------------       SUAER.60    
C                                                                          SUAER.61    
C*       2.    LONGWAVE COEFFICIENTS                                       SUAER.62    
C              ---------------------                                       SUAER.63    
C                                                                          SUAER.64    
      DATA CAER / .038520, .037196, .040532, .054934, .038520              SUAER.65    
     1          , .12613 , .18313 , .10357 , .064106, .126130              SUAER.66    
     2          , .012579, .013649, .018652, .025181, .012579              SUAER.67    
     3          , .011890, .016142, .021105, .028908, .011890              SUAER.68    
     4          , .013792, .026810, .052203, .066338, .013792 /            SUAER.69    
C                                                                          SUAER.70    
      RETURN                                                               SUAER.71    
      END                                                                  SUAER.72    
*DECK SULW                                                                 SULW.1     
        SUBROUTINE SULW                                                    SULW.2     
*CALL ZPARB                                                                SULW.3     
c        INCLUDE "zparb.upd"                                               SULW.4     
C                                                                          SULW.5     
C Yet again we have to change the hard wired memory allocation for         SULW.6     
C the radiation blocks.                                                    SULW.7     
C                                                                          SULW.8     
C iii) Totally replace SULW                                                SULW.9     
C                                                                          SULW.10    
C      ---------------------------------------------------------           SULW.11    
C                                                                          SULW.12    
C*       1.    SET VALUES.                                                 SULW.13    
C              -----------                                                 SULW.14    
C                                                                          SULW.15    
C      DATA NINT, NIPD, NIPD2, NTR, NTRA, NUA, NG1, NG1P1                  SULW.16    
C     S  /   6  ,    8,    16,  11,   19,  18,   2,     3  /               SULW.17    
C                                                                          SULW.18    
C-- REFERENCE TEMPERATURES FOR THE PLANCK FUNCTIONS ----- TSTAND           SULW.19    
C          TEMPERATURE DEPENDENCE OF THE ABSORPTION ----- TREF             SULW.20    
      DATA TSTAND,TREF / 250.0, 250.0 /                                    SULW.21    
C                                                                          SULW.22    
C-- ROOTS AND WEIGHTS FOR THE 2-POINT GAUSSIAN QUADRATURE                  SULW.23    
      DATA (RT1(IG1),IG1=1,2) / -0.577350269, +0.577350269 /               SULW.24    
      DATA (WG1(IG1),IG1=1,2) /  1.0        ,  1.0         /               SULW.25    
C                                                                          SULW.26    
C-- TEMPERATURE STEP AND MAXIMUM INDEX FOR THE TRANSMISSIVITIES            SULW.27    
      DATA TSTP/ 12.5 /,  MXIXT / 10 /                                     SULW.28    
C                                                                          SULW.29    
C-- REFERENCE TEMPERATURE FOR THE TRANSMISSIVITIES                         SULW.30    
      DATA TINTP / 187.5, 200., 212.5, 225., 237.5, 250.,                  SULW.31    
     S             262.5, 275., 287.5, 300., 312.5 /                       SULW.32    
C                                                                          SULW.33    
C-- COEFFICIENTS OF THE POLYNOMIALS GIVING THE PLANCK FUNCTIONS            SULW.34    
C                                                                          SULW.35    
c      DATA (( XP(  J,K),J=1,6),       K=1,6) /                            SULW.36    
c     S 0.46430621E+02, 0.12928299E+03, 0.20732648E+03,                    SULW.37    
c     S 0.31398411E+03, 0.18373177E+03,-0.11412303E+03,                    SULW.38    
c     S 0.73604774E+02, 0.27887914E+03, 0.27076947E+03,                    SULW.39    
c     S-0.57322111E+02,-0.64742459E+02, 0.87238280E+02,                    SULW.40    
c     S 0.37050866E+02, 0.20498759E+03, 0.37558029E+03,                    SULW.41    
c     S 0.17401171E+03,-0.13350302E+03,-0.37651795E+02,                    SULW.42    
c     S 0.14930141E+02, 0.89161160E+02, 0.17793062E+03,                    SULW.43    
c     S 0.93433860E+02,-0.70646020E+02,-0.26373150E+02,                    SULW.44    
c     S 0.40386780E+02, 0.10855270E+03, 0.50755010E+02,                    SULW.45    
c     S-0.31496190E+02, 0.12791300E+02, 0.18017770E+01,                    SULW.46    
c     S 0.90811926E+01, 0.75073923E+02, 0.24654438E+03,                    SULW.47    
c     S 0.39332612E+03, 0.29385281E+03, 0.89107921E+02 /                   SULW.48    
c                                                                          SULW.49    
C                                                                          SULW.50    
C-- COEFFICIENTS OF THE POLYNOMIALS GIVING THE PLANCK FUNCTIONS            SULW.51    
C                                                                          SULW.52    
c      DATA (( XP(  J,K),J=1,6),       K=1,6) /                            SULW.53    
c     * 0.46440912E+02, 0.12928373E+03, 0.20721063E+03,                    SULW.54    
c     * 0.31465410E+03, 0.18532753E+03,-0.12081117E+03,                    SULW.55    
c     * 0.73615150E+02, 0.27892884E+03, 0.27075955E+03,                    SULW.56    
c     *-0.57109865E+02,-0.63336785E+02, 0.85537973E+02,                    SULW.57    
c     * 0.37048742E+02, 0.20503052E+03, 0.37594173E+03,                    SULW.58    
c     * 0.17258251E+03,-0.13796046E+03,-0.23295511E+02,                    SULW.59    
c     * 0.14928616E+02, 0.89179092E+02, 0.17810427E+03,                    SULW.60    
c     * 0.92742845E+02,-0.72842724E+02,-0.19361244E+02,                    SULW.61    
c     * 0.40395378E+02, 0.10858185E+03, 0.50773924E+02,                    SULW.62    
c     *-0.31496423E+02, 0.12828971E+02, 0.16837921E+01,                    SULW.63    
c     * 0.90587573E+01, 0.74736166E+02, 0.24423578E+03,                    SULW.64    
c     * 0.38511585E+03, 0.26543217E+03, 0.26930073E+02 /                   SULW.65    
C                                                                          SULW.66    
C-- COEFFICIENTS OF THE POLYNOMIALS GIVING THE PLANCK FUNCTIONS            SULW.67    
C                                                                          SULW.68    
      DATA (( XP(  J,K),J=1,6),       K=1,6) /                             SULW.69    
     * 0.46448212E+02, 0.12950083E+03, 0.20616074E+03,                     SULW.70    
     * 0.30440182E+03, 0.20088503E+03,-0.19180727E+02,                     SULW.71    
     * 0.73614893E+02, 0.27896120E+03, 0.27077036E+03,                     SULW.72    
     *-0.58840871E+02,-0.63235846E+02, 0.10332900E+03,                     SULW.73    
     * 0.37042681E+02, 0.20484389E+03, 0.37681519E+03,                     SULW.74    
     * 0.18143404E+03,-0.15093530E+03,-0.11119628E+03,                     SULW.75    
     * 0.14925225E+02, 0.89067009E+02, 0.17859760E+03,                     SULW.76    
     * 0.98102682E+02,-0.80224280E+02,-0.72734490E+02,                     SULW.77    
     * 0.40397268E+02, 0.10862521E+03, 0.50512477E+02,                     SULW.78    
     *-0.33484892E+02, 0.16614982E+02, 0.21239268E+02,                     SULW.79    
     * 0.90605881E+01, 0.74792389E+02, 0.24397449E+03,                     SULW.80    
     * 0.38243354E+03, 0.26928532E+03, 0.53743993E+02 /                    SULW.81    
C                                                                          SULW.82    
C                                                                          SULW.83    
C-- COEFFICIENTS OF THE POLYNOMIALS GIVING THE TEMPERATURE DEPENDENCE OF   SULW.84    
C     THE ABSORPTION                                                       SULW.85    
C--------H2O                                                               SULW.86    
      DATA (AT(1,IR),IR=1,3)/                                              SULW.87    
     S  2.34995778846E-03, -2.76713384294E-04,  1.16480338097E-06/         SULW.88    
      DATA (BT(1,IR),IR=1,3)/                                              SULW.89    
     S -1.58165952771E-05, -2.39167473702E-05,  1.80148335147E-07/         SULW.90    
      DATA (AT(2,IR),IR=1,3)/                                              SULW.91    
     S  2.52595953359E-02, -6.72079319635E-04,  5.74103783815E-06/         SULW.92    
      DATA (BT(2,IR),IR=1,3)/                                              SULW.93    
     S -8.26196996910E-05, -1.05514645370E-05,  7.02984234993E-08/         SULW.94    
      DATA (AT(3,IR),IR=1,3)/                                              SULW.95    
     S  3.55525229363E-02, -7.94992134865E-04,  6.64848193374E-06/         SULW.96    
      DATA (BT(3,IR),IR=1,3)/                                              SULW.97    
     S -9.71124908025E-05, -2.95218285256E-06,  2.23374952695E-08/         SULW.98    
      DATA (AT(4,IR),IR=1,3)/                                              SULW.99    
     S  5.47044522259E-02, -1.19105877667E-03,  9.74676865100E-06/         SULW.100   
      DATA (BT(4,IR),IR=1,3)/                                              SULW.101   
     S -2.10153035427E-04, -6.93815560155E-06,  5.50381928956E-08/         SULW.102   
      DATA (AT(5,IR),IR=1,3) /                                             SULW.103   
     S  1.88063066950E-02, -1.11250846983E-04,  1.66977895508E-06/         SULW.104   
      DATA (BT(5,IR),IR=1,3) /                                             SULW.105   
     S -5.72683436311E-05, -2.48448308453E-05,  1.88450887138E-07/         SULW.106   
      DATA (AT(6,IR),IR=1,3) /                                             SULW.107   
     S  1.29526952131E-02, -3.81424455035E-04,  3.07118138204E-06/         SULW.108   
      DATA (BT(6,IR),IR=1,3) /                                             SULW.109   
     S -4.20789327775E-05, -1.25055291318E-05,  8.58839668934E-08/         SULW.110   
C--1250-1450                                                               SULW.111   
      DATA (AT(7,IR),IR=1,3)/                                              SULW.112   
     S  1.31749957617E-02, -5.90100320028E-05,  6.25471011857E-07/         SULW.113   
      DATA (BT(7,IR),IR=1,3)/                                              SULW.114   
     S -4.30693119882E-05, -3.14712185336E-07,  3.69886377880E-09/         SULW.115   
C--800-970                                                                 SULW.116   
      DATA (AT(8,IR),IR=1,3)/                                              SULW.117   
     S  4.88895361215E-02, -1.10191335476E-03,  9.12442493536E-06/         SULW.118   
      DATA (BT(8,IR),IR=1,3)/                                              SULW.119   
     S -1.07667174073E-04,  2.47171336712E-06, -1.96942567968E-08/         SULW.120   
C--650-800                                                                 SULW.121   
      DATA (AT(9,IR),IR=1,3) /                                             SULW.122   
     S  3.53337502532E-02, -9.07920050431E-04,  7.57030599278E-06/         SULW.123   
      DATA (BT(9,IR),IR=1,3) /                                             SULW.124   
     S -1.09062411235E-04, -9.99616246128E-07,  7.90293124935E-09/         SULW.125   
C-------CO2                                                                SULW.126   
      DATA (AT(10,IR),IR=1,3) /                                            SULW.127   
     S 0.250073E-03,0.455875E-03,0.109242E-03 /                            SULW.128   
      DATA (BT(10,IR),IR=1,3) /                                            SULW.129   
     S 0.199846E-05,-.216313E-05,0.175991E-06 /                            SULW.130   
      DATA (AT(11,IR),IR=1,3) /                                            SULW.131   
     S 0.307423E-01,0.110879E-02,-.322172E-03 /                            SULW.132   
      DATA (BT(11,IR),IR=1,3) /                                            SULW.133   
     S-0.108482E-03,0.258096E-05,-.814575E-06 /                            SULW.134   
C                                                                          SULW.135   
C--  COEFFICIENTS FOR OZONE ABSORPTION                                     SULW.136   
C                                                                          SULW.137   
      DATA O1H,O2H,PIALF0,(OCT(IT),IT=1,4) /                               SULW.138   
     S 2230., 100., 2., -.326E-03, -.102E-05, .137E-02, -.535E-05 /        SULW.139   
C                                                                          SULW.140   
C--  COEFFICIENTS FOR H2O E-TYPE CONTINUUM ABSORPTION                      SULW.141   
C                                                                          SULW.142   
C      DATA CNTNU /   70.0, 26.77, 8.45, 5.78  /                           SULW.143   
C                                                                          SULW.144   
C--------------------------------------------------------                  SULW.145   
C  PADE APPROXIMANTS FOR THE TRANSMISSIVITIES                              SULW.146   
C  ==========================================                              SULW.147   
C-- WATER VAPOR -- INT.1 -- 0- 350 + 1450- 1880 CM-1 --------              SULW.148   
C                                                                          SULW.149   
C----- INTERVAL = 1 ----- T =    187.50                                    SULW.150   
C                                                                          SULW.151   
      DATA (GA( 1, 1,JC),JC=1,3) /                                         SULW.152   
     S 0.25000224E-02, 0.18701843E-02, 0.00000000E+00/                     SULW.153   
      DATA (GB( 1, 1,JC),JC=1,3) /                                         SULW.154   
     S 0.25000224E-02, 0.61593968E-01, 0.10000000E+01/                     SULW.155   
      DATA (GA( 1, 2,JC),JC=1,3) /                                         SULW.156   
     S 0.34131105E-02, 0.55153039E-03, 0.00000000E+00/                     SULW.157   
      DATA (GB( 1, 2,JC),JC=1,3) /                                         SULW.158   
     S 0.34131105E-02, 0.73127832E-01, 0.10000000E+01/                     SULW.159   
C                                                                          SULW.160   
C----- INTERVAL = 1 ----- T =    200.00                                    SULW.161   
C                                                                          SULW.162   
      DATA (GA( 2, 1,JC),JC=1,3) /                                         SULW.163   
     S 0.26344616E-02, 0.16894582E-02, 0.00000000E+00/                     SULW.164   
      DATA (GB( 2, 1,JC),JC=1,3) /                                         SULW.165   
     S 0.26344616E-02, 0.63633167E-01, 0.10000000E+01/                     SULW.166   
      DATA (GA( 2, 2,JC),JC=1,3) /                                         SULW.167   
     S 0.36120928E-02, 0.44720171E-03, 0.00000000E+00/                     SULW.168   
      DATA (GB( 2, 2,JC),JC=1,3) /                                         SULW.169   
     S 0.36120928E-02, 0.75062171E-01, 0.10000000E+01/                     SULW.170   
C                                                                          SULW.171   
C----- INTERVAL = 1 ----- T =    212.50                                    SULW.172   
C                                                                          SULW.173   
      DATA (GA( 3, 1,JC),JC=1,3) /                                         SULW.174   
     S 0.27743234E-02, 0.15245487E-02, 0.00000000E+00/                     SULW.175   
      DATA (GB( 3, 1,JC),JC=1,3) /                                         SULW.176   
     S 0.27743234E-02, 0.65651733E-01, 0.10000000E+01/                     SULW.177   
      DATA (GA( 3, 2,JC),JC=1,3) /                                         SULW.178   
     S 0.38453121E-02, 0.42382776E-03, 0.00000000E+00/                     SULW.179   
      DATA (GB( 3, 2,JC),JC=1,3) /                                         SULW.180   
     S 0.38453121E-02, 0.77088315E-01, 0.10000000E+01/                     SULW.181   
C                                                                          SULW.182   
C----- INTERVAL = 1 ----- T =    225.00                                    SULW.183   
C                                                                          SULW.184   
      DATA (GA( 4, 1,JC),JC=1,3) /                                         SULW.185   
     S 0.29265376E-02, 0.13719090E-02, 0.00000000E+00/                     SULW.186   
      DATA (GB( 4, 1,JC),JC=1,3) /                                         SULW.187   
     S 0.29265376E-02, 0.67739270E-01, 0.10000000E+01/                     SULW.188   
      DATA (GA( 4, 2,JC),JC=1,3) /                                         SULW.189   
     S 0.41211460E-02, 0.42401401E-03, 0.00000000E+00/                     SULW.190   
      DATA (GB( 4, 2,JC),JC=1,3) /                                         SULW.191   
     S 0.41211460E-02, 0.79241307E-01, 0.10000000E+01/                     SULW.192   
C                                                                          SULW.193   
C----- INTERVAL = 1 ----- T =    237.50                                    SULW.194   
C                                                                          SULW.195   
      DATA (GA( 5, 1,JC),JC=1,3) /                                         SULW.196   
     S 0.30979053E-02, 0.12223308E-02, 0.00000000E+00/                     SULW.197   
      DATA (GB( 5, 1,JC),JC=1,3) /                                         SULW.198   
     S 0.30979053E-02, 0.69968340E-01, 0.10000000E+01/                     SULW.199   
      DATA (GA( 5, 2,JC),JC=1,3) /                                         SULW.200   
     S 0.43966504E-02, 0.67198946E-03, 0.00000000E+00/                     SULW.201   
      DATA (GB( 5, 2,JC),JC=1,3) /                                         SULW.202   
     S 0.43966504E-02, 0.80947310E-01, 0.10000000E+01/                     SULW.203   
C                                                                          SULW.204   
C----- INTERVAL = 1 ----- T =    250.00                                    SULW.205   
C                                                                          SULW.206   
      DATA (GA( 6, 1,JC),JC=1,3) /                                         SULW.207   
     S 0.32813184E-02, 0.11573810E-02, 0.00000000E+00/                     SULW.208   
      DATA (GB( 6, 1,JC),JC=1,3) /                                         SULW.209   
     S 0.32813184E-02, 0.72183750E-01, 0.10000000E+01/                     SULW.210   
      DATA (GA( 6, 2,JC),JC=1,3) /                                         SULW.211   
     S 0.46792452E-02, 0.99691013E-03, 0.00000000E+00/                     SULW.212   
      DATA (GB( 6, 2,JC),JC=1,3) /                                         SULW.213   
     S 0.46792452E-02, 0.82404099E-01, 0.10000000E+01/                     SULW.214   
C                                                                          SULW.215   
C----- INTERVAL = 1 ----- T =    262.50                                    SULW.216   
C                                                                          SULW.217   
      DATA (GA( 7, 1,JC),JC=1,3) /                                         SULW.218   
     S 0.34869261E-02, 0.11110812E-02, 0.00000000E+00/                     SULW.219   
      DATA (GB( 7, 1,JC),JC=1,3) /                                         SULW.220   
     S 0.34869261E-02, 0.74507149E-01, 0.10000000E+01/                     SULW.221   
      DATA (GA( 7, 2,JC),JC=1,3) /                                         SULW.222   
     S 0.49313571E-02, 0.15144806E-02, 0.00000000E+00/                     SULW.223   
      DATA (GB( 7, 2,JC),JC=1,3) /                                         SULW.224   
     S 0.49313571E-02, 0.83301687E-01, 0.10000000E+01/                     SULW.225   
C                                                                          SULW.226   
C----- INTERVAL = 1 ----- T =    275.00                                    SULW.227   
C                                                                          SULW.228   
      DATA (GA( 8, 1,JC),JC=1,3) /                                         SULW.229   
     S 0.37169013E-02, 0.10586459E-02, 0.00000000E+00/                     SULW.230   
      DATA (GB( 8, 1,JC),JC=1,3) /                                         SULW.231   
     S 0.37169013E-02, 0.76930655E-01, 0.10000000E+01/                     SULW.232   
      DATA (GA( 8, 2,JC),JC=1,3) /                                         SULW.233   
     S 0.51606177E-02, 0.20799953E-02, 0.00000000E+00/                     SULW.234   
      DATA (GB( 8, 2,JC),JC=1,3) /                                         SULW.235   
     S 0.51606177E-02, 0.83904484E-01, 0.10000000E+01/                     SULW.236   
C                                                                          SULW.237   
C----- INTERVAL = 1 ----- T =    287.50                                    SULW.238   
C                                                                          SULW.239   
      DATA (GA( 9, 1,JC),JC=1,3) /                                         SULW.240   
     S 0.39482491E-02, 0.11280761E-02, 0.00000000E+00/                     SULW.241   
      DATA (GB( 9, 1,JC),JC=1,3) /                                         SULW.242   
     S 0.39482491E-02, 0.79096624E-01, 0.10000000E+01/                     SULW.243   
      DATA (GA( 9, 2,JC),JC=1,3) /                                         SULW.244   
     S 0.53608496E-02, 0.26755638E-02, 0.00000000E+00/                     SULW.245   
      DATA (GB( 9, 2,JC),JC=1,3) /                                         SULW.246   
     S 0.53608496E-02, 0.84271466E-01, 0.10000000E+01/                     SULW.247   
C                                                                          SULW.248   
C----- INTERVAL = 1 ----- T =    300.00                                    SULW.249   
C                                                                          SULW.250   
      DATA (GA(10, 1,JC),JC=1,3) /                                         SULW.251   
     S 0.41849825E-02, 0.12500965E-02, 0.00000000E+00/                     SULW.252   
      DATA (GB(10, 1,JC),JC=1,3) /                                         SULW.253   
     S 0.41849825E-02, 0.81087000E-01, 0.10000000E+01/                     SULW.254   
      DATA (GA(10, 2,JC),JC=1,3) /                                         SULW.255   
     S 0.55372909E-02, 0.32512851E-02, 0.00000000E+00/                     SULW.256   
      DATA (GB(10, 2,JC),JC=1,3) /                                         SULW.257   
     S 0.55372909E-02, 0.84546756E-01, 0.10000000E+01/                     SULW.258   
C                                                                          SULW.259   
C----- INTERVAL = 1 ----- T =    312.50                                    SULW.260   
C                                                                          SULW.261   
      DATA (GA(11, 1,JC),JC=1,3) /                                         SULW.262   
     S 0.44204714E-02, 0.14195697E-02, 0.00000000E+00/                     SULW.263   
      DATA (GB(11, 1,JC),JC=1,3) /                                         SULW.264   
     S 0.44204714E-02, 0.82840020E-01, 0.10000000E+01/                     SULW.265   
      DATA (GA(11, 2,JC),JC=1,3) /                                         SULW.266   
     S 0.56935299E-02, 0.38054592E-02, 0.00000000E+00/                     SULW.267   
      DATA (GB(11, 2,JC),JC=1,3) /                                         SULW.268   
     S 0.56935299E-02, 0.84847060E-01, 0.10000000E+01/                     SULW.269   
C                                                                          SULW.270   
C-- WATER VAPOR --- 500 - 800 CM-1                                         SULW.271   
C                                                                          SULW.272   
C                                                                          SULW.273   
C----- INTERVAL = 2 ----- T =    187.50                                    SULW.274   
C                                                                          SULW.275   
      DATA (GA( 1, 3,JC),JC=1,3) /                                         SULW.276   
     S 0.15053751E+01, 0.45361026E+00, 0.00000000E+00/                     SULW.277   
      DATA (GB( 1, 3,JC),JC=1,3) /                                         SULW.278   
     S 0.15053751E+01, 0.15789584E+01, 0.10000000E+01/                     SULW.279   
      DATA (GA( 1, 4,JC),JC=1,3) /                                         SULW.280   
     S 0.18920793E+01, 0.53457554E+00, 0.00000000E+00/                     SULW.281   
      DATA (GB( 1, 4,JC),JC=1,3) /                                         SULW.282   
     S 0.18920793E+01, 0.18418304E+01, 0.10000000E+01/                     SULW.283   
C                                                                          SULW.284   
C----- INTERVAL = 2 ----- T =    200.00                                    SULW.285   
C                                                                          SULW.286   
      DATA (GA( 2, 3,JC),JC=1,3) /                                         SULW.287   
     S 0.15977537E+01, 0.48084314E+00, 0.00000000E+00/                     SULW.288   
      DATA (GB( 2, 3,JC),JC=1,3) /                                         SULW.289   
     S 0.15977537E+01, 0.16476468E+01, 0.10000000E+01/                     SULW.290   
      DATA (GA( 2, 4,JC),JC=1,3) /                                         SULW.291   
     S 0.20435568E+01, 0.55893717E+00, 0.00000000E+00/                     SULW.292   
      DATA (GB( 2, 4,JC),JC=1,3) /                                         SULW.293   
     S 0.20435568E+01, 0.19386656E+01, 0.10000000E+01/                     SULW.294   
C                                                                          SULW.295   
C----- INTERVAL = 2 ----- T =    212.50                                    SULW.296   
C                                                                          SULW.297   
      DATA (GA( 3, 3,JC),JC=1,3) /                                         SULW.298   
     S 0.16913237E+01, 0.50454053E+00, 0.00000000E+00/                     SULW.299   
      DATA (GB( 3, 3,JC),JC=1,3) /                                         SULW.300   
     S 0.16913237E+01, 0.17144170E+01, 0.10000000E+01/                     SULW.301   
      DATA (GA( 3, 4,JC),JC=1,3) /                                         SULW.302   
     S 0.21978186E+01, 0.57905459E+00, 0.00000000E+00/                     SULW.303   
      DATA (GB( 3, 4,JC),JC=1,3) /                                         SULW.304   
     S 0.21978186E+01, 0.20334044E+01, 0.10000000E+01/                     SULW.305   
C                                                                          SULW.306   
C----- INTERVAL = 2 ----- T =    225.00                                    SULW.307   
C                                                                          SULW.308   
      DATA (GA( 4, 3,JC),JC=1,3) /                                         SULW.309   
     S 0.17856476E+01, 0.52514194E+00, 0.00000000E+00/                     SULW.310   
      DATA (GB( 4, 3,JC),JC=1,3) /                                         SULW.311   
     S 0.17856476E+01, 0.17792823E+01, 0.10000000E+01/                     SULW.312   
      DATA (GA( 4, 4,JC),JC=1,3) /                                         SULW.313   
     S 0.23533355E+01, 0.59558005E+00, 0.00000000E+00/                     SULW.314   
      DATA (GB( 4, 4,JC),JC=1,3) /                                         SULW.315   
     S 0.23533355E+01, 0.21256517E+01, 0.10000000E+01/                     SULW.316   
C                                                                          SULW.317   
C----- INTERVAL = 2 ----- T =    237.50                                    SULW.318   
C                                                                          SULW.319   
      DATA (GA( 5, 3,JC),JC=1,3) /                                         SULW.320   
     S 0.18802811E+01, 0.54304459E+00, 0.00000000E+00/                     SULW.321   
      DATA (GB( 5, 3,JC),JC=1,3) /                                         SULW.322   
     S 0.18802811E+01, 0.18422412E+01, 0.10000000E+01/                     SULW.323   
      DATA (GA( 5, 4,JC),JC=1,3) /                                         SULW.324   
     S 0.25086500E+01, 0.60908958E+00, 0.00000000E+00/                     SULW.325   
      DATA (GB( 5, 4,JC),JC=1,3) /                                         SULW.326   
     S 0.25086500E+01, 0.22150389E+01, 0.10000000E+01/                     SULW.327   
C                                                                          SULW.328   
C----- INTERVAL = 2 ----- T =    250.00                                    SULW.329   
C                                                                          SULW.330   
      DATA (GA( 6, 3,JC),JC=1,3) /                                         SULW.331   
     S 0.19747954E+01, 0.55860186E+00, 0.00000000E+00/                     SULW.332   
      DATA (GB( 6, 3,JC),JC=1,3) /                                         SULW.333   
     S 0.19747954E+01, 0.19032856E+01, 0.10000000E+01/                     SULW.334   
      DATA (GA( 6, 4,JC),JC=1,3) /                                         SULW.335   
     S 0.26624407E+01, 0.62008317E+00, 0.00000000E+00/                     SULW.336   
      DATA (GB( 6, 4,JC),JC=1,3) /                                         SULW.337   
     S 0.26624407E+01, 0.23012482E+01, 0.10000000E+01/                     SULW.338   
C                                                                          SULW.339   
C----- INTERVAL = 2 ----- T =    262.50                                    SULW.340   
C                                                                          SULW.341   
      DATA (GA( 7, 3,JC),JC=1,3) /                                         SULW.342   
     S 0.20687911E+01, 0.57212480E+00, 0.00000000E+00/                     SULW.343   
      DATA (GB( 7, 3,JC),JC=1,3) /                                         SULW.344   
     S 0.20687911E+01, 0.19624068E+01, 0.10000000E+01/                     SULW.345   
      DATA (GA( 7, 4,JC),JC=1,3) /                                         SULW.346   
     S 0.28135635E+01, 0.62898892E+00, 0.00000000E+00/                     SULW.347   
      DATA (GB( 7, 4,JC),JC=1,3) /                                         SULW.348   
     S 0.28135635E+01, 0.23840281E+01, 0.10000000E+01/                     SULW.349   
C                                                                          SULW.350   
C----- INTERVAL = 2 ----- T =    275.00                                    SULW.351   
C                                                                          SULW.352   
      DATA (GA( 8, 3,JC),JC=1,3) /                                         SULW.353   
     S 0.21619083E+01, 0.58388519E+00, 0.00000000E+00/                     SULW.354   
      DATA (GB( 8, 3,JC),JC=1,3) /                                         SULW.355   
     S 0.21619083E+01, 0.20195993E+01, 0.10000000E+01/                     SULW.356   
      DATA (GA( 8, 4,JC),JC=1,3) /                                         SULW.357   
     S 0.29610693E+01, 0.63616954E+00, 0.00000000E+00/                     SULW.358   
      DATA (GB( 8, 4,JC),JC=1,3) /                                         SULW.359   
     S 0.29610693E+01, 0.24631984E+01, 0.10000000E+01/                     SULW.360   
C                                                                          SULW.361   
C----- INTERVAL = 2 ----- T =    287.50                                    SULW.362   
C                                                                          SULW.363   
      DATA (GA( 9, 3,JC),JC=1,3) /                                         SULW.364   
     S 0.22538305E+01, 0.59411934E+00, 0.00000000E+00/                     SULW.365   
      DATA (GB( 9, 3,JC),JC=1,3) /                                         SULW.366   
     S 0.22538305E+01, 0.20748638E+01, 0.10000000E+01/                     SULW.367   
      DATA (GA( 9, 4,JC),JC=1,3) /                                         SULW.368   
     S 0.31042087E+01, 0.64192944E+00, 0.00000000E+00/                     SULW.369   
      DATA (GB( 9, 4,JC),JC=1,3) /                                         SULW.370   
     S 0.31042087E+01, 0.25386513E+01, 0.10000000E+01/                     SULW.371   
C                                                                          SULW.372   
C----- INTERVAL = 2 ----- T =    300.00                                    SULW.373   
C                                                                          SULW.374   
      DATA (GA(10, 3,JC),JC=1,3) /                                         SULW.375   
     S 0.23442867E+01, 0.60303198E+00, 0.00000000E+00/                     SULW.376   
      DATA (GB(10, 3,JC),JC=1,3) /                                         SULW.377   
     S 0.23442867E+01, 0.21282086E+01, 0.10000000E+01/                     SULW.378   
      DATA (GA(10, 4,JC),JC=1,3) /                                         SULW.379   
     S 0.32424163E+01, 0.64652280E+00, 0.00000000E+00/                     SULW.380   
      DATA (GB(10, 4,JC),JC=1,3) /                                         SULW.381   
     S 0.32424163E+01, 0.26103424E+01, 0.10000000E+01/                     SULW.382   
C                                                                          SULW.383   
C----- INTERVAL = 2 ----- T =    312.50                                    SULW.384   
C                                                                          SULW.385   
      DATA (GA(11, 3,JC),JC=1,3) /                                         SULW.386   
     S 0.24330507E+01, 0.61080006E+00, 0.00000000E+00/                     SULW.387   
      DATA (GB(11, 3,JC),JC=1,3) /                                         SULW.388   
     S 0.24330507E+01, 0.21796505E+01, 0.10000000E+01/                     SULW.389   
      DATA (GA(11, 4,JC),JC=1,3) /                                         SULW.390   
     S 0.33752974E+01, 0.65016031E+00, 0.00000000E+00/                     SULW.391   
      DATA (GB(11, 4,JC),JC=1,3) /                                         SULW.392   
     S 0.33752974E+01, 0.26782849E+01, 0.10000000E+01/                     SULW.393   
C                                                                          SULW.394   
C                                                                          SULW.395   
C- WATER VAPOR - INT. 3 -- 800-970 + 1110-1250 CM-1                        SULW.396   
C                                                                          SULW.397   
C                                                                          SULW.398   
C----- INTERVAL = 3 ----- T =    187.50                                    SULW.399   
C                                                                          SULW.400   
      DATA (GA( 1, 7,JC),JC=1,3) /                                         SULW.401   
     S 0.14334746E+02, 0.11649992E+02, 0.00000000E+00/                     SULW.402   
      DATA (GB( 1, 7,JC),JC=1,3) /                                         SULW.403   
     S 0.14334746E+02, 0.12059903E+02, 0.10000000E+01/                     SULW.404   
      DATA (GA( 1, 8,JC),JC=1,3) /                                         SULW.405   
     S 0.11596027E+02, 0.11051587E+02, 0.00000000E+00/                     SULW.406   
      DATA (GB( 1, 8,JC),JC=1,3) /                                         SULW.407   
     S 0.11596027E+02, 0.11390898E+02, 0.10000000E+01/                     SULW.408   
C                                                                          SULW.409   
C----- INTERVAL = 3 ----- T =    200.00                                    SULW.410   
C                                                                          SULW.411   
      DATA (GA( 2, 7,JC),JC=1,3) /                                         SULW.412   
     S 0.12924521E+02, 0.11365906E+02, 0.00000000E+00/                     SULW.413   
      DATA (GB( 2, 7,JC),JC=1,3) /                                         SULW.414   
     S 0.12924521E+02, 0.11739611E+02, 0.10000000E+01/                     SULW.415   
      DATA (GA( 2, 8,JC),JC=1,3) /                                         SULW.416   
     S 0.10445365E+02, 0.10682810E+02, 0.00000000E+00/                     SULW.417   
      DATA (GB( 2, 8,JC),JC=1,3) /                                         SULW.418   
     S 0.10445365E+02, 0.10993927E+02, 0.10000000E+01/                     SULW.419   
C                                                                          SULW.420   
C----- INTERVAL = 3 ----- T =    212.50                                    SULW.421   
C                                                                          SULW.422   
      DATA (GA( 3, 7,JC),JC=1,3) /                                         SULW.423   
     S 0.11774060E+02, 0.11080218E+02, 0.00000000E+00/                     SULW.424   
      DATA (GB( 3, 7,JC),JC=1,3) /                                         SULW.425   
     S 0.11774060E+02, 0.11424740E+02, 0.10000000E+01/                     SULW.426   
      DATA (GA( 3, 8,JC),JC=1,3) /                                         SULW.427   
     S 0.95571840E+01, 0.10328058E+02, 0.00000000E+00/                     SULW.428   
      DATA (GB( 3, 8,JC),JC=1,3) /                                         SULW.429   
     S 0.95571840E+01, 0.10618404E+02, 0.10000000E+01/                     SULW.430   
C                                                                          SULW.431   
C----- INTERVAL = 3 ----- T =    225.00                                    SULW.432   
C                                                                          SULW.433   
      DATA (GA( 4, 7,JC),JC=1,3) /                                         SULW.434   
     S 0.10839967E+02, 0.10800025E+02, 0.00000000E+00/                     SULW.435   
      DATA (GB( 4, 7,JC),JC=1,3) /                                         SULW.436   
     S 0.10839967E+02, 0.11121318E+02, 0.10000000E+01/                     SULW.437   
      DATA (GA( 4, 8,JC),JC=1,3) /                                         SULW.438   
     S 0.88719975E+01, 0.99930444E+01, 0.00000000E+00/                     SULW.439   
      DATA (GB( 4, 8,JC),JC=1,3) /                                         SULW.440   
     S 0.88719975E+01, 0.10268470E+02, 0.10000000E+01/                     SULW.441   
C                                                                          SULW.442   
C----- INTERVAL = 3 ----- T =    237.50                                    SULW.443   
C                                                                          SULW.444   
      DATA (GA( 5, 7,JC),JC=1,3) /                                         SULW.445   
     S 0.10082160E+02, 0.10529965E+02, 0.00000000E+00/                     SULW.446   
      DATA (GB( 5, 7,JC),JC=1,3) /                                         SULW.447   
     S 0.10082160E+02, 0.10832955E+02, 0.10000000E+01/                     SULW.448   
      DATA (GA( 5, 8,JC),JC=1,3) /                                         SULW.449   
     S 0.83425443E+01, 0.96805504E+01, 0.00000000E+00/                     SULW.450   
      DATA (GB( 5, 8,JC),JC=1,3) /                                         SULW.451   
     S 0.83425443E+01, 0.99456138E+01, 0.10000000E+01/                     SULW.452   
C                                                                          SULW.453   
C----- INTERVAL = 3 ----- T =    250.00                                    SULW.454   
C                                                                          SULW.455   
      DATA (GA( 6, 7,JC),JC=1,3) /                                         SULW.456   
     S 0.94663507E+01, 0.10272823E+02, 0.00000000E+00/                     SULW.457   
      DATA (GB( 6, 7,JC),JC=1,3) /                                         SULW.458   
     S 0.94663507E+01, 0.10561525E+02, 0.10000000E+01/                     SULW.459   
      DATA (GA( 6, 8,JC),JC=1,3) /                                         SULW.460   
     S 0.79324712E+01, 0.93914198E+01, 0.00000000E+00/                     SULW.461   
      DATA (GB( 6, 8,JC),JC=1,3) /                                         SULW.462   
     S 0.79324712E+01, 0.96496576E+01, 0.10000000E+01/                     SULW.463   
C                                                                          SULW.464   
C----- INTERVAL = 3 ----- T =    262.50                                    SULW.465   
C                                                                          SULW.466   
      DATA (GA( 7, 7,JC),JC=1,3) /                                         SULW.467   
     S 0.89643981E+01, 0.10030051E+02, 0.00000000E+00/                     SULW.468   
      DATA (GB( 7, 7,JC),JC=1,3) /                                         SULW.469   
     S 0.89643981E+01, 0.10307714E+02, 0.10000000E+01/                     SULW.470   
      DATA (GA( 7, 8,JC),JC=1,3) /                                         SULW.471   
     S 0.76141974E+01, 0.91252916E+01, 0.00000000E+00/                     SULW.472   
      DATA (GB( 7, 8,JC),JC=1,3) /                                         SULW.473   
     S 0.76141974E+01, 0.93794463E+01, 0.10000000E+01/                     SULW.474   
C                                                                          SULW.475   
C----- INTERVAL = 3 ----- T =    275.00                                    SULW.476   
C                                                                          SULW.477   
      DATA (GA( 8, 7,JC),JC=1,3) /                                         SULW.478   
     S 0.85537123E+01, 0.98021793E+01, 0.00000000E+00/                     SULW.479   
      DATA (GB( 8, 7,JC),JC=1,3) /                                         SULW.480   
     S 0.85537123E+01, 0.10071426E+02, 0.10000000E+01/                     SULW.481   
      DATA (GA( 8, 8,JC),JC=1,3) /                                         SULW.482   
     S 0.73668729E+01, 0.88811055E+01, 0.00000000E+00/                     SULW.483   
      DATA (GB( 8, 8,JC),JC=1,3) /                                         SULW.484   
     S 0.73668729E+01, 0.91333042E+01, 0.10000000E+01/                     SULW.485   
C                                                                          SULW.486   
C----- INTERVAL = 3 ----- T =    287.50                                    SULW.487   
C                                                                          SULW.488   
      DATA (GA( 9, 7,JC),JC=1,3) /                                         SULW.489   
     S 0.82163567E+01, 0.95891296E+01, 0.00000000E+00/                     SULW.490   
      DATA (GB( 9, 7,JC),JC=1,3) /                                         SULW.491   
     S 0.82163567E+01, 0.98520772E+01, 0.10000000E+01/                     SULW.492   
      DATA (GA( 9, 8,JC),JC=1,3) /                                         SULW.493   
     S 0.71747025E+01, 0.86574340E+01, 0.00000000E+00/                     SULW.494   
      DATA (GB( 9, 8,JC),JC=1,3) /                                         SULW.495   
     S 0.71747025E+01, 0.89093260E+01, 0.10000000E+01/                     SULW.496   
C                                                                          SULW.497   
C----- INTERVAL = 3 ----- T =    300.00                                    SULW.498   
C                                                                          SULW.499   
      DATA (GA(10, 7,JC),JC=1,3) /                                         SULW.500   
     S 0.79381525E+01, 0.93904375E+01, 0.00000000E+00/                     SULW.501   
      DATA (GB(10, 7,JC),JC=1,3) /                                         SULW.502   
     S 0.79381525E+01, 0.96487960E+01, 0.10000000E+01/                     SULW.503   
      DATA (GA(10, 8,JC),JC=1,3) /                                         SULW.504   
     S 0.70256573E+01, 0.84526940E+01, 0.00000000E+00/                     SULW.505   
      DATA (GB(10, 8,JC),JC=1,3) /                                         SULW.506   
     S 0.70256573E+01, 0.87055560E+01, 0.10000000E+01/                     SULW.507   
C                                                                          SULW.508   
C----- INTERVAL = 3 ----- T =    312.50                                    SULW.509   
C                                                                          SULW.510   
      DATA (GA(11, 7,JC),JC=1,3) /                                         SULW.511   
     S 0.77078849E+01, 0.92054098E+01, 0.00000000E+00/                     SULW.512   
      DATA (GB(11, 7,JC),JC=1,3) /                                         SULW.513   
     S 0.77078849E+01, 0.94605633E+01, 0.10000000E+01/                     SULW.514   
      DATA (GA(11, 8,JC),JC=1,3) /                                         SULW.515   
     S 0.69105145E+01, 0.82652769E+01, 0.00000000E+00/                     SULW.516   
      DATA (GB(11, 8,JC),JC=1,3) /                                         SULW.517   
     S 0.69105145E+01, 0.85200926E+01, 0.10000000E+01/                     SULW.518   
C                                                                          SULW.519   
C-- WATER VAPOR --- 970 -1110 CM-1                                         SULW.520   
C                                                                          SULW.521   
C                                                                          SULW.522   
C----- INTERVAL = 4 ----- T =    187.500                                   SULW.523   
C                                                                          SULW.524   
      DATA (GA( 1, 9,JC),JC=1,3) /                                         SULW.525   
     S 0.94868790E+02, 0.17437229E+02, 0.00000000E+00/                     SULW.526   
      DATA (GB( 1, 9,JC),JC=1,3) /                                         SULW.527   
     S 0.94868790E+02, 0.18796329E+02, 0.10000000E+01/                     SULW.528   
      DATA (GA( 1,10,JC),JC=1,3) /                                         SULW.529   
     S 0.95419113E+02, 0.17234291E+02, 0.00000000E+00/                     SULW.530   
      DATA (GB( 1,10,JC),JC=1,3) /                                         SULW.531   
     S 0.95419113E+02, 0.18632164E+02, 0.10000000E+01/                     SULW.532   
C                                                                          SULW.533   
C----- INTERVAL = 4 ----- T =    200.000                                   SULW.534   
C                                                                          SULW.535   
      DATA (GA( 2, 9,JC),JC=1,3) /                                         SULW.536   
     S 0.95143959E+02, 0.17335575E+02, 0.00000000E+00/                     SULW.537   
      DATA (GB( 2, 9,JC),JC=1,3) /                                         SULW.538   
     S 0.95143959E+02, 0.18714111E+02, 0.10000000E+01/                     SULW.539   
      DATA (GA( 2,10,JC),JC=1,3) /                                         SULW.540   
     S 0.95675995E+02, 0.17129913E+02, 0.00000000E+00/                     SULW.541   
      DATA (GB( 2,10,JC),JC=1,3) /                                         SULW.542   
     S 0.95675995E+02, 0.18547161E+02, 0.10000000E+01/                     SULW.543   
C                                                                          SULW.544   
C----- INTERVAL = 4 ----- T =    212.500                                   SULW.545   
C                                                                          SULW.546   
      DATA (GA( 3, 9,JC),JC=1,3) /                                         SULW.547   
     S 0.95363609E+02, 0.17245064E+02, 0.00000000E+00/                     SULW.548   
      DATA (GB( 3, 9,JC),JC=1,3) /                                         SULW.549   
     S 0.95363609E+02, 0.18640270E+02, 0.10000000E+01/                     SULW.550   
      DATA (GA( 3,10,JC),JC=1,3) /                                         SULW.551   
     S 0.95911537E+02, 0.17036016E+02, 0.00000000E+00/                     SULW.552   
      DATA (GB( 3,10,JC),JC=1,3) /                                         SULW.553   
     S 0.95911537E+02, 0.18470697E+02, 0.10000000E+01/                     SULW.554   
C                                                                          SULW.555   
C----- INTERVAL = 4 ----- T =    225.000                                   SULW.556   
C                                                                          SULW.557   
      DATA (GA( 4, 9,JC),JC=1,3) /                                         SULW.558   
     S 0.95551239E+02, 0.17163479E+02, 0.00000000E+00/                     SULW.559   
      DATA (GB( 4, 9,JC),JC=1,3) /                                         SULW.560   
     S 0.95551239E+02, 0.18573282E+02, 0.10000000E+01/                     SULW.561   
      DATA (GA( 4,10,JC),JC=1,3) /                                         SULW.562   
     S 0.96128136E+02, 0.16952074E+02, 0.00000000E+00/                     SULW.563   
      DATA (GB( 4,10,JC),JC=1,3) /                                         SULW.564   
     S 0.96128136E+02, 0.18402708E+02, 0.10000000E+01/                     SULW.565   
C                                                                          SULW.566   
C----- INTERVAL = 4 ----- T =    237.500                                   SULW.567   
C                                                                          SULW.568   
      DATA (GA( 5, 9,JC),JC=1,3) /                                         SULW.569   
     S 0.95763680E+02, 0.17089018E+02, 0.00000000E+00/                     SULW.570   
      DATA (GB( 5, 9,JC),JC=1,3) /                                         SULW.571   
     S 0.95763680E+02, 0.18513403E+02, 0.10000000E+01/                     SULW.572   
      DATA (GA( 5,10,JC),JC=1,3) /                                         SULW.573   
     S 0.96294296E+02, 0.16877150E+02, 0.00000000E+00/                     SULW.574   
      DATA (GB( 5,10,JC),JC=1,3) /                                         SULW.575   
     S 0.96294296E+02, 0.18341324E+02, 0.10000000E+01/                     SULW.576   
C                                                                          SULW.577   
C----- INTERVAL = 4 ----- T =    250.000                                   SULW.578   
C                                                                          SULW.579   
      DATA (GA( 6, 9,JC),JC=1,3) /                                         SULW.580   
     S 0.95913246E+02, 0.17022213E+02, 0.00000000E+00/                     SULW.581   
      DATA (GB( 6, 9,JC),JC=1,3) /                                         SULW.582   
     S 0.95913246E+02, 0.18458538E+02, 0.10000000E+01/                     SULW.583   
      DATA (GA( 6,10,JC),JC=1,3) /                                         SULW.584   
     S 0.96462036E+02, 0.16808561E+02, 0.00000000E+00/                     SULW.585   
      DATA (GB( 6,10,JC),JC=1,3) /                                         SULW.586   
     S 0.96462036E+02, 0.18285398E+02, 0.10000000E+01/                     SULW.587   
C                                                                          SULW.588   
C----- INTERVAL = 4 ----- T =    262.500                                   SULW.589   
C                                                                          SULW.590   
      DATA (GA( 7, 9,JC),JC=1,3) /                                         SULW.591   
     S 0.96069473E+02, 0.16961018E+02, 0.00000000E+00/                     SULW.592   
      DATA (GB( 7, 9,JC),JC=1,3) /                                         SULW.593   
     S 0.96069473E+02, 0.18408932E+02, 0.10000000E+01/                     SULW.594   
      DATA (GA( 7,10,JC),JC=1,3) /                                         SULW.595   
     S 0.96610298E+02, 0.16746571E+02, 0.00000000E+00/                     SULW.596   
      DATA (GB( 7,10,JC),JC=1,3) /                                         SULW.597   
     S 0.96610298E+02, 0.18234850E+02, 0.10000000E+01/                     SULW.598   
C                                                                          SULW.599   
C----- INTERVAL = 4 ----- T =    275.000                                   SULW.600   
C                                                                          SULW.601   
      DATA (GA( 8, 9,JC),JC=1,3) /                                         SULW.602   
     S 0.96201309E+02, 0.16905493E+02, 0.00000000E+00/                     SULW.603   
      DATA (GB( 8, 9,JC),JC=1,3) /                                         SULW.604   
     S 0.96201309E+02, 0.18363655E+02, 0.10000000E+01/                     SULW.605   
      DATA (GA( 8,10,JC),JC=1,3) /                                         SULW.606   
     S 0.96754684E+02, 0.16690109E+02, 0.00000000E+00/                     SULW.607   
      DATA (GB( 8,10,JC),JC=1,3) /                                         SULW.608   
     S 0.96754684E+02, 0.18189079E+02, 0.10000000E+01/                     SULW.609   
C                                                                          SULW.610   
C----- INTERVAL = 4 ----- T =    287.500                                   SULW.611   
C                                                                          SULW.612   
      DATA (GA( 9, 9,JC),JC=1,3) /                                         SULW.613   
     S 0.96342339E+02, 0.16853893E+02, 0.00000000E+00/                     SULW.614   
      DATA (GB( 9, 9,JC),JC=1,3) /                                         SULW.615   
     S 0.96342339E+02, 0.18321957E+02, 0.10000000E+01/                     SULW.616   
      DATA (GA( 9,10,JC),JC=1,3) /                                         SULW.617   
     S 0.96883301E+02, 0.16638573E+02, 0.00000000E+00/                     SULW.618   
      DATA (GB( 9,10,JC),JC=1,3) /                                         SULW.619   
     S 0.96883301E+02, 0.18147303E+02, 0.10000000E+01/                     SULW.620   
C                                                                          SULW.621   
C----- INTERVAL = 4 ----- T =    300.000                                   SULW.622   
C                                                                          SULW.623   
      DATA (GA(10, 9,JC),JC=1,3) /                                         SULW.624   
     S 0.96457764E+02, 0.16806755E+02, 0.00000000E+00/                     SULW.625   
      DATA (GB(10, 9,JC),JC=1,3) /                                         SULW.626   
     S 0.96457764E+02, 0.18283590E+02, 0.10000000E+01/                     SULW.627   
      DATA (GA(10,10,JC),JC=1,3) /                                         SULW.628   
     S 0.96989792E+02, 0.16591677E+02, 0.00000000E+00/                     SULW.629   
      DATA (GB(10,10,JC),JC=1,3) /                                         SULW.630   
     S 0.96989792E+02, 0.18108814E+02, 0.10000000E+01/                     SULW.631   
C                                                                          SULW.632   
C----- INTERVAL = 4 ----- T =    312.500                                   SULW.633   
C                                                                          SULW.634   
      DATA (GA(11, 9,JC),JC=1,3) /                                         SULW.635   
     S 0.96549957E+02, 0.16763689E+02, 0.00000000E+00/                     SULW.636   
      DATA (GB(11, 9,JC),JC=1,3) /                                         SULW.637   
     S 0.96549957E+02, 0.18248074E+02, 0.10000000E+01/                     SULW.638   
      DATA (GA(11,10,JC),JC=1,3) /                                         SULW.639   
     S 0.97097275E+02, 0.16548479E+02, 0.00000000E+00/                     SULW.640   
      DATA (GB(11,10,JC),JC=1,3) /                                         SULW.641   
     S 0.97097275E+02, 0.18073788E+02, 0.10000000E+01/                     SULW.642   
C                                                                          SULW.643   
C-- WATER VAPOR -- INT.5 --  350- 500 CM-1                                 SULW.644   
C                                                                          SULW.645   
C                                                                          SULW.646   
C----- INTERVAL = 5 ----- T =    187.500                                   SULW.647   
C                                                                          SULW.648   
      DATA (GA( 1, 5,JC),JC=1,3) /                                         SULW.649   
     S 0.13134047E+00,-0.23649048E-01, 0.00000000E+00/                     SULW.650   
      DATA (GB( 1, 5,JC),JC=1,3) /                                         SULW.651   
     S 0.13134047E+00, 0.54008597E+00, 0.10000000E+01/                     SULW.652   
      DATA (GA( 1, 6,JC),JC=1,3) /                                         SULW.653   
     S 0.14049581E+00,-0.26231026E-01, 0.00000000E+00/                     SULW.654   
      DATA (GB( 1, 6,JC),JC=1,3) /                                         SULW.655   
     S 0.14049581E+00, 0.54143775E+00, 0.10000000E+01/                     SULW.656   
C                                                                          SULW.657   
C----- INTERVAL = 5 ----- T =    200.000                                   SULW.658   
C                                                                          SULW.659   
      DATA (GA( 2, 5,JC),JC=1,3) /                                         SULW.660   
     S 0.13330981E+00,-0.24178915E-01, 0.00000000E+00/                     SULW.661   
      DATA (GB( 2, 5,JC),JC=1,3) /                                         SULW.662   
     S 0.13330981E+00, 0.54094988E+00, 0.10000000E+01/                     SULW.663   
      DATA (GA( 2, 6,JC),JC=1,3) /                                         SULW.664   
     S 0.14229582E+00,-0.26725627E-01, 0.00000000E+00/                     SULW.665   
      DATA (GB( 2, 6,JC),JC=1,3) /                                         SULW.666   
     S 0.14229582E+00, 0.54189402E+00, 0.10000000E+01/                     SULW.667   
C                                                                          SULW.668   
C----- INTERVAL = 5 ----- T =    212.500                                   SULW.669   
C                                                                          SULW.670   
      DATA (GA( 3, 5,JC),JC=1,3) /                                         SULW.671   
     S 0.13504511E+00,-0.24650861E-01, 0.00000000E+00/                     SULW.672   
      DATA (GB( 3, 5,JC),JC=1,3) /                                         SULW.673   
     S 0.13504511E+00, 0.54169583E+00, 0.10000000E+01/                     SULW.674   
      DATA (GA( 3, 6,JC),JC=1,3) /                                         SULW.675   
     S 0.14384151E+00,-0.27153090E-01, 0.00000000E+00/                     SULW.676   
      DATA (GB( 3, 6,JC),JC=1,3) /                                         SULW.677   
     S 0.14384151E+00, 0.54222512E+00, 0.10000000E+01/                     SULW.678   
C                                                                          SULW.679   
C----- INTERVAL = 5 ----- T =    225.000                                   SULW.680   
C                                                                          SULW.681   
      DATA (GA( 4, 5,JC),JC=1,3) /                                         SULW.682   
     S 0.13651314E+00,-0.25044570E-01, 0.00000000E+00/                     SULW.683   
      DATA (GB( 4, 5,JC),JC=1,3) /                                         SULW.684   
     S 0.13651314E+00, 0.54191625E+00, 0.10000000E+01/                     SULW.685   
      DATA (GA( 4, 6,JC),JC=1,3) /                                         SULW.686   
     S 0.14517485E+00,-0.27523417E-01, 0.00000000E+00/                     SULW.687   
      DATA (GB( 4, 6,JC),JC=1,3) /                                         SULW.688   
     S 0.14517485E+00, 0.54246801E+00, 0.10000000E+01/                     SULW.689   
C                                                                          SULW.690   
C----- INTERVAL = 5 ----- T =    237.500                                   SULW.691   
C                                                                          SULW.692   
      DATA (GA( 5, 5,JC),JC=1,3) /                                         SULW.693   
     S 0.13790466E+00,-0.25431205E-01, 0.00000000E+00/                     SULW.694   
      DATA (GB( 5, 5,JC),JC=1,3) /                                         SULW.695   
     S 0.13790466E+00, 0.54262739E+00, 0.10000000E+01/                     SULW.696   
      DATA (GA( 5, 6,JC),JC=1,3) /                                         SULW.697   
     S 0.14633319E+00,-0.27845515E-01, 0.00000000E+00/                     SULW.698   
      DATA (GB( 5, 6,JC),JC=1,3) /                                         SULW.699   
     S 0.14633319E+00, 0.54265642E+00, 0.10000000E+01/                     SULW.700   
C                                                                          SULW.701   
C----- INTERVAL = 5 ----- T =    250.000                                   SULW.702   
C                                                                          SULW.703   
      DATA (GA( 6, 5,JC),JC=1,3) /                                         SULW.704   
     S 0.13909847E+00,-0.25759069E-01, 0.00000000E+00/                     SULW.705   
      DATA (GB( 6, 5,JC),JC=1,3) /                                         SULW.706   
     S 0.13909847E+00, 0.54293746E+00, 0.10000000E+01/                     SULW.707   
      DATA (GA( 6, 6,JC),JC=1,3) /                                         SULW.708   
     S 0.14734478E+00,-0.28128289E-01, 0.00000000E+00/                     SULW.709   
      DATA (GB( 6, 6,JC),JC=1,3) /                                         SULW.710   
     S 0.14734478E+00, 0.54279846E+00, 0.10000000E+01/                     SULW.711   
C                                                                          SULW.712   
C----- INTERVAL = 5 ----- T =    262.500                                   SULW.713   
C                                                                          SULW.714   
      DATA (GA( 7, 5,JC),JC=1,3) /                                         SULW.715   
     S 0.14014673E+00,-0.26045626E-01, 0.00000000E+00/                     SULW.716   
      DATA (GB( 7, 5,JC),JC=1,3) /                                         SULW.717   
     S 0.14014673E+00, 0.54306209E+00, 0.10000000E+01/                     SULW.718   
      DATA (GA( 7, 6,JC),JC=1,3) /                                         SULW.719   
     S 0.14823231E+00,-0.28376250E-01, 0.00000000E+00/                     SULW.720   
      DATA (GB( 7, 6,JC),JC=1,3) /                                         SULW.721   
     S 0.14823231E+00, 0.54290944E+00, 0.10000000E+01/                     SULW.722   
C                                                                          SULW.723   
C----- INTERVAL = 5 ----- T =    275.000                                   SULW.724   
C                                                                          SULW.725   
      DATA (GA( 8, 5,JC),JC=1,3) /                                         SULW.726   
     S 0.14110570E+00,-0.26310772E-01, 0.00000000E+00/                     SULW.727   
      DATA (GB( 8, 5,JC),JC=1,3) /                                         SULW.728   
     S 0.14110570E+00, 0.54324186E+00, 0.10000000E+01/                     SULW.729   
      DATA (GA( 8, 6,JC),JC=1,3) /                                         SULW.730   
     S 0.14901793E+00,-0.28597040E-01, 0.00000000E+00/                     SULW.731   
      DATA (GB( 8, 6,JC),JC=1,3) /                                         SULW.732   
     S 0.14901793E+00, 0.54300690E+00, 0.10000000E+01/                     SULW.733   
C                                                                          SULW.734   
C----- INTERVAL = 5 ----- T =    287.500                                   SULW.735   
C                                                                          SULW.736   
      DATA (GA( 9, 5,JC),JC=1,3) /                                         SULW.737   
     S 0.14198618E+00,-0.26556855E-01, 0.00000000E+00/                     SULW.738   
      DATA (GB( 9, 5,JC),JC=1,3) /                                         SULW.739   
     S 0.14198618E+00, 0.54346353E+00, 0.10000000E+01/                     SULW.740   
      DATA (GA( 9, 6,JC),JC=1,3) /                                         SULW.741   
     S 0.14971229E+00,-0.28792191E-01, 0.00000000E+00/                     SULW.742   
      DATA (GB( 9, 6,JC),JC=1,3) /                                         SULW.743   
     S 0.14971229E+00, 0.54307669E+00, 0.10000000E+01/                     SULW.744   
C                                                                          SULW.745   
C----- INTERVAL = 5 ----- T =    300.000                                   SULW.746   
C                                                                          SULW.747   
      DATA (GA(10, 5,JC),JC=1,3) /                                         SULW.748   
     S 0.14277160E+00,-0.26774861E-01, 0.00000000E+00/                     SULW.749   
      DATA (GB(10, 5,JC),JC=1,3) /                                         SULW.750   
     S 0.14277160E+00, 0.54357564E+00, 0.10000000E+01/                     SULW.751   
      DATA (GA(10, 6,JC),JC=1,3) /                                         SULW.752   
     S 0.15033126E+00,-0.28966904E-01, 0.00000000E+00/                     SULW.753   
      DATA (GB(10, 6,JC),JC=1,3) /                                         SULW.754   
     S 0.15033126E+00, 0.54313493E+00, 0.10000000E+01/                     SULW.755   
C                                                                          SULW.756   
C----- INTERVAL = 5 ----- T =    312.500                                   SULW.757   
C                                                                          SULW.758   
      DATA (GA(11, 5,JC),JC=1,3) /                                         SULW.759   
     S 0.14349319E+00,-0.26976623E-01, 0.00000000E+00/                     SULW.760   
      DATA (GB(11, 5,JC),JC=1,3) /                                         SULW.761   
     S 0.14349319E+00, 0.54369903E+00, 0.10000000E+01/                     SULW.762   
      DATA(GA(11, 6,JC),JC=1,3) /                                          SULW.763   
     S 0.15088280E+00,-0.29121898E-01, 0.00000000E+00/                     SULW.764   
      DATA (GB(11, 6,JC),JC=1,3) /                                         SULW.765   
     S 0.15088280E+00, 0.54318237E+00, 0.10000000E+01/                     SULW.766   
C                                                                          SULW.767   
C-WATER VAPOR-WINGS OF VIBRATION-ROTATION BAND - 1250-1450+1880-2820-      SULW.768   
C                                                                          SULW.769   
C                                                                          SULW.770   
C----- INTERVAL = 6 ----- T =    187.50                                    SULW.771   
C                                                                          SULW.772   
      DATA (GA( 1,11,JC),JC=1,3) /                                         SULW.773   
     S 0.74737163E+00,-0.60590485E-01, 0.00000000E+00/                     SULW.774   
      DATA (GB( 1,11,JC),JC=1,3) /                                         SULW.775   
     S 0.74737163E+00, 0.17888287E+01, 0.10000000E+01/                     SULW.776   
      DATA (GA( 1,12,JC),JC=1,3) /                                         SULW.777   
     S 0.64412124E+00,-0.16340195E-01, 0.00000000E+00/                     SULW.778   
      DATA (GB( 1,12,JC),JC=1,3) /                                         SULW.779   
     S 0.64412124E+00, 0.16133750E+01, 0.10000000E+01/                     SULW.780   
C                                                                          SULW.781   
C----- INTERVAL = 6 ----- T =    200.00                                    SULW.782   
C                                                                          SULW.783   
      DATA (GA( 2,11,JC),JC=1,3) /                                         SULW.784   
     S 0.67637182E+00,-0.27088422E-01, 0.00000000E+00/                     SULW.785   
      DATA (GB( 2,11,JC),JC=1,3) /                                         SULW.786   
     S 0.67637182E+00, 0.16680907E+01, 0.10000000E+01/                     SULW.787   
      DATA (GA( 2,12,JC),JC=1,3) /                                         SULW.788   
     S 0.55131795E+00, 0.32252772E-01, 0.00000000E+00/                     SULW.789   
      DATA (GB( 2,12,JC),JC=1,3) /                                         SULW.790   
     S 0.55131795E+00, 0.14332603E+01, 0.10000000E+01/                     SULW.791   
C                                                                          SULW.792   
C----- INTERVAL = 6 ----- T =    212.50                                    SULW.793   
C                                                                          SULW.794   
      DATA (GA( 3,11,JC),JC=1,3) /                                         SULW.795   
     S 0.59891051E+00, 0.12874948E-01, 0.00000000E+00/                     SULW.796   
      DATA (GB( 3,11,JC),JC=1,3) /                                         SULW.797   
     S 0.59891051E+00, 0.15230591E+01, 0.10000000E+01/                     SULW.798   
      DATA (GA( 3,12,JC),JC=1,3) /                                         SULW.799   
     S 0.44063067E+00, 0.91024989E-01, 0.00000000E+00/                     SULW.800   
      DATA (GB( 3,12,JC),JC=1,3) /                                         SULW.801   
     S 0.44063067E+00, 0.12039660E+01, 0.10000000E+01/                     SULW.802   
C                                                                          SULW.803   
C----- INTERVAL = 6 ----- T =    225.00                                    SULW.804   
C                                                                          SULW.805   
      DATA (GA( 4,11,JC),JC=1,3) /                                         SULW.806   
     S 0.51061614E+00, 0.59883548E-01, 0.00000000E+00/                     SULW.807   
      DATA (GB( 4,11,JC),JC=1,3) /                                         SULW.808   
     S 0.51061614E+00, 0.13461757E+01, 0.10000000E+01/                     SULW.809   
      DATA (GA( 4,12,JC),JC=1,3) /                                         SULW.810   
     S 0.30439727E+00, 0.15980470E+00, 0.00000000E+00/                     SULW.811   
      DATA (GB( 4,12,JC),JC=1,3) /                                         SULW.812   
     S 0.30439727E+00, 0.91241774E+00, 0.10000000E+01/                     SULW.813   
C                                                                          SULW.814   
C----- INTERVAL = 6 ----- T =    237.50                                    SULW.815   
C                                                                          SULW.816   
      DATA (GA( 5,11,JC),JC=1,3) /                                         SULW.817   
     S 0.40673842E+00, 0.11398935E+00, 0.00000000E+00/                     SULW.818   
      DATA (GB( 5,11,JC),JC=1,3) /                                         SULW.819   
     S 0.40673842E+00, 0.11289965E+01, 0.10000000E+01/                     SULW.820   
      DATA (GA( 5,12,JC),JC=1,3) /                                         SULW.821   
     S 0.15005620E+00, 0.23446409E+00, 0.00000000E+00/                     SULW.822   
      DATA (GB( 5,12,JC),JC=1,3) /                                         SULW.823   
     S 0.15005620E+00, 0.58547602E+00, 0.10000000E+01/                     SULW.824   
C                                                                          SULW.825   
C----- INTERVAL = 6 ----- T =    250.00                                    SULW.826   
C                                                                          SULW.827   
      DATA (GA( 6,11,JC),JC=1,3) /                                         SULW.828   
     S 0.28375203E+00, 0.17444874E+00, 0.00000000E+00/                     SULW.829   
      DATA (GB( 6,11,JC),JC=1,3) /                                         SULW.830   
     S 0.28375203E+00, 0.86693115E+00, 0.10000000E+01/                     SULW.831   
      DATA (GA( 6,12,JC),JC=1,3) /                                         SULW.832   
     S 0.51658133E-01, 0.29464628E+00, 0.00000000E+00/                     SULW.833   
      DATA (GB( 6,12,JC),JC=1,3) /                                         SULW.834   
     S 0.51658133E-01, 0.40170363E+00, 0.10000000E+01/                     SULW.835   
C                                                                          SULW.836   
C----- INTERVAL = 6 ----- T =    262.50                                    SULW.837   
C                                                                          SULW.838   
      DATA (GA( 7,11,JC),JC=1,3) /                                         SULW.839   
     S 0.15136005E+00, 0.23761536E+00, 0.00000000E+00/                     SULW.840   
      DATA (GB( 7,11,JC),JC=1,3) /                                         SULW.841   
     S 0.15136005E+00, 0.58911683E+00, 0.10000000E+01/                     SULW.842   
      DATA (GA( 7,12,JC),JC=1,3) /                                         SULW.843   
     S 0.18932679E-01, 0.33516250E+00, 0.00000000E+00/                     SULW.844   
      DATA (GB( 7,12,JC),JC=1,3) /                                         SULW.845   
     S 0.18932679E-01, 0.36796152E+00, 0.10000000E+01/                     SULW.846   
C                                                                          SULW.847   
C----- INTERVAL = 6 ----- T =    275.00                                    SULW.848   
C                                                                          SULW.849   
      DATA (GA( 8,11,JC),JC=1,3) /                                         SULW.850   
     S 0.61752765E-01, 0.28965454E+00, 0.00000000E+00/                     SULW.851   
      DATA (GB( 8,11,JC),JC=1,3) /                                         SULW.852   
     S 0.61752765E-01, 0.41975793E+00, 0.10000000E+01/                     SULW.853   
      DATA (GA( 8,12,JC),JC=1,3) /                                         SULW.854   
     S 0.79619427E-02, 0.36873141E+00, 0.00000000E+00/                     SULW.855   
      DATA (GB( 8,12,JC),JC=1,3) /                                         SULW.856   
     S 0.79619427E-02, 0.37964009E+00, 0.10000000E+01/                     SULW.857   
C                                                                          SULW.858   
C----- INTERVAL = 6 ----- T =    287.50                                    SULW.859   
C                                                                          SULW.860   
      DATA (GA( 9,11,JC),JC=1,3) /                                         SULW.861   
     S 0.26192233E-01, 0.32568668E+00, 0.00000000E+00/                     SULW.862   
      DATA (GB( 9,11,JC),JC=1,3) /                                         SULW.863   
     S 0.26192233E-01, 0.37385106E+00, 0.10000000E+01/                     SULW.864   
      DATA (GA( 9,12,JC),JC=1,3) /                                         SULW.865   
     S 0.40764469E-02, 0.40137572E+00, 0.00000000E+00/                     SULW.866   
      DATA (GB( 9,12,JC),JC=1,3) /                                         SULW.867   
     S 0.40764469E-02, 0.40608889E+00, 0.10000000E+01/                     SULW.868   
C                                                                          SULW.869   
C----- INTERVAL = 6 ----- T =    300.00                                    SULW.870   
C                                                                          SULW.871   
      DATA (GA(10,11,JC),JC=1,3) /                                         SULW.872   
     S 0.12168738E-01, 0.35455148E+00, 0.00000000E+00/                     SULW.873   
      DATA (GB(10,11,JC),JC=1,3) /                                         SULW.874   
     S 0.12168738E-01, 0.37329084E+00, 0.10000000E+01/                     SULW.875   
      DATA (GA(10,12,JC),JC=1,3) /                                         SULW.876   
     S 0.23914061E-02, 0.43615987E+00, 0.00000000E+00/                     SULW.877   
      DATA (GB(10,12,JC),JC=1,3) /                                         SULW.878   
     S 0.23914061E-02, 0.43919208E+00, 0.10000000E+01/                     SULW.879   
C                                                                          SULW.880   
C----- INTERVAL = 6 ----- T =    312.50                                    SULW.881   
C                                                                          SULW.882   
      DATA (GA(10,11,JC),JC=1,3) /                                         SULW.883   
     S 0.12168738E-01, 0.35455148E+00, 0.00000000E+00/                     SULW.884   
      DATA (GB(10,11,JC),JC=1,3) /                                         SULW.885   
     S 0.12168738E-01, 0.37329084E+00, 0.10000000E+01/                     SULW.886   
      DATA (GA(10,12,JC),JC=1,3) /                                         SULW.887   
     S 0.23914061E-02, 0.43615987E+00, 0.00000000E+00/                     SULW.888   
      DATA (GB(10,12,JC),JC=1,3) /                                         SULW.889   
     S 0.23914061E-02, 0.43919208E+00, 0.10000000E+01/                     SULW.890   
C                                                                          SULW.891   
C-- CO2 -- INT.2 -- 500-800 CM-1 --- FROM ABS225 ------------              SULW.892   
C                                                                          SULW.893   
C-- FIU = 0.8 + MAX(0.35,(7-IU)*0.9)  , X/T,  9                            SULW.894   
C                                                                          SULW.895   
C----- INTERVAL = 2 ----- T =  187.5                                       SULW.896   
C                                                                          SULW.897   
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.898   
      DATA (GA( 1,13,JC),JC=1,3) /                                         SULW.899   
     S 0.87668459E-01, 0.13845511E+01, 0.00000000E+00/                     SULW.900   
      DATA (GB( 1,13,JC),JC=1,3) /                                         SULW.901   
     S 0.87668459E-01, 0.23203798E+01, 0.10000000E+01/                     SULW.902   
      DATA (GA( 1,14,JC),JC=1,3) /                                         SULW.903   
     S 0.74878820E-01, 0.11718758E+01, 0.00000000E+00/                     SULW.904   
      DATA (GB( 1,14,JC),JC=1,3) /                                         SULW.905   
     S 0.74878820E-01, 0.20206726E+01, 0.10000000E+01/                     SULW.906   
C                                                                          SULW.907   
C----- INTERVAL = 2 ----- T =  200.0                                       SULW.908   
C                                                                          SULW.909   
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.910   
      DATA (GA( 2,13,JC),JC=1,3) /                                         SULW.911   
     S 0.83754276E-01, 0.13187042E+01, 0.00000000E+00/                     SULW.912   
      DATA (GB( 2,13,JC),JC=1,3) /                                         SULW.913   
     S 0.83754276E-01, 0.22288925E+01, 0.10000000E+01/                     SULW.914   
      DATA (GA( 2,14,JC),JC=1,3) /                                         SULW.915   
     S 0.71650966E-01, 0.11216131E+01, 0.00000000E+00/                     SULW.916   
      DATA (GB( 2,14,JC),JC=1,3) /                                         SULW.917   
     S 0.71650966E-01, 0.19441824E+01, 0.10000000E+01/                     SULW.918   
C                                                                          SULW.919   
C----- INTERVAL = 2 ----- T =  212.5                                       SULW.920   
C                                                                          SULW.921   
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.922   
      DATA (GA( 3,13,JC),JC=1,3) /                                         SULW.923   
     S 0.80460283E-01, 0.12644396E+01, 0.00000000E+00/                     SULW.924   
      DATA (GB( 3,13,JC),JC=1,3) /                                         SULW.925   
     S 0.80460283E-01, 0.21515593E+01, 0.10000000E+01/                     SULW.926   
      DATA (GA( 3,14,JC),JC=1,3) /                                         SULW.927   
     S 0.68979615E-01, 0.10809473E+01, 0.00000000E+00/                     SULW.928   
      DATA (GB( 3,14,JC),JC=1,3) /                                         SULW.929   
     S 0.68979615E-01, 0.18807257E+01, 0.10000000E+01/                     SULW.930   
C                                                                          SULW.931   
C----- INTERVAL = 2 ----- T =  225.0                                       SULW.932   
C                                                                          SULW.933   
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.934   
      DATA (GA( 4,13,JC),JC=1,3) /                                         SULW.935   
     S 0.77659686E-01, 0.12191543E+01, 0.00000000E+00/                     SULW.936   
      DATA (GB( 4,13,JC),JC=1,3) /                                         SULW.937   
     S 0.77659686E-01, 0.20855896E+01, 0.10000000E+01/                     SULW.938   
      DATA (GA( 4,14,JC),JC=1,3) /                                         SULW.939   
     S 0.66745345E-01, 0.10476396E+01, 0.00000000E+00/                     SULW.940   
      DATA (GB( 4,14,JC),JC=1,3) /                                         SULW.941   
     S 0.66745345E-01, 0.18275618E+01, 0.10000000E+01/                     SULW.942   
C                                                                          SULW.943   
C----- INTERVAL = 2 ----- T =  237.5                                       SULW.944   
C                                                                          SULW.945   
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.946   
      DATA (GA( 5,13,JC),JC=1,3) /                                         SULW.947   
     S 0.75257056E-01, 0.11809511E+01, 0.00000000E+00/                     SULW.948   
      DATA (GB( 5,13,JC),JC=1,3) /                                         SULW.949   
     S 0.75257056E-01, 0.20288489E+01, 0.10000000E+01/                     SULW.950   
      DATA (GA( 5,14,JC),JC=1,3) /                                         SULW.951   
     S 0.64857571E-01, 0.10200373E+01, 0.00000000E+00/                     SULW.952   
      DATA (GB( 5,14,JC),JC=1,3) /                                         SULW.953   
     S 0.64857571E-01, 0.17825910E+01, 0.10000000E+01/                     SULW.954   
C                                                                          SULW.955   
C----- INTERVAL = 2 ----- T =  250.0                                       SULW.956   
C                                                                          SULW.957   
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.958   
      DATA (GA( 6,13,JC),JC=1,3) /                                         SULW.959   
     S 0.73179175E-01, 0.11484154E+01, 0.00000000E+00/                     SULW.960   
      DATA (GB( 6,13,JC),JC=1,3) /                                         SULW.961   
     S 0.73179175E-01, 0.19796791E+01, 0.10000000E+01/                     SULW.962   
      DATA (GA( 6,14,JC),JC=1,3) /                                         SULW.963   
     S 0.63248495E-01, 0.99692726E+00, 0.00000000E+00/                     SULW.964   
      DATA (GB( 6,14,JC),JC=1,3) /                                         SULW.965   
     S 0.63248495E-01, 0.17442308E+01, 0.10000000E+01/                     SULW.966   
C                                                                          SULW.967   
C----- INTERVAL = 2 ----- T =  262.5                                       SULW.968   
C                                                                          SULW.969   
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.970   
      DATA (GA( 7,13,JC),JC=1,3) /                                         SULW.971   
     S 0.71369063E-01, 0.11204723E+01, 0.00000000E+00/                     SULW.972   
      DATA (GB( 7,13,JC),JC=1,3) /                                         SULW.973   
     S 0.71369063E-01, 0.19367778E+01, 0.10000000E+01/                     SULW.974   
      DATA (GA( 7,14,JC),JC=1,3) /                                         SULW.975   
     S 0.61866970E-01, 0.97740923E+00, 0.00000000E+00/                     SULW.976   
      DATA (GB( 7,14,JC),JC=1,3) /                                         SULW.977   
     S 0.61866970E-01, 0.17112809E+01, 0.10000000E+01/                     SULW.978   
C                                                                          SULW.979   
C----- INTERVAL = 2 ----- T =  275.0                                       SULW.980   
C                                                                          SULW.981   
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.982   
      DATA (GA( 8,13,JC),JC=1,3) /                                         SULW.983   
     S 0.69781812E-01, 0.10962918E+01, 0.00000000E+00/                     SULW.984   
      DATA (GB( 8,13,JC),JC=1,3) /                                         SULW.985   
     S 0.69781812E-01, 0.18991112E+01, 0.10000000E+01/                     SULW.986   
      DATA (GA( 8,14,JC),JC=1,3) /                                         SULW.987   
     S 0.60673632E-01, 0.96080188E+00, 0.00000000E+00/                     SULW.988   
      DATA (GB( 8,14,JC),JC=1,3) /                                         SULW.989   
     S 0.60673632E-01, 0.16828137E+01, 0.10000000E+01/                     SULW.990   
C                                                                          SULW.991   
C----- INTERVAL = 2 ----- T =  287.5                                       SULW.992   
C                                                                          SULW.993   
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.994   
      DATA (GA( 9,13,JC),JC=1,3) /                                         SULW.995   
     S 0.68381606E-01, 0.10752229E+01, 0.00000000E+00/                     SULW.996   
      DATA (GB( 9,13,JC),JC=1,3) /                                         SULW.997   
     S 0.68381606E-01, 0.18658501E+01, 0.10000000E+01/                     SULW.998   
      DATA (GA( 9,14,JC),JC=1,3) /                                         SULW.999   
     S 0.59637277E-01, 0.94657562E+00, 0.00000000E+00/                     SULW.1000  
      DATA (GB( 9,14,JC),JC=1,3) /                                         SULW.1001  
     S 0.59637277E-01, 0.16580908E+01, 0.10000000E+01/                     SULW.1002  
C                                                                          SULW.1003  
C----- INTERVAL = 2 ----- T =  300.0                                       SULW.1004  
C                                                                          SULW.1005  
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.1006  
      DATA (GA(10,13,JC),JC=1,3) /                                         SULW.1007  
     S 0.67139539E-01, 0.10567474E+01, 0.00000000E+00/                     SULW.1008  
      DATA (GB(10,13,JC),JC=1,3) /                                         SULW.1009  
     S 0.67139539E-01, 0.18363226E+01, 0.10000000E+01/                     SULW.1010  
      DATA (GA(10,14,JC),JC=1,3) /                                         SULW.1011  
     S 0.58732178E-01, 0.93430511E+00, 0.00000000E+00/                     SULW.1012  
      DATA (GB(10,14,JC),JC=1,3) /                                         SULW.1013  
     S 0.58732178E-01, 0.16365014E+01, 0.10000000E+01/                     SULW.1014  
C                                                                          SULW.1015  
C----- INTERVAL = 2 ----- T =  312.5                                       SULW.1016  
C                                                                          SULW.1017  
C-- INDICES FOR PADE APPROXIMATION   1 30 38 45                            SULW.1018  
      DATA (GA(11,13,JC),JC=1,3) /                                         SULW.1019  
     S 0.66032012E-01, 0.10404465E+01, 0.00000000E+00/                     SULW.1020  
      DATA (GB(11,13,JC),JC=1,3) /                                         SULW.1021  
     S 0.66032012E-01, 0.18099779E+01, 0.10000000E+01/                     SULW.1022  
      DATA (GA(11,14,JC),JC=1,3) /                                         SULW.1023  
     S 0.57936092E-01, 0.92363528E+00, 0.00000000E+00/                     SULW.1024  
      DATA (GB(11,14,JC),JC=1,3) /                                         SULW.1025  
     S 0.57936092E-01, 0.16175164E+01, 0.10000000E+01/                     SULW.1026  
C                                                                          SULW.1027  
C                                                                          SULW.1028  
C-- CARBON DIOXIDE LINES IN THE WINDOW REGION (800-1250 CM-1)              SULW.1029  
C                                                                          SULW.1030  
C-- G = 0.0                                                                SULW.1031  
C                                                                          SULW.1032  
C----- INTERVAL = 4 ----- T =  187.5                                       SULW.1033  
C                                                                          SULW.1034  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1035  
      DATA (GA( 1,15,JC),JC=1,3) /                                         SULW.1036  
     S 0.13230067E+02, 0.22042132E+02, 0.00000000E+00/                     SULW.1037  
      DATA (GB( 1,15,JC),JC=1,3) /                                         SULW.1038  
     S 0.13230067E+02, 0.22051750E+02, 0.10000000E+01/                     SULW.1039  
      DATA (GA( 1,16,JC),JC=1,3) /                                         SULW.1040  
     S 0.13183816E+02, 0.22169501E+02, 0.00000000E+00/                     SULW.1041  
      DATA (GB( 1,16,JC),JC=1,3) /                                         SULW.1042  
     S 0.13183816E+02, 0.22178972E+02, 0.10000000E+01/                     SULW.1043  
C                                                                          SULW.1044  
C----- INTERVAL = 4 ----- T =  200.0                                       SULW.1045  
C                                                                          SULW.1046  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1047  
      DATA (GA( 2,15,JC),JC=1,3) /                                         SULW.1048  
     S 0.13213564E+02, 0.22107298E+02, 0.00000000E+00/                     SULW.1049  
      DATA (GB( 2,15,JC),JC=1,3) /                                         SULW.1050  
     S 0.13213564E+02, 0.22116850E+02, 0.10000000E+01/                     SULW.1051  
      DATA (GA( 2,16,JC),JC=1,3) /                                         SULW.1052  
     S 0.13189991E+02, 0.22270075E+02, 0.00000000E+00/                     SULW.1053  
      DATA (GB( 2,16,JC),JC=1,3) /                                         SULW.1054  
     S 0.13189991E+02, 0.22279484E+02, 0.10000000E+01/                     SULW.1055  
C                                                                          SULW.1056  
C----- INTERVAL = 4 ----- T =  212.5                                       SULW.1057  
C                                                                          SULW.1058  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1059  
      DATA (GA( 3,15,JC),JC=1,3) /                                         SULW.1060  
     S 0.13209140E+02, 0.22180915E+02, 0.00000000E+00/                     SULW.1061  
      DATA (GB( 3,15,JC),JC=1,3) /                                         SULW.1062  
     S 0.13209140E+02, 0.22190410E+02, 0.10000000E+01/                     SULW.1063  
      DATA (GA( 3,16,JC),JC=1,3) /                                         SULW.1064  
     S 0.13209485E+02, 0.22379193E+02, 0.00000000E+00/                     SULW.1065  
      DATA (GB( 3,16,JC),JC=1,3) /                                         SULW.1066  
     S 0.13209485E+02, 0.22388551E+02, 0.10000000E+01/                     SULW.1067  
C                                                                          SULW.1068  
C----- INTERVAL = 4 ----- T =  225.0                                       SULW.1069  
C                                                                          SULW.1070  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1071  
      DATA (GA( 4,15,JC),JC=1,3) /                                         SULW.1072  
     S 0.13213894E+02, 0.22259478E+02, 0.00000000E+00/                     SULW.1073  
      DATA (GB( 4,15,JC),JC=1,3) /                                         SULW.1074  
     S 0.13213894E+02, 0.22268925E+02, 0.10000000E+01/                     SULW.1075  
      DATA (GA( 4,16,JC),JC=1,3) /                                         SULW.1076  
     S 0.13238789E+02, 0.22492992E+02, 0.00000000E+00/                     SULW.1077  
      DATA (GB( 4,16,JC),JC=1,3) /                                         SULW.1078  
     S 0.13238789E+02, 0.22502309E+02, 0.10000000E+01/                     SULW.1079  
C                                                                          SULW.1080  
C----- INTERVAL = 4 ----- T =  237.5                                       SULW.1081  
C                                                                          SULW.1082  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1083  
      DATA (GA( 5,15,JC),JC=1,3) /                                         SULW.1084  
     S 0.13225963E+02, 0.22341039E+02, 0.00000000E+00/                     SULW.1085  
      DATA (GB( 5,15,JC),JC=1,3) /                                         SULW.1086  
     S 0.13225963E+02, 0.22350445E+02, 0.10000000E+01/                     SULW.1087  
      DATA (GA( 5,16,JC),JC=1,3) /                                         SULW.1088  
     S 0.13275017E+02, 0.22608508E+02, 0.00000000E+00/                     SULW.1089  
      DATA (GB( 5,16,JC),JC=1,3) /                                         SULW.1090  
     S 0.13275017E+02, 0.22617792E+02, 0.10000000E+01/                     SULW.1091  
C                                                                          SULW.1092  
C----- INTERVAL = 4 ----- T =  250.0                                       SULW.1093  
C                                                                          SULW.1094  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1095  
      DATA (GA( 6,15,JC),JC=1,3) /                                         SULW.1096  
     S 0.13243806E+02, 0.22424247E+02, 0.00000000E+00/                     SULW.1097  
      DATA (GB( 6,15,JC),JC=1,3) /                                         SULW.1098  
     S 0.13243806E+02, 0.22433617E+02, 0.10000000E+01/                     SULW.1099  
      DATA (GA( 6,16,JC),JC=1,3) /                                         SULW.1100  
     S 0.13316096E+02, 0.22723843E+02, 0.00000000E+00/                     SULW.1101  
      DATA (GB( 6,16,JC),JC=1,3) /                                         SULW.1102  
     S 0.13316096E+02, 0.22733099E+02, 0.10000000E+01/                     SULW.1103  
C                                                                          SULW.1104  
C----- INTERVAL = 4 ----- T =  262.5                                       SULW.1105  
C                                                                          SULW.1106  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1107  
      DATA (GA( 7,15,JC),JC=1,3) /                                         SULW.1108  
     S 0.13266104E+02, 0.22508089E+02, 0.00000000E+00/                     SULW.1109  
      DATA (GB( 7,15,JC),JC=1,3) /                                         SULW.1110  
     S 0.13266104E+02, 0.22517429E+02, 0.10000000E+01/                     SULW.1111  
      DATA (GA( 7,16,JC),JC=1,3) /                                         SULW.1112  
     S 0.13360555E+02, 0.22837837E+02, 0.00000000E+00/                     SULW.1113  
      DATA (GB( 7,16,JC),JC=1,3) /                                         SULW.1114  
     S 0.13360555E+02, 0.22847071E+02, 0.10000000E+01/                     SULW.1115  
C                                                                          SULW.1116  
C----- INTERVAL = 4 ----- T =  275.0                                       SULW.1117  
C                                                                          SULW.1118  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1119  
      DATA (GA( 8,15,JC),JC=1,3) /                                         SULW.1120  
     S 0.13291782E+02, 0.22591771E+02, 0.00000000E+00/                     SULW.1121  
      DATA (GB( 8,15,JC),JC=1,3) /                                         SULW.1122  
     S 0.13291782E+02, 0.22601086E+02, 0.10000000E+01/                     SULW.1123  
      DATA (GA( 8,16,JC),JC=1,3) /                                         SULW.1124  
     S 0.13407324E+02, 0.22949751E+02, 0.00000000E+00/                     SULW.1125  
      DATA (GB( 8,16,JC),JC=1,3) /                                         SULW.1126  
     S 0.13407324E+02, 0.22958967E+02, 0.10000000E+01/                     SULW.1127  
C                                                                          SULW.1128  
C----- INTERVAL = 4 ----- T =  287.5                                       SULW.1129  
C                                                                          SULW.1130  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1131  
      DATA (GA( 9,15,JC),JC=1,3) /                                         SULW.1132  
     S 0.13319961E+02, 0.22674661E+02, 0.00000000E+00/                     SULW.1133  
      DATA (GB( 9,15,JC),JC=1,3) /                                         SULW.1134  
     S 0.13319961E+02, 0.22683956E+02, 0.10000000E+01/                     SULW.1135  
      DATA (GA( 9,16,JC),JC=1,3) /                                         SULW.1136  
     S 0.13455544E+02, 0.23059032E+02, 0.00000000E+00/                     SULW.1137  
      DATA (GB( 9,16,JC),JC=1,3) /                                         SULW.1138  
     S 0.13455544E+02, 0.23068234E+02, 0.10000000E+01/                     SULW.1139  
C                                                                          SULW.1140  
C----- INTERVAL = 4 ----- T =  300.0                                       SULW.1141  
C                                                                          SULW.1142  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1143  
      DATA (GA(10,15,JC),JC=1,3) /                                         SULW.1144  
     S 0.13349927E+02, 0.22756246E+02, 0.00000000E+00/                     SULW.1145  
      DATA (GB(10,15,JC),JC=1,3) /                                         SULW.1146  
     S 0.13349927E+02, 0.22765522E+02, 0.10000000E+01/                     SULW.1147  
      DATA (GA(10,16,JC),JC=1,3) /                                         SULW.1148  
     S 0.13504450E+02, 0.23165146E+02, 0.00000000E+00/                     SULW.1149  
      DATA (GB(10,16,JC),JC=1,3) /                                         SULW.1150  
     S 0.13504450E+02, 0.23174336E+02, 0.10000000E+01/                     SULW.1151  
C                                                                          SULW.1152  
C----- INTERVAL = 4 ----- T =  312.5                                       SULW.1153  
C                                                                          SULW.1154  
C-- INDICES FOR PADE APPROXIMATION     1   15   29   45                    SULW.1155  
      DATA (GA(11,15,JC),JC=1,3) /                                         SULW.1156  
     S 0.13381108E+02, 0.22836093E+02, 0.00000000E+00/                     SULW.1157  
      DATA (GB(11,15,JC),JC=1,3) /                                         SULW.1158  
     S 0.13381108E+02, 0.22845354E+02, 0.10000000E+01/                     SULW.1159  
      DATA (GA(11,16,JC),JC=1,3) /                                         SULW.1160  
     S 0.13553282E+02, 0.23267456E+02, 0.00000000E+00/                     SULW.1161  
      DATA (GB(11,16,JC),JC=1,3) /                                         SULW.1162  
     S 0.13553282E+02, 0.23276638E+02, 0.10000000E+01/                     SULW.1163  
C                                                                          SULW.1164  
C                                                                          SULW.1165  
C-- WATER VAPOR --- 650 - 800 CM-1                                         SULW.1166  
C                                                                          SULW.1167  
C---- INTERVAL = 2B ---- T = 187.5                                         SULW.1168  
C                                                                          SULW.1169  
      DATA (GA( 1,21,JC),JC=1,3) /                                         SULW.1170  
     S 0.19550761E+02,-0.26333148E+00, 0.00000000E+00/                     SULW.1171  
      DATA (GB( 1,21,JC),JC=1,3) /                                         SULW.1172  
     S 0.19550761E+02, 0.49595891E+01, 0.10000000E+01/                     SULW.1173  
      DATA (GA( 1,22,JC),JC=1,3) /                                         SULW.1174  
     S 0.20402482E+02,-0.24922589E+00, 0.00000000E+00/                     SULW.1175  
      DATA (GB( 1,22,JC),JC=1,3) /                                         SULW.1176  
     S 0.20402482E+02, 0.51104394E+01, 0.10000000E+01/                     SULW.1177  
C                                                                          SULW.1178  
C---- INTERVAL = 2B ---- T = 200.0                                         SULW.1179  
C                                                                          SULW.1180  
      DATA (GA( 2,21,JC),JC=1,3) /                                         SULW.1181  
     S 0.19830199E+02,-0.25754698E+00, 0.00000000E+00/                     SULW.1182  
      DATA (GB( 2,21,JC),JC=1,3) /                                         SULW.1183  
     S 0.19830199E+02, 0.50093036E+01, 0.10000000E+01/                     SULW.1184  
      DATA (GA( 2,22,JC),JC=1,3) /                                         SULW.1185  
     S 0.20696147E+02,-0.24494693E+00, 0.00000000E+00/                     SULW.1186  
      DATA (GB( 2,22,JC),JC=1,3) /                                         SULW.1187  
     S 0.20696147E+02, 0.51601103E+01, 0.10000000E+01/                     SULW.1188  
C                                                                          SULW.1189  
C---- INTERVAL = 2B ---- T = 212.5                                         SULW.1190  
C                                                                          SULW.1191  
      DATA (GA( 3,21,JC),JC=1,3) /                                         SULW.1192  
     S 0.20094853E+02,-0.25394587E+00, 0.00000000E+00/                     SULW.1193  
      DATA (GB( 3,21,JC),JC=1,3) /                                         SULW.1194  
     S 0.20094853E+02, 0.50564022E+01, 0.10000000E+01/                     SULW.1195  
      DATA (GA( 3,22,JC),JC=1,3) /                                         SULW.1196  
     S 0.20957105E+02,-0.24158774E+00, 0.00000000E+00/                     SULW.1197  
      DATA (GB( 3,22,JC),JC=1,3) /                                         SULW.1198  
     S 0.20957105E+02, 0.52035338E+01, 0.10000000E+01/                     SULW.1199  
C                                                                          SULW.1200  
C---- INTERVAL = 2B ---- T = 225.0                                         SULW.1201  
C                                                                          SULW.1202  
      DATA (GA( 4,21,JC),JC=1,3) /                                         SULW.1203  
     S 0.20321192E+02,-0.25012572E+00, 0.00000000E+00/                     SULW.1204  
      DATA (GB( 4,21,JC),JC=1,3) /                                         SULW.1205  
     S 0.20321192E+02, 0.50954623E+01, 0.10000000E+01/                     SULW.1206  
      DATA (GA( 4,22,JC),JC=1,3) /                                         SULW.1207  
     S 0.21189573E+02,-0.23892446E+00, 0.00000000E+00/                     SULW.1208  
      DATA (GB( 4,22,JC),JC=1,3) /                                         SULW.1209  
     S 0.21189573E+02, 0.52416609E+01, 0.10000000E+01/                     SULW.1210  
C                                                                          SULW.1211  
C---- INTERVAL = 2B ---- T = 237.5                                         SULW.1212  
C                                                                          SULW.1213  
      DATA (GA( 5,21,JC),JC=1,3) /                                         SULW.1214  
     S 0.20525678E+02,-0.24697148E+00, 0.00000000E+00/                     SULW.1215  
      DATA (GB( 5,21,JC),JC=1,3) /                                         SULW.1216  
     S 0.20525678E+02, 0.51303033E+01, 0.10000000E+01/                     SULW.1217  
      DATA (GA( 5,22,JC),JC=1,3) /                                         SULW.1218  
     S 0.21397190E+02,-0.23679344E+00, 0.00000000E+00/                     SULW.1219  
      DATA (GB( 5,22,JC),JC=1,3) /                                         SULW.1220  
     S 0.21397190E+02, 0.52752763E+01, 0.10000000E+01/                     SULW.1221  
C                                                                          SULW.1222  
C---- INTERVAL = 2B ---- T = 250.0                                         SULW.1223  
C                                                                          SULW.1224  
      DATA (GA( 6,21,JC),JC=1,3) /                                         SULW.1225  
     S 0.20710965E+02,-0.24434489E+00, 0.00000000E+00/                     SULW.1226  
      DATA (GB( 6,21,JC),JC=1,3) /                                         SULW.1227  
     S 0.20710965E+02, 0.51615130E+01, 0.10000000E+01/                     SULW.1228  
      DATA (GA( 6,22,JC),JC=1,3) /                                         SULW.1229  
     S 0.21583088E+02,-0.23507367E+00, 0.00000000E+00/                     SULW.1230  
      DATA (GB( 6,22,JC),JC=1,3) /                                         SULW.1231  
     S 0.21583088E+02, 0.53050307E+01, 0.10000000E+01/                     SULW.1232  
                                                                           SULW.1233  
C                                                                          SULW.1234  
C---- INTERVAL = 2B ---- T = 262.5                                         SULW.1235  
C                                                                          SULW.1236  
      DATA (GA( 7,21,JC),JC=1,3) /                                         SULW.1237  
     S 0.20879342E+02,-0.24214043E+00, 0.00000000E+00/                     SULW.1238  
      DATA (GB( 7,21,JC),JC=1,3) /                                         SULW.1239  
     S 0.20879342E+02, 0.51895822E+01, 0.10000000E+01/                     SULW.1240  
      DATA (GA( 7,22,JC),JC=1,3) /                                         SULW.1241  
     S 0.21767391E+02,-0.23500593E+00, 0.00000000E+00/                     SULW.1242  
      DATA (GB( 7,22,JC),JC=1,3) /                                         SULW.1243  
     S 0.21767391E+02, 0.53353369E+01, 0.10000000E+01/                     SULW.1244  
C                                                                          SULW.1245  
C---- INTERVAL = 2B ---- T = 275.0                                         SULW.1246  
C                                                                          SULW.1247  
      DATA (GA( 8,21,JC),JC=1,3) /                                         SULW.1248  
     S 0.21032783E+02,-0.24027675E+00, 0.00000000E+00/                     SULW.1249  
      DATA (GB( 8,21,JC),JC=1,3) /                                         SULW.1250  
     S 0.21032783E+02, 0.52149228E+01, 0.10000000E+01/                     SULW.1251  
      DATA (GA( 8,22,JC),JC=1,3) /                                         SULW.1252  
     S 0.21917785E+02,-0.23387069E+00, 0.00000000E+00/                     SULW.1253  
      DATA (GB( 8,22,JC),JC=1,3) /                                         SULW.1254  
     S 0.21917785E+02, 0.53589399E+01, 0.10000000E+01/                     SULW.1255  
C                                                                          SULW.1256  
C---- INTERVAL = 2B ---- T = 287.5                                         SULW.1257  
C                                                                          SULW.1258  
      DATA (GA( 9,21,JC),JC=1,3) /                                         SULW.1259  
     S 0.21172996E+02,-0.23869043E+00, 0.00000000E+00/                     SULW.1260  
      DATA (GB( 9,21,JC),JC=1,3) /                                         SULW.1261  
     S 0.21172996E+02, 0.52378823E+01, 0.10000000E+01/                     SULW.1262  
      DATA (GA( 9,22,JC),JC=1,3) /                                         SULW.1263  
     S 0.22053477E+02,-0.23293447E+00, 0.00000000E+00/                     SULW.1264  
      DATA (GB( 9,22,JC),JC=1,3) /                                         SULW.1265  
     S 0.22053477E+02, 0.53800578E+01, 0.10000000E+01/                     SULW.1266  
C                                                                          SULW.1267  
C---- INTERVAL = 2B ---- T = 300.0                                         SULW.1268  
C                                                                          SULW.1269  
      DATA (GA(10,21,JC),JC=1,3) /                                         SULW.1270  
     S 0.21301462E+02,-0.23733163E+00, 0.00000000E+00/                     SULW.1271  
      DATA (GB(10,21,JC),JC=1,3) /                                         SULW.1272  
     S 0.21301462E+02, 0.52587551E+01, 0.10000000E+01/                     SULW.1273  
      DATA (GA(10,22,JC),JC=1,3) /                                         SULW.1274  
     S 0.22176209E+02,-0.23215726E+00, 0.00000000E+00/                     SULW.1275  
      DATA (GB(10,22,JC),JC=1,3) /                                         SULW.1276  
     S 0.22176209E+02, 0.53990137E+01, 0.10000000E+01/                     SULW.1277  
C                                                                          SULW.1278  
C---- INTERVAL = 2B ---- T = 312.5                                         SULW.1279  
C                                                                          SULW.1280  
      DATA (GA(11,21,JC),JC=1,3) /                                         SULW.1281  
     S 0.21419467E+02,-0.23616087E+00, 0.00000000E+00/                     SULW.1282  
      DATA (GB(11,21,JC),JC=1,3) /                                         SULW.1283  
     S 0.21419467E+02, 0.52777920E+01, 0.10000000E+01/                     SULW.1284  
      DATA (GA(11,22,JC),JC=1,3) /                                         SULW.1285  
     S 0.22287486E+02,-0.23150796E+00, 0.00000000E+00/                     SULW.1286  
      DATA (GB(11,22,JC),JC=1,3) /                                         SULW.1287  
     S 0.22287486E+02, 0.54160819E+01, 0.10000000E+01/                     SULW.1288  
C                                                                          SULW.1289  
C                                                                          SULW.1290  
C-- WATER VAPOR --- 800 - 970 CM-1                                         SULW.1291  
C                                                                          SULW.1292  
C---- INTERVAL = 3A ---- T = 187.5                                         SULW.1293  
C                                                                          SULW.1294  
      DATA (GA( 1,19,JC),JC=1,3) /                                         SULW.1295  
     S 0.76275605E+02, 0.87071385E+01, 0.00000000E+00/                     SULW.1296  
      DATA (GB( 1,19,JC),JC=1,3) /                                         SULW.1297  
     S 0.76275605E+02, 0.12222527E+02, 0.10000000E+01/                     SULW.1298  
      DATA (GA( 1,20,JC),JC=1,3) /                                         SULW.1299  
     S 0.76707978E+02, 0.89850885E+01, 0.00000000E+00/                     SULW.1300  
      DATA (GB( 1,20,JC),JC=1,3) /                                         SULW.1301  
     S 0.76707978E+02, 0.12434732E+02, 0.10000000E+01/                     SULW.1302  
C                                                                          SULW.1303  
C---- INTERVAL = 3A ---- T = 200                                           SULW.1304  
C                                                                          SULW.1305  
      DATA (GA( 2,19,JC),JC=1,3) /                                         SULW.1306  
     S 0.76444692E+02, 0.88235285E+01, 0.00000000E+00/                     SULW.1307  
      DATA (GB( 2,19,JC),JC=1,3) /                                         SULW.1308  
     S 0.76444692E+02, 0.12310814E+02, 0.10000000E+01/                     SULW.1309  
      DATA (GA( 2,20,JC),JC=1,3) /                                         SULW.1310  
     S 0.76898353E+02, 0.91013883E+01, 0.00000000E+00/                     SULW.1311  
      DATA (GB( 2,20,JC),JC=1,3) /                                         SULW.1312  
     S 0.76898353E+02, 0.12523769E+02, 0.10000000E+01/                     SULW.1313  
C                                                                          SULW.1314  
C---- INTERVAL = 3A ---- T = 212.5                                         SULW.1315  
C                                                                          SULW.1316  
      DATA (GA( 3,19,JC),JC=1,3) /                                         SULW.1317  
     S 0.76601454E+02, 0.89263097E+01, 0.00000000E+00/                     SULW.1318  
      DATA (GB( 3,19,JC),JC=1,3) /                                         SULW.1319  
     S 0.76601454E+02, 0.12389074E+02, 0.10000000E+01/                     SULW.1320  
      DATA (GA( 3,20,JC),JC=1,3) /                                         SULW.1321  
     S 0.77725293E+02, 0.91803661E+01, 0.00000000E+00/                     SULW.1322  
      DATA (GB( 3,20,JC),JC=1,3) /                                         SULW.1323  
     S 0.77725293E+02, 0.12614198E+02, 0.10000000E+01/                     SULW.1324  
C                                                                          SULW.1325  
C---- INTERVAL = 3A ---- T = 225                                           SULW.1326  
C                                                                          SULW.1327  
      DATA (GA( 4,19,JC),JC=1,3) /                                         SULW.1328  
     S 0.76746614E+02, 0.90176179E+01, 0.00000000E+00/                     SULW.1329  
      DATA (GB( 4,19,JC),JC=1,3) /                                         SULW.1330  
     S 0.76746614E+02, 0.12458826E+02, 0.10000000E+01/                     SULW.1331  
      DATA (GA( 4,20,JC),JC=1,3) /                                         SULW.1332  
     S 0.77890904E+02, 0.92706174E+01, 0.00000000E+00/                     SULW.1333  
      DATA (GB( 4,20,JC),JC=1,3) /                                         SULW.1334  
     S 0.77890904E+02, 0.12683738E+02, 0.10000000E+01/                     SULW.1335  
C                                                                          SULW.1336  
C---- INTERVAL = 3A ---- T = 237.5                                         SULW.1337  
C                                                                          SULW.1338  
      DATA (GA( 5,19,JC),JC=1,3) /                                         SULW.1339  
     S 0.76880972E+02, 0.90991713E+01, 0.00000000E+00/                     SULW.1340  
      DATA (GB( 5,19,JC),JC=1,3) /                                         SULW.1341  
     S 0.76880972E+02, 0.12521305E+02, 0.10000000E+01/                     SULW.1342  
      DATA (GA( 5,20,JC),JC=1,3) /                                         SULW.1343  
     S 0.78042609E+02, 0.93508020E+01, 0.00000000E+00/                     SULW.1344  
      DATA (GB( 5,20,JC),JC=1,3) /                                         SULW.1345  
     S 0.78042609E+02, 0.12745679E+02, 0.10000000E+01/                     SULW.1346  
C                                                                          SULW.1347  
C---- INTERVAL = 3A ---- T = 250                                           SULW.1348  
C                                                                          SULW.1349  
      DATA (GA( 6,19,JC),JC=1,3) /                                         SULW.1350  
     S 0.77655425E+02, 0.91491477E+01, 0.00000000E+00/                     SULW.1351  
      DATA (GB( 6,19,JC),JC=1,3) /                                         SULW.1352  
     S 0.77655425E+02, 0.12589427E+02, 0.10000000E+01/                     SULW.1353  
      DATA (GA( 6,20,JC),JC=1,3) /                                         SULW.1354  
     S 0.78181610E+02, 0.94223568E+01, 0.00000000E+00/                     SULW.1355  
      DATA (GB( 6,20,JC),JC=1,3) /                                         SULW.1356  
     S 0.78181610E+02, 0.12801076E+02, 0.10000000E+01/                     SULW.1357  
C                                                                          SULW.1358  
C---- INTERVAL = 3A ---- T = 262.5                                         SULW.1359  
C                                                                          SULW.1360  
      DATA (GA( 7,19,JC),JC=1,3) /                                         SULW.1361  
     S 0.77774452E+02, 0.92150200E+01, 0.00000000E+00/                     SULW.1362  
      DATA (GB( 7,19,JC),JC=1,3) /                                         SULW.1363  
     S 0.77774452E+02, 0.12640126E+02, 0.10000000E+01/                     SULW.1364  
      DATA (GA( 7,20,JC),JC=1,3) /                                         SULW.1365  
     S 0.78309039E+02, 0.94864655E+01, 0.00000000E+00/                     SULW.1366  
      DATA (GB( 7,20,JC),JC=1,3) /                                         SULW.1367  
     S 0.78309039E+02, 0.12850804E+02, 0.10000000E+01/                     SULW.1368  
C                                                                          SULW.1369  
C---- INTERVAL = 3A ---- T = 275                                           SULW.1370  
C                                                                          SULW.1371  
      DATA (GA( 8,19,JC),JC=1,3) /                                         SULW.1372  
     S 0.77884708E+02, 0.92746449E+01, 0.00000000E+00/                     SULW.1373  
      DATA (GB( 8,19,JC),JC=1,3) /                                         SULW.1374  
     S 0.77884708E+02, 0.12686105E+02, 0.10000000E+01/                     SULW.1375  
      DATA (GA( 8,20,JC),JC=1,3) /                                         SULW.1376  
     S 0.78425953E+02, 0.95441121E+01, 0.00000000E+00/                     SULW.1377  
      DATA (GB( 8,20,JC),JC=1,3) /                                         SULW.1378  
     S 0.78425953E+02, 0.12895595E+02, 0.10000000E+01/                     SULW.1379  
C                                                                          SULW.1380  
C---- INTERVAL = 3A ---- T = 287.5                                         SULW.1381  
C                                                                          SULW.1382  
      DATA (GA( 9,19,JC),JC=1,3) /                                         SULW.1383  
     S 0.77986957E+02, 0.93288167E+01, 0.00000000E+00/                     SULW.1384  
      DATA (GB( 9,19,JC),JC=1,3) /                                         SULW.1385  
     S 0.77986957E+02, 0.12727952E+02, 0.10000000E+01/                     SULW.1386  
      DATA (GA( 9,20,JC),JC=1,3) /                                         SULW.1387  
     S 0.78533324E+02, 0.95961213E+01, 0.00000000E+00/                     SULW.1388  
      DATA (GB( 9,20,JC),JC=1,3) /                                         SULW.1389  
     S 0.78533324E+02, 0.12936067E+02, 0.10000000E+01/                     SULW.1390  
C                                                                          SULW.1391  
C---- INTERVAL = 3A ---- T = 300                                           SULW.1392  
C                                                                          SULW.1393  
      DATA (GA(10,19,JC),JC=1,3) /                                         SULW.1394  
     S 0.78081895E+02, 0.93782046E+01, 0.00000000E+00/                     SULW.1395  
      DATA (GB(10,19,JC),JC=1,3) /                                         SULW.1396  
     S 0.78081895E+02, 0.12766161E+02, 0.10000000E+01/                     SULW.1397  
      DATA (GA(10,20,JC),JC=1,3) /                                         SULW.1398  
     S 0.78632031E+02, 0.96431901E+01, 0.00000000E+00/                     SULW.1399  
      DATA (GB(10,20,JC),JC=1,3) /                                         SULW.1400  
     S 0.78632031E+02, 0.12972742E+02, 0.10000000E+01/                     SULW.1401  
C                                                                          SULW.1402  
C---- INTERVAL = 3A ---- T = 312.5                                         SULW.1403  
C                                                                          SULW.1404  
      DATA (GA(11,19,JC),JC=1,3) /                                         SULW.1405  
     S 0.78170173E+02, 0.94233755E+01, 0.00000000E+00/                     SULW.1406  
      DATA (GB(11,19,JC),JC=1,3) /                                         SULW.1407  
     S 0.78170173E+02, 0.12801157E+02, 0.10000000E+01/                     SULW.1408  
      DATA (GA(11,20,JC),JC=1,3) /                                         SULW.1409  
     S 0.79479954E+02, 0.96591215E+01, 0.00000000E+00/                     SULW.1410  
      DATA (GB(11,20,JC),JC=1,3) /                                         SULW.1411  
     S 0.79479954E+02, 0.13018486E+02, 0.10000000E+01/                     SULW.1412  
C                                                                          SULW.1413  
C                                                                          SULW.1414  
C-- WATER VAPOR --- 1250 - 1450 CM-1                                       SULW.1415  
C                                                                          SULW.1416  
C---- INTERVAL = 6A ---- T = 187.5                                         SULW.1417  
C                                                                          SULW.1418  
      DATA (GA( 1,17,JC),JC=1,3) /                                         SULW.1419  
     S 0.89351314E+00,-0.11716478E+00, 0.00000000E+00/                     SULW.1420  
      DATA (GB( 1,17,JC),JC=1,3) /                                         SULW.1421  
     S 0.89351314E+00, 0.23371168E+01, 0.10000000E+01/                     SULW.1422  
      DATA (GA( 1,18,JC),JC=1,3) /                                         SULW.1423  
     S 0.78489275E+00,-0.93578500E-01, 0.00000000E+00/                     SULW.1424  
      DATA (GB( 1,18,JC),JC=1,3) /                                         SULW.1425  
     S 0.78489275E+00, 0.21397518E+01, 0.10000000E+01/                     SULW.1426  
C                                                                          SULW.1427  
C---- INTERVAL = 6A ---- T = 200                                           SULW.1428  
C                                                                          SULW.1429  
      DATA (GA( 2,17,JC),JC=1,3) /                                         SULW.1430  
     S 0.82462699E+00,-0.10225793E+00, 0.00000000E+00/                     SULW.1431  
      DATA (GB( 2,17,JC),JC=1,3) /                                         SULW.1432  
     S 0.82462699E+00, 0.22153415E+01, 0.10000000E+01/                     SULW.1433  
      DATA (GA( 2,18,JC),JC=1,3) /                                         SULW.1434  
     S 0.71552080E+00,-0.78132444E-01, 0.00000000E+00/                     SULW.1435  
      DATA (GB( 2,18,JC),JC=1,3) /                                         SULW.1436  
     S 0.71552080E+00, 0.20032846E+01, 0.10000000E+01/                     SULW.1437  
C                                                                          SULW.1438  
C---- INTERVAL = 6A ---- T = 212.5                                         SULW.1439  
C                                                                          SULW.1440  
      DATA (GA( 3,17,JC),JC=1,3) /                                         SULW.1441  
     S 0.76338653E+00,-0.88787922E-01, 0.00000000E+00/                     SULW.1442  
      DATA (GB( 3,17,JC),JC=1,3) /                                         SULW.1443  
     S 0.76338653E+00, 0.20996613E+01, 0.10000000E+01/                     SULW.1444  
      DATA (GA( 3,18,JC),JC=1,3) /                                         SULW.1445  
     S 0.65500758E+00,-0.64411300E-01, 0.00000000E+00/                     SULW.1446  
      DATA (GB( 3,18,JC),JC=1,3) /                                         SULW.1447  
     S 0.65500758E+00, 0.18774865E+01, 0.10000000E+01/                     SULW.1448  
C                                                                          SULW.1449  
C---- INTERVAL = 6A ---- T = 225                                           SULW.1450  
C                                                                          SULW.1451  
      DATA (GA( 4,17,JC),JC=1,3) /                                         SULW.1452  
     S 0.70887760E+00,-0.76600481E-01, 0.00000000E+00/                     SULW.1453  
      DATA (GB( 4,17,JC),JC=1,3) /                                         SULW.1454  
     S 0.70887760E+00, 0.19909030E+01, 0.10000000E+01/                     SULW.1455  
      DATA (GA( 4,18,JC),JC=1,3) /                                         SULW.1456  
     S 0.60215560E+00,-0.52213461E-01, 0.00000000E+00/                     SULW.1457  
      DATA (GB( 4,18,JC),JC=1,3) /                                         SULW.1458  
     S 0.60215560E+00, 0.17624913E+01, 0.10000000E+01/                     SULW.1459  
C                                                                          SULW.1460  
C---- INTERVAL = 6A ---- T = 237.5                                         SULW.1461  
C                                                                          SULW.1462  
      DATA (GA( 5,17,JC),JC=1,3) /                                         SULW.1463  
     S 0.66065205E+00,-0.65662686E-01, 0.00000000E+00/                     SULW.1464  
      DATA (GB( 5,17,JC),JC=1,3) /                                         SULW.1465  
     S 0.66065205E+00, 0.18904910E+01, 0.10000000E+01/                     SULW.1466  
      DATA (GA( 5,18,JC),JC=1,3) /                                         SULW.1467  
     S 0.55598748E+00,-0.41381040E-01, 0.00000000E+00/                     SULW.1468  
      DATA (GB( 5,18,JC),JC=1,3) /                                         SULW.1469  
     S 0.55598748E+00, 0.16581940E+01, 0.10000000E+01/                     SULW.1470  
C                                                                          SULW.1471  
C---- INTERVAL = 6A ---- T = 250                                           SULW.1472  
C                                                                          SULW.1473  
      DATA (GA( 6,17,JC),JC=1,3) /                                         SULW.1474  
     S 0.61783356E+00,-0.55813085E-01, 0.00000000E+00/                     SULW.1475  
      DATA (GB( 6,17,JC),JC=1,3) /                                         SULW.1476  
     S 0.61783356E+00, 0.17980026E+01, 0.10000000E+01/                     SULW.1477  
      DATA (GA( 6,18,JC),JC=1,3) /                                         SULW.1478  
     S 0.51447244E+00,-0.31409439E-01, 0.00000000E+00/                     SULW.1479  
      DATA (GB( 6,18,JC),JC=1,3) /                                         SULW.1480  
     S 0.51447244E+00, 0.15605436E+01, 0.10000000E+01/                     SULW.1481  
C                                                                          SULW.1482  
C---- INTERVAL = 6A ---- T = 262.5                                         SULW.1483  
C                                                                          SULW.1484  
      DATA (GA( 7,17,JC),JC=1,3) /                                         SULW.1485  
     S 0.57976804E+00,-0.46940089E-01, 0.00000000E+00/                     SULW.1486  
      DATA (GB( 7,17,JC),JC=1,3) /                                         SULW.1487  
     S 0.57976804E+00, 0.17131839E+01, 0.10000000E+01/                     SULW.1488  
      DATA (GA( 7,18,JC),JC=1,3) /                                         SULW.1489  
     S 0.47868911E+00,-0.22726019E-01, 0.00000000E+00/                     SULW.1490  
      DATA (GB( 7,18,JC),JC=1,3) /                                         SULW.1491  
     S 0.47868911E+00, 0.14745410E+01, 0.10000000E+01/                     SULW.1492  
C                                                                          SULW.1493  
C---- INTERVAL = 6A ---- T = 275                                           SULW.1494  
C                                                                          SULW.1495  
      DATA (GA( 8,17,JC),JC=1,3) /                                         SULW.1496  
     S 0.54587141E+00,-0.38940929E-01, 0.00000000E+00/                     SULW.1497  
      DATA (GB( 8,17,JC),JC=1,3) /                                         SULW.1498  
     S 0.54587141E+00, 0.16356179E+01, 0.10000000E+01/                     SULW.1499  
      DATA (GA( 8,18,JC),JC=1,3) /                                         SULW.1500  
     S 0.44731443E+00,-0.15014979E-01, 0.00000000E+00/                     SULW.1501  
      DATA (GB( 8,18,JC),JC=1,3) /                                         SULW.1502  
     S 0.44731443E+00, 0.13974344E+01, 0.10000000E+01/                     SULW.1503  
C                                                                          SULW.1504  
C---- INTERVAL = 6A ---- T = 287.5                                         SULW.1505  
C                                                                          SULW.1506  
      DATA (GA( 9,17,JC),JC=1,3) /                                         SULW.1507  
     S 0.51448094E+00,-0.31366881E-01, 0.00000000E+00/                     SULW.1508  
      DATA (GB( 9,17,JC),JC=1,3) /                                         SULW.1509  
     S 0.51448094E+00, 0.15612510E+01, 0.10000000E+01/                     SULW.1510  
      DATA (GA( 9,18,JC),JC=1,3) /                                         SULW.1511  
     S 0.41974527E+00,-0.81628316E-02, 0.00000000E+00/                     SULW.1512  
      DATA (GB( 9,18,JC),JC=1,3) /                                         SULW.1513  
     S 0.41974527E+00, 0.13283720E+01, 0.10000000E+01/                     SULW.1514  
C                                                                          SULW.1515  
C---- INTERVAL = 6A ---- T = 300                                           SULW.1516  
C                                                                          SULW.1517  
      DATA (GA(10,17,JC),JC=1,3) /                                         SULW.1518  
     S 0.48699661E+00,-0.24698543E-01, 0.00000000E+00/                     SULW.1519  
      DATA (GB(10,17,JC),JC=1,3) /                                         SULW.1520  
     S 0.48699661E+00, 0.14952467E+01, 0.10000000E+01/                     SULW.1521  
      DATA (GA(10,18,JC),JC=1,3) /                                         SULW.1522  
     S 0.39576456E+00,-0.21710464E-02, 0.00000000E+00/                     SULW.1523  
      DATA (GB(10,18,JC),JC=1,3) /                                         SULW.1524  
     S 0.39576456E+00, 0.12674953E+01, 0.10000000E+01/                     SULW.1525  
C                                                                          SULW.1526  
C---- INTERVAL = 6A ---- T = 312.5                                         SULW.1527  
C                                                                          SULW.1528  
      DATA (GA(11,17,JC),JC=1,3) /                                         SULW.1529  
     S 0.46280034E+00,-0.18801305E-01, 0.00000000E+00/                     SULW.1530  
      DATA (GB(11,17,JC),JC=1,3) /                                         SULW.1531  
     S 0.46280034E+00, 0.14364190E+01, 0.10000000E+01/                     SULW.1532  
      DATA (GA(11,18,JC),JC=1,3) /                                         SULW.1533  
     S 0.37428169E+00, 0.32669120E-02, 0.00000000E+00/                     SULW.1534  
      DATA (GB(11,18,JC),JC=1,3) /                                         SULW.1535  
     S 0.37428169E+00, 0.12119726E+01, 0.10000000E+01/                     SULW.1536  
C                                                                          SULW.1537  
C-----  (CONTINUUM ABSORPTION)                                             SULW.1538  
C                                                                          SULW.1539  
      DATA (ETY( 1, JC),JC=1,18)/1178.11, 996.24, 285.28, 283.63,          SULW.1540  
     S     98.88, 97.84, 39.02, 38.56, 13.01, 12.93, 7.04, 7.02,           SULW.1541  
     S     6.46, 6.48, 26.52, 26.95, 12.92, 12.20/                         SULW.1542  
      DATA (ETY( 2, JC),JC=1,18)/1108.77, 924.99, 284.92, 283.32,          SULW.1543  
     S     98.58, 97.56, 38.85, 38.40, 12.97, 12.89, 7.03, 7.01,           SULW.1544  
     S     6.47, 6.49, 26.80, 27.25, 12.19, 11.45/                         SULW.1545  
      DATA (ETY( 3, JC),JC=1,18)/1044.99, 864.44, 284.60, 283.03,          SULW.1546  
     S     98.32, 97.33, 38.71, 38.27, 12.94, 12.86, 7.02, 7.00,           SULW.1547  
     S     6.48, 6.50, 27.05, 27.51, 11.52, 10.77/                         SULW.1548  
      DATA (ETY( 4, JC),JC=1,18)/ 987.37, 813.88, 284.32, 282.76,          SULW.1549  
     S     98.09, 97.13, 38.59, 38.15, 12.92, 12.83, 7.02, 6.99,           SULW.1550  
     S     6.49, 6.50, 27.28, 27.74, 10.92, 10.16/                         SULW.1551  
      DATA (ETY( 5, JC),JC=1,18)/ 935.91, 772.35, 284.08, 282.52,          SULW.1552  
     S     97.90, 96.95, 38.48, 38.05, 12.89, 12.82, 7.01, 6.99,           SULW.1553  
     S     6.49, 6.51, 27.48, 27.95, 10.37, 9.61/                          SULW.1554  
      DATA (ETY( 6, JC),JC=1,18)/ 890.38, 738.66, 283.87, 282.33,          SULW.1555  
     S     97.72, 96.80, 38.38, 37.96, 12.87, 12.80, 7.01, 6.98,           SULW.1556  
     S     6.50, 6.52, 27.67, 28.15, 9.87, 9.10/                           SULW.1557  
      DATA (ETY( 7, JC),JC=1,18)/ 850.38, 711.54, 283.69, 282.15,          SULW.1558  
     S     97.57, 96.67, 38.30, 37.89, 12.85, 12.78, 6.99, 6.97,           SULW.1559  
     S     6.50, 6.53, 27.84, 28.32, 9.42, 8.65/                           SULW.1560  
      DATA (ETY( 8, JC),JC=1,18)/ 815.50, 689.77, 283.52, 282.00,          SULW.1561  
     S     97.43, 96.55, 38.22, 37.82, 12.83, 12.76, 6.99, 6.97,           SULW.1562  
     S     6.51, 6.53, 28.00, 28.49, 9.00, 8.23/                           SULW.1563  
      DATA (ETY( 9, JC),JC=1,18)/ 785.25, 672.23, 283.27, 281.87,          SULW.1564  
     S     97.30, 96.44, 38.15, 37.75, 12.82, 12.74, 6.99, 6.96,           SULW.1565  
     S     6.51, 6.53, 28.15, 28.64, 8.62, 7.85/                           SULW.1566  
      DATA (ETY(10, JC),JC=1,18)/ 759.14, 658.02, 283.23, 281.75,          SULW.1567  
     S     97.19, 96.35, 38.09, 37.70, 12.81, 12.73, 6.98, 6.96,           SULW.1568  
     S     6.52, 6.54, 28.28, 28.78, 8.27, 7.50/                           SULW.1569  
      DATA (ETY(11, JC),JC=1,18)/ 736.69, 646.40, 283.09, 281.64,          SULW.1570  
     S     97.09, 96.27, 38.03, 37.65, 12.79, 12.72, 6.98, 6.95,           SULW.1571  
     S     6.52, 6.54, 28.41, 28.90, 7.94, 7.19/                           SULW.1572  
C                                                                          SULW.1573  
      DATA (PTY( 1, JC),JC=1,18)/76.577, 68.422, 6.982, 6.864,             SULW.1574  
     S     0.586, 0.565, 0.043, 0.042, 0.017, 0.017, 0.017, 0.017,         SULW.1575  
     S     0.038, 0.039, 0.684, 0.709, 0.852, 0.800/                       SULW.1576  
      DATA (PTY( 2, JC),JC=1,18)/73.332, 70.449, 6.955, 6.842,             SULW.1577  
     S     0.580, 0.560, 0.043, 0.041, 0.017, 0.017, 0.017, 0.017,         SULW.1578  
     S     0.039, 0.039, 0.700, 0.725, 0.800, 0.748/                       SULW.1579  
      DATA (PTY( 3, JC),JC=1,18)/62.687, 67.895, 6.933, 6.823,             SULW.1580  
     S     0.575, 0.555, 0.042, 0.041, 0.017, 0.017, 0.017, 0.017,         SULW.1581  
     S     0.039, 0.040, 0.714, 0.740, 0.753, 0.701/                       SULW.1582  
      DATA (PTY( 4, JC),JC=1,18)/60.501, 65.641, 6.913, 6.807,             SULW.1583  
     S     0.571, 0.552, 0.042, 0.041, 0.017, 0.017, 0.017, 0.017,         SULW.1584  
     S     0.039, 0.040, 0.727, 0.753, 0.711, 0.660/                       SULW.1585  
      DATA (PTY( 5, JC),JC=1,18)/58.705, 63.661, 6.896, 6.793,             SULW.1586  
     S     0.567, 0.548, 0.042, 0.040, 0.017, 0.017, 0.017, 0.017,         SULW.1587  
     S     0.040, 0.040, 0.739, 0.765, 0.674, 0.623/                       SULW.1588  
      DATA (PTY( 6, JC),JC=1,18)/57.245, 61.930, 6.881, 6.781,             SULW.1589  
     S     0.563, 0.545, 0.041, 0.040, 0.017, 0.017, 0.017, 0.017,         SULW.1590  
     S     0.040, 0.041, 0.749, 0.776, 0.641, 0.590/                       SULW.1591  
      DATA (PTY( 7, JC),JC=1,18)/56.066, 60.424, 6.868, 6.771,             SULW.1592  
     S     0.560, 0.543, 0.041, 0.040, 0.017, 0.017, 0.017, 0.017,         SULW.1593  
     S     0.040, 0.041, 0.759, 0.786, 0.611, 0.561/                       SULW.1594  
      DATA (PTY( 8, JC),JC=1,18)/65.313, 55.114, 6.856, 6.762,             SULW.1595  
     S     0.558, 0.540, 0.041, 0.039, 0.017, 0.017, 0.017, 0.017,         SULW.1596  
     S     0.040, 0.041, 0.768, 0.795, 0.584, 0.534/                       SULW.1597  
      DATA (PTY( 9, JC),JC=1,18)/59.119, 54.342, 6.845, 6.754,             SULW.1598  
     S     0.555, 0.538, 0.041, 0.039, 0.017, 0.017, 0.017, 0.017,         SULW.1599  
     S     0.040, 0.041, 0.776, 0.804, 0.559, 0.510/                       SULW.1600  
      DATA (PTY(10, JC),JC=1,18)/57.994, 53.713, 6.836, 6.747,             SULW.1601  
     S     0.553, 0.537, 0.040, 0.039, 0.017, 0.017, 0.017, 0.017,         SULW.1602  
     S     0.041, 0.041, 0.784, 0.812, 0.537, 0.488/                       SULW.1603  
      DATA (PTY(11, JC),JC=1,18)/57.025, 53.194, 6.827, 6.741,             SULW.1604  
     S     0.551, 0.535, 0.040, 0.039, 0.017, 0.017, 0.017, 0.017,         SULW.1605  
     S     0.041, 0.042, 0.791, 0.819, 0.516, 0.468/                       SULW.1606  
C                                                                          SULW.1607  
C              -----------                                                 SULW.1608  
C                                                                          SULW.1609  
C     THE COMMON THAT CONTAINS  PLANCK FUNCTION WEIGHTED  FLUX             SULW.1610  
C     TRANSMISSIVITIES PRECALCULATED BY THE LINE-BY-LINE MODEL             SULW.1611  
C     GENLN2 4.0 ( D. P. EDWARDS 1995 )                                    SULW.1612  
C     THE COEFFICIENTS OF TEMPERATURE DEPENDENCE ARE FITTED FROM           SULW.1613  
C     LBL CALCULATED TRANSMISSION FOR 200, 250 AND 300 K.                  SULW.1614  
C     O3 TB IS ALSO IN.                                                    SULW.1615  
C                                                                          SULW.1616  
C     ------------------------------------------------------------         SULW.1617  
C                                                                          SULW.1618  
C                                                                          SULW.1619  
C     ------------------------------------------------------------         SULW.1620  
      DATA (PLG(JP),JP=1,31)/                                              SULW.1621  
     S -8.,-7.5,-7.,-6.5,-6.,-5.5,-5.,-4.5,-4.,-3.5,-3.,-2.5,-2.,-1.5,     SULW.1622  
     S -1.,-0.5, 0., 0.5, 1., 1.5, 2., 2.5, 3., 3.5,4., 4.5, 5., 5.5,      SULW.1623  
     S  6., 6.5, 7./                                                       SULW.1624  
C                                                                          SULW.1625  
      DATA (ULG(JU),JU=1,40)/                                              SULW.1626  
     S -13.,-12.5,-12.,-11.5,-11.,-10.5,-10.,-9.5,-9.,-8.5,-8.,-7.5,-7.,   SULW.1627  
     S -6.5,-6.,-5.5,-5.,-4.5,-4.,-3.5,-3.,-2.5,-2.,-1.5,-1.,-0.5, 0.,     SULW.1628  
     S  0.5, 1., 1.5, 2., 2.5, 3., 3.5, 4., 4.5, 5., 5.5, 6.,6.5/          SULW.1629  
C                                                                          SULW.1630  
      DATA (ULGO(JU),JU=1,38)/                                             SULW.1631  
     S -17.5,-17.,-16.5,-16.,-15.5,-15.,-14.5,-14.,-13.5,-13.,             SULW.1632  
     S -12.5,-12.,-11.5,-11.,-10.5,-10.,-9.5,-9.,-8.5,-8.,                 SULW.1633  
     S -7.5,-7.,-6.5,-6.,-5.5,-5.,-4.5,-4.,-3.5,-3.,-2.5,-2.,              SULW.1634  
     S -1.5,-1.,-0.5, 0.,0.5,1.0/                                          SULW.1635  
C                                                                          SULW.1636  
C----- -1,0E3*(ln(1-TB))    ( CO2 15 micron band )                         SULW.1637  
      DATA (TB(I,1,1),I=1,40)/                                             SULW.1638  
     S 11718,11236,10761,10297, 9848, 9419, 9017, 8647, 8315, 8020,        SULW.1639  
     S  7758, 7517, 7281, 7045, 6805, 6564, 6329, 6104, 5890, 5689,        SULW.1640  
     S  5496, 5309, 5127, 4950, 4777, 4607, 4440, 4276, 4115, 3956,        SULW.1641  
     S  3801, 3649, 3501, 3358, 3220, 3087, 2958, 2832, 2708, 2586/        SULW.1642  
      DATA (TB(I,2,1),I=1,40)/                                             SULW.1643  
     S 11718,11236,10761,10297, 9848, 9419, 9017, 8647, 8315, 8020,        SULW.1644  
     S  7758, 7516, 7281, 7045, 6804, 6564, 6329, 6104, 5890, 5689,        SULW.1645  
     S  5496, 5309, 5127, 4949, 4776, 4606, 4439, 4274, 4112, 3953,        SULW.1646  
     S  3796, 3643, 3493, 3349, 3209, 3074, 2943, 2814, 2687, 2562/        SULW.1647  
      DATA (TB(I,3,1),I=1,40)/                                             SULW.1648  
     S 11718,11236,10761,10297, 9848, 9419, 9017, 8647, 8315, 8020,        SULW.1649  
     S  7758, 7516, 7281, 7045, 6804, 6564, 6329, 6103, 5890, 5688,        SULW.1650  
     S  5495, 5308, 5126, 4948, 4774, 4604, 4436, 4271, 4108, 3947,        SULW.1651  
     S  3789, 3634, 3482, 3336, 3194, 3056, 2922, 2791, 2661, 2533/        SULW.1652  
      DATA (TB(I,4,1),I=1,40)/                                             SULW.1653  
     S 11718,11236,10761,10297, 9848, 9419, 9017, 8647, 8314, 8020,        SULW.1654  
     S  7758, 7516, 7281, 7044, 6804, 6564, 6329, 6103, 5889, 5688,        SULW.1655  
     S  5494, 5307, 5125, 4946, 4772, 4601, 4432, 4266, 4101, 3938,        SULW.1656  
     S  3778, 3621, 3467, 3318, 3173, 3033, 2896, 2761, 2628, 2495/        SULW.1657  
      DATA (TB(I,5,1),I=1,40)/                                             SULW.1658  
     S 11718,11236,10761,10297, 9848, 9419, 9017, 8647, 8314, 8020,        SULW.1659  
     S  7758, 7516, 7281, 7044, 6804, 6563, 6328, 6102, 5889, 5687,        SULW.1660  
     S  5493, 5305, 5122, 4943, 4768, 4596, 4426, 4257, 4091, 3926,        SULW.1661  
     S  3763, 3603, 3446, 3294, 3147, 3003, 2862, 2723, 2585, 2448/        SULW.1662  
      DATA (TB(I,6,1),I=1,40)/                                             SULW.1663  
     S 11718,11236,10761,10297, 9848, 9419, 9017, 8647, 8314, 8020,        SULW.1664  
     S  7758, 7516, 7281, 7044, 6803, 6563, 6327, 6101, 5887, 5685,        SULW.1665  
     S  5491, 5302, 5119, 4938, 4762, 4588, 4416, 4245, 4075, 3907,        SULW.1666  
     S  3742, 3579, 3419, 3263, 3112, 2964, 2819, 2675, 2532, 2389/        SULW.1667  
      DATA (TB(I,7,1),I=1,40)/                                             SULW.1668  
     S 11718,11236,10761,10297, 9848, 9419, 9016, 8646, 8314, 8020,        SULW.1669  
     S  7757, 7515, 7280, 7043, 6802, 6562, 6326, 6100, 5885, 5682,        SULW.1670  
     S  5487, 5298, 5113, 4931, 4752, 4576, 4401, 4227, 4054, 3882,        SULW.1671  
     S  3713, 3546, 3383, 3224, 3068, 2916, 2766, 2616, 2468, 2319/        SULW.1672  
      DATA (TB(I,8,1),I=1,40)/                                             SULW.1673  
     S 11718,11236,10761,10297, 9848, 9419, 9016, 8646, 8314, 8019,        SULW.1674  
     S  7757, 7514, 7279, 7042, 6801, 6560, 6323, 6097, 5881, 5677,        SULW.1675  
     S  5481, 5290, 5103, 4919, 4737, 4557, 4379, 4201, 4024, 3849,        SULW.1676  
     S  3675, 3505, 3337, 3174, 3013, 2856, 2700, 2545, 2390, 2235/        SULW.1677  
      DATA (TB(I,9,1),I=1,40)/                                             SULW.1678  
     S 11718,11236,10761,10297, 9848, 9419, 9016, 8646, 8313, 8018,        SULW.1679  
     S  7756, 7513, 7277, 7039, 6798, 6557, 6320, 6092, 5876, 5670,        SULW.1680  
     S  5472, 5279, 5089, 4901, 4715, 4531, 4348, 4166, 3985, 3805,        SULW.1681  
     S  3627, 3452, 3280, 3111, 2946, 2782, 2620, 2459, 2298, 2138/        SULW.1682  
      DATA (TB(I,10,1),I=1,40)/                                            SULW.1683  
     S 11718,11235,10761,10297, 9848, 9418, 9015, 8645, 8312, 8017,        SULW.1684  
     S  7754, 7511, 7274, 7036, 6794, 6551, 6314, 6084, 5866, 5658,        SULW.1685  
     S  5457, 5260, 5066, 4874, 4684, 4495, 4306, 4119, 3933, 3749,        SULW.1686  
     S  3566, 3387, 3210, 3036, 2864, 2695, 2526, 2359, 2193, 2029/        SULW.1687  
      DATA (TB(I,11,1),I=1,40)/                                            SULW.1688  
     S 11718,11235,10761,10297, 9847, 9418, 9015, 8644, 8310, 8015,        SULW.1689  
     S  7751, 7507, 7270, 7030, 6787, 6543, 6304, 6072, 5851, 5640,        SULW.1690  
     S  5435, 5233, 5034, 4836, 4640, 4445, 4252, 4060, 3869, 3679,        SULW.1691  
     S  3492, 3307, 3125, 2945, 2768, 2592, 2418, 2246, 2077, 1911/        SULW.1692  
      DATA (TB(I,12,1),I=1,40)/                                            SULW.1693  
     S 11718,11235,10760,10296, 9847, 9417, 9013, 8642, 8308, 8011,        SULW.1694  
     S  7746, 7501, 7262, 7021, 6776, 6530, 6288, 6054, 5828, 5612,        SULW.1695  
     S  5401, 5194, 4988, 4784, 4582, 4382, 4183, 3985, 3789, 3594,        SULW.1696  
     S  3402, 3212, 3024, 2839, 2655, 2475, 2296, 2121, 1950, 1785/        SULW.1697  
      DATA (TB(I,13,1),I=1,40)/                                            SULW.1698  
     S 11718,11235,10760,10296, 9846, 9415, 9011, 8639, 8303, 8005,        SULW.1699  
     S  7738, 7491, 7250, 7007, 6759, 6510, 6264, 6024, 5794, 5571,        SULW.1700  
     S  5354, 5139, 4927, 4716, 4508, 4302, 4097, 3894, 3693, 3493,        SULW.1701  
     S  3296, 3101, 2907, 2717, 2529, 2344, 2163, 1987, 1817, 1655/        SULW.1702  
      DATA (TB(I,14,1),I=1,40)/                                            SULW.1703  
     S 11718,11235,10759,10294, 9844, 9413, 9007, 8633, 8296, 7995,        SULW.1704  
     S  7725, 7475, 7231, 6984, 6732, 6478, 6227, 5981, 5744, 5513,        SULW.1705  
     S  5288, 5066, 4847, 4631, 4416, 4204, 3994, 3786, 3580, 3376,        SULW.1706  
     S  3174, 2973, 2775, 2580, 2389, 2203, 2022, 1847, 1682, 1526/        SULW.1707  
      DATA (TB(I,15,1),I=1,40)/                                            SULW.1708  
     S 11718,11234,10758,10293, 9841, 9409, 9001, 8625, 8284, 7980,        SULW.1709  
     S  7706, 7450, 7201, 6949, 6691, 6432, 6173, 5920, 5674, 5436,        SULW.1710  
     S  5203, 4974, 4748, 4526, 4306, 4088, 3873, 3661, 3450, 3242,        SULW.1711  
     S  3035, 2831, 2629, 2432, 2239, 2053, 1875, 1705, 1547, 1400/        SULW.1712  
      DATA (TB(I,16,1),I=1,40)/                                            SULW.1713  
     S 11718,11233,10757,10290, 9837, 9402, 8992, 8612, 8266, 7956,        SULW.1714  
     S  7675, 7413, 7156, 6897, 6632, 6365, 6099, 5837, 5583, 5336,        SULW.1715  
     S  5096, 4861, 4629, 4401, 4176, 3954, 3735, 3519, 3305, 3093,        SULW.1716  
     S  2882, 2675, 2472, 2274, 2083, 1900, 1727, 1565, 1416, 1281/        SULW.1717  
      DATA (TB(I,17,1),I=1,40)/                                            SULW.1718  
     S 11717,11232,10754,10286, 9831, 9393, 8978, 8592, 8239, 7920,        SULW.1719  
     S  7630, 7357, 7091, 6823, 6550, 6275, 6000, 5731, 5468, 5215,        SULW.1720  
     S  4968, 4727, 4491, 4258, 4030, 3805, 3582, 3363, 3145, 2930,        SULW.1721  
     S  2718, 2509, 2306, 2111, 1924, 1747, 1583, 1431, 1294, 1171/        SULW.1722  
      DATA (TB(I,18,1),I=1,40)/                                            SULW.1723  
     S 11717,11231,10751,10280, 9821, 9379, 8957, 8563, 8200, 7869,        SULW.1724  
     S  7565, 7281, 7003, 6725, 6444, 6161, 5878, 5601, 5333, 5073,        SULW.1725  
     S  4821, 4576, 4336, 4100, 3869, 3641, 3416, 3194, 2974, 2757,        SULW.1726  
     S  2544, 2337, 2137, 1946, 1766, 1599, 1445, 1305, 1181, 1071/        SULW.1727  
      DATA (TB(I,19,1),I=1,40)/                                            SULW.1728  
     S 11716,11228,10746,10272, 9808, 9359, 8929, 8524, 8147, 7800,        SULW.1729  
     S  7480, 7181, 6891, 6603, 6314, 6024, 5736, 5453, 5179, 4914,        SULW.1730  
     S  4658, 4410, 4167, 3930, 3696, 3466, 3239, 3015, 2794, 2577,        SULW.1731  
     S  2366, 2163, 1968, 1785, 1614, 1458, 1317, 1191, 1080,  981/        SULW.1732  
      DATA (TB(I,20,1),I=1,40)/                                            SULW.1733  
     S 11715,11225,10740,10261, 9792, 9335, 8895, 8476, 8082, 7716,        SULW.1734  
     S  7377, 7060, 6757, 6460, 6164, 5869, 5577, 5290, 5012, 4744,        SULW.1735  
     S  4485, 4234, 3990, 3751, 3516, 3284, 3055, 2830, 2609, 2395,        SULW.1736  
     S  2188, 1990, 1803, 1630, 1471, 1328, 1201, 1089,  989,  899/        SULW.1737  
      DATA (TB(I,21,1),I=1,40)/                                            SULW.1738  
     S 11714,11221,10733,10250, 9774, 9308, 8856, 8422, 8010, 7623,        SULW.1739  
     S  7262, 6926, 6608, 6302, 6000, 5702, 5408, 5119, 4838, 4567,        SULW.1740  
     S  4306, 4053, 3808, 3567, 3330, 3096, 2867, 2642, 2424, 2214,        SULW.1741  
     S  2013, 1823, 1647, 1486, 1341, 1212, 1098,  997,  907,  823/        SULW.1742  
      DATA (TB(I,22,1),I=1,40)/                                            SULW.1743  
     S 11712,11217,10726,10238, 9756, 9282, 8819, 8370, 7939, 7530,        SULW.1744  
     S  7147, 6790, 6455, 6137, 5830, 5530, 5235, 4946, 4664, 4391,        SULW.1745  
     S  4128, 3873, 3624, 3381, 3142, 2907, 2678, 2456, 2242, 2038,        SULW.1746  
     S  1846, 1666, 1502, 1355, 1224, 1109, 1007,  915,  831,  752/        SULW.1747  
      DATA (TB(I,23,1),I=1,40)/                                            SULW.1748  
     S 11710,11213,10719,10228, 9741, 9259, 8786, 8324, 7877, 7449,        SULW.1749  
     S  7043, 6663, 6308, 5976, 5661, 5358, 5063, 4775, 4494, 4220,        SULW.1750  
     S  3954, 3695, 3443, 3196, 2955, 2720, 2493, 2275, 2067, 1871,        SULW.1751  
     S  1689, 1522, 1372, 1239, 1122, 1019,  926,  840,  761,  687/        SULW.1752  
      DATA (TB(I,24,1),I=1,40)/                                            SULW.1753  
     S 11708,11211,10714,10220, 9729, 9242, 8762, 8290, 7829, 7383,        SULW.1754  
     S  6957, 6554, 6177, 5827, 5500, 5191, 4896, 4609, 4329, 4055,        SULW.1755  
     S  3786, 3522, 3265, 3014, 2772, 2538, 2315, 2102, 1902, 1716,        SULW.1756  
     S  1546, 1393, 1258, 1139, 1034,  939,  852,  772,  697,  629/        SULW.1757  
      DATA (TB(I,25,1),I=1,40)/                                            SULW.1758  
     S 11707,11209,10711,10215, 9721, 9230, 8744, 8265, 7794, 7335,        SULW.1759  
     S  6892, 6469, 6070, 5699, 5355, 5036, 4736, 4449, 4170, 3895,        SULW.1760  
     S  3623, 3355, 3093, 2839, 2595, 2363, 2144, 1938, 1748, 1574,        SULW.1761  
     S  1418, 1280, 1159, 1053,  956,  868,  786,  710,  640,  576/        SULW.1762  
      DATA (TB(I,26,1),I=1,40)/                                            SULW.1763  
     S 11707,11208,10709,10212, 9716, 9223, 8733, 8248, 7770, 7301,        SULW.1764  
     S  6845, 6406, 5989, 5597, 5234, 4900, 4590, 4297, 4015, 3739,        SULW.1765  
     S  3465, 3194, 2928, 2672, 2427, 2198, 1984, 1787, 1608, 1448,        SULW.1766  
     S  1307, 1183, 1075,  977,  887,  803,  726,  654,  589,  531/        SULW.1767  
      DATA (TB(I,27,1),I=1,40)/                                            SULW.1768  
     S 11707,11208,10709,10211, 9714, 9218, 8726, 8238, 7755, 7280,        SULW.1769  
     S  6815, 6364, 5932, 5522, 5140, 4787, 4460, 4156, 3866, 3586,        SULW.1770  
     S  3309, 3037, 2771, 2514, 2270, 2044, 1836, 1649, 1482, 1337,        SULW.1771  
     S  1211, 1101, 1001,  910,  825,  745,  672,  605,  546,  493/        SULW.1772  
      DATA (TB(I,28,1),I=1,40)/                                            SULW.1773  
     S 11707,11208,10709,10210, 9713, 9216, 8722, 8232, 7746, 7266,        SULW.1774  
     S  6795, 6336, 5893, 5470, 5071, 4699, 4353, 4031, 3727, 3438,        SULW.1775  
     S  3157, 2884, 2619, 2364, 2124, 1903, 1703, 1527, 1374, 1242,        SULW.1776  
     S  1129, 1029,  936,  850,  769,  693,  625,  564,  510,  461/        SULW.1777  
      DATA (TB(I,29,1),I=1,40)/                                            SULW.1778  
     S 11708,11209,10710,10211, 9713, 9216, 8721, 8229, 7741, 7258,        SULW.1779  
     S  6783, 6318, 5867, 5434, 5021, 4632, 4267, 3925, 3603, 3299,        SULW.1780  
     S  3010, 2735, 2472, 2222, 1989, 1777, 1588, 1423, 1283, 1163,        SULW.1781  
     S  1059,  964,  877,  795,  718,  648,  585,  530,  481,  435/        SULW.1782  
      DATA (TB(I,30,1),I=1,40)/                                            SULW.1783  
     S 11710,11211,10711,10212, 9714, 9217, 8721, 8228, 7738, 7253,        SULW.1784  
     S  6775, 6306, 5848, 5407, 4983, 4581, 4199, 3838, 3496, 3174,        SULW.1785  
     S  2873, 2592, 2330, 2087, 1864, 1665, 1490, 1340, 1211, 1099,        SULW.1786  
     S   998,  907,  823,  745,  673,  609,  553,  503,  457,  412/        SULW.1787  
      DATA (TB(I,31,1),I=1,40)/                                            SULW.1788  
     S 11713,11214,10714,10215, 9717, 9219, 8723, 8228, 7737, 7250,        SULW.1789  
     S  6769, 6296, 5833, 5384, 4952, 4538, 4143, 3766, 3407, 3067,        SULW.1790  
     S  2751, 2461, 2198, 1962, 1752, 1569, 1412, 1277, 1157, 1048,        SULW.1791  
     S   948,  857,  774,  700,  635,  578,  528,  482,  438,  393/        SULW.1792  
C----- -1,0E3*(ln(1-TDB))                                                  SULW.1793  
      DATA (TB(I,1,2),I=1,40)/                                             SULW.1794  
     S 11682,11199,10724,10261, 9812, 9383, 8980, 8610, 8278, 7984,        SULW.1795  
     S  7722, 7480, 7245, 7009, 6769, 6529, 6295, 6070, 5857, 5655,        SULW.1796  
     S  5463, 5276, 5094, 4917, 4744, 4575, 4408, 4244, 4083, 3924,        SULW.1797  
     S  3769, 3617, 3470, 3328, 3190, 3058, 2929, 2803, 2679, 2557/        SULW.1798  
      DATA (TB(I,2,2),I=1,40)/                                             SULW.1799  
     S 11682,11199,10724,10261, 9812, 9383, 8980, 8610, 8278, 7984,        SULW.1800  
     S  7722, 7480, 7245, 7009, 6769, 6529, 6294, 6069, 5856, 5655,        SULW.1801  
     S  5462, 5276, 5094, 4916, 4743, 4573, 4407, 4242, 4080, 3921,        SULW.1802  
     S  3764, 3611, 3463, 3318, 3179, 3044, 2913, 2785, 2658, 2533/        SULW.1803  
      DATA (TB(I,3,2),I=1,40)/                                             SULW.1804  
     S 11682,11199,10724,10261, 9812, 9383, 8980, 8610, 8278, 7984,        SULW.1805  
     S  7722, 7480, 7245, 7009, 6769, 6529, 6294, 6069, 5856, 5655,        SULW.1806  
     S  5462, 5275, 5093, 4915, 4742, 4571, 4404, 4239, 4076, 3915,        SULW.1807  
     S  3757, 3602, 3452, 3305, 3164, 3026, 2893, 2761, 2632, 2504/        SULW.1808  
      DATA (TB(I,4,2),I=1,40)/                                             SULW.1809  
     S 11682,11199,10724,10261, 9812, 9383, 8980, 8610, 8278, 7984,        SULW.1810  
     S  7721, 7480, 7245, 7008, 6769, 6529, 6294, 6069, 5856, 5654,        SULW.1811  
     S  5461, 5274, 5092, 4913, 4739, 4568, 4400, 4233, 4069, 3906,        SULW.1812  
     S  3746, 3590, 3436, 3288, 3143, 3003, 2866, 2731, 2598, 2466/        SULW.1813  
      DATA (TB(I,5,2),I=1,40)/                                             SULW.1814  
     S 11682,11199,10724,10261, 9812, 9383, 8980, 8610, 8278, 7983,        SULW.1815  
     S  7721, 7480, 7245, 7008, 6768, 6528, 6293, 6068, 5855, 5653,        SULW.1816  
     S  5460, 5272, 5089, 4910, 4735, 4563, 4393, 4225, 4059, 3894,        SULW.1817  
     S  3731, 3572, 3415, 3264, 3116, 2973, 2832, 2693, 2555, 2418/        SULW.1818  
      DATA (TB(I,6,2),I=1,40)/                                             SULW.1819  
     S 11682,11199,10724,10261, 9812, 9383, 8980, 8610, 8278, 7983,        SULW.1820  
     S  7721, 7479, 7244, 7008, 6768, 6528, 6293, 6067, 5853, 5651,        SULW.1821  
     S  5457, 5269, 5086, 4906, 4729, 4555, 4383, 4213, 4043, 3875,        SULW.1822  
     S  3710, 3547, 3388, 3233, 3081, 2934, 2789, 2645, 2502, 2359/        SULW.1823  
      DATA (TB(I,7,2),I=1,40)/                                             SULW.1824  
     S 11682,11199,10724,10261, 9812, 9383, 8980, 8610, 8277, 7983,        SULW.1825  
     S  7721, 7479, 7244, 7007, 6767, 6527, 6291, 6065, 5851, 5648,        SULW.1826  
     S  5454, 5265, 5080, 4898, 4719, 4543, 4368, 4194, 4022, 3850,        SULW.1827  
     S  3681, 3515, 3352, 3193, 3037, 2885, 2735, 2586, 2437, 2288/        SULW.1828  
      DATA (TB(I,8,2),I=1,40)/                                             SULW.1829  
     S 11682,11199,10724,10261, 9812, 9382, 8980, 8610, 8277, 7982,        SULW.1830  
     S  7720, 7478, 7243, 7006, 6765, 6525, 6289, 6062, 5848, 5644,        SULW.1831  
     S  5448, 5257, 5070, 4886, 4705, 4525, 4346, 4168, 3992, 3817,        SULW.1832  
     S  3643, 3473, 3306, 3142, 2982, 2825, 2669, 2514, 2359, 2204/        SULW.1833  
      DATA (TB(I,9,2),I=1,40)/                                             SULW.1834  
     S 11682,11199,10724,10260, 9811, 9382, 8979, 8609, 8276, 7982,        SULW.1835  
     S  7719, 7476, 7241, 7004, 6763, 6522, 6285, 6058, 5842, 5636,        SULW.1836  
     S  5439, 5245, 5055, 4868, 4682, 4498, 4315, 4133, 3952, 3772,        SULW.1837  
     S  3595, 3420, 3248, 3080, 2914, 2751, 2589, 2428, 2267, 2107/        SULW.1838  
      DATA (TB(I,10,2),I=1,40)/                                            SULW.1839  
     S 11682,11199,10724,10260, 9811, 9382, 8979, 8608, 8275, 7980,        SULW.1840  
     S  7717, 7474, 7238, 7000, 6758, 6517, 6279, 6050, 5832, 5625,        SULW.1841  
     S  5424, 5227, 5033, 4841, 4651, 4462, 4274, 4087, 3901, 3716,        SULW.1842  
     S  3534, 3355, 3178, 3004, 2833, 2663, 2495, 2328, 2162, 1998/        SULW.1843  
      DATA (TB(I,11,2),I=1,40)/                                            SULW.1844  
     S 11682,11199,10724,10260, 9811, 9381, 8978, 8607, 8274, 7978,        SULW.1845  
     S  7714, 7470, 7233, 6994, 6752, 6508, 6269, 6038, 5818, 5606,        SULW.1846  
     S  5401, 5200, 5001, 4803, 4607, 4413, 4219, 4027, 3836, 3646,        SULW.1847  
     S  3459, 3275, 3093, 2913, 2736, 2560, 2386, 2214, 2045, 1879/        SULW.1848  
      DATA (TB(I,12,2),I=1,40)/                                            SULW.1849  
     S 11682,11199,10724,10260, 9810, 9380, 8977, 8605, 8271, 7974,        SULW.1850  
     S  7709, 7464, 7226, 6985, 6741, 6495, 6253, 6019, 5794, 5578,        SULW.1851  
     S  5368, 5160, 4955, 4751, 4549, 4349, 4150, 3952, 3756, 3561,        SULW.1852  
     S  3369, 3179, 2992, 2807, 2623, 2442, 2264, 2089, 1918, 1753/        SULW.1853  
      DATA (TB(I,13,2),I=1,40)/                                            SULW.1854  
     S 11682,11199,10723,10259, 9809, 9379, 8974, 8602, 8266, 7968,        SULW.1855  
     S  7701, 7454, 7214, 6971, 6723, 6475, 6229, 5990, 5760, 5537,        SULW.1856  
     S  5320, 5105, 4893, 4683, 4475, 4269, 4064, 3861, 3659, 3460,        SULW.1857  
     S  3263, 3068, 2875, 2684, 2496, 2311, 2131, 1955, 1785, 1623/        SULW.1858  
      DATA (TB(I,14,2),I=1,40)/                                            SULW.1859  
     S 11682,11198,10723,10258, 9807, 9376, 8971, 8597, 8259, 7958,        SULW.1860  
     S  7689, 7439, 7194, 6948, 6696, 6443, 6192, 5947, 5710, 5479,        SULW.1861  
     S  5254, 5033, 4814, 4597, 4383, 4171, 3961, 3752, 3546, 3342,        SULW.1862  
     S  3140, 2940, 2743, 2548, 2356, 2170, 1989, 1815, 1649, 1493/        SULW.1863  
      DATA (TB(I,15,2),I=1,40)/                                            SULW.1864  
     S 11681,11198,10722,10256, 9805, 9372, 8965, 8588, 8248, 7943,        SULW.1865  
     S  7669, 7414, 7165, 6913, 6656, 6396, 6138, 5886, 5640, 5401,        SULW.1866  
     S  5169, 4940, 4714, 4492, 4272, 4054, 3840, 3627, 3417, 3208,        SULW.1867  
     S  3002, 2798, 2596, 2399, 2206, 2020, 1842, 1672, 1514, 1367/        SULW.1868  
      DATA (TB(I,16,2),I=1,40)/                                            SULW.1869  
     S 11681,11197,10720,10253, 9800, 9366, 8955, 8575, 8230, 7919,        SULW.1870  
     S  7638, 7376, 7120, 6861, 6597, 6330, 6064, 5802, 5548, 5302,        SULW.1871  
     S  5062, 4826, 4595, 4367, 4142, 3921, 3702, 3485, 3271, 3059,        SULW.1872  
     S  2849, 2642, 2438, 2241, 2050, 1867, 1694, 1532, 1383, 1248/        SULW.1873  
      DATA (TB(I,17,2),I=1,40)/                                            SULW.1874  
     S 11681,11196,10718,10249, 9794, 9356, 8941, 8555, 8202, 7883,        SULW.1875  
     S  7593, 7321, 7055, 6787, 6515, 6240, 5965, 5696, 5434, 5180,        SULW.1876  
     S  4934, 4693, 4457, 4224, 3996, 3771, 3549, 3329, 3111, 2896,        SULW.1877  
     S  2684, 2476, 2273, 2078, 1891, 1714, 1549, 1398, 1261, 1138/        SULW.1878  
      DATA (TB(I,18,2),I=1,40)/                                            SULW.1879  
     S 11680,11194,10714,10243, 9784, 9342, 8921, 8526, 8163, 7832,        SULW.1880  
     S  7529, 7244, 6967, 6689, 6408, 6125, 5843, 5566, 5298, 5038,        SULW.1881  
     S  4787, 4541, 4301, 4066, 3835, 3607, 3382, 3160, 2940, 2723,        SULW.1882  
     S  2510, 2303, 2103, 1913, 1733, 1565, 1411, 1272, 1148, 1038/        SULW.1883  
      DATA (TB(I,19,2),I=1,40)/                                            SULW.1884  
     S 11680,11191,10709,10235, 9772, 9322, 8893, 8487, 8110, 7763,        SULW.1885  
     S  7444, 7144, 6854, 6567, 6278, 5988, 5700, 5418, 5144, 4879,        SULW.1886  
     S  4624, 4375, 4133, 3895, 3662, 3432, 3205, 2981, 2760, 2543,        SULW.1887  
     S  2332, 2129, 1934, 1751, 1581, 1424, 1283, 1158, 1047,  949/        SULW.1888  
      DATA (TB(I,20,2),I=1,40)/                                            SULW.1889  
     S 11679,11188,10703,10225, 9755, 9298, 8858, 8439, 8045, 7679,        SULW.1890  
     S  7340, 7024, 6720, 6424, 6128, 5833, 5541, 5255, 4977, 4709,        SULW.1891  
     S  4450, 4199, 3955, 3716, 3481, 3249, 3021, 2795, 2575, 2360,        SULW.1892  
     S  2153, 1956, 1769, 1596, 1437, 1294, 1168, 1055,  956,  866/        SULW.1893  
      DATA (TB(I,21,2),I=1,40)/                                            SULW.1894  
     S 11677,11185,10696,10213, 9737, 9271, 8819, 8385, 7973, 7586,        SULW.1895  
     S  7226, 6890, 6572, 6265, 5964, 5666, 5372, 5084, 4803, 4532,        SULW.1896  
     S  4271, 4019, 3773, 3532, 3295, 3062, 2832, 2608, 2390, 2179,        SULW.1897  
     S  1979, 1789, 1613, 1452, 1307, 1178, 1065,  964,  874,  790/        SULW.1898  
      DATA (TB(I,22,2),I=1,40)/                                            SULW.1899  
     S 11675,11180,10689,10201, 9719, 9245, 8782, 8333, 7902, 7494,        SULW.1900  
     S  7110, 6753, 6419, 6101, 5794, 5494, 5199, 4910, 4629, 4356,        SULW.1901  
     S  4093, 3838, 3590, 3346, 3107, 2873, 2644, 2422, 2208, 2004,        SULW.1902  
     S  1811, 1632, 1468, 1321, 1190, 1075,  974,  882,  798,  720/        SULW.1903  
      DATA (TB(I,23,2),I=1,40)/                                            SULW.1904  
     S 11673,11176,10682,10191, 9704, 9222, 8749, 8287, 7840, 7412,        SULW.1905  
     S  7006, 6626, 6271, 5939, 5624, 5321, 5027, 4739, 4458, 4185,        SULW.1906  
     S  3918, 3660, 3407, 3161, 2920, 2686, 2459, 2240, 2033, 1837,        SULW.1907  
     S  1654, 1488, 1338, 1205, 1089,  985,  893,  807,  728,  655/        SULW.1908  
      DATA (TB(I,24,2),I=1,40)/                                            SULW.1909  
     S 11671,11173,10677,10183, 9692, 9205, 8725, 8253, 7792, 7346,        SULW.1910  
     S  6920, 6517, 6141, 5790, 5463, 5155, 4859, 4573, 4293, 4019,        SULW.1911  
     S  3750, 3487, 3229, 2979, 2737, 2503, 2280, 2067, 1867, 1681,        SULW.1912  
     S  1511, 1359, 1223, 1105, 1000,  906,  819,  739,  664,  596/        SULW.1913  
      DATA (TB(I,25,2),I=1,40)/                                            SULW.1914  
     S 11670,11172,10674,10178, 9684, 9193, 8707, 8228, 7757, 7298,        SULW.1915  
     S  6855, 6432, 6033, 5662, 5319, 5000, 4700, 4413, 4134, 3859,        SULW.1916  
     S  3587, 3319, 3057, 2803, 2560, 2328, 2109, 1903, 1713, 1539,        SULW.1917  
     S  1383, 1246, 1125, 1018,  922,  834,  752,  677,  607,  544/        SULW.1918  
      DATA (TB(I,26,2),I=1,40)/                                            SULW.1919  
     S 11670,11171,10672,10175, 9679, 9186, 8696, 8211, 7733, 7264,        SULW.1920  
     S  6808, 6369, 5952, 5560, 5197, 4863, 4553, 4260, 3979, 3702,        SULW.1921  
     S  3429, 3158, 2893, 2636, 2392, 2162, 1948, 1751, 1573, 1413,        SULW.1922  
     S  1272, 1149, 1040,  943,  853,  769,  692,  621,  556,  499/        SULW.1923  
      DATA (TB(I,27,2),I=1,40)/                                            SULW.1924  
     S 11670,11170,10672,10173, 9677, 9181, 8689, 8200, 7718, 7242,        SULW.1925  
     S  6778, 6327, 5895, 5485, 5103, 4750, 4424, 4119, 3830, 3549,        SULW.1926  
     S  3273, 3001, 2735, 2478, 2234, 2008, 1800, 1613, 1447, 1302,        SULW.1927  
     S  1176, 1066,  967,  876,  790,  711,  638,  572,  513,  461/        SULW.1928  
      DATA (TB(I,28,2),I=1,40)/                                            SULW.1929  
     S 11670,11171,10672,10173, 9676, 9179, 8685, 8195, 7709, 7229,        SULW.1930  
     S  6758, 6299, 5856, 5433, 5034, 4662, 4316, 3994, 3691, 3401,        SULW.1931  
     S  3121, 2848, 2583, 2328, 2088, 1867, 1667, 1491, 1338, 1207,        SULW.1932  
     S  1094,  994,  901,  815,  734,  659,  591,  530,  477,  430/        SULW.1933  
      DATA (TB(I,29,2),I=1,40)/                                            SULW.1934  
     S 11671,11172,10673,10174, 9676, 9179, 8684, 8192, 7704, 7221,        SULW.1935  
     S  6746, 6281, 5830, 5397, 4984, 4595, 4230, 3888, 3566, 3262,        SULW.1936  
     S  2973, 2698, 2435, 2186, 1953, 1741, 1552, 1388, 1247, 1128,        SULW.1937  
     S  1024,  929,  842,  760,  684,  614,  551,  497,  448,  403/        SULW.1938  
      DATA (TB(I,30,2),I=1,40)/                                            SULW.1939  
     S 11673,11174,10674,10175, 9677, 9180, 8684, 8191, 7701, 7216,        SULW.1940  
     S  6738, 6269, 5811, 5369, 4946, 4543, 4162, 3800, 3458, 3137,        SULW.1941  
     S  2836, 2555, 2294, 2050, 1828, 1629, 1454, 1304, 1175, 1063,        SULW.1942  
     S   963,  872,  788,  710,  639,  575,  519,  470,  425,  381/        SULW.1943  
      DATA (TB(I,31,2),I=1,40)/                                            SULW.1944  
     S 11676,11177,10677,10178, 9680, 9182, 8686, 8191, 7700, 7213,        SULW.1945  
     S  6732, 6259, 5796, 5347, 4914, 4501, 4106, 3729, 3370, 3030,        SULW.1946  
     S  2714, 2424, 2161, 1925, 1715, 1533, 1376, 1241, 1121, 1012,        SULW.1947  
     S   912,  821,  739,  666,  600,  544,  494,  449,  405,  361/        SULW.1948  
C                                                                          SULW.1949  
C----- 1.,0E4*ALP(I,J,1) FOR TB                                            SULW.1950  
      DATA (ALP(I, 1,1),I=1,40)/                                           SULW.1951  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.1952  
     S  39.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  69.,  70.,         SULW.1953  
     S  72.,  74.,  76.,  79.,  81.,  84.,  86.,  88.,  90.,  91.,         SULW.1954  
     S  92.,  93.,  93.,  92.,  92.,  92.,  91.,  90.,  89.,  88./         SULW.1955  
      DATA (ALP(I, 2,1),I=1,40)/                                           SULW.1956  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.1957  
     S  39.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  69.,  70.,         SULW.1958  
     S  72.,  74.,  76.,  79.,  81.,  83.,  86.,  88.,  89.,  91.,         SULW.1959  
     S  92.,  92.,  92.,  91.,  91.,  90.,  89.,  89.,  88.,  86./         SULW.1960  
      DATA (ALP(I, 3,1),I=1,40)/                                           SULW.1961  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.1962  
     S  39.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  69.,  70.,         SULW.1963  
     S  72.,  74.,  76.,  79.,  81.,  83.,  85.,  87.,  89.,  90.,         SULW.1964  
     S  91.,  91.,  90.,  90.,  89.,  88.,  88.,  87.,  85.,  83./         SULW.1965  
      DATA (ALP(I, 4,1),I=1,40)/                                           SULW.1966  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.1967  
     S  39.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  69.,  70.,         SULW.1968  
     S  72.,  74.,  76.,  78.,  81.,  83.,  85.,  87.,  88.,  89.,         SULW.1969  
     S  89.,  89.,  89.,  88.,  87.,  86.,  85.,  84.,  82.,  80./         SULW.1970  
      DATA (ALP(I, 5,1),I=1,40)/                                           SULW.1971  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.1972  
     S  39.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  69.,  70.,         SULW.1973  
     S  72.,  74.,  76.,  78.,  80.,  82.,  84.,  86.,  87.,  87.,         SULW.1974  
     S  88.,  87.,  87.,  86.,  85.,  83.,  82.,  81.,  79.,  77./         SULW.1975  
      DATA (ALP(I, 6,1),I=1,40)/                                           SULW.1976  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.1977  
     S  39.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  68.,  70.,         SULW.1978  
     S  71.,  73.,  75.,  77.,  79.,  81.,  83.,  84.,  85.,  85.,         SULW.1979  
     S  85.,  85.,  84.,  83.,  82.,  80.,  79.,  77.,  75.,  72./         SULW.1980  
      DATA (ALP(I, 7,1),I=1,40)/                                           SULW.1981  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.1982  
     S  39.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  68.,  69.,         SULW.1983  
     S  71.,  73.,  75.,  76.,  78.,  80.,  81.,  82.,  83.,  83.,         SULW.1984  
     S  83.,  82.,  81.,  80.,  78.,  77.,  75.,  73.,  71.,  68./         SULW.1985  
      DATA (ALP(I, 8,1),I=1,40)/                                           SULW.1986  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.1987  
     S  39.,  47.,  53.,  59.,  63.,  65.,  67.,  67.,  68.,  69.,         SULW.1988  
     S  70.,  72.,  74.,  75.,  77.,  78.,  79.,  80.,  80.,  80.,         SULW.1989  
     S  80.,  79.,  77.,  76.,  74.,  73.,  71.,  69.,  66.,  63./         SULW.1990  
      DATA (ALP(I, 9,1),I=1,40)/                                           SULW.1991  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.1992  
     S  39.,  47.,  53.,  59.,  63.,  65.,  66.,  67.,  67.,  68.,         SULW.1993  
     S  69.,  71.,  72.,  73.,  74.,  75.,  76.,  76.,  77.,  76.,         SULW.1994  
     S  76.,  75.,  73.,  72.,  70.,  68.,  66.,  64.,  61.,  58./         SULW.1995  
      DATA (ALP(I,10,1),I=1,40)/                                           SULW.1996  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  31.,         SULW.1997  
     S  39.,  46.,  53.,  58.,  62.,  65.,  66.,  66.,  66.,  67.,         SULW.1998  
     S  68.,  69.,  70.,  71.,  71.,  72.,  73.,  73.,  73.,  72.,         SULW.1999  
     S  72.,  71.,  69.,  67.,  65.,  63.,  61.,  59.,  56.,  53./         SULW.2000  
      DATA (ALP(I,11,1),I=1,40)/                                           SULW.2001  
     S   1.,   1.,   2.,   4.,   6.,   9.,  13.,  18.,  24.,  31.,         SULW.2002  
     S  39.,  46.,  52.,  58.,  61.,  64.,  65.,  65.,  65.,  65.,         SULW.2003  
     S  65.,  66.,  67.,  67.,  68.,  68.,  69.,  69.,  68.,  68.,         SULW.2004  
     S  67.,  66.,  64.,  62.,  60.,  58.,  56.,  54.,  51.,  49./         SULW.2005  
      DATA (ALP(I,12,1),I=1,40)/                                           SULW.2006  
     S   1.,   1.,   2.,   4.,   6.,   9.,  13.,  18.,  24.,  31.,         SULW.2007  
     S  38.,  45.,  52.,  57.,  60.,  62.,  63.,  63.,  62.,  62.,         SULW.2008  
     S  62.,  63.,  63.,  63.,  64.,  64.,  64.,  64.,  64.,  63.,         SULW.2009  
     S  62.,  61.,  59.,  57.,  55.,  53.,  51.,  49.,  47.,  44./         SULW.2010  
      DATA (ALP(I,13,1),I=1,40)/                                           SULW.2011  
     S   1.,   1.,   2.,   4.,   6.,   9.,  13.,  17.,  23.,  30.,         SULW.2012  
     S  38.,  44.,  50.,  55.,  58.,  60.,  61.,  60.,  59.,  59.,         SULW.2013  
     S  59.,  59.,  59.,  59.,  59.,  59.,  59.,  59.,  59.,  58.,         SULW.2014  
     S  57.,  56.,  54.,  52.,  50.,  48.,  47.,  45.,  43.,  41./         SULW.2015  
      DATA (ALP(I,14,1),I=1,40)/                                           SULW.2016  
     S   1.,   1.,   2.,   4.,   6.,   9.,  12.,  17.,  23.,  29.,         SULW.2017  
     S  36.,  43.,  49.,  53.,  56.,  57.,  57.,  56.,  55.,  54.,         SULW.2018  
     S  54.,  54.,  54.,  54.,  54.,  54.,  55.,  54.,  54.,  53.,         SULW.2019  
     S  52.,  51.,  50.,  48.,  46.,  44.,  43.,  41.,  39.,  38./         SULW.2020  
      DATA (ALP(I,15,1),I=1,40)/                                           SULW.2021  
     S   0.,   1.,   2.,   4.,   6.,   8.,  12.,  16.,  22.,  28.,         SULW.2022  
     S  35.,  41.,  46.,  50.,  52.,  53.,  53.,  52.,  51.,  50.,         SULW.2023  
     S  49.,  49.,  49.,  49.,  49.,  50.,  50.,  50.,  49.,  49.,         SULW.2024  
     S  48.,  47.,  45.,  44.,  42.,  41.,  39.,  38.,  37.,  36./         SULW.2025  
      DATA (ALP(I,16,1),I=1,40)/                                           SULW.2026  
     S   0.,   1.,   2.,   3.,   5.,   8.,  11.,  15.,  20.,  26.,         SULW.2027  
     S  32.,  37.,  42.,  45.,  47.,  48.,  47.,  46.,  45.,  44.,         SULW.2028  
     S  44.,  44.,  44.,  44.,  45.,  45.,  45.,  45.,  45.,  44.,         SULW.2029  
     S  44.,  42.,  41.,  40.,  39.,  37.,  36.,  36.,  35.,  34./         SULW.2030  
      DATA (ALP(I,17,1),I=1,40)/                                           SULW.2031  
     S   0.,   1.,   2.,   3.,   5.,   7.,  10.,  13.,  18.,  23.,         SULW.2032  
     S  28.,  33.,  37.,  40.,  41.,  42.,  42.,  41.,  40.,  39.,         SULW.2033  
     S  39.,  39.,  40.,  40.,  41.,  41.,  41.,  41.,  41.,  41.,         SULW.2034  
     S  40.,  39.,  38.,  37.,  36.,  35.,  34.,  34.,  34.,  34./         SULW.2035  
      DATA (ALP(I,18,1),I=1,40)/                                           SULW.2036  
     S   0.,   1.,   1.,   2.,   4.,   6.,   8.,  11.,  15.,  19.,         SULW.2037  
     S  24.,  28.,  31.,  33.,  35.,  36.,  36.,  36.,  35.,  35.,         SULW.2038  
     S  35.,  35.,  36.,  37.,  37.,  38.,  38.,  38.,  38.,  37.,         SULW.2039  
     S  37.,  36.,  35.,  34.,  34.,  33.,  33.,  33.,  33.,  33./         SULW.2040  
      DATA (ALP(I,19,1),I=1,40)/                                           SULW.2041  
     S   0.,   1.,   1.,   2.,   3.,   4.,   6.,   9.,  12.,  15.,         SULW.2042  
     S  19.,  22.,  25.,  27.,  29.,  30.,  31.,  31.,  31.,  31.,         SULW.2043  
     S  32.,  32.,  33.,  34.,  34.,  35.,  35.,  35.,  35.,  35.,         SULW.2044  
     S  34.,  34.,  33.,  33.,  32.,  32.,  32.,  32.,  33.,  33./         SULW.2045  
      DATA (ALP(I,20,1),I=1,40)/                                           SULW.2046  
     S   0.,   0.,   1.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,         SULW.2047  
     S  13.,  16.,  19.,  21.,  23.,  25.,  27.,  28.,  28.,  29.,         SULW.2048  
     S  29.,  30.,  30.,  31.,  32.,  32.,  33.,  33.,  33.,  32.,         SULW.2049  
     S  32.,  32.,  32.,  31.,  31.,  32.,  32.,  32.,  33.,  33./         SULW.2050  
      DATA (ALP(I,21,1),I=1,40)/                                           SULW.2051  
     S   0.,   0.,   0.,   1.,   1.,   2.,   3.,   4.,   5.,   7.,         SULW.2052  
     S   9.,  11.,  14.,  16.,  19.,  21.,  23.,  25.,  26.,  27.,         SULW.2053  
     S  27.,  28.,  29.,  29.,  30.,  30.,  31.,  31.,  31.,  31.,         SULW.2054  
     S  31.,  31.,  31.,  31.,  31.,  31.,  32.,  32.,  32.,  32./         SULW.2055  
      DATA (ALP(I,22,1),I=1,40)/                                           SULW.2056  
     S   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,   3.,   4.,         SULW.2057  
     S   6.,   8.,  10.,  12.,  15.,  18.,  21.,  23.,  25.,  26.,         SULW.2058  
     S  26.,  27.,  27.,  28.,  28.,  29.,  29.,  29.,  29.,  30.,         SULW.2059  
     S  30.,  30.,  30.,  30.,  31.,  32.,  32.,  32.,  32.,  31./         SULW.2060  
      DATA (ALP(I,23,1),I=1,40)/                                           SULW.2061  
     S   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   2.,         SULW.2062  
     S   4.,   5.,   7.,   9.,  12.,  15.,  18.,  21.,  23.,  25.,         SULW.2063  
     S  26.,  26.,  26.,  27.,  27.,  27.,  27.,  28.,  28.,  28.,         SULW.2064  
     S  29.,  29.,  30.,  31.,  31.,  32.,  32.,  31.,  31.,  30./         SULW.2065  
      DATA (ALP(I,24,1),I=1,40)/                                           SULW.2066  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,         SULW.2067  
     S   2.,   4.,   5.,   7.,  10.,  13.,  16.,  19.,  21.,  23.,         SULW.2068  
     S  24.,  25.,  25.,  26.,  26.,  26.,  26.,  27.,  27.,  28.,         SULW.2069  
     S  28.,  29.,  30.,  31.,  31.,  32.,  31.,  31.,  30.,  29./         SULW.2070  
      DATA (ALP(I,25,1),I=1,40)/                                           SULW.2071  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,         SULW.2072  
     S   2.,   3.,   4.,   6.,   8.,  10.,  13.,  16.,  19.,  21.,         SULW.2073  
     S  23.,  24.,  24.,  25.,  25.,  25.,  25.,  25.,  26.,  27.,         SULW.2074  
     S  28.,  29.,  30.,  31.,  31.,  31.,  31.,  30.,  29.,  28./         SULW.2075  
      DATA (ALP(I,26,1),I=1,40)/                                           SULW.2076  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,         SULW.2077  
     S   2.,   2.,   4.,   5.,   7.,   9.,  11.,  14.,  16.,  19.,         SULW.2078  
     S  21.,  22.,  23.,  24.,  24.,  24.,  24.,  25.,  26.,  27.,         SULW.2079  
     S  28.,  29.,  30.,  31.,  31.,  30.,  30.,  29.,  28.,  27./         SULW.2080  
      DATA (ALP(I,27,1),I=1,40)/                                           SULW.2081  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,         SULW.2082  
     S   2.,   2.,   3.,   5.,   6.,   8.,  10.,  12.,  14.,  16.,         SULW.2083  
     S  18.,  20.,  21.,  22.,  23.,  23.,  24.,  24.,  25.,  27.,         SULW.2084  
     S  28.,  29.,  30.,  30.,  30.,  30.,  29.,  28.,  27.,  26./         SULW.2085  
      DATA (ALP(I,28,1),I=1,40)/                                           SULW.2086  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,         SULW.2087  
     S   1.,   2.,   3.,   4.,   6.,   7.,   8.,  10.,  11.,  13.,         SULW.2088  
     S  15.,  17.,  19.,  20.,  21.,  22.,  23.,  24.,  26.,  27.,         SULW.2089  
     S  28.,  29.,  29.,  29.,  29.,  28.,  28.,  27.,  26.,  25./         SULW.2090  
      DATA (ALP(I,29,1),I=1,40)/                                           SULW.2091  
     S  -1.,  -1.,  -1.,  -1.,   0.,   0.,   0.,   0.,   0.,   1.,         SULW.2092  
     S   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,         SULW.2093  
     S  12.,  14.,  16.,  18.,  20.,  21.,  23.,  25.,  26.,  27.,         SULW.2094  
     S  28.,  28.,  28.,  28.,  28.,  27.,  26.,  25.,  25.,  25./         SULW.2095  
      DATA (ALP(I,30,1),I=1,40)/                                           SULW.2096  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.2097  
     S   0.,   1.,   2.,   2.,   3.,   4.,   5.,   6.,   6.,   7.,         SULW.2098  
     S   9.,  10.,  13.,  15.,  18.,  20.,  23.,  26.,  27.,  28.,         SULW.2099  
     S  28.,  28.,  27.,  27.,  26.,  25.,  25.,  24.,  25.,  25./         SULW.2100  
      DATA (ALP(I,31,1),I=1,40)/                                           SULW.2101  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.2102  
     S   0.,   0.,   1.,   1.,   2.,   2.,   3.,   4.,   4.,   5.,         SULW.2103  
     S   6.,   8.,  10.,  13.,  17.,  20.,  24.,  27.,  28.,  29.,         SULW.2104  
     S  28.,  28.,  26.,  25.,  24.,  24.,  23.,  24.,  24.,  25./         SULW.2105  
C----- 1.,0E6*BET(I,J,1) FOR TB                                            SULW.2106  
      DATA (BET(I, 1,1),I=1,40)/                                           SULW.2107  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2108  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  14.,         SULW.2109  
     S  16.,  18.,  19.,  20.,  21.,  24.,  26.,  28.,  29.,  30.,         SULW.2110  
     S  29.,  29.,  27.,  26.,  26.,  25.,  26.,  26.,  25.,  23./         SULW.2111  
      DATA (BET(I, 2,1),I=1,40)/                                           SULW.2112  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2113  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  14.,         SULW.2114  
     S  16.,  18.,  19.,  20.,  21.,  24.,  26.,  28.,  29.,  29.,         SULW.2115  
     S  29.,  28.,  27.,  26.,  25.,  25.,  25.,  25.,  24.,  23./         SULW.2116  
      DATA (BET(I, 3,1),I=1,40)/                                           SULW.2117  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2118  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  14.,         SULW.2119  
     S  16.,  18.,  19.,  20.,  21.,  24.,  26.,  28.,  29.,  29.,         SULW.2120  
     S  29.,  28.,  27.,  26.,  25.,  25.,  25.,  24.,  24.,  22./         SULW.2121  
      DATA (BET(I, 4,1),I=1,40)/                                           SULW.2122  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2123  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  14.,         SULW.2124  
     S  16.,  18.,  19.,  20.,  21.,  23.,  26.,  28.,  29.,  29.,         SULW.2125  
     S  29.,  28.,  27.,  25.,  24.,  24.,  24.,  24.,  23.,  21./         SULW.2126  
      DATA (BET(I, 5,1),I=1,40)/                                           SULW.2127  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2128  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  14.,         SULW.2129  
     S  16.,  18.,  19.,  20.,  21.,  23.,  26.,  27.,  28.,  29.,         SULW.2130  
     S  28.,  27.,  26.,  25.,  24.,  23.,  23.,  23.,  22.,  20./         SULW.2131  
      DATA (BET(I, 6,1),I=1,40)/                                           SULW.2132  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2133  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  14.,         SULW.2134  
     S  16.,  18.,  19.,  20.,  21.,  23.,  25.,  27.,  28.,  28.,         SULW.2135  
     S  28.,  27.,  25.,  24.,  23.,  22.,  22.,  22.,  21.,  19./         SULW.2136  
      DATA (BET(I, 7,1),I=1,40)/                                           SULW.2137  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2138  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  14.,         SULW.2139  
     S  16.,  18.,  19.,  20.,  21.,  23.,  25.,  27.,  27.,  27.,         SULW.2140  
     S  27.,  26.,  24.,  23.,  22.,  21.,  21.,  20.,  19.,  17./         SULW.2141  
      DATA (BET(I, 8,1),I=1,40)/                                           SULW.2142  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2143  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  14.,         SULW.2144  
     S  16.,  18.,  19.,  20.,  21.,  23.,  25.,  26.,  26.,  26.,         SULW.2145  
     S  26.,  24.,  23.,  21.,  20.,  20.,  19.,  19.,  17.,  16./         SULW.2146  
      DATA (BET(I, 9,1),I=1,40)/                                           SULW.2147  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2148  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  14.,         SULW.2149  
     S  16.,  18.,  18.,  19.,  21.,  22.,  24.,  25.,  25.,  25.,         SULW.2150  
     S  24.,  23.,  21.,  20.,  19.,  18.,  18.,  17.,  16.,  14./         SULW.2151  
      DATA (BET(I,10,1),I=1,40)/                                           SULW.2152  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2153  
     S   3.,   5.,   7.,   8.,   9.,   9.,   9.,  10.,  12.,  14.,         SULW.2154  
     S  16.,  18.,  18.,  19.,  20.,  21.,  23.,  24.,  24.,  23.,         SULW.2155  
     S  23.,  21.,  20.,  18.,  17.,  17.,  16.,  15.,  14.,  12./         SULW.2156  
      DATA (BET(I,11,1),I=1,40)/                                           SULW.2157  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2158  
     S   3.,   5.,   7.,   8.,   9.,   9.,  10.,  11.,  12.,  14.,         SULW.2159  
     S  16.,  17.,  18.,  18.,  19.,  20.,  21.,  22.,  22.,  22.,         SULW.2160  
     S  21.,  20.,  18.,  17.,  16.,  15.,  14.,  13.,  12.,  10./         SULW.2161  
      DATA (BET(I,12,1),I=1,40)/                                           SULW.2162  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2163  
     S   3.,   5.,   7.,   8.,   9.,   9.,  10.,  11.,  12.,  14.,         SULW.2164  
     S  16.,  17.,  17.,  17.,  18.,  19.,  20.,  20.,  20.,  20.,         SULW.2165  
     S  19.,  18.,  16.,  15.,  14.,  13.,  12.,  11.,  10.,   9./         SULW.2166  
      DATA (BET(I,13,1),I=1,40)/                                           SULW.2167  
     S   0.,   0.,   0.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   1.,         SULW.2168  
     S   3.,   5.,   7.,   8.,   9.,   9.,  10.,  11.,  12.,  14.,         SULW.2169  
     S  15.,  16.,  16.,  16.,  17.,  17.,  18.,  18.,  18.,  18.,         SULW.2170  
     S  17.,  16.,  14.,  13.,  12.,  11.,  11.,  10.,   9.,   7./         SULW.2171  
      DATA (BET(I,14,1),I=1,40)/                                           SULW.2172  
     S   0.,   0.,   0.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   2.,         SULW.2173  
     S   3.,   5.,   7.,   8.,   9.,   9.,  10.,  10.,  12.,  13.,         SULW.2174  
     S  14.,  15.,  15.,  15.,  15.,  16.,  16.,  16.,  16.,  16.,         SULW.2175  
     S  15.,  14.,  13.,  11.,  10.,  10.,   9.,   8.,   7.,   6./         SULW.2176  
      DATA (BET(I,15,1),I=1,40)/                                           SULW.2177  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   2.,         SULW.2178  
     S   4.,   6.,   7.,   9.,   9.,   9.,  10.,  10.,  11.,  12.,         SULW.2179  
     S  13.,  13.,  13.,  13.,  13.,  14.,  14.,  14.,  14.,  14.,         SULW.2180  
     S  13.,  12.,  11.,  10.,   9.,   8.,   7.,   7.,   6.,   4./         SULW.2181  
      DATA (BET(I,16,1),I=1,40)/                                           SULW.2182  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   2.,         SULW.2183  
     S   4.,   6.,   7.,   9.,   9.,   9.,   9.,   9.,  10.,  11.,         SULW.2184  
     S  11.,  12.,  12.,  12.,  12.,  12.,  12.,  12.,  12.,  12.,         SULW.2185  
     S  11.,  10.,   9.,   8.,   7.,   7.,   6.,   5.,   4.,   3./         SULW.2186  
      DATA (BET(I,17,1),I=1,40)/                                           SULW.2187  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   3.,         SULW.2188  
     S   4.,   6.,   8.,   9.,   9.,   9.,   8.,   8.,   9.,   9.,         SULW.2189  
     S  10.,  10.,  10.,  10.,  10.,  10.,  10.,  11.,  10.,  10.,         SULW.2190  
     S   9.,   9.,   8.,   7.,   6.,   6.,   5.,   4.,   3.,   2./         SULW.2191  
      DATA (BET(I,18,1),I=1,40)/                                           SULW.2192  
     S   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   3.,         SULW.2193  
     S   5.,   6.,   7.,   8.,   8.,   8.,   8.,   7.,   7.,   8.,         SULW.2194  
     S   8.,   9.,   9.,   9.,   9.,   9.,   9.,   9.,   9.,   8.,         SULW.2195  
     S   8.,   7.,   7.,   6.,   5.,   4.,   4.,   3.,   2.,   0./         SULW.2196  
      DATA (BET(I,19,1),I=1,40)/                                           SULW.2197  
     S   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   2.,   3.,         SULW.2198  
     S   5.,   6.,   7.,   8.,   8.,   7.,   7.,   6.,   6.,   6.,         SULW.2199  
     S   7.,   7.,   7.,   8.,   8.,   8.,   8.,   8.,   8.,   7.,         SULW.2200  
     S   7.,   6.,   5.,   5.,   4.,   3.,   2.,   1.,   0.,  -1./         SULW.2201  
      DATA (BET(I,20,1),I=1,40)/                                           SULW.2202  
     S   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,   2.,   3.,         SULW.2203  
     S   4.,   5.,   6.,   7.,   7.,   6.,   6.,   5.,   5.,   5.,         SULW.2204  
     S   5.,   6.,   6.,   7.,   7.,   7.,   7.,   7.,   6.,   6.,         SULW.2205  
     S   6.,   5.,   5.,   4.,   3.,   2.,   1.,   0.,  -1.,  -2./         SULW.2206  
      DATA (BET(I,21,1),I=1,40)/                                           SULW.2207  
     S   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,   2.,   3.,         SULW.2208  
     S   4.,   5.,   5.,   6.,   6.,   6.,   5.,   5.,   4.,   4.,         SULW.2209  
     S   4.,   5.,   5.,   6.,   6.,   6.,   6.,   6.,   5.,   5.,         SULW.2210  
     S   5.,   4.,   4.,   3.,   2.,   1.,   0.,  -1.,  -2.,  -2./         SULW.2211  
      DATA (BET(I,22,1),I=1,40)/                                           SULW.2212  
     S   0.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,   2.,         SULW.2213  
     S   3.,   4.,   4.,   5.,   5.,   5.,   5.,   4.,   4.,   3.,         SULW.2214  
     S   4.,   4.,   5.,   5.,   5.,   5.,   5.,   5.,   5.,   4.,         SULW.2215  
     S   4.,   4.,   3.,   2.,   1.,   0.,  -1.,  -2.,  -3.,  -3./         SULW.2216  
      DATA (BET(I,23,1),I=1,40)/                                           SULW.2217  
     S   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,         SULW.2218  
     S   2.,   3.,   3.,   4.,   4.,   5.,   5.,   4.,   4.,   4.,         SULW.2219  
     S   3.,   3.,   4.,   4.,   5.,   5.,   5.,   4.,   4.,   4.,         SULW.2220  
     S   3.,   3.,   2.,   1.,   0.,  -1.,  -2.,  -3.,  -3.,  -4./         SULW.2221  
      DATA (BET(I,24,1),I=1,40)/                                           SULW.2222  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,         SULW.2223  
     S   1.,   2.,   2.,   3.,   3.,   4.,   4.,   4.,   4.,   4.,         SULW.2224  
     S   4.,   3.,   3.,   3.,   4.,   4.,   4.,   4.,   4.,   3.,         SULW.2225  
     S   3.,   2.,   1.,   0.,  -1.,  -2.,  -3.,  -3.,  -4.,  -4./         SULW.2226  
      DATA (BET(I,25,1),I=1,40)/                                           SULW.2227  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,         SULW.2228  
     S   1.,   1.,   1.,   2.,   2.,   3.,   4.,   4.,   5.,   4.,         SULW.2229  
     S   4.,   3.,   3.,   3.,   3.,   3.,   3.,   3.,   3.,   2.,         SULW.2230  
     S   2.,   1.,   0.,  -1.,  -2.,  -3.,  -3.,  -4.,  -4.,  -4./         SULW.2231  
      DATA (BET(I,26,1),I=1,40)/                                           SULW.2232  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2233  
     S   0.,   0.,   1.,   1.,   2.,   2.,   3.,   4.,   4.,   5.,         SULW.2234  
     S   4.,   4.,   3.,   2.,   2.,   2.,   2.,   2.,   2.,   1.,         SULW.2235  
     S   1.,   0.,  -1.,  -2.,  -3.,  -3.,  -4.,  -4.,  -4.,  -3./         SULW.2236  
      DATA (BET(I,27,1),I=1,40)/                                           SULW.2237  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2238  
     S   0.,   0.,   0.,   0.,   1.,   1.,   2.,   3.,   4.,   4.,         SULW.2239  
     S   4.,   4.,   4.,   3.,   2.,   2.,   1.,   1.,   1.,   0.,         SULW.2240  
     S   0.,  -1.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -3.,  -2./         SULW.2241  
      DATA (BET(I,28,1),I=1,40)/                                           SULW.2242  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2243  
     S   0.,   0.,   0.,   0.,   0.,   1.,   2.,   2.,   3.,   4.,         SULW.2244  
     S   4.,   4.,   4.,   3.,   2.,   1.,   1.,   0.,  -1.,  -1.,         SULW.2245  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -3.,  -4.,  -3.,  -2.,  -2./         SULW.2246  
      DATA (BET(I,29,1),I=1,40)/                                           SULW.2247  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2248  
     S   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   2.,   3.,         SULW.2249  
     S   4.,   4.,   4.,   3.,   2.,   1.,   0.,  -1.,  -2.,  -3.,         SULW.2250  
     S  -3.,  -3.,  -3.,  -3.,  -3.,  -3.,  -3.,  -2.,  -1.,  -1./         SULW.2251  
      DATA (BET(I,30,1),I=1,40)/                                           SULW.2252  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,   0.,   0.,         SULW.2253  
     S   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   2.,         SULW.2254  
     S   3.,   3.,   3.,   2.,   2.,   1.,  -1.,  -2.,  -3.,  -4.,         SULW.2255  
     S  -5.,  -5.,  -4.,  -4.,  -3.,  -3.,  -2.,  -1.,   0.,   0./         SULW.2256  
      DATA (BET(I,31,1),I=1,40)/                                           SULW.2257  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.2258  
     S  -1.,  -1.,  -1.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,         SULW.2259  
     S   1.,   1.,   1.,   1.,   0.,  -1.,  -2.,  -3.,  -4.,  -5.,         SULW.2260  
     S  -6.,  -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   1./         SULW.2261  
C----- 1.,0E4*ALP(I,J,2) FOR TDB                                           SULW.2262  
      DATA (ALP(I, 1,2),I=1,40)/                                           SULW.2263  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  18.,  25.,  32.,         SULW.2264  
     S  40.,  47.,  54.,  59.,  64.,  66.,  68.,  68.,  69.,  70.,         SULW.2265  
     S  72.,  74.,  77.,  79.,  81.,  84.,  86.,  88.,  90.,  91.,         SULW.2266  
     S  92.,  93.,  93.,  92.,  92.,  92.,  91.,  90.,  89.,  88./         SULW.2267  
      DATA (ALP(I, 2,2),I=1,40)/                                           SULW.2268  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  18.,  25.,  32.,         SULW.2269  
     S  40.,  47.,  54.,  59.,  63.,  66.,  68.,  68.,  69.,  70.,         SULW.2270  
     S  72.,  74.,  77.,  79.,  81.,  84.,  86.,  88.,  90.,  91.,         SULW.2271  
     S  92.,  92.,  92.,  91.,  91.,  90.,  89.,  89.,  87.,  86./         SULW.2272  
      DATA (ALP(I, 3,2),I=1,40)/                                           SULW.2273  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  18.,  25.,  32.,         SULW.2274  
     S  40.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  69.,  70.,         SULW.2275  
     S  72.,  74.,  76.,  79.,  81.,  83.,  86.,  88.,  89.,  90.,         SULW.2276  
     S  91.,  91.,  90.,  90.,  89.,  88.,  87.,  86.,  85.,  83./         SULW.2277  
      DATA (ALP(I, 4,2),I=1,40)/                                           SULW.2278  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  18.,  25.,  32.,         SULW.2279  
     S  40.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  69.,  70.,         SULW.2280  
     S  72.,  74.,  76.,  79.,  81.,  83.,  85.,  87.,  88.,  89.,         SULW.2281  
     S  89.,  89.,  89.,  88.,  87.,  86.,  85.,  84.,  82.,  80./         SULW.2282  
      DATA (ALP(I, 5,2),I=1,40)/                                           SULW.2283  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  18.,  25.,  32.,         SULW.2284  
     S  40.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  69.,  70.,         SULW.2285  
     S  72.,  74.,  76.,  78.,  80.,  82.,  84.,  86.,  87.,  88.,         SULW.2286  
     S  88.,  87.,  87.,  86.,  85.,  83.,  82.,  81.,  79.,  76./         SULW.2287  
      DATA (ALP(I, 6,2),I=1,40)/                                           SULW.2288  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  18.,  25.,  32.,         SULW.2289  
     S  40.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  69.,  70.,         SULW.2290  
     S  71.,  73.,  76.,  78.,  80.,  81.,  83.,  84.,  85.,  86.,         SULW.2291  
     S  85.,  85.,  84.,  83.,  82.,  80.,  79.,  77.,  75.,  72./         SULW.2292  
      DATA (ALP(I, 7,2),I=1,40)/                                           SULW.2293  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  18.,  25.,  32.,         SULW.2294  
     S  39.,  47.,  54.,  59.,  63.,  66.,  67.,  68.,  68.,  69.,         SULW.2295  
     S  71.,  73.,  75.,  77.,  78.,  80.,  81.,  82.,  83.,  83.,         SULW.2296  
     S  83.,  82.,  81.,  80.,  78.,  77.,  75.,  73.,  71.,  68./         SULW.2297  
      DATA (ALP(I, 8,2),I=1,40)/                                           SULW.2298  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  18.,  25.,  32.,         SULW.2299  
     S  39.,  47.,  53.,  59.,  63.,  66.,  67.,  67.,  68.,  69.,         SULW.2300  
     S  70.,  72.,  74.,  75.,  77.,  78.,  79.,  80.,  80.,  80.,         SULW.2301  
     S  80.,  79.,  77.,  76.,  74.,  73.,  71.,  68.,  66.,  63./         SULW.2302  
      DATA (ALP(I, 9,2),I=1,40)/                                           SULW.2303  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  32.,         SULW.2304  
     S  39.,  47.,  53.,  59.,  63.,  65.,  66.,  67.,  67.,  68.,         SULW.2305  
     S  69.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  77.,  76.,         SULW.2306  
     S  76.,  75.,  73.,  72.,  70.,  68.,  66.,  64.,  61.,  58./         SULW.2307  
      DATA (ALP(I,10,2),I=1,40)/                                           SULW.2308  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  31.,         SULW.2309  
     S  39.,  46.,  53.,  58.,  62.,  65.,  66.,  66.,  66.,  67.,         SULW.2310  
     S  68.,  69.,  70.,  71.,  72.,  72.,  73.,  73.,  73.,  72.,         SULW.2311  
     S  72.,  71.,  69.,  67.,  65.,  63.,  61.,  58.,  56.,  53./         SULW.2312  
      DATA (ALP(I,11,2),I=1,40)/                                           SULW.2313  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  31.,         SULW.2314  
     S  39.,  46.,  53.,  58.,  62.,  64.,  65.,  65.,  65.,  65.,         SULW.2315  
     S  66.,  66.,  67.,  67.,  68.,  68.,  69.,  69.,  69.,  68.,         SULW.2316  
     S  67.,  66.,  64.,  62.,  60.,  58.,  56.,  53.,  51.,  48./         SULW.2317  
      DATA (ALP(I,12,2),I=1,40)/                                           SULW.2318  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  31.,         SULW.2319  
     S  38.,  45.,  52.,  57.,  60.,  62.,  63.,  63.,  63.,  62.,         SULW.2320  
     S  63.,  63.,  63.,  63.,  64.,  64.,  64.,  64.,  64.,  63.,         SULW.2321  
     S  62.,  61.,  59.,  57.,  55.,  53.,  51.,  49.,  47.,  44./         SULW.2322  
      DATA (ALP(I,13,2),I=1,40)/                                           SULW.2323  
     S   1.,   1.,   3.,   4.,   6.,   9.,  13.,  18.,  24.,  30.,         SULW.2324  
     S  38.,  45.,  51.,  55.,  59.,  60.,  61.,  60.,  59.,  59.,         SULW.2325  
     S  59.,  59.,  59.,  59.,  59.,  59.,  59.,  59.,  59.,  58.,         SULW.2326  
     S  57.,  56.,  54.,  52.,  50.,  48.,  46.,  45.,  43.,  41./         SULW.2327  
      DATA (ALP(I,14,2),I=1,40)/                                           SULW.2328  
     S   1.,   1.,   2.,   4.,   6.,   9.,  12.,  17.,  23.,  29.,         SULW.2329  
     S  36.,  43.,  49.,  53.,  56.,  57.,  57.,  56.,  55.,  55.,         SULW.2330  
     S  54.,  54.,  54.,  54.,  54.,  55.,  55.,  54.,  54.,  53.,         SULW.2331  
     S  52.,  51.,  50.,  48.,  46.,  44.,  42.,  41.,  39.,  38./         SULW.2332  
      DATA (ALP(I,15,2),I=1,40)/                                           SULW.2333  
     S   1.,   1.,   2.,   4.,   6.,   8.,  12.,  16.,  22.,  28.,         SULW.2334  
     S  35.,  41.,  46.,  50.,  52.,  53.,  53.,  52.,  51.,  50.,         SULW.2335  
     S  49.,  49.,  49.,  49.,  49.,  50.,  50.,  50.,  49.,  49.,         SULW.2336  
     S  48.,  47.,  45.,  44.,  42.,  40.,  39.,  38.,  37.,  36./         SULW.2337  
      DATA (ALP(I,16,2),I=1,40)/                                           SULW.2338  
     S   1.,   1.,   2.,   3.,   5.,   8.,  11.,  15.,  20.,  26.,         SULW.2339  
     S  32.,  37.,  42.,  45.,  47.,  48.,  48.,  47.,  45.,  45.,         SULW.2340  
     S  44.,  44.,  44.,  45.,  45.,  45.,  45.,  45.,  45.,  44.,         SULW.2341  
     S  44.,  42.,  41.,  40.,  39.,  37.,  36.,  35.,  35.,  34./         SULW.2342  
      DATA (ALP(I,17,2),I=1,40)/                                           SULW.2343  
     S   0.,   1.,   2.,   3.,   5.,   7.,  10.,  14.,  18.,  23.,         SULW.2344  
     S  28.,  33.,  37.,  40.,  41.,  42.,  42.,  41.,  40.,  40.,         SULW.2345  
     S  39.,  40.,  40.,  40.,  41.,  41.,  41.,  41.,  41.,  41.,         SULW.2346  
     S  40.,  39.,  38.,  37.,  36.,  35.,  34.,  34.,  34.,  34./         SULW.2347  
      DATA (ALP(I,18,2),I=1,40)/                                           SULW.2348  
     S   0.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,  15.,  19.,         SULW.2349  
     S  24.,  28.,  31.,  33.,  35.,  36.,  36.,  36.,  35.,  35.,         SULW.2350  
     S  35.,  35.,  36.,  37.,  37.,  38.,  38.,  38.,  38.,  37.,         SULW.2351  
     S  37.,  36.,  35.,  34.,  34.,  33.,  33.,  33.,  33.,  33./         SULW.2352  
      DATA (ALP(I,19,2),I=1,40)/                                           SULW.2353  
     S   0.,   1.,   1.,   2.,   3.,   4.,   6.,   9.,  12.,  15.,         SULW.2354  
     S  19.,  22.,  25.,  27.,  29.,  30.,  31.,  31.,  31.,  31.,         SULW.2355  
     S  32.,  32.,  33.,  34.,  34.,  35.,  35.,  35.,  35.,  35.,         SULW.2356  
     S  34.,  34.,  33.,  33.,  32.,  32.,  32.,  32.,  33.,  33./         SULW.2357  
      DATA (ALP(I,20,2),I=1,40)/                                           SULW.2358  
     S   0.,   0.,   1.,   1.,   2.,   3.,   4.,   6.,   8.,  11.,         SULW.2359  
     S  13.,  16.,  19.,  21.,  24.,  25.,  27.,  28.,  28.,  29.,         SULW.2360  
     S  29.,  30.,  31.,  31.,  32.,  32.,  33.,  33.,  33.,  33.,         SULW.2361  
     S  32.,  32.,  32.,  31.,  31.,  32.,  32.,  32.,  32.,  32./         SULW.2362  
      DATA (ALP(I,21,2),I=1,40)/                                           SULW.2363  
     S   0.,   0.,   0.,   1.,   1.,   2.,   3.,   4.,   5.,   7.,         SULW.2364  
     S   9.,  11.,  14.,  16.,  19.,  21.,  24.,  25.,  26.,  27.,         SULW.2365  
     S  28.,  28.,  29.,  29.,  30.,  30.,  31.,  31.,  31.,  31.,         SULW.2366  
     S  31.,  31.,  31.,  31.,  31.,  31.,  32.,  32.,  32.,  32./         SULW.2367  
      DATA (ALP(I,22,2),I=1,40)/                                           SULW.2368  
     S   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,   3.,   4.,         SULW.2369  
     S   6.,   8.,  10.,  12.,  15.,  18.,  21.,  23.,  25.,  26.,         SULW.2370  
     S  26.,  27.,  27.,  28.,  28.,  29.,  29.,  29.,  29.,  30.,         SULW.2371  
     S  30.,  30.,  30.,  30.,  31.,  31.,  32.,  32.,  32.,  31./         SULW.2372  
      DATA (ALP(I,23,2),I=1,40)/                                           SULW.2373  
     S   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   3.,         SULW.2374  
     S   4.,   5.,   7.,   9.,  12.,  15.,  18.,  21.,  23.,  25.,         SULW.2375  
     S  26.,  26.,  26.,  27.,  27.,  27.,  28.,  28.,  28.,  28.,         SULW.2376  
     S  29.,  29.,  30.,  30.,  31.,  32.,  32.,  31.,  31.,  30./         SULW.2377  
      DATA (ALP(I,24,2),I=1,40)/                                           SULW.2378  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,         SULW.2379  
     S   2.,   4.,   5.,   7.,  10.,  13.,  16.,  19.,  21.,  23.,         SULW.2380  
     S  25.,  25.,  25.,  26.,  26.,  26.,  26.,  27.,  27.,  28.,         SULW.2381  
     S  28.,  29.,  30.,  31.,  31.,  31.,  31.,  31.,  30.,  29./         SULW.2382  
      DATA (ALP(I,25,2),I=1,40)/                                           SULW.2383  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,         SULW.2384  
     S   2.,   3.,   4.,   6.,   8.,  11.,  13.,  16.,  19.,  21.,         SULW.2385  
     S  23.,  24.,  25.,  25.,  25.,  25.,  25.,  26.,  26.,  27.,         SULW.2386  
     S  28.,  29.,  30.,  31.,  31.,  31.,  31.,  30.,  29.,  28./         SULW.2387  
      DATA (ALP(I,26,2),I=1,40)/                                           SULW.2388  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,         SULW.2389  
     S   2.,   3.,   4.,   5.,   7.,   9.,  11.,  14.,  16.,  19.,         SULW.2390  
     S  21.,  22.,  23.,  24.,  24.,  24.,  24.,  25.,  26.,  27.,         SULW.2391  
     S  28.,  29.,  30.,  31.,  31.,  30.,  30.,  29.,  28.,  26./         SULW.2392  
      DATA (ALP(I,27,2),I=1,40)/                                           SULW.2393  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,         SULW.2394  
     S   2.,   2.,   3.,   5.,   6.,   8.,  10.,  12.,  14.,  16.,         SULW.2395  
     S  18.,  20.,  21.,  22.,  23.,  23.,  24.,  24.,  25.,  27.,         SULW.2396  
     S  28.,  29.,  30.,  30.,  30.,  29.,  29.,  28.,  26.,  25./         SULW.2397  
      DATA (ALP(I,28,2),I=1,40)/                                           SULW.2398  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,         SULW.2399  
     S   1.,   2.,   3.,   4.,   6.,   7.,   8.,  10.,  11.,  13.,         SULW.2400  
     S  15.,  17.,  19.,  20.,  21.,  22.,  23.,  24.,  26.,  27.,         SULW.2401  
     S  28.,  29.,  29.,  29.,  29.,  28.,  27.,  26.,  25.,  25./         SULW.2402  
      DATA (ALP(I,29,2),I=1,40)/                                           SULW.2403  
     S  -1.,  -1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,         SULW.2404  
     S   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,         SULW.2405  
     S  12.,  14.,  16.,  18.,  20.,  21.,  23.,  25.,  26.,  27.,         SULW.2406  
     S  28.,  28.,  28.,  28.,  28.,  27.,  26.,  25.,  25.,  25./         SULW.2407  
      DATA (ALP(I,30,2),I=1,40)/                                           SULW.2408  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.2409  
     S   1.,   1.,   2.,   3.,   3.,   4.,   5.,   6.,   6.,   7.,         SULW.2410  
     S   9.,  10.,  13.,  15.,  18.,  21.,  23.,  26.,  27.,  28.,         SULW.2411  
     S  28.,  28.,  27.,  27.,  26.,  25.,  24.,  24.,  24.,  25./         SULW.2412  
      DATA (ALP(I,31,2),I=1,40)/                                           SULW.2413  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.2414  
     S   0.,   0.,   1.,   1.,   2.,   2.,   3.,   4.,   4.,   5.,         SULW.2415  
     S   6.,   8.,  10.,  13.,  17.,  20.,  24.,  27.,  28.,  29.,         SULW.2416  
     S  28.,  28.,  26.,  25.,  24.,  23.,  23.,  23.,  24.,  24./         SULW.2417  
C----- 1.,0E6*BET(I,J,2) FOR TDB                                           SULW.2418  
      DATA (BET(I, 1,2),I=1,40)/                                           SULW.2419  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2420  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  15.,         SULW.2421  
     S  17.,  18.,  19.,  20.,  21.,  24.,  26.,  28.,  29.,  29.,         SULW.2422  
     S  29.,  29.,  27.,  26.,  26.,  25.,  26.,  26.,  25.,  23./         SULW.2423  
      DATA (BET(I, 2,2),I=1,40)/                                           SULW.2424  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2425  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  15.,         SULW.2426  
     S  17.,  18.,  19.,  20.,  21.,  24.,  26.,  28.,  29.,  29.,         SULW.2427  
     S  29.,  28.,  27.,  26.,  25.,  25.,  25.,  25.,  24.,  23./         SULW.2428  
      DATA (BET(I, 3,2),I=1,40)/                                           SULW.2429  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2430  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  15.,         SULW.2431  
     S  17.,  18.,  19.,  20.,  21.,  24.,  26.,  28.,  29.,  29.,         SULW.2432  
     S  29.,  28.,  27.,  26.,  25.,  25.,  25.,  24.,  24.,  22./         SULW.2433  
      DATA (BET(I, 4,2),I=1,40)/                                           SULW.2434  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2435  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  15.,         SULW.2436  
     S  17.,  18.,  19.,  20.,  21.,  24.,  26.,  28.,  29.,  29.,         SULW.2437  
     S  29.,  28.,  26.,  25.,  24.,  24.,  24.,  24.,  23.,  21./         SULW.2438  
      DATA (BET(I, 5,2),I=1,40)/                                           SULW.2439  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2440  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  15.,         SULW.2441  
     S  17.,  18.,  19.,  20.,  21.,  24.,  26.,  27.,  28.,  29.,         SULW.2442  
     S  28.,  27.,  26.,  25.,  24.,  23.,  23.,  23.,  22.,  20./         SULW.2443  
      DATA (BET(I, 6,2),I=1,40)/                                           SULW.2444  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2445  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  15.,         SULW.2446  
     S  17.,  18.,  19.,  20.,  21.,  23.,  26.,  27.,  28.,  28.,         SULW.2447  
     S  28.,  26.,  25.,  24.,  23.,  22.,  22.,  22.,  20.,  19./         SULW.2448  
      DATA (BET(I, 7,2),I=1,40)/                                           SULW.2449  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2450  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  15.,         SULW.2451  
     S  17.,  18.,  19.,  20.,  21.,  23.,  25.,  27.,  27.,  27.,         SULW.2452  
     S  27.,  25.,  24.,  23.,  22.,  21.,  21.,  20.,  19.,  17./         SULW.2453  
      DATA (BET(I, 8,2),I=1,40)/                                           SULW.2454  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2455  
     S   3.,   5.,   7.,   8.,   8.,   9.,   9.,  10.,  12.,  15.,         SULW.2456  
     S  17.,  18.,  19.,  20.,  21.,  23.,  25.,  26.,  26.,  26.,         SULW.2457  
     S  26.,  24.,  23.,  21.,  20.,  20.,  19.,  19.,  17.,  15./         SULW.2458  
      DATA (BET(I, 9,2),I=1,40)/                                           SULW.2459  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2460  
     S   3.,   5.,   7.,   8.,   9.,   9.,   9.,  11.,  12.,  15.,         SULW.2461  
     S  17.,  18.,  19.,  19.,  21.,  22.,  24.,  25.,  25.,  25.,         SULW.2462  
     S  24.,  23.,  21.,  20.,  19.,  18.,  18.,  17.,  16.,  14./         SULW.2463  
      DATA (BET(I,10,2),I=1,40)/                                           SULW.2464  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2465  
     S   3.,   5.,   7.,   8.,   9.,   9.,  10.,  11.,  12.,  15.,         SULW.2466  
     S  16.,  18.,  18.,  19.,  20.,  22.,  23.,  24.,  24.,  23.,         SULW.2467  
     S  22.,  21.,  20.,  18.,  17.,  17.,  16.,  15.,  14.,  12./         SULW.2468  
      DATA (BET(I,11,2),I=1,40)/                                           SULW.2469  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2470  
     S   3.,   5.,   7.,   8.,   9.,   9.,  10.,  11.,  12.,  14.,         SULW.2471  
     S  16.,  17.,  18.,  18.,  19.,  20.,  21.,  22.,  22.,  22.,         SULW.2472  
     S  21.,  19.,  18.,  17.,  16.,  15.,  14.,  13.,  12.,  10./         SULW.2473  
      DATA (BET(I,12,2),I=1,40)/                                           SULW.2474  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   1.,         SULW.2475  
     S   3.,   5.,   7.,   8.,   9.,   9.,  10.,  11.,  12.,  14.,         SULW.2476  
     S  16.,  17.,  17.,  17.,  18.,  19.,  20.,  20.,  20.,  20.,         SULW.2477  
     S  19.,  18.,  16.,  15.,  14.,  13.,  12.,  11.,  10.,   9./         SULW.2478  
      DATA (BET(I,13,2),I=1,40)/                                           SULW.2479  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,   1.,         SULW.2480  
     S   3.,   5.,   7.,   8.,   9.,   9.,  10.,  11.,  12.,  14.,         SULW.2481  
     S  15.,  16.,  16.,  16.,  17.,  17.,  18.,  18.,  18.,  18.,         SULW.2482  
     S  17.,  16.,  14.,  13.,  12.,  11.,  11.,  10.,   9.,   7./         SULW.2483  
      DATA (BET(I,14,2),I=1,40)/                                           SULW.2484  
     S   0.,   0.,   0.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   2.,         SULW.2485  
     S   3.,   5.,   7.,   8.,   9.,  10.,  10.,  11.,  12.,  13.,         SULW.2486  
     S  14.,  15.,  15.,  15.,  15.,  16.,  16.,  16.,  16.,  16.,         SULW.2487  
     S  15.,  14.,  13.,  11.,  10.,  10.,   9.,   8.,   7.,   6./         SULW.2488  
      DATA (BET(I,15,2),I=1,40)/                                           SULW.2489  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   2.,         SULW.2490  
     S   4.,   6.,   7.,   9.,   9.,  10.,  10.,  10.,  11.,  12.,         SULW.2491  
     S  13.,  13.,  13.,  13.,  13.,  14.,  14.,  14.,  14.,  14.,         SULW.2492  
     S  13.,  12.,  11.,  10.,   9.,   8.,   7.,   7.,   6.,   4./         SULW.2493  
      DATA (BET(I,16,2),I=1,40)/                                           SULW.2494  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   2.,         SULW.2495  
     S   4.,   6.,   8.,   9.,   9.,   9.,   9.,   9.,  10.,  11.,         SULW.2496  
     S  11.,  12.,  12.,  12.,  12.,  12.,  12.,  12.,  12.,  12.,         SULW.2497  
     S  11.,  10.,   9.,   8.,   7.,   7.,   6.,   5.,   4.,   3./         SULW.2498  
      DATA (BET(I,17,2),I=1,40)/                                           SULW.2499  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   3.,         SULW.2500  
     S   4.,   6.,   8.,   9.,   9.,   9.,   9.,   8.,   9.,   9.,         SULW.2501  
     S  10.,  10.,  10.,  10.,  10.,  10.,  10.,  11.,  10.,  10.,         SULW.2502  
     S   9.,   9.,   8.,   7.,   6.,   6.,   5.,   4.,   3.,   2./         SULW.2503  
      DATA (BET(I,18,2),I=1,40)/                                           SULW.2504  
     S   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   3.,         SULW.2505  
     S   5.,   6.,   7.,   8.,   8.,   8.,   8.,   7.,   7.,   8.,         SULW.2506  
     S   8.,   9.,   9.,   9.,   9.,   9.,   9.,   9.,   9.,   8.,         SULW.2507  
     S   8.,   7.,   7.,   6.,   5.,   4.,   4.,   3.,   1.,   0./         SULW.2508  
      DATA (BET(I,19,2),I=1,40)/                                           SULW.2509  
     S   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   2.,   3.,         SULW.2510  
     S   5.,   6.,   7.,   8.,   8.,   7.,   7.,   6.,   6.,   6.,         SULW.2511  
     S   7.,   7.,   7.,   8.,   8.,   8.,   8.,   8.,   7.,   7.,         SULW.2512  
     S   7.,   6.,   5.,   5.,   4.,   3.,   2.,   1.,   0.,  -1./         SULW.2513  
      DATA (BET(I,20,2),I=1,40)/                                           SULW.2514  
     S   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,   2.,   3.,         SULW.2515  
     S   4.,   5.,   6.,   7.,   7.,   6.,   6.,   5.,   5.,   5.,         SULW.2516  
     S   5.,   6.,   6.,   7.,   7.,   7.,   7.,   7.,   6.,   6.,         SULW.2517  
     S   6.,   5.,   5.,   4.,   3.,   2.,   1.,   0.,  -1.,  -2./         SULW.2518  
      DATA (BET(I,21,2),I=1,40)/                                           SULW.2519  
     S   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,   2.,   3.,         SULW.2520  
     S   4.,   5.,   5.,   6.,   6.,   6.,   5.,   5.,   4.,   4.,         SULW.2521  
     S   4.,   5.,   5.,   6.,   6.,   6.,   6.,   6.,   5.,   5.,         SULW.2522  
     S   5.,   4.,   4.,   3.,   2.,   1.,   0.,  -1.,  -2.,  -3./         SULW.2523  
      DATA (BET(I,22,2),I=1,40)/                                           SULW.2524  
     S   0.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,   2.,         SULW.2525  
     S   3.,   4.,   4.,   5.,   5.,   5.,   5.,   4.,   4.,   3.,         SULW.2526  
     S   4.,   4.,   5.,   5.,   5.,   5.,   5.,   5.,   5.,   4.,         SULW.2527  
     S   4.,   3.,   3.,   2.,   1.,   0.,  -1.,  -2.,  -3.,  -3./         SULW.2528  
      DATA (BET(I,23,2),I=1,40)/                                           SULW.2529  
     S   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,         SULW.2530  
     S   2.,   3.,   3.,   4.,   4.,   5.,   5.,   4.,   4.,   4.,         SULW.2531  
     S   3.,   3.,   4.,   4.,   5.,   5.,   5.,   4.,   4.,   4.,         SULW.2532  
     S   3.,   3.,   2.,   1.,   0.,  -1.,  -2.,  -3.,  -3.,  -4./         SULW.2533  
      DATA (BET(I,24,2),I=1,40)/                                           SULW.2534  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,         SULW.2535  
     S   1.,   2.,   2.,   3.,   3.,   4.,   4.,   5.,   4.,   4.,         SULW.2536  
     S   4.,   3.,   3.,   3.,   4.,   4.,   4.,   4.,   4.,   3.,         SULW.2537  
     S   2.,   2.,   1.,   0.,  -1.,  -2.,  -3.,  -3.,  -4.,  -4./         SULW.2538  
      DATA (BET(I,25,2),I=1,40)/                                           SULW.2539  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,         SULW.2540  
     S   1.,   1.,   1.,   2.,   2.,   3.,   4.,   4.,   5.,   4.,         SULW.2541  
     S   4.,   3.,   3.,   3.,   3.,   3.,   3.,   3.,   3.,   2.,         SULW.2542  
     S   2.,   1.,   0.,  -1.,  -2.,  -3.,  -3.,  -4.,  -4.,  -4./         SULW.2543  
      DATA (BET(I,26,2),I=1,40)/                                           SULW.2544  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2545  
     S   0.,   0.,   1.,   1.,   2.,   2.,   3.,   4.,   4.,   5.,         SULW.2546  
     S   4.,   4.,   3.,   2.,   2.,   2.,   2.,   2.,   2.,   1.,         SULW.2547  
     S   1.,   0.,  -1.,  -2.,  -3.,  -3.,  -4.,  -4.,  -4.,  -3./         SULW.2548  
      DATA (BET(I,27,2),I=1,40)/                                           SULW.2549  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2550  
     S   0.,   0.,   0.,   0.,   1.,   1.,   2.,   3.,   4.,   4.,         SULW.2551  
     S   4.,   4.,   4.,   3.,   2.,   2.,   1.,   1.,   1.,   0.,         SULW.2552  
     S   0.,  -1.,  -2.,  -2.,  -3.,  -4.,  -4.,  -4.,  -3.,  -3./         SULW.2553  
      DATA (BET(I,28,2),I=1,40)/                                           SULW.2554  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2555  
     S   0.,   0.,   0.,   0.,   0.,   1.,   2.,   2.,   3.,   4.,         SULW.2556  
     S   4.,   4.,   4.,   3.,   2.,   1.,   1.,   0.,  -1.,  -1.,         SULW.2557  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -3.,  -3.,  -2./         SULW.2558  
      DATA (BET(I,29,2),I=1,40)/                                           SULW.2559  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2560  
     S   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   2.,   3.,         SULW.2561  
     S   4.,   4.,   4.,   3.,   2.,   1.,   0.,  -1.,  -2.,  -3.,         SULW.2562  
     S  -3.,  -3.,  -3.,  -3.,  -3.,  -3.,  -3.,  -2.,  -1.,  -1./         SULW.2563  
      DATA (BET(I,30,2),I=1,40)/                                           SULW.2564  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2565  
     S   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,   2.,         SULW.2566  
     S   3.,   3.,   3.,   2.,   2.,   1.,  -1.,  -2.,  -3.,  -4.,         SULW.2567  
     S  -5.,  -5.,  -4.,  -4.,  -3.,  -3.,  -2.,  -1.,   0.,   0./         SULW.2568  
      DATA (BET(I,31,2),I=1,40)/                                           SULW.2569  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.2570  
     S  -1.,  -1.,  -1.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,         SULW.2571  
     S   1.,   1.,   1.,   1.,   0.,  -1.,  -2.,  -3.,  -4.,  -5.,         SULW.2572  
     S  -6.,  -6.,  -6.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   0./         SULW.2573  
C                                                                          SULW.2574  
C-----  -10E+2*LN(1.-TB)    (O3 9.6 micron band)                           SULW.2575  
      DATA (TBO3(I, 1),I=1,38)/                                            SULW.2576  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2577  
     S1037.2, 987.2, 937.9, 889.8, 840.8, 791.9, 743.8, 696.8, 651.1,      SULW.2578  
     S 606.8, 564.8, 525.5, 489.4, 457.0, 428.0, 401.7, 377.3, 353.9,      SULW.2579  
     S 331.2, 308.8, 286.8, 265.4, 244.7, 225.2, 207.1, 190.5, 175.6,      SULW.2580  
     S 162.2, 150.4/                                                       SULW.2581  
      DATA (TBO3(I, 2),I=1,38)/                                            SULW.2582  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2583  
     S1037.2, 987.2, 937.9, 889.8, 840.8, 791.9, 743.8, 696.8, 651.1,      SULW.2584  
     S 606.8, 564.8, 525.5, 489.4, 457.0, 428.0, 401.7, 377.3, 353.9,      SULW.2585  
     S 331.2, 308.8, 286.8, 265.4, 244.7, 225.2, 207.0, 190.5, 175.5,      SULW.2586  
     S 162.2, 150.3/                                                       SULW.2587  
      DATA (TBO3(I, 3),I=1,38)/                                            SULW.2588  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2589  
     S1037.2, 987.2, 937.9, 889.8, 840.8, 791.9, 743.8, 696.8, 651.1,      SULW.2590  
     S 606.8, 564.8, 525.5, 489.4, 457.0, 428.0, 401.7, 377.3, 353.9,      SULW.2591  
     S 331.2, 308.8, 286.8, 265.4, 244.7, 225.2, 207.0, 190.5, 175.5,      SULW.2592  
     S 162.2, 150.3/                                                       SULW.2593  
      DATA (TBO3(I, 4),I=1,38)/                                            SULW.2594  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2595  
     S1037.2, 987.2, 937.9, 889.8, 840.8, 791.9, 743.8, 696.8, 651.1,      SULW.2596  
     S 606.8, 564.8, 525.5, 489.4, 457.0, 428.0, 401.7, 377.3, 353.9,      SULW.2597  
     S 331.2, 308.8, 286.8, 265.4, 244.7, 225.1, 207.0, 190.4, 175.4,      SULW.2598  
     S 162.1, 150.2/                                                       SULW.2599  
      DATA (TBO3(I, 5),I=1,38)/                                            SULW.2600  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2601  
     S1037.2, 987.2, 937.9, 889.8, 840.8, 791.9, 743.8, 696.9, 651.1,      SULW.2602  
     S 606.8, 564.8, 525.5, 489.4, 457.0, 428.0, 401.7, 377.2, 353.9,      SULW.2603  
     S 331.2, 308.8, 286.8, 265.3, 244.6, 225.1, 206.9, 190.3, 175.3,      SULW.2604  
     S 161.9, 150.0/                                                       SULW.2605  
      DATA (TBO3(I, 6),I=1,38)/                                            SULW.2606  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2607  
     S1037.2, 987.2, 937.9, 889.7, 840.8, 791.9, 743.8, 696.8, 651.1,      SULW.2608  
     S 606.8, 564.8, 525.5, 489.4, 457.0, 427.9, 401.7, 377.2, 353.9,      SULW.2609  
     S 331.1, 308.7, 286.7, 265.3, 244.6, 225.0, 206.8, 190.2, 175.2,      SULW.2610  
     S 161.7, 149.7/                                                       SULW.2611  
      DATA (TBO3(I, 7),I=1,38)/                                            SULW.2612  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2613  
     S1037.2, 987.2, 937.9, 889.8, 840.7, 792.0, 743.8, 696.8, 651.1,      SULW.2614  
     S 606.8, 564.8, 525.5, 489.4, 457.0, 427.9, 401.6, 377.2, 353.8,      SULW.2615  
     S 331.1, 308.7, 286.7, 265.2, 244.5, 224.9, 206.6, 190.0, 174.9,      SULW.2616  
     S 161.3, 149.2/                                                       SULW.2617  
      DATA (TBO3(I, 8),I=1,38)/                                            SULW.2618  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2619  
     S1037.2, 987.2, 937.9, 889.8, 840.8, 791.9, 743.8, 696.8, 651.1,      SULW.2620  
     S 606.8, 564.8, 525.4, 489.4, 456.9, 427.9, 401.6, 377.1, 353.8,      SULW.2621  
     S 331.0, 308.6, 286.6, 265.0, 244.3, 224.6, 206.4, 189.6, 174.4,      SULW.2622  
     S 160.7, 148.4/                                                       SULW.2623  
      DATA (TBO3(I, 9),I=1,38)/                                            SULW.2624  
     S1487.4,1437.4,1387.4,1337.4,1287.4,1237.4,1187.4,1137.4,1087.4,      SULW.2625  
     S1037.4, 987.4, 937.9, 889.8, 840.8, 792.0, 743.8, 696.9, 651.1,      SULW.2626  
     S 606.8, 564.8, 525.4, 489.4, 456.9, 427.8, 401.5, 377.0, 353.7,      SULW.2627  
     S 330.9, 308.4, 286.4, 264.8, 244.0, 224.3, 205.9, 189.0, 173.7,      SULW.2628  
     S 159.8, 147.2/                                                       SULW.2629  
      DATA (TBO3(I,10),I=1,38)/                                            SULW.2630  
     S1487.4,1437.4,1387.4,1337.4,1287.4,1237.4,1187.4,1137.4,1087.4,      SULW.2631  
     S1037.4, 987.4, 937.9, 889.6, 840.7, 792.0, 743.7, 696.8, 651.1,      SULW.2632  
     S 606.8, 564.7, 525.4, 489.3, 456.8, 427.7, 401.4, 376.9, 353.5,      SULW.2633  
     S 330.6, 308.2, 286.0, 264.4, 243.5, 223.7, 205.2, 188.1, 172.5,      SULW.2634  
     S 158.3, 145.4/                                                       SULW.2635  
      DATA (TBO3(I,11),I=1,38)/                                            SULW.2636  
     S1487.6,1437.6,1387.6,1337.6,1287.6,1237.6,1187.6,1137.6,1087.6,      SULW.2637  
     S1037.6, 987.6, 937.9, 889.7, 840.8, 792.0, 743.8, 696.8, 651.1,      SULW.2638  
     S 606.8, 564.7, 525.3, 489.2, 456.7, 427.6, 401.2, 376.7, 353.2,      SULW.2639  
     S 330.3, 307.7, 285.5, 263.8, 242.8, 222.8, 204.0, 186.7, 170.8,      SULW.2640  
     S 156.2, 142.7/                                                       SULW.2641  
      DATA (TBO3(I,12),I=1,38)/                                            SULW.2642  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2643  
     S1037.2, 987.2, 937.9, 889.6, 840.8, 791.9, 743.8, 696.8, 651.0,      SULW.2644  
     S 606.7, 564.6, 525.2, 489.1, 456.5, 427.3, 400.9, 376.3, 352.7,      SULW.2645  
     S 329.7, 307.0, 284.7, 262.8, 241.5, 221.3, 202.2, 184.5, 168.2,      SULW.2646  
     S 153.0, 139.0/                                                       SULW.2647  
      DATA (TBO3(I,13),I=1,38)/                                            SULW.2648  
     S1487.0,1437.0,1387.0,1337.0,1287.0,1237.0,1187.0,1137.0,1087.0,      SULW.2649  
     S1037.0, 987.0, 938.1, 889.6, 840.8, 791.8, 743.9, 696.8, 651.0,      SULW.2650  
     S 606.7, 564.5, 525.0, 488.9, 456.2, 426.9, 400.4, 375.7, 352.0,      SULW.2651  
     S 328.8, 305.9, 283.4, 261.2, 239.6, 219.0, 199.5, 181.3, 164.4,      SULW.2652  
     S 148.7, 134.1/                                                       SULW.2653  
      DATA (TBO3(I,14),I=1,38)/                                            SULW.2654  
     S1487.4,1437.4,1387.4,1337.4,1287.4,1237.4,1187.4,1137.4,1087.4,      SULW.2655  
     S1037.4, 987.4, 938.5, 889.7, 840.6, 791.9, 743.8, 696.7, 650.9,      SULW.2656  
     S 606.5, 564.3, 524.8, 488.5, 455.7, 426.3, 399.6, 374.6, 350.7,      SULW.2657  
     S 327.3, 304.2, 281.2, 258.7, 236.7, 215.6, 195.6, 176.8, 159.2,      SULW.2658  
     S 142.9, 127.8/                                                       SULW.2659  
      DATA (TBO3(I,15),I=1,38)/                                            SULW.2660  
     S1487.8,1437.8,1387.8,1337.8,1287.8,1237.8,1187.8,1137.8,1087.8,      SULW.2661  
     S1037.8, 987.8, 938.4, 890.1, 840.7, 791.9, 743.8, 696.7, 650.8,      SULW.2662  
     S 606.3, 564.0, 524.4, 487.9, 454.9, 425.3, 398.3, 373.0, 348.8,      SULW.2663  
     S 325.0, 301.4, 278.0, 254.9, 232.4, 210.7, 190.1, 170.6, 152.5,      SULW.2664  
     S 135.7, 120.0/                                                       SULW.2665  
      DATA (TBO3(I,16),I=1,38)/                                            SULW.2666  
     S1487.8,1437.8,1387.8,1337.8,1287.8,1237.8,1187.8,1137.8,1087.8,      SULW.2667  
     S1037.8, 987.8, 938.9, 890.2, 840.7, 791.9, 743.8, 696.5, 650.6,      SULW.2668  
     S 606.0, 563.5, 523.6, 486.9, 453.6, 423.6, 396.2, 370.5, 345.8,      SULW.2669  
     S 321.4, 297.3, 273.3, 249.5, 226.3, 204.0, 182.7, 162.8, 144.2,      SULW.2670  
     S 126.9, 111.0/                                                       SULW.2671  
      DATA (TBO3(I,17),I=1,38)/                                            SULW.2672  
     S1488.2,1438.2,1388.2,1338.2,1288.2,1238.2,1188.2,1138.2,1088.2,      SULW.2673  
     S1038.2, 988.2, 939.4, 890.4, 841.1, 791.8, 743.7, 696.4, 650.2,      SULW.2674  
     S 605.6, 562.8, 522.6, 485.5, 451.7, 421.1, 393.0, 366.7, 341.2,      SULW.2675  
     S 316.2, 291.3, 266.5, 242.1, 218.2, 195.3, 173.6, 153.2, 134.3,      SULW.2676  
     S 116.9, 101.0/                                                       SULW.2677  
      DATA (TBO3(I,18),I=1,38)/                                            SULW.2678  
     S1489.0,1439.0,1389.0,1339.0,1289.0,1239.0,1189.0,1139.0,1089.0,      SULW.2679  
     S1039.0, 989.0, 938.9, 890.7, 840.6, 791.2, 743.4, 696.2, 649.8,      SULW.2680  
     S 604.8, 561.7, 521.0, 483.2, 448.7, 417.2, 388.3, 361.1, 334.7,      SULW.2681  
     S 308.8, 283.1, 257.5, 232.4, 208.0, 184.7, 162.6, 142.1, 123.1,      SULW.2682  
     S 105.8,  90.2/                                                       SULW.2683  
      DATA (TBO3(I,19),I=1,38)/                                            SULW.2684  
     S1489.0,1439.0,1389.0,1339.0,1289.0,1239.0,1189.0,1139.0,1089.0,      SULW.2685  
     S1039.0, 989.0, 938.9, 890.0, 839.6, 791.3, 743.3, 695.8, 649.1,      SULW.2686  
     S 603.7, 560.1, 518.7, 480.1, 444.4, 411.8, 381.7, 353.3, 325.9,      SULW.2687  
     S 299.0, 272.5, 246.3, 220.6, 195.9, 172.3, 150.2, 129.8, 111.1,      SULW.2688  
     S  94.2,  79.3/                                                       SULW.2689  
      DATA (TBO3(I,20),I=1,38)/                                            SULW.2690  
     S1489.0,1439.0,1389.0,1339.0,1289.0,1239.0,1189.0,1139.0,1089.0,      SULW.2691  
     S1039.0, 989.0, 938.6, 888.9, 839.6, 791.3, 743.2, 695.5, 648.2,      SULW.2692  
     S 602.4, 557.9, 515.6, 475.7, 438.7, 404.6, 373.0, 343.3, 314.7,      SULW.2693  
     S 286.9, 259.6, 233.0, 207.1, 182.3, 158.8, 136.9, 116.8,  98.7,      SULW.2694  
     S  82.7,  68.7/                                                       SULW.2695  
      DATA (TBO3(I,21),I=1,38)/                                            SULW.2696  
     S1487.2,1437.2,1387.2,1337.2,1287.2,1237.2,1187.2,1137.2,1087.2,      SULW.2697  
     S1037.2, 987.2, 937.8, 888.6, 840.0, 791.6, 742.9, 694.5, 647.2,      SULW.2698  
     S 600.5, 555.3, 511.7, 470.4, 431.8, 395.9, 362.5, 331.3, 301.6,      SULW.2699  
     S 272.9, 245.2, 218.3, 192.4, 167.7, 144.6, 123.2, 103.9,  86.7,      SULW.2700  
     S  71.7,  58.9/                                                       SULW.2701  
      DATA (TBO3(I,22),I=1,38)/                                            SULW.2702  
     S1486.6,1436.6,1386.6,1336.6,1286.6,1236.6,1186.6,1136.6,1086.6,      SULW.2703  
     S1036.6, 986.6, 937.6, 889.5, 840.2, 791.5, 742.1, 694.1, 645.8,      SULW.2704  
     S 598.5, 552.3, 507.5, 464.7, 424.2, 386.3, 351.0, 318.2, 287.3,      SULW.2705  
     S 257.9, 229.8, 202.9, 177.2, 153.0, 130.5, 109.9,  91.6,  75.5,      SULW.2706  
     S  61.8,  50.3/                                                       SULW.2707  
      DATA (TBO3(I,23),I=1,38)/                                            SULW.2708  
     S1485.9,1435.9,1385.9,1335.9,1285.9,1235.9,1185.9,1135.9,1085.9,      SULW.2709  
     S1035.9, 985.9, 937.8, 888.5, 840.6, 790.8, 742.4, 693.2, 644.4,      SULW.2710  
     S 596.7, 549.5, 503.6, 459.2, 416.8, 376.9, 339.6, 305.0, 272.8,      SULW.2711  
     S 242.6, 214.3, 187.5, 162.2, 138.7, 117.1,  97.6,  80.4,  65.7,      SULW.2712  
     S  53.3,  43.0/                                                       SULW.2713  
      DATA (TBO3(I,24),I=1,38)/                                            SULW.2714  
     S1484.1,1434.1,1384.1,1334.1,1284.1,1234.1,1184.1,1134.1,1084.1,      SULW.2715  
     S1034.1, 984.1, 937.9, 887.8, 839.6, 791.1, 741.9, 692.4, 643.2,      SULW.2716  
     S 594.9, 547.1, 500.2, 454.5, 410.6, 368.7, 329.4, 292.9, 259.2,      SULW.2717  
     S 228.1, 199.4, 172.7, 148.1, 125.4, 104.9,  86.7,  70.9,  57.5,      SULW.2718  
     S  46.3,  37.1/                                                       SULW.2719  
      DATA (TBO3(I,25),I=1,38)/                                            SULW.2720  
     S1482.1,1432.1,1382.1,1332.1,1282.1,1232.1,1182.1,1132.1,1082.1,      SULW.2721  
     S1032.1, 982.1, 937.4, 888.7, 840.2, 790.9, 741.8, 692.0, 642.4,      SULW.2722  
     S 593.7, 545.3, 497.6, 451.0, 405.7, 362.3, 321.1, 282.7, 247.3,      SULW.2723  
     S 215.0, 185.7, 159.1, 135.1, 113.4,  94.2,  77.4,  63.0,  50.9,      SULW.2724  
     S  40.8,  32.2/                                                       SULW.2725  
      DATA (TBO3(I,26),I=1,38)/                                            SULW.2726  
     S1483.8,1433.8,1383.8,1333.8,1283.8,1233.8,1183.8,1133.8,1083.8,      SULW.2727  
     S1033.8, 983.8, 936.5, 890.0, 840.4, 791.2, 741.8, 691.7, 642.0,      SULW.2728  
     S 592.8, 544.0, 495.9, 448.5, 402.3, 357.6, 314.8, 274.7, 237.6,      SULW.2729  
     S 204.0, 173.8, 147.1, 123.6, 103.0,  85.2,  69.9,  56.9,  46.0,      SULW.2730  
     S  36.6,  28.5/                                                       SULW.2731  
      DATA (TBO3(I,27),I=1,38)/                                            SULW.2732  
     S1482.3,1432.3,1382.3,1332.3,1282.3,1232.3,1182.3,1132.3,1082.3,      SULW.2733  
     S1032.3, 982.3, 935.2, 889.5, 841.6, 792.1, 741.2, 691.5, 641.6,      SULW.2734  
     S 592.3, 543.2, 494.7, 446.8, 399.9, 354.2, 310.4, 268.9, 230.3,      SULW.2735  
     S 195.2, 164.1, 137.0, 113.9,  94.3,  77.8,  63.9,  52.2,  42.2,      SULW.2736  
     S  33.4,  25.5/                                                       SULW.2737  
      DATA (TBO3(I,28),I=1,38)/                                            SULW.2738  
     S1482.8,1432.8,1382.8,1332.8,1282.8,1232.8,1182.8,1132.8,1082.8,      SULW.2739  
     S1032.8, 982.8, 935.7, 889.2, 842.7, 791.9, 742.1, 691.9, 641.4,      SULW.2740  
     S 591.7, 542.7, 493.9, 445.7, 398.4, 352.1, 307.5, 264.9, 225.1,      SULW.2741  
     S 188.9, 156.8, 129.2, 106.3,  87.5,  72.2,  59.6,  49.0,  39.7,      SULW.2742  
     S  31.2,  23.5/                                                       SULW.2743  
      DATA (TBO3(I,29),I=1,38)/                                            SULW.2744  
     S1483.4,1433.4,1383.4,1333.4,1283.4,1233.4,1183.4,1133.4,1083.4,      SULW.2745  
     S1033.4, 983.4, 935.7, 889.2, 843.3, 791.2, 742.1, 691.3, 641.3,      SULW.2746  
     S 591.6, 542.3, 493.5, 445.0, 397.3, 350.7, 305.5, 262.3, 221.6,      SULW.2747  
     S 184.4, 151.5, 123.5, 100.5,  82.4,  68.0,  56.5,  46.6,  37.7,      SULW.2748  
     S  29.4,  21.7/                                                       SULW.2749  
      DATA (TBO3(I,30),I=1,38)/                                            SULW.2750  
     S1484.9,1434.9,1384.9,1334.9,1284.9,1234.9,1184.9,1134.9,1084.9,      SULW.2751  
     S1034.9, 984.9, 938.5, 889.3, 842.1, 791.7, 741.8, 691.4, 641.4,      SULW.2752  
     S 591.9, 542.4, 493.4, 444.7, 396.9, 350.1, 304.5, 260.8, 219.7,      SULW.2753  
     S 181.9, 148.3, 119.9,  96.9,  79.2,  65.6,  54.7,  45.3,  36.6,      SULW.2754  
     S  28.4,  20.8/                                                       SULW.2755  
      DATA (TBO3(I,31),I=1,38)/                                            SULW.2756  
     S1486.6,1436.6,1386.6,1336.6,1286.6,1236.6,1186.6,1136.6,1086.6,      SULW.2757  
     S1036.6, 986.6, 938.5, 890.1, 840.9, 792.3, 741.0, 690.5, 641.6,      SULW.2758  
     S 591.7, 542.2, 493.1, 444.4, 396.4, 349.5, 303.7, 259.8, 218.3,      SULW.2759  
     S 180.1, 146.2, 117.4,  94.4,  76.9,  63.7,  53.2,  43.9,  35.4,      SULW.2760  
     S  27.2,  19.6/                                                       SULW.2761  
C----- 1.,0E4*AO3(I,J) FOR TB                                              SULW.2762  
      DATA (AO3(I, 1),I=1,38)/                                             SULW.2763  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2764  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  11.,         SULW.2765  
     S  15.,  21.,  27.,  33.,  39.,  45.,  49.,  53.,  57.,  59.,         SULW.2766  
     S  60.,  60.,  60.,  58.,  56.,  54.,  52.,  49./                     SULW.2767  
      DATA (AO3(I, 2),I=1,38)/                                             SULW.2768  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2769  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  11.,         SULW.2770  
     S  15.,  21.,  27.,  33.,  39.,  45.,  49.,  53.,  57.,  59.,         SULW.2771  
     S  60.,  60.,  60.,  58.,  56.,  54.,  52.,  49./                     SULW.2772  
      DATA (AO3(I, 3),I=1,38)/                                             SULW.2773  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2774  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  11.,         SULW.2775  
     S  15.,  21.,  27.,  33.,  39.,  45.,  49.,  53.,  57.,  59.,         SULW.2776  
     S  60.,  60.,  60.,  58.,  56.,  54.,  52.,  49./                     SULW.2777  
      DATA (AO3(I, 4),I=1,38)/                                             SULW.2778  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2779  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  11.,         SULW.2780  
     S  15.,  21.,  27.,  33.,  39.,  45.,  49.,  53.,  57.,  59.,         SULW.2781  
     S  60.,  60.,  60.,  58.,  56.,  54.,  52.,  49./                     SULW.2782  
      DATA (AO3(I, 5),I=1,38)/                                             SULW.2783  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2784  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  11.,         SULW.2785  
     S  15.,  21.,  27.,  33.,  39.,  45.,  49.,  53.,  57.,  59.,         SULW.2786  
     S  60.,  60.,  59.,  58.,  56.,  54.,  52.,  49./                     SULW.2787  
      DATA (AO3(I, 6),I=1,38)/                                             SULW.2788  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2789  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  11.,         SULW.2790  
     S  15.,  21.,  27.,  33.,  39.,  45.,  49.,  53.,  57.,  59.,         SULW.2791  
     S  60.,  60.,  59.,  58.,  56.,  54.,  51.,  49./                     SULW.2792  
      DATA (AO3(I, 7),I=1,38)/                                             SULW.2793  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2794  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  11.,         SULW.2795  
     S  15.,  21.,  27.,  33.,  39.,  45.,  49.,  53.,  56.,  59.,         SULW.2796  
     S  60.,  60.,  59.,  58.,  56.,  53.,  51.,  48./                     SULW.2797  
      DATA (AO3(I, 8),I=1,38)/                                             SULW.2798  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2799  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  10.,         SULW.2800  
     S  15.,  21.,  27.,  33.,  39.,  45.,  49.,  53.,  56.,  59.,         SULW.2801  
     S  60.,  60.,  59.,  57.,  55.,  53.,  50.,  47./                     SULW.2802  
      DATA (AO3(I, 9),I=1,38)/                                             SULW.2803  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2804  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  10.,         SULW.2805  
     S  15.,  21.,  27.,  33.,  39.,  44.,  49.,  53.,  56.,  58.,         SULW.2806  
     S  59.,  59.,  59.,  57.,  55.,  52.,  49.,  46./                     SULW.2807  
      DATA (AO3(I,10),I=1,38)/                                             SULW.2808  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2809  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  10.,         SULW.2810  
     S  15.,  21.,  27.,  33.,  39.,  44.,  49.,  53.,  56.,  58.,         SULW.2811  
     S  59.,  59.,  58.,  56.,  54.,  51.,  48.,  44./                     SULW.2812  
      DATA (AO3(I,11),I=1,38)/                                             SULW.2813  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2814  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  10.,         SULW.2815  
     S  15.,  21.,  27.,  33.,  39.,  44.,  49.,  52.,  55.,  57.,         SULW.2816  
     S  58.,  58.,  57.,  55.,  52.,  49.,  46.,  42./                     SULW.2817  
      DATA (AO3(I,12),I=1,38)/                                             SULW.2818  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2819  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   7.,  10.,         SULW.2820  
     S  15.,  21.,  27.,  33.,  39.,  44.,  48.,  52.,  55.,  57.,         SULW.2821  
     S  57.,  57.,  55.,  53.,  50.,  47.,  44.,  40./                     SULW.2822  
      DATA (AO3(I,13),I=1,38)/                                             SULW.2823  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2824  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   6.,  10.,         SULW.2825  
     S  15.,  20.,  26.,  33.,  38.,  43.,  47.,  51.,  54.,  55.,         SULW.2826  
     S  56.,  55.,  53.,  51.,  48.,  44.,  41.,  37./                     SULW.2827  
      DATA (AO3(I,14),I=1,38)/                                             SULW.2828  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2829  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   6.,  10.,         SULW.2830  
     S  15.,  20.,  26.,  32.,  37.,  42.,  46.,  50.,  52.,  53.,         SULW.2831  
     S  53.,  52.,  50.,  48.,  44.,  41.,  37.,  33./                     SULW.2832  
      DATA (AO3(I,15),I=1,38)/                                             SULW.2833  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2834  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   4.,   6.,  10.,         SULW.2835  
     S  14.,  20.,  25.,  31.,  36.,  41.,  45.,  48.,  49.,  50.,         SULW.2836  
     S  50.,  49.,  47.,  44.,  41.,  37.,  34.,  30./                     SULW.2837  
      DATA (AO3(I,16),I=1,38)/                                             SULW.2838  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2839  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   3.,   6.,   9.,         SULW.2840  
     S  14.,  19.,  24.,  30.,  34.,  39.,  42.,  45.,  46.,  47.,         SULW.2841  
     S  46.,  44.,  42.,  39.,  36.,  33.,  30.,  27./                     SULW.2842  
      DATA (AO3(I,17),I=1,38)/                                             SULW.2843  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2844  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   3.,   5.,   9.,         SULW.2845  
     S  13.,  17.,  22.,  27.,  32.,  36.,  38.,  40.,  42.,  42.,         SULW.2846  
     S  41.,  40.,  37.,  35.,  32.,  30.,  27.,  24./                     SULW.2847  
      DATA (AO3(I,18),I=1,38)/                                             SULW.2848  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2849  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   3.,   5.,   8.,         SULW.2850  
     S  11.,  16.,  20.,  25.,  28.,  32.,  34.,  36.,  36.,  36.,         SULW.2851  
     S  36.,  35.,  33.,  31.,  29.,  26.,  24.,  22./                     SULW.2852  
      DATA (AO3(I,19),I=1,38)/                                             SULW.2853  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2854  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   2.,   4.,   6.,         SULW.2855  
     S  10.,  13.,  17.,  21.,  24.,  27.,  29.,  30.,  31.,  31.,         SULW.2856  
     S  31.,  30.,  29.,  27.,  26.,  24.,  22.,  20./                     SULW.2857  
      DATA (AO3(I,20),I=1,38)/                                             SULW.2858  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2859  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   2.,   3.,   5.,         SULW.2860  
     S   7.,  10.,  13.,  17.,  19.,  22.,  23.,  25.,  25.,  26.,         SULW.2861  
     S  26.,  26.,  25.,  24.,  23.,  22.,  20.,  19./                     SULW.2862  
      DATA (AO3(I,21),I=1,38)/                                             SULW.2863  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2864  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   2.,   4.,         SULW.2865  
     S   5.,   7.,  10.,  12.,  15.,  17.,  18.,  20.,  21.,  22.,         SULW.2866  
     S  23.,  23.,  23.,  22.,  22.,  21.,  19.,  18./                     SULW.2867  
      DATA (AO3(I,22),I=1,38)/                                             SULW.2868  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2869  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   2.,   2.,         SULW.2870  
     S   4.,   5.,   7.,   9.,  11.,  13.,  14.,  16.,  17.,  19.,         SULW.2871  
     S  20.,  21.,  21.,  21.,  21.,  20.,  19.,  18./                     SULW.2872  
      DATA (AO3(I,23),I=1,38)/                                             SULW.2873  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2874  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   2.,         SULW.2875  
     S   2.,   3.,   4.,   6.,   8.,   9.,  11.,  13.,  15.,  17.,         SULW.2876  
     S  18.,  19.,  20.,  20.,  20.,  19.,  19.,  18./                     SULW.2877  
      DATA (AO3(I,24),I=1,38)/                                             SULW.2878  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2879  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,         SULW.2880  
     S   1.,   2.,   3.,   4.,   6.,   7.,   9.,  11.,  13.,  15.,         SULW.2881  
     S  16.,  18.,  19.,  20.,  20.,  19.,  19.,  17./                     SULW.2882  
      DATA (AO3(I,25),I=1,38)/                                             SULW.2883  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2884  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,         SULW.2885  
     S   1.,   2.,   2.,   3.,   4.,   6.,   7.,   9.,  11.,  13.,         SULW.2886  
     S  15.,  17.,  18.,  19.,  20.,  19.,  18.,  17./                     SULW.2887  
      DATA (AO3(I,26),I=1,38)/                                             SULW.2888  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2889  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2890  
     S   1.,   1.,   2.,   2.,   3.,   5.,   6.,   8.,  10.,  12.,         SULW.2891  
     S  14.,  16.,  18.,  19.,  19.,  19.,  18.,  17./                     SULW.2892  
      DATA (AO3(I,27),I=1,38)/                                             SULW.2893  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2894  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2895  
     S   1.,   1.,   1.,   2.,   3.,   4.,   5.,   7.,   9.,  11.,         SULW.2896  
     S  14.,  16.,  17.,  19.,  19.,  19.,  18.,  17./                     SULW.2897  
      DATA (AO3(I,28),I=1,38)/                                             SULW.2898  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2899  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2900  
     S   0.,   1.,   1.,   2.,   3.,   4.,   5.,   7.,   9.,  11.,         SULW.2901  
     S  13.,  15.,  17.,  18.,  19.,  19.,  18.,  17./                     SULW.2902  
      DATA (AO3(I,29),I=1,38)/                                             SULW.2903  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2904  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2905  
     S   0.,   1.,   1.,   2.,   2.,   3.,   5.,   6.,   8.,  11.,         SULW.2906  
     S  13.,  15.,  17.,  18.,  19.,  19.,  18.,  16./                     SULW.2907  
      DATA (AO3(I,30),I=1,38)/                                             SULW.2908  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2909  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2910  
     S   0.,   1.,   1.,   2.,   2.,   3.,   4.,   6.,   8.,  11.,         SULW.2911  
     S  13.,  16.,  18.,  19.,  19.,  19.,  18.,  16./                     SULW.2912  
      DATA (AO3(I,31),I=1,38)/                                             SULW.2913  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2914  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2915  
     S   1.,   1.,   1.,   2.,   2.,   3.,   4.,   6.,   8.,  11.,         SULW.2916  
     S  13.,  16.,  18.,  18.,  19.,  18.,  17.,  16./                     SULW.2917  
C----- 1.,0E6*BO3(I,J) FOR TB                                              SULW.2918  
      DATA (BO3(I, 1),I=1,38)/                                             SULW.2919  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2920  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -3.,  -3.,         SULW.2921  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2922  
     S   5.,   4.,   2.,  -1.,  -3.,  -5.,  -7.,  -8./                     SULW.2923  
      DATA (BO3(I, 2),I=1,38)/                                             SULW.2924  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2925  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -3.,  -3.,         SULW.2926  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2927  
     S   5.,   4.,   2.,  -1.,  -3.,  -5.,  -7.,  -8./                     SULW.2928  
      DATA (BO3(I, 3),I=1,38)/                                             SULW.2929  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2930  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -3.,  -3.,         SULW.2931  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2932  
     S   5.,   4.,   2.,   0.,  -3.,  -5.,  -7.,  -8./                     SULW.2933  
      DATA (BO3(I, 4),I=1,38)/                                             SULW.2934  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2935  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -3.,  -3.,         SULW.2936  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2937  
     S   5.,   4.,   2.,   0.,  -3.,  -5.,  -7.,  -8./                     SULW.2938  
      DATA (BO3(I, 5),I=1,38)/                                             SULW.2939  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2940  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -3.,  -3.,         SULW.2941  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2942  
     S   5.,   4.,   2.,   0.,  -3.,  -5.,  -7.,  -8./                     SULW.2943  
      DATA (BO3(I, 6),I=1,38)/                                             SULW.2944  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2945  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -3.,  -3.,         SULW.2946  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2947  
     S   6.,   4.,   2.,   0.,  -3.,  -5.,  -7.,  -8./                     SULW.2948  
      DATA (BO3(I, 7),I=1,38)/                                             SULW.2949  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2950  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -3.,  -3.,         SULW.2951  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2952  
     S   6.,   4.,   2.,   0.,  -3.,  -5.,  -6.,  -8./                     SULW.2953  
      DATA (BO3(I, 8),I=1,38)/                                             SULW.2954  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2955  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -2.,  -3.,         SULW.2956  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2957  
     S   6.,   4.,   2.,   0.,  -3.,  -5.,  -6.,  -8./                     SULW.2958  
      DATA (BO3(I, 9),I=1,38)/                                             SULW.2959  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2960  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -2.,  -3.,         SULW.2961  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2962  
     S   6.,   4.,   2.,   0.,  -2.,  -4.,  -6.,  -8./                     SULW.2963  
      DATA (BO3(I,10),I=1,38)/                                             SULW.2964  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2965  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -2.,  -3.,         SULW.2966  
     S  -4.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2967  
     S   6.,   4.,   2.,   0.,  -2.,  -4.,  -6.,  -7./                     SULW.2968  
      DATA (BO3(I,11),I=1,38)/                                             SULW.2969  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2970  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -2.,  -3.,         SULW.2971  
     S  -3.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2972  
     S   6.,   4.,   2.,   0.,  -2.,  -4.,  -5.,  -7./                     SULW.2973  
      DATA (BO3(I,12),I=1,38)/                                             SULW.2974  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2975  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,  -2.,  -3.,         SULW.2976  
     S  -3.,  -4.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   6.,         SULW.2977  
     S   6.,   4.,   2.,   0.,  -2.,  -4.,  -5.,  -7./                     SULW.2978  
      DATA (BO3(I,13),I=1,38)/                                             SULW.2979  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2980  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -2.,  -3.,         SULW.2981  
     S  -3.,  -3.,  -3.,  -2.,   0.,   2.,   4.,   5.,   6.,   7.,         SULW.2982  
     S   6.,   5.,   3.,   1.,  -1.,  -3.,  -5.,  -6./                     SULW.2983  
      DATA (BO3(I,14),I=1,38)/                                             SULW.2984  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2985  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,  -2.,  -3.,         SULW.2986  
     S  -3.,  -3.,  -3.,  -1.,   0.,   2.,   4.,   6.,   6.,   7.,         SULW.2987  
     S   6.,   5.,   3.,   1.,  -1.,  -3.,  -5.,  -6./                     SULW.2988  
      DATA (BO3(I,15),I=1,38)/                                             SULW.2989  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2990  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,  -2.,  -3.,         SULW.2991  
     S  -3.,  -3.,  -3.,  -1.,   1.,   3.,   4.,   6.,   7.,   7.,         SULW.2992  
     S   6.,   5.,   3.,   1.,  -1.,  -3.,  -5.,  -6./                     SULW.2993  
      DATA (BO3(I,16),I=1,38)/                                             SULW.2994  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.2995  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,  -2.,  -3.,         SULW.2996  
     S  -3.,  -3.,  -2.,  -1.,   1.,   3.,   4.,   6.,   7.,   7.,         SULW.2997  
     S   6.,   5.,   3.,   1.,  -1.,  -3.,  -4.,  -5./                     SULW.2998  
      DATA (BO3(I,17),I=1,38)/                                             SULW.2999  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3000  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -2.,  -1.,  -2.,         SULW.3001  
     S  -2.,  -2.,  -2.,   0.,   1.,   3.,   5.,   6.,   7.,   7.,         SULW.3002  
     S   6.,   4.,   2.,   0.,  -1.,  -3.,  -4.,  -5./                     SULW.3003  
      DATA (BO3(I,18),I=1,38)/                                             SULW.3004  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3005  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,  -1.,  -2.,         SULW.3006  
     S  -2.,  -2.,  -1.,   0.,   2.,   3.,   5.,   6.,   6.,   6.,         SULW.3007  
     S   5.,   4.,   2.,   0.,  -2.,  -3.,  -4.,  -5./                     SULW.3008  
      DATA (BO3(I,19),I=1,38)/                                             SULW.3009  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3010  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,  -1.,  -1.,         SULW.3011  
     S  -1.,  -1.,  -1.,   1.,   2.,   3.,   4.,   5.,   5.,   5.,         SULW.3012  
     S   4.,   3.,   1.,   0.,  -2.,  -3.,  -4.,  -5./                     SULW.3013  
      DATA (BO3(I,20),I=1,38)/                                             SULW.3014  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3015  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,   0.,  -1.,         SULW.3016  
     S  -1.,  -1.,   0.,   1.,   2.,   3.,   4.,   4.,   5.,   4.,         SULW.3017  
     S   4.,   2.,   1.,   0.,  -2.,  -3.,  -4.,  -4./                     SULW.3018  
      DATA (BO3(I,21),I=1,38)/                                             SULW.3019  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3020  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,   0.,         SULW.3021  
     S   0.,   0.,   0.,   1.,   2.,   2.,   3.,   4.,   4.,   3.,         SULW.3022  
     S   3.,   2.,   1.,  -1.,  -2.,  -3.,  -4.,  -4./                     SULW.3023  
      DATA (BO3(I,22),I=1,38)/                                             SULW.3024  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3025  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,   0.,   0.,         SULW.3026  
     S   0.,   0.,   0.,   1.,   1.,   2.,   2.,   3.,   3.,   3.,         SULW.3027  
     S   2.,   1.,   0.,  -1.,  -2.,  -3.,  -4.,  -4./                     SULW.3028  
      DATA (BO3(I,23),I=1,38)/                                             SULW.3029  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3030  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,   0.,   0.,         SULW.3031  
     S   0.,   0.,   0.,   0.,   1.,   1.,   1.,   2.,   2.,   2.,         SULW.3032  
     S   2.,   1.,   0.,  -1.,  -2.,  -3.,  -3.,  -4./                     SULW.3033  
      DATA (BO3(I,24),I=1,38)/                                             SULW.3034  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3035  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,   0.,   0.,         SULW.3036  
     S   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,   1.,   1.,         SULW.3037  
     S   1.,   1.,   0.,  -1.,  -1.,  -2.,  -3.,  -4./                     SULW.3038  
      DATA (BO3(I,25),I=1,38)/                                             SULW.3039  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3040  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,   0.,  -1.,         SULW.3041  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   1.,         SULW.3042  
     S   1.,   1.,   0.,   0.,  -1.,  -2.,  -3.,  -4./                     SULW.3043  
      DATA (BO3(I,26),I=1,38)/                                             SULW.3044  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3045  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,  -1.,  -1.,         SULW.3046  
     S  -1.,  -1.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3047  
     S   0.,   0.,   0.,   0.,  -1.,  -2.,  -3.,  -4./                     SULW.3048  
      DATA (BO3(I,27),I=1,38)/                                             SULW.3049  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3050  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,   0.,   0.,         SULW.3051  
     S   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3052  
     S   0.,   0.,   0.,  -1.,  -1.,  -2.,  -3.,  -4./                     SULW.3053  
      DATA (BO3(I,28),I=1,38)/                                             SULW.3054  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3055  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,   0.,         SULW.3056  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3057  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -2.,  -3.,  -4./                     SULW.3058  
      DATA (BO3(I,29),I=1,38)/                                             SULW.3059  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3060  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,  -1.,  -1.,         SULW.3061  
     S  -1.,  -1.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3062  
     S  -1.,  -1.,  -1.,  -1.,  -2.,  -2.,  -3.,  -4./                     SULW.3063  
      DATA (BO3(I,30),I=1,38)/                                             SULW.3064  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3065  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3066  
     S   0.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3067  
     S  -1.,  -1.,  -1.,  -1.,  -2.,  -2.,  -3.,  -4./                     SULW.3068  
      DATA (BO3(I,31),I=1,38)/                                             SULW.3069  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3070  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   1.,   0.,   0.,         SULW.3071  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -2.,         SULW.3072  
     S  -2.,  -2.,  -1.,  -2.,  -2.,  -2.,  -3.,  -4./                     SULW.3073  
C                                                                          SULW.3074  
C-----  -10E+3*LN(1.-TB)   ( O3 14 micron band )                           SULW.3075  
      DATA (TO3B(I, 1),I=1,38)/                                            SULW.3076  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3077  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3078  
     S 984.9, 935.6, 886.4, 837.8, 789.9, 742.9, 697.1, 652.9, 610.9,      SULW.3079  
     S 571.6, 535.5, 502.9, 473.6, 447.3, 423.3, 401.0, 379.9, 359.8,      SULW.3080  
     S 340.6, 321.9/                                                       SULW.3081  
      DATA (TO3B(I, 2),I=1,38)/                                            SULW.3082  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3083  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3084  
     S 984.9, 935.6, 886.4, 837.8, 789.9, 742.9, 697.1, 652.9, 610.9,      SULW.3085  
     S 571.6, 535.5, 502.9, 473.6, 447.3, 423.3, 401.0, 379.9, 359.8,      SULW.3086  
     S 340.6, 321.9/                                                       SULW.3087  
      DATA (TO3B(I, 3),I=1,38)/                                            SULW.3088  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3089  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3090  
     S 984.9, 935.6, 886.4, 837.8, 789.9, 742.9, 697.1, 652.9, 610.9,      SULW.3091  
     S 571.6, 535.5, 502.9, 473.6, 447.3, 423.3, 401.0, 379.9, 359.8,      SULW.3092  
     S 340.5, 321.9/                                                       SULW.3093  
      DATA (TO3B(I, 4),I=1,38)/                                            SULW.3094  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3095  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3096  
     S 984.9, 935.6, 886.4, 837.8, 789.9, 742.9, 697.1, 652.9, 610.9,      SULW.3097  
     S 571.6, 535.5, 502.9, 473.6, 447.3, 423.3, 401.0, 379.9, 359.8,      SULW.3098  
     S 340.5, 321.9/                                                       SULW.3099  
      DATA (TO3B(I, 5),I=1,38)/                                            SULW.3100  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3101  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3102  
     S 984.9, 935.5, 886.4, 837.8, 789.9, 742.9, 697.1, 652.9, 610.9,      SULW.3103  
     S 571.6, 535.5, 502.9, 473.6, 447.3, 423.3, 400.9, 379.8, 359.7,      SULW.3104  
     S 340.5, 321.8/                                                       SULW.3105  
      DATA (TO3B(I, 6),I=1,38)/                                            SULW.3106  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3107  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3108  
     S 984.9, 935.5, 886.4, 837.8, 789.9, 742.9, 697.1, 652.9, 610.9,      SULW.3109  
     S 571.6, 535.5, 502.8, 473.6, 447.3, 423.2, 400.9, 379.8, 359.7,      SULW.3110  
     S 340.4, 321.7/                                                       SULW.3111  
      DATA (TO3B(I, 7),I=1,38)/                                            SULW.3112  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3113  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3114  
     S 984.9, 935.5, 886.4, 837.8, 789.9, 742.9, 697.0, 652.9, 610.9,      SULW.3115  
     S 571.6, 535.5, 502.8, 473.5, 447.2, 423.2, 400.8, 379.7, 359.6,      SULW.3116  
     S 340.2, 321.5/                                                       SULW.3117  
      DATA (TO3B(I, 8),I=1,38)/                                            SULW.3118  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3119  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3120  
     S 984.9, 935.5, 886.4, 837.8, 789.9, 742.8, 697.0, 652.9, 610.9,      SULW.3121  
     S 571.6, 535.4, 502.8, 473.5, 447.1, 423.1, 400.7, 379.6, 359.4,      SULW.3122  
     S 340.0, 321.3/                                                       SULW.3123  
      DATA (TO3B(I, 9),I=1,38)/                                            SULW.3124  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3125  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3126  
     S 984.9, 935.5, 886.4, 837.8, 789.9, 742.8, 697.0, 652.8, 610.8,      SULW.3127  
     S 571.5, 535.4, 502.7, 473.4, 447.0, 423.0, 400.5, 379.3, 359.1,      SULW.3128  
     S 339.7, 320.8/                                                       SULW.3129  
      DATA (TO3B(I,10),I=1,38)/                                            SULW.3130  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3131  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3132  
     S 984.9, 935.5, 886.4, 837.8, 789.9, 742.8, 697.0, 652.8, 610.8,      SULW.3133  
     S 571.4, 535.3, 502.6, 473.2, 446.8, 422.7, 400.2, 379.0, 358.7,      SULW.3134  
     S 339.1, 320.1/                                                       SULW.3135  
      DATA (TO3B(I,11),I=1,38)/                                            SULW.3136  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3137  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3138  
     S 984.9, 935.5, 886.4, 837.8, 789.8, 742.8, 696.9, 652.8, 610.7,      SULW.3139  
     S 571.3, 535.1, 502.4, 473.0, 446.5, 422.3, 399.7, 378.4, 357.9,      SULW.3140  
     S 338.2, 318.9/                                                       SULW.3141  
      DATA (TO3B(I,12),I=1,38)/                                            SULW.3142  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3143  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.6,      SULW.3144  
     S 984.9, 935.5, 886.4, 837.8, 789.8, 742.7, 696.9, 652.6, 610.6,      SULW.3145  
     S 571.2, 534.9, 502.1, 472.6, 446.0, 421.7, 399.0, 377.4, 356.7,      SULW.3146  
     S 336.7, 317.1/                                                       SULW.3147  
      DATA (TO3B(I,13),I=1,38)/                                            SULW.3148  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3149  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.4,      SULW.3150  
     S 984.9, 935.4, 886.4, 837.7, 789.7, 742.6, 696.8, 652.5, 610.3,      SULW.3151  
     S 570.9, 534.5, 501.5, 471.9, 445.2, 420.7, 397.7, 375.9, 354.8,      SULW.3152  
     S 334.4, 314.3/                                                       SULW.3153  
      DATA (TO3B(I,14),I=1,38)/                                            SULW.3154  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3155  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.4,      SULW.3156  
     S 984.8, 935.4, 886.3, 837.6, 789.6, 742.5, 696.6, 652.2, 610.0,      SULW.3157  
     S 570.4, 533.9, 500.7, 470.9, 443.9, 419.0, 395.7, 373.4, 351.9,      SULW.3158  
     S 330.8, 310.1/                                                       SULW.3159  
      DATA (TO3B(I,15),I=1,38)/                                            SULW.3160  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3161  
     S1433.3,1386.3,1334.0,1282.9,1234.5,1184.0,1134.2,1084.3,1034.4,      SULW.3162  
     S 984.8, 935.3, 886.2, 837.5, 789.5, 742.3, 696.3, 651.8, 609.4,      SULW.3163  
     S 569.6, 532.8, 499.4, 469.2, 441.8, 416.5, 392.6, 369.7, 347.5,      SULW.3164  
     S 325.6, 304.0/                                                       SULW.3165  
      DATA (TO3B(I,16),I=1,38)/                                            SULW.3166  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3167  
     S1433.3,1386.3,1334.0,1282.9,1233.1,1184.0,1133.7,1083.9,1034.4,      SULW.3168  
     S 984.7, 935.2, 886.0, 837.3, 789.2, 741.9, 695.8, 651.2, 608.5,      SULW.3169  
     S 568.4, 531.3, 497.3, 466.6, 438.6, 412.6, 388.0, 364.3, 341.1,      SULW.3170  
     S 318.3, 295.7/                                                       SULW.3171  
      DATA (TO3B(I,17),I=1,38)/                                            SULW.3172  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3173  
     S1433.3,1386.3,1334.0,1282.9,1233.1,1184.0,1133.7,1083.9,1034.2,      SULW.3174  
     S 984.5, 935.0, 885.8, 837.0, 788.8, 741.4, 695.1, 650.2, 607.2,      SULW.3175  
     S 566.6, 528.9, 494.3, 462.7, 433.8, 406.9, 381.3, 356.6, 332.4,      SULW.3176  
     S 308.5, 284.9/                                                       SULW.3177  
      DATA (TO3B(I,18),I=1,38)/                                            SULW.3178  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3179  
     S1433.3,1386.3,1334.0,1282.9,1233.1,1184.0,1133.7,1083.9,1034.0,      SULW.3180  
     S 984.3, 934.8, 885.5, 836.6, 788.2, 740.6, 694.0, 648.7, 605.2,      SULW.3181  
     S 564.0, 525.4, 489.9, 457.2, 427.2, 399.1, 372.4, 346.5, 321.2,      SULW.3182  
     S 296.3, 271.8/                                                       SULW.3183  
      DATA (TO3B(I,19),I=1,38)/                                            SULW.3184  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3185  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1133.7,1083.6,1033.8,      SULW.3186  
     S 984.1, 934.5, 885.1, 836.0, 787.5, 739.6, 692.6, 646.8, 602.6,      SULW.3187  
     S 560.5, 520.8, 484.0, 450.0, 418.5, 389.0, 361.0, 333.9, 307.6,      SULW.3188  
     S 281.9, 256.8/                                                       SULW.3189  
      DATA (TO3B(I,20),I=1,38)/                                            SULW.3190  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3191  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1133.2,1083.3,1033.5,      SULW.3192  
     S 983.8, 934.0, 884.6, 835.4, 786.6, 738.3, 690.9, 644.4, 599.4,      SULW.3193  
     S 556.2, 515.2, 476.8, 441.1, 407.9, 376.9, 347.6, 319.4, 292.2,      SULW.3194  
     S 265.9, 240.3/                                                       SULW.3195  
      DATA (TO3B(I,21),I=1,38)/                                            SULW.3196  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3197  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1133.2,1083.0,1033.3,      SULW.3198  
     S 983.4, 933.7, 884.1, 834.7, 785.6, 737.0, 689.0, 641.9, 596.0,      SULW.3199  
     S 551.6, 509.1, 468.9, 431.3, 396.3, 363.6, 332.9, 303.7, 275.8,      SULW.3200  
     S 249.0, 223.2/                                                       SULW.3201  
      DATA (TO3B(I,22),I=1,38)/                                            SULW.3202  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3203  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1133.2,1083.0,1033.1,      SULW.3204  
     S 983.2, 933.4, 883.7, 834.1, 784.8, 735.8, 687.4, 639.6, 592.8,      SULW.3205  
     S 547.2, 503.2, 461.2, 421.6, 384.6, 350.1, 317.9, 287.7, 259.1,      SULW.3206  
     S 231.9, 206.1/                                                       SULW.3207  
      DATA (TO3B(I,23),I=1,38)/                                            SULW.3208  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3209  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1132.7,1083.0,1033.1,      SULW.3210  
     S 983.1, 933.2, 883.4, 833.7, 784.2, 734.9, 686.1, 637.7, 590.1,      SULW.3211  
     S 543.5, 498.1, 454.5, 413.0, 373.9, 337.5, 303.6, 272.2, 242.8,      SULW.3212  
     S 215.3, 189.6/                                                       SULW.3213  
      DATA (TO3B(I,24),I=1,38)/                                            SULW.3214  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3215  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1132.7,1083.0,1032.9,      SULW.3216  
     S 983.1, 933.1, 883.3, 833.5, 783.8, 734.3, 685.1, 636.3, 588.1,      SULW.3217  
     S 540.6, 494.2, 449.2, 406.0, 364.9, 326.5, 290.9, 258.0, 227.7,      SULW.3218  
     S 199.9, 174.2/                                                       SULW.3219  
      DATA (TO3B(I,25),I=1,38)/                                            SULW.3220  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3221  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1132.7,1083.0,1032.9,      SULW.3222  
     S 983.0, 933.1, 883.2, 833.3, 783.5, 733.9, 684.5, 635.3, 586.6,      SULW.3223  
     S 538.6, 491.3, 445.2, 400.6, 358.0, 317.7, 280.2, 245.7, 214.3,      SULW.3224  
     S 185.9, 160.3/                                                       SULW.3225  
      DATA (TO3B(I,26),I=1,38)/                                            SULW.3226  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3227  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1132.7,1083.0,1032.9,      SULW.3228  
     S 983.0, 933.0, 883.1, 833.2, 783.4, 733.6, 684.0, 634.7, 585.7,      SULW.3229  
     S 537.1, 489.3, 442.4, 396.8, 352.8, 311.0, 271.8, 235.8, 203.1,      SULW.3230  
     S 173.9, 148.1/                                                       SULW.3231  
      DATA (TO3B(I,27),I=1,38)/                                            SULW.3232  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3233  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1133.2,1083.0,1033.1,      SULW.3234  
     S 983.1, 933.0, 883.1, 833.2, 783.3, 733.5, 683.8, 634.3, 585.1,      SULW.3235  
     S 536.2, 488.0, 440.5, 394.1, 349.2, 306.2, 265.7, 228.2, 194.3,      SULW.3236  
     S 164.2, 138.0/                                                       SULW.3237  
      DATA (TO3B(I,28),I=1,38)/                                            SULW.3238  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3239  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1133.2,1083.0,1033.1,      SULW.3240  
     S 983.1, 933.1, 883.1, 833.2, 783.3, 733.4, 683.7, 634.1, 584.7,      SULW.3241  
     S 535.7, 487.1, 439.3, 392.4, 346.8, 302.9, 261.4, 222.8, 187.7,      SULW.3242  
     S 156.7, 130.0/                                                       SULW.3243  
      DATA (TO3B(I,29),I=1,38)/                                            SULW.3244  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3245  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1133.2,1083.0,1033.1,      SULW.3246  
     S 983.2, 933.2, 883.2, 833.3, 783.3, 733.5, 683.7, 634.0, 584.5,      SULW.3247  
     S 535.4, 486.6, 438.5, 391.3, 345.2, 300.8, 258.5, 219.0, 183.1,      SULW.3248  
     S 151.2, 124.0/                                                       SULW.3249  
      DATA (TO3B(I,30),I=1,38)/                                            SULW.3250  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3251  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1133.2,1083.3,1033.3,      SULW.3252  
     S 983.3, 933.3, 883.3, 833.4, 783.4, 733.6, 683.7, 634.0, 584.5,      SULW.3253  
     S 535.2, 486.4, 438.1, 390.6, 344.3, 299.4, 256.6, 216.5, 179.9,      SULW.3254  
     S 147.5, 119.8/                                                       SULW.3255  
      DATA (TO3B(I,31),I=1,38)/                                            SULW.3256  
     S1663.6,1663.6,1663.6,1663.6,1663.6,1663.6,1594.2,1524.9,1484.4,      SULW.3257  
     S1433.3,1380.2,1334.0,1282.9,1233.1,1183.2,1133.7,1083.3,1033.5,      SULW.3258  
     S 983.5, 933.5, 883.5, 833.6, 783.6, 733.8, 683.9, 634.2, 584.6,      SULW.3259  
     S 535.3, 486.3, 438.0, 390.3, 343.8, 298.6, 255.5, 215.0, 177.8,      SULW.3260  
     S 144.9, 116.9/                                                       SULW.3261  
C----- 1.0E4*O3A(I,J) FOR TB                                               SULW.3262  
      DATA (O3A(I, 1),I=1,38)/                                             SULW.3263  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3264  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3265  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  23.,  28.,         SULW.3266  
     S  34.,  40.,  45.,  49.,  52.,  55.,  57.,  58./                     SULW.3267  
      DATA (O3A(I, 2),I=1,38)/                                             SULW.3268  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3269  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3270  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  23.,  28.,         SULW.3271  
     S  34.,  40.,  44.,  49.,  52.,  55.,  57.,  58./                     SULW.3272  
      DATA (O3A(I, 3),I=1,38)/                                             SULW.3273  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3274  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3275  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  23.,  28.,         SULW.3276  
     S  34.,  40.,  44.,  49.,  52.,  55.,  57.,  58./                     SULW.3277  
      DATA (O3A(I, 4),I=1,38)/                                             SULW.3278  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3279  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3280  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  23.,  28.,         SULW.3281  
     S  34.,  40.,  44.,  49.,  52.,  55.,  57.,  58./                     SULW.3282  
      DATA (O3A(I, 5),I=1,38)/                                             SULW.3283  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3284  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3285  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  23.,  28.,         SULW.3286  
     S  34.,  40.,  44.,  49.,  52.,  55.,  57.,  58./                     SULW.3287  
      DATA (O3A(I, 6),I=1,38)/                                             SULW.3288  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3289  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3290  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  23.,  28.,         SULW.3291  
     S  34.,  40.,  44.,  49.,  52.,  55.,  57.,  58./                     SULW.3292  
      DATA (O3A(I, 7),I=1,38)/                                             SULW.3293  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3294  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3295  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  23.,  28.,         SULW.3296  
     S  34.,  40.,  44.,  48.,  52.,  54.,  56.,  58./                     SULW.3297  
      DATA (O3A(I, 8),I=1,38)/                                             SULW.3298  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3299  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3300  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  22.,  28.,         SULW.3301  
     S  34.,  39.,  44.,  48.,  52.,  54.,  56.,  57./                     SULW.3302  
      DATA (O3A(I, 9),I=1,38)/                                             SULW.3303  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3304  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3305  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  22.,  28.,         SULW.3306  
     S  34.,  39.,  44.,  48.,  51.,  54.,  56.,  57./                     SULW.3307  
      DATA (O3A(I,10),I=1,38)/                                             SULW.3308  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3309  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3310  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  22.,  28.,         SULW.3311  
     S  34.,  39.,  44.,  48.,  51.,  54.,  55.,  56./                     SULW.3312  
      DATA (O3A(I,11),I=1,38)/                                             SULW.3313  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3314  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3315  
     S   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  22.,  28.,         SULW.3316  
     S  34.,  39.,  44.,  47.,  50.,  53.,  54.,  55./                     SULW.3317  
      DATA (O3A(I,12),I=1,38)/                                             SULW.3318  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3319  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3320  
     S   1.,   2.,   3.,   4.,   6.,   9.,  12.,  17.,  22.,  28.,         SULW.3321  
     S  33.,  38.,  43.,  47.,  50.,  52.,  53.,  53./                     SULW.3322  
      DATA (O3A(I,13),I=1,38)/                                             SULW.3323  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3324  
     S   0.,   0.,  -2.,   0.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3325  
     S   1.,   2.,   3.,   4.,   6.,   9.,  12.,  17.,  22.,  27.,         SULW.3326  
     S  33.,  38.,  42.,  45.,  48.,  50.,  51.,  51./                     SULW.3327  
      DATA (O3A(I,14),I=1,38)/                                             SULW.3328  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3329  
     S   0.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,   0.,         SULW.3330  
     S   1.,   1.,   3.,   4.,   6.,   8.,  12.,  16.,  21.,  26.,         SULW.3331  
     S  32.,  36.,  41.,  44.,  46.,  47.,  48.,  47./                     SULW.3332  
      DATA (O3A(I,15),I=1,38)/                                             SULW.3333  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3334  
     S   0.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,         SULW.3335  
     S   1.,   1.,   2.,   4.,   6.,   8.,  11.,  15.,  20.,  25.,         SULW.3336  
     S  30.,  35.,  38.,  41.,  43.,  44.,  44.,  43./                     SULW.3337  
      DATA (O3A(I,16),I=1,38)/                                             SULW.3338  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3339  
     S   0.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,         SULW.3340  
     S   0.,   1.,   2.,   3.,   5.,   7.,  10.,  14.,  19.,  23.,         SULW.3341  
     S  28.,  32.,  35.,  38.,  39.,  39.,  39.,  38./                     SULW.3342  
      DATA (O3A(I,17),I=1,38)/                                             SULW.3343  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3344  
     S   0.,   0.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,   0.,   0.,         SULW.3345  
     S   0.,   1.,   2.,   3.,   4.,   6.,   9.,  13.,  17.,  21.,         SULW.3346  
     S  25.,  28.,  31.,  33.,  34.,  34.,  34.,  33./                     SULW.3347  
      DATA (O3A(I,18),I=1,38)/                                             SULW.3348  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3349  
     S  -6.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,         SULW.3350  
     S   0.,   0.,   1.,   2.,   3.,   5.,   8.,  10.,  14.,  17.,         SULW.3351  
     S  21.,  24.,  26.,  28.,  29.,  29.,  28.,  28./                     SULW.3352  
      DATA (O3A(I,19),I=1,38)/                                             SULW.3353  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3354  
     S  -6.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3355  
     S   0.,   0.,   0.,   1.,   2.,   4.,   6.,   8.,  11.,  14.,         SULW.3356  
     S  17.,  19.,  21.,  23.,  23.,  24.,  24.,  23./                     SULW.3357  
      DATA (O3A(I,20),I=1,38)/                                             SULW.3358  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3359  
     S  -6.,   0.,   0.,  -1.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,         SULW.3360  
     S  -1.,  -1.,   0.,   0.,   1.,   2.,   4.,   5.,   7.,  10.,         SULW.3361  
     S  12.,  14.,  16.,  18.,  19.,  19.,  20.,  20./                     SULW.3362  
      DATA (O3A(I,21),I=1,38)/                                             SULW.3363  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3364  
     S  -6.,   0.,   0.,  -3.,  -2.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3365  
     S  -1.,  -1.,  -1.,   0.,   0.,   1.,   2.,   3.,   5.,   6.,         SULW.3366  
     S   8.,  10.,  12.,  14.,  15.,  16.,  17.,  17./                     SULW.3367  
      DATA (O3A(I,22),I=1,38)/                                             SULW.3368  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3369  
     S  -6.,  -4.,   0.,  -1.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,         SULW.3370  
     S  -1.,  -1.,  -1.,  -1.,   0.,   0.,   1.,   2.,   3.,   4.,         SULW.3371  
     S   6.,   7.,   9.,  11.,  12.,  14.,  15.,  16./                     SULW.3372  
      DATA (O3A(I,23),I=1,38)/                                             SULW.3373  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3374  
     S   0.,  -4.,   0.,  -1.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,         SULW.3375  
     S  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,   1.,   1.,   2.,         SULW.3376  
     S   4.,   5.,   7.,   9.,  10.,  12.,  13.,  14./                     SULW.3377  
      DATA (O3A(I,24),I=1,38)/                                             SULW.3378  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3379  
     S   0.,  -4.,   0.,  -1.,  -2.,  -1.,  -2.,  -1.,  -2.,  -1.,         SULW.3380  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,   1.,   1.,         SULW.3381  
     S   2.,   4.,   5.,   7.,   9.,  10.,  12.,  13./                     SULW.3382  
      DATA (O3A(I,25),I=1,38)/                                             SULW.3383  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3384  
     S   0.,  -4.,   0.,  -1.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,         SULW.3385  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,   1.,         SULW.3386  
     S   2.,   3.,   4.,   6.,   7.,   9.,  11.,  12./                     SULW.3387  
      DATA (O3A(I,26),I=1,38)/                                             SULW.3388  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3389  
     S   0.,  -4.,   0.,  -1.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,         SULW.3390  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,         SULW.3391  
     S   1.,   2.,   3.,   4.,   6.,   8.,  10.,  11./                     SULW.3392  
      DATA (O3A(I,27),I=1,38)/                                             SULW.3393  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3394  
     S  -6.,  -4.,   0.,  -1.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,         SULW.3395  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,         SULW.3396  
     S   1.,   1.,   2.,   4.,   5.,   7.,   9.,  11./                     SULW.3397  
      DATA (O3A(I,28),I=1,38)/                                             SULW.3398  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3399  
     S  -6.,   0.,   0.,  -3.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,         SULW.3400  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,         SULW.3401  
     S   0.,   1.,   2.,   3.,   5.,   6.,   8.,  10./                     SULW.3402  
      DATA (O3A(I,29),I=1,38)/                                             SULW.3403  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3404  
     S  -6.,   0.,   0.,  -1.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,         SULW.3405  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,         SULW.3406  
     S   0.,   1.,   2.,   3.,   4.,   6.,   7.,   9./                     SULW.3407  
      DATA (O3A(I,30),I=1,38)/                                             SULW.3408  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3409  
     S  -6.,   0.,   0.,  -1.,  -2.,  -1.,  -2.,  -1.,  -1.,  -1.,         SULW.3410  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,         SULW.3411  
     S   0.,   1.,   1.,   2.,   4.,   5.,   7.,   9./                     SULW.3412  
      DATA (O3A(I,31),I=1,38)/                                             SULW.3413  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3414  
     S  -6.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3415  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,         SULW.3416  
     S   0.,   0.,   1.,   2.,   3.,   5.,   6.,   8./                     SULW.3417  
C----- 1.0E6*O3B(I,J) FOR TB                                               SULW.3418  
      DATA (O3B(I, 1),I=1,38)/                                             SULW.3419  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3420  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -1.,         SULW.3421  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3422  
     S  -3.,  -1.,   1.,   2.,   3.,   4.,   5.,   6./                     SULW.3423  
      DATA (O3B(I, 2),I=1,38)/                                             SULW.3424  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3425  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -1.,         SULW.3426  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3427  
     S  -3.,  -1.,   1.,   2.,   3.,   4.,   5.,   6./                     SULW.3428  
      DATA (O3B(I, 3),I=1,38)/                                             SULW.3429  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3430  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -1.,         SULW.3431  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3432  
     S  -3.,  -1.,   1.,   2.,   3.,   4.,   5.,   6./                     SULW.3433  
      DATA (O3B(I, 4),I=1,38)/                                             SULW.3434  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3435  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -1.,         SULW.3436  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3437  
     S  -3.,  -1.,   1.,   2.,   3.,   4.,   5.,   6./                     SULW.3438  
      DATA (O3B(I, 5),I=1,38)/                                             SULW.3439  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3440  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -2.,         SULW.3441  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3442  
     S  -3.,  -1.,   1.,   2.,   3.,   4.,   5.,   6./                     SULW.3443  
      DATA (O3B(I, 6),I=1,38)/                                             SULW.3444  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3445  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -2.,         SULW.3446  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3447  
     S  -3.,  -1.,   1.,   2.,   3.,   4.,   5.,   6./                     SULW.3448  
      DATA (O3B(I, 7),I=1,38)/                                             SULW.3449  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3450  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -2.,         SULW.3451  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3452  
     S  -3.,  -1.,   1.,   2.,   3.,   4.,   5.,   6./                     SULW.3453  
      DATA (O3B(I, 8),I=1,38)/                                             SULW.3454  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3455  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -2.,         SULW.3456  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3457  
     S  -3.,  -1.,   1.,   2.,   3.,   4.,   5.,   6./                     SULW.3458  
      DATA (O3B(I, 9),I=1,38)/                                             SULW.3459  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3460  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -2.,         SULW.3461  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3462  
     S  -3.,  -1.,   1.,   2.,   3.,   5.,   5.,   6./                     SULW.3463  
      DATA (O3B(I,10),I=1,38)/                                             SULW.3464  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3465  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -2.,  -2.,         SULW.3466  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3467  
     S  -3.,  -1.,   1.,   2.,   3.,   5.,   5.,   6./                     SULW.3468  
      DATA (O3B(I,11),I=1,38)/                                             SULW.3469  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3470  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,  -2.,         SULW.3471  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3472  
     S  -3.,  -1.,   1.,   2.,   4.,   5.,   6.,   6./                     SULW.3473  
      DATA (O3B(I,12),I=1,38)/                                             SULW.3474  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3475  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3476  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -5.,  -5.,  -4.,         SULW.3477  
     S  -3.,  -1.,   1.,   2.,   4.,   5.,   6.,   6./                     SULW.3478  
      DATA (O3B(I,13),I=1,38)/                                             SULW.3479  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3480  
     S   0.,   0.,  -4.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,  -2.,         SULW.3481  
     S  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -4.,  -4.,  -4.,         SULW.3482  
     S  -2.,  -1.,   1.,   3.,   4.,   5.,   6.,   6./                     SULW.3483  
      DATA (O3B(I,14),I=1,38)/                                             SULW.3484  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3485  
     S   0.,   0.,  -4.,   3.,  -2.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3486  
     S  -2.,  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -4.,  -3.,         SULW.3487  
     S  -2.,  -1.,   1.,   3.,   4.,   5.,   6.,   6./                     SULW.3488  
      DATA (O3B(I,15),I=1,38)/                                             SULW.3489  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3490  
     S   0.,   0.,  -4.,   3.,  -2.,   0.,  -1.,  -1.,  -1.,  -1.,         SULW.3491  
     S  -2.,  -2.,  -2.,  -2.,  -3.,  -3.,  -4.,  -4.,  -4.,  -3.,         SULW.3492  
     S  -2.,   0.,   2.,   3.,   4.,   5.,   6.,   6./                     SULW.3493  
      DATA (O3B(I,16),I=1,38)/                                             SULW.3494  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3495  
     S   0.,   0.,  -4.,  -3.,  -2.,  -2.,  -1.,  -1.,  -1.,  -1.,         SULW.3496  
     S  -2.,  -2.,  -2.,  -2.,  -2.,  -3.,  -3.,  -3.,  -3.,  -3.,         SULW.3497  
     S  -1.,   0.,   2.,   3.,   4.,   5.,   6.,   6./                     SULW.3498  
      DATA (O3B(I,17),I=1,38)/                                             SULW.3499  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3500  
     S   0.,   0.,  -4.,  -3.,   0.,  -2.,  -1.,  -1.,  -1.,  -1.,         SULW.3501  
     S  -1.,  -1.,  -2.,  -2.,  -2.,  -2.,  -3.,  -3.,  -3.,  -2.,         SULW.3502  
     S  -1.,   1.,   2.,   3.,   4.,   5.,   5.,   5./                     SULW.3503  
      DATA (O3B(I,18),I=1,38)/                                             SULW.3504  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3505  
     S  12.,   0.,  -4.,  -3.,   2.,   0.,  -1.,  -1.,  -1.,  -1.,         SULW.3506  
     S  -1.,  -1.,  -1.,  -1.,  -2.,  -2.,  -2.,  -2.,  -2.,  -1.,         SULW.3507  
     S   0.,   1.,   2.,   3.,   4.,   4.,   4.,   4./                     SULW.3508  
      DATA (O3B(I,19),I=1,38)/                                             SULW.3509  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3510  
     S -12.,   0.,  -4.,  -3.,  -2.,   0.,  -1.,  -1.,  -1.,  -1.,         SULW.3511  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3512  
     S   0.,   1.,   2.,   3.,   3.,   3.,   3.,   3./                     SULW.3513  
      DATA (O3B(I,20),I=1,38)/                                             SULW.3514  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3515  
     S -12.,   0.,   0.,  -3.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3516  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,         SULW.3517  
     S   0.,   1.,   2.,   2.,   2.,   2.,   2.,   2./                     SULW.3518  
      DATA (O3B(I,21),I=1,38)/                                             SULW.3519  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3520  
     S -12.,   0.,   0.,   0.,   0.,  -1.,  -1.,  -1.,  -1.,   0.,         SULW.3521  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,         SULW.3522  
     S   0.,   1.,   1.,   1.,   2.,   2.,   1.,   1./                     SULW.3523  
      DATA (O3B(I,22),I=1,38)/                                             SULW.3524  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3525  
     S -12.,   7.,   0.,   3.,   0.,   1.,  -1.,  -1.,  -1.,  -1.,         SULW.3526  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,   0.,         SULW.3527  
     S   0.,   0.,   0.,   1.,   1.,   1.,   1.,   0./                     SULW.3528  
      DATA (O3B(I,23),I=1,38)/                                             SULW.3529  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3530  
     S   0.,   7.,   0.,   3.,   0.,  -1.,  -1.,   0.,  -1.,  -1.,         SULW.3531  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,         SULW.3532  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0./                     SULW.3533  
      DATA (O3B(I,24),I=1,38)/                                             SULW.3534  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3535  
     S   0.,   7.,   0.,   3.,   0.,  -1.,  -1.,  -1.,   0.,  -1.,         SULW.3536  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3537  
     S  -1.,  -1.,   0.,   0.,   0.,   0.,   0.,   0./                     SULW.3538  
      DATA (O3B(I,25),I=1,38)/                                             SULW.3539  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3540  
     S   0.,   7.,   0.,   3.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3541  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3542  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,   0.,  -1./                     SULW.3543  
      DATA (O3B(I,26),I=1,38)/                                             SULW.3544  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3545  
     S   0.,   7.,   0.,   3.,   0.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3546  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3547  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1./                     SULW.3548  
      DATA (O3B(I,27),I=1,38)/                                             SULW.3549  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3550  
     S -12.,   7.,   0.,   3.,   0.,   1.,  -1.,   0.,   0.,  -1.,         SULW.3551  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3552  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1./                     SULW.3553  
      DATA (O3B(I,28),I=1,38)/                                             SULW.3554  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3555  
     S -12.,   0.,   0.,   0.,   0.,   1.,  -1.,  -1.,  -1.,  -1.,         SULW.3556  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3557  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1./                     SULW.3558  
      DATA (O3B(I,29),I=1,38)/                                             SULW.3559  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3560  
     S -12.,   0.,   0.,  -3.,   0.,  -1.,  -1.,  -1.,   0.,  -1.,         SULW.3561  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3562  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -2.,  -2./                     SULW.3563  
      DATA (O3B(I,30),I=1,38)/                                             SULW.3564  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3565  
     S -12.,   0.,   0.,  -3.,   0.,  -1.,  -1.,  -1.,   0.,  -1.,         SULW.3566  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3567  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -2.,  -2.,  -2./                     SULW.3568  
      DATA (O3B(I,31),I=1,38)/                                             SULW.3569  
     S   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,         SULW.3570  
     S -12.,   0.,  -4.,  -3.,  -2.,   0.,  -1.,  -1.,   0.,  -1.,         SULW.3571  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,  -1.,         SULW.3572  
     S  -1.,  -1.,  -1.,  -1.,  -1.,  -2.,  -2.,  -2./                     SULW.3573  
c                                                                          SULW.3574  
      DO 1000 I=1,40                                                       SULW.3575  
        DO 1000 J=1,31                                                     SULW.3576  
          DO 1000 K=1,2                                                    SULW.3577  
            ALP(I,J,K)=ALP(I,J,K)*1.D-04                                   SULW.3578  
            BET(I,J,K)=BET(I,J,K)*1.D-07                                   SULW.3579  
 1000 CONTINUE                                                             SULW.3580  
      DO 1001 I=1,38                                                       SULW.3581  
        DO 1001 J=1,31                                                     SULW.3582  
          AO3(I,J)=AO3(I,J)*1.D-04                                         SULW.3583  
          BO3(I,J)=BO3(I,J)*1.D-06                                         SULW.3584  
          O3A(I,J)=O3A(I,J)*1.D-04                                         SULW.3585  
          O3B(I,J)=O3B(I,J)*1.D-06                                         SULW.3586  
 1001 CONTINUE                                                             SULW.3587  
      RETURN                                                               SULW.3588  
      END                                                                  SULW.3589  
C                                                                          SULW.3590  
*DECK SUSW                                                                 SUSW.1     
      SUBROUTINE SUSW                                                      SUSW.2     
C                                                                          SUSW.3     
C**** *SUSW*   - INITIALIZE COMMON YOMSW                                   SUSW.4     
C                                                                          SUSW.5     
C     PURPOSE.                                                             SUSW.6     
C     --------                                                             SUSW.7     
C           INITIALIZE YOMSW, THE COMMON THAT CONTAINS COEFFICIENTS        SUSW.8     
C           NEEDED TO RUN THE SHORTWAVE RADIATION SUBROUTINES              SUSW.9     
C                                                                          SUSW.10    
C**   INTERFACE.                                                           SUSW.11    
C     ----------                                                           SUSW.12    
C        *CALL* *SUSW                                                      SUSW.13    
C                                                                          SUSW.14    
C        EXPLICIT ARGUMENTS                                                SUSW.15    
C        --------------------                                              SUSW.16    
C        NONE                                                              SUSW.17    
C                                                                          SUSW.18    
C        IMPLICIT ARGUMENTS                                                SUSW.19    
C        --------------------                                              SUSW.20    
C        COMMON YOMSW                                                      SUSW.21    
C                                                                          SUSW.22    
C     METHOD.                                                              SUSW.23    
C     -------                                                              SUSW.24    
C        SEE DOCUMENTATION                                                 SUSW.25    
C                                                                          SUSW.26    
C     EXTERNALS.                                                           SUSW.27    
C     ----------                                                           SUSW.28    
C                                                                          SUSW.29    
C     REFERENCE.                                                           SUSW.30    
C     ----------                                                           SUSW.31    
C        ECMWF RESEARCH DEPARTMENT DOCUMENTATION                           SUSW.32    
C                                                                          SUSW.33    
C     AUTHOR.                                                              SUSW.34    
C     -------                                                              SUSW.35    
C        JEAN-JACQUES MORCRETTE *ECMWF*                                    SUSW.36    
C                                                                          SUSW.37    
C     MODIFICATIONS.                                                       SUSW.38    
C     --------------                                                       SUSW.39    
C        ORIGINAL : 88-12-15                                               SUSW.40    
C     ------------------------------------------------------------------   SUSW.41    
C                                                                          SUSW.42    
*CALL ZPARB                                                                SUSW.43    
c      INCLUDE 'zparb.upd'                                                 SUSW.44    
C                                                                          SUSW.45    
C      ----------------------------------------------------------------    SUSW.46    
C                                                                          SUSW.47    
C*       1.    SET VALUES.                                                 SUSW.48    
C              -----------                                                 SUSW.49    
C                                                                          SUSW.50    
c      DATA SUN(1) / 0.441676 /                                            SUSW.51    
      DATA SUN(1) / 0.441130 /                                             SUSW.52    
      DATA (D(1,K),K = 1,3) / 0.00, 0.00, 0.00 /                           SUSW.53    
      DATA ((APAD(1,I,J),I=1,3),J=1,7) /                                   SUSW.54    
     S 0.000000000E-00, 0.000000000E-00, 0.925887084E-04,                  SUSW.55    
     S 0.000000000E-00, 0.000000000E-00, 0.129353723E-01,                  SUSW.56    
     S 0.000000000E-00, 0.000000000E-00, 0.800821928E+00,                  SUSW.57    
     S 0.000000000E-00, 0.000000000E-00, 0.242715973E+02,                  SUSW.58    
     S 0.000000000E-00, 0.000000000E-00, 0.878331486E+02,                  SUSW.59    
     S 0.000000000E-00, 0.000000000E-00, 0.191559725E+02,                  SUSW.60    
     S 0.000000000E-00, 0.000000000E-00, 0.000000000E+00 /                 SUSW.61    
C                                                                          SUSW.62    
      DATA ((BPAD(1,I,J),I=1,3),J=1,7) /                                   SUSW.63    
     S 0.000000000E-00, 0.000000000E-00, 0.925887084E-04,                  SUSW.64    
     S 0.000000000E-00, 0.000000000E-00, 0.131812683E-01,                  SUSW.65    
     S 0.000000000E-00, 0.000000000E-00, 0.812706117E+00,                  SUSW.66    
     S 0.000000000E-00, 0.000000000E-00, 0.249863591E+02,                  SUSW.67    
     S 0.000000000E-00, 0.000000000E-00, 0.931071925E+02,                  SUSW.68    
     S 0.000000000E-00, 0.000000000E-00, 0.252233437E+02,                  SUSW.69    
     S 0.000000000E-00, 0.000000000E-00, 0.100000000E+01 /                 SUSW.70    
C                                                                          SUSW.71    
      DATA (CRAY(1,K),K=1,6) /                                             SUSW.72    
     S .428937E-01, .890743E+00,-.288555E+01,                              SUSW.73    
     S .522744E+01,-.469173E+01, .161645E+01/                              SUSW.74    
C                                                                          SUSW.75    
c      DATA SUN(2) / 0.558324 /                                            SUSW.76    
      DATA SUN(2) / 0.557633 /                                             SUSW.77    
      DATA (D(2,K),K=1,3) / 0.317735694, 0.775570952, 0.800000000 /        SUSW.78    
      DATA ((APAD(2,I,J),I=1,3),J=1,7) /                                   SUSW.79    
     S 0.822745535E-02, 0.145321703E-04, 0.410177786E+03,                  SUSW.80    
     S 0.705825794E+01, 0.175741897E-01, 0.672595424E+02,                  SUSW.81    
     S 0.348747605E+03, 0.259696276E+01, 0.000000000E-00,                  SUSW.82    
     S 0.174921268E+04, 0.599852834E+02, 0.000000000E-00,                  SUSW.83    
     S 0.100138721E+04, 0.203510317E+03, 0.000000000E-00,                  SUSW.84    
     S 0.518496206E+02, 0.757222990E+02, 0.000000000E-00,                  SUSW.85    
     S 0.000000000E+00, 0.000000000E+00, 0.000000000E+00 /                 SUSW.86    
C                                                                          SUSW.87    
      DATA ((BPAD(2,I,J),I=1,3),J=1,7) /                                   SUSW.88    
     S 0.822745535E-02, 0.145321703E-04, 0.410177786E+03,                  SUSW.89    
     S 0.719686994E+01, 0.176779370E-01, 0.731185438E+02,                  SUSW.90    
     S 0.381961022E+03, 0.265802733E+01, 0.100000000E+01,                  SUSW.91    
     S 0.219460901E+04, 0.634292876E+02, 0.000000000E+00,                  SUSW.92    
     S 0.159321079E+04, 0.228829763E+03, 0.000000000E+00,                  SUSW.93    
     S 0.138748279E+03, 0.992586506E+02, 0.000000000E+00,                  SUSW.94    
     S 0.100000000E+01, 0.100000000E+01, 0.000000000E+00 /                 SUSW.95    
C                                                                          SUSW.96    
      DATA (CRAY(2,K),K=1,6) /                                             SUSW.97    
     S .697200E-02, .173297E-01,-.850903E-01,                              SUSW.98    
     S .248261E+00,-.302031E+00, .129662E+00/                              SUSW.99    
C                                                                          SUSW.100   
      RETURN                                                               SUSW.101   
      END                                                                  SUSW.102   
C                                                                          SUSW.103   
*DECK INICON                                                               INICON.1     
      SUBROUTINE INICON                                                    INICON.2     
C                                                                          INICON.3     
C*** **INICON  PRESET CONSTANTS IN *COMCON*.                               INICON.4     
C                                                                          INICON.5     
C      M.JARRAUD      E.C.M.W.F.     10/12/1982.                           INICON.6     
C                                                                          INICON.7     
C     PURPOSE.                                                             INICON.8     
C     --------                                                             INICON.9     
C                                                                          INICON.10    
C             PRESET CONSTANTS IN *COMCON*.                                INICON.11    
C                                                                          INICON.12    
C**   INTERFACE.                                                           INICON.13    
C     ----------                                                           INICON.14    
C                                                                          INICON.15    
C             **INICON IS CALLED FROM *SETDYN*.                            INICON.16    
C                                                                          INICON.17    
C     EXTERNALS.                                                           INICON.18    
C     ----------                                                           INICON.19    
C                                                                          INICON.20    
C             NONE.                                                        INICON.21    
C                                                                          INICON.22    
*CALL ZPARB                                                                INICON.23    
c      INCLUDE 'zparb.upd'                                                 INICON.24    
C                                                                          INICON.25    
   10 CONTINUE                                                             INICON.26    
C                                                                          INICON.27    
C     ------------------------------------------------------------         INICON.28    
C                                                                          INICON.29    
C*        1.       PRESET CONSTANTS.                                       INICON.30    
C                  ------ ----------                                       INICON.31    
C                                                                          INICON.32    
  100 CONTINUE                                                             INICON.33    
C                                                                          INICON.34    
      API=2.*ASIN(1.D0)                                                    INICON.35    
      A=6371000.                                                           INICON.36    
      OMEGA=.7292E-4                                                       INICON.37    
      G=9.80665                                                            INICON.38    
      CPD=1005.46                                                          INICON.39    
      CPV=1869.46                                                          INICON.40    
      RD=287.05                                                            INICON.41    
      RV=461.51                                                            INICON.42    
C                                                                          INICON.43    
      RCPD=1./CPD                                                          INICON.44    
      VTMPC1=RV/RD-1.                                                      INICON.45    
      VTMPC2=CPV/CPD-1.                                                    INICON.46    
C                                                                          INICON.47    
      RHOH2O=1000.                                                         INICON.48    
      ALV=2.5008E6                                                         INICON.49    
      ALS=2.8345E6                                                         INICON.50    
      ALF=ALS-ALV                                                          INICON.51    
C                                                                          INICON.52    
      CLW=4186.84                                                          INICON.53    
      TMELT=273.16                                                         INICON.54    
C                                                                          INICON.55    
C Solar constant                                                           RAD_CL_SEBAL.1     
C      SOLC=1376.                                                          RAD_CL_SEBAL.2     
      SOLC=1365.                                                           RAD_CL_SEBAL.3     
      STBO=5.67E-8                                                         INICON.57    
C                                                                          INICON.58    
      DAYL=86400.                                                          INICON.59    
      YEARL=365.2425                                                       INICON.60    
C                                                                          INICON.61    
      C1ES=610.78                                                          INICON.62    
      C2ES=C1ES*RD/RV                                                      INICON.63    
      C3LES=17.269                                                         INICON.64    
      C3IES=21.875                                                         INICON.65    
      C4LES=35.86                                                          INICON.66    
      C4IES=7.66                                                           INICON.67    
      C5LES=C3LES*(TMELT-C4LES)                                            INICON.68    
      C5IES=C3IES*(TMELT-C4IES)                                            INICON.69    
C                                                                          INICON.70    
C     ------------------------------------------------------------         INICON.71    
C                                                                          INICON.72    
      RETURN                                                               INICON.73    
      END                                                                  INICON.74    
C***************************************************************           INICON.75    
C                                                                          INICON.76    
C   FUNCTION CVMGT                                                         INICON.77    
C                                                                          INICON.78    
C***************************************************************           INICON.79    
C                                                                          INICON.80    
       REAL FUNCTION CVMGT(Z1, Z2, LO)                                     INICON.81    
C                                                                          INICON.82    
       IMPLICIT NONE                                                       INICON.83    
C                                                                          INICON.84    
       REAL Z1, Z2                                                         INICON.85    
       LOGICAL LO                                                          INICON.86    
C                                                                          INICON.87    
       IF (LO) THEN                                                        INICON.88    
          CVMGT = Z1                                                       INICON.89    
       ELSE                                                                INICON.90    
          CVMGT = Z2                                                       INICON.91    
       END IF                                                              INICON.92    
C                                                                          INICON.93    
       RETURN                                                              INICON.94    
       END                                                                 INICON.95    
C***************************************************************           INICON.96    
C                                                                          INICON.97    
C   FUNCTION CVMGI                                                         INICON.98    
C                                                                          INICON.99    
C***************************************************************           INICON.100   
C                                                                          INICON.101   
       INTEGER FUNCTION CVMGI(I1, I2, LO)                                  INICON.102   
C                                                                          INICON.103   
       IMPLICIT NONE                                                       INICON.104   
C                                                                          INICON.105   
       INTEGER I1, I2                                                      INICON.106   
       LOGICAL LO                                                          INICON.107   
C                                                                          INICON.108   
       IF (LO) THEN                                                        INICON.109   
          CVMGI = I1                                                       INICON.110   
       ELSE                                                                INICON.111   
          CVMGI = I2                                                       INICON.112   
       END IF                                                              INICON.113   
C                                                                          INICON.114   
       RETURN                                                              INICON.115   
       END                                                                 INICON.116   
C                                                                          INICON.117   
C***************************************************************           INICON.118   
C                                                                          INICON.119   
C   FUNCTION CVMGM                                                         INICON.120   
C                                                                          INICON.121   
C***************************************************************           INICON.122   
C                                                                          INICON.123   
       REAL FUNCTION CVMGM(Z1, Z2, Z3)                                     INICON.124   
C                                                                          INICON.125   
       IMPLICIT NONE                                                       INICON.126   
C                                                                          INICON.127   
       REAL Z1, Z2, Z3                                                     INICON.128   
C                                                                          INICON.129   
       IF (Z3 .LT. 0) THEN                                                 INICON.130   
          CVMGM = Z1                                                       INICON.131   
       ELSE                                                                INICON.132   
          CVMGM = Z2                                                       INICON.133   
       END IF                                                              INICON.134   
C                                                                          INICON.135   
       RETURN                                                              INICON.136   
       END                                                                 INICON.137   
C                                                                          INICON.138   
C**************************************************************            INICON.139   
C                                                                          INICON.140   
C   FUNCTION SIGMA2                                                        INICON.141   
C                                                                          INICON.142   
C***************************************************************           INICON.143   
C                                                                          INICON.144   
       REAL FUNCTION SIGMA2(N, SX, INCX)                                   INICON.145   
C                                                                          INICON.146   
       IMPLICIT NONE                                                       INICON.147   
C                                                                          INICON.148   
       INTEGER N, INCX, I                                                  INICON.149   
       REAL SX(N*INCX)                                                     INICON.150   
C                                                                          INICON.151   
       SIGMA2 = 0.                                                         INICON.152   
       DO 1 I=1,N                                                          INICON.153   
          SIGMA2 = SIGMA2 + SX(I*INCX)                                     INICON.154   
 1     CONTINUE                                                            INICON.155   
C                                                                          INICON.156   
       END                                                                 INICON.157   
                                                                           INICON.158   
*DECK SOLANG                                                               SOLANG.1     
      SUBROUTINE SOLANG (LDIUR,DOY,YCLOCK,ALAT,alon,                       SOLANG.2     
     :     AMU0,RDAYL,CDISSEM)                                             SOLANG.3     
C Pm.M. deF   27-1-98                                                      SOLANG.4     
C inputs                                                                   SOLANG.5     
C LDIUR  ! Logical for diurnal average                                     SOLANG.6     
C DOY    ! Julian day of year                                              SOLANG.7     
C YCLOCK ! Don't know yet                                                  SOLANG.8     
C ALAT   ! Latitude in degrees                                             SOLANG.9     
C ALON   ! Longitude in degrees                                            SOLANG.10    
C outputs                                                                  SOLANG.11    
C AMU0   ! Cosine of solar zenith angle                                    SOLANG.12    
C RDAYL  ! Fractional day length                                           SOLANG.13    
C CDISSEM  ! Suns relative distance as a fraction                          SOLANG.14    
                                                                           SOLANG.15    
C**** *SOLANG* - FOR SOLAR ZENITH ANGLE AND RELATIVE DAYLENGTH.            SOLANG.16    
C                                                                          SOLANG.17    
C     PURPOSE.                                                             SOLANG.18    
C     --------                                                             SOLANG.19    
C                                                                          SOLANG.20    
C          THIS ROUTINE GIVES DIFFERENT RESULTS DEPENDING ON A LOGICAL     SOLANG.21    
C     SWITCH. IF LDIUR IS TRUE ONE OBTAINS ACTUAL SOLAR ZENITH ANGLES      SOLANG.22    
C     AND VALUES OF ONE OR ZERO DEPENDING ON THE SIGN OF THE FORMER. IF    SOLANG.23    
C     LDIUR IS FALSE ONE GETS THE SAME ANSWERS AT ALL POINTS, I.E. MEAN    SOLANG.24    
C     VALUE OF THE DAYTIME SOLAR ZENITH ANGLE AND RELATIVE LENGTH OF       SOLANG.25    
C     THE DAY.                                                             SOLANG.26    
C                                                                          SOLANG.27    
C   LDIUR .... true: sun at time, false: diurnally averaged                SOLANG.28    
C                                                                          SOLANG.29    
C     ----------                                                           SOLANG.30    
C                                                                          SOLANG.31    
      REAL DOY,ALAT,RDAYL,AMU0,YCLOCK,ALON,XLON                            SOLANG.32    
C                                                                          SOLANG.33    
      REAL XLAT,YTIME,YEARL,API,ZC1YT,ZS1YT,ZC2YT,ZS2YT,CDISSEM            SOLANG.34    
      INTEGER JDAY                                                         SOLANG.35    
                                                                           SOLANG.36    
      REAL ZMU0(128),ZRDAYL(128)                                           SOLANG.37    
      LOGICAL LDIUR,LO                                                     SOLANG.38    
      REAL ZCDIS(5),ZCEQT(5),ZCDEC(5)                                      SOLANG.39    
      DATA ZCDIS/+1.000110,+0.034221,+0.001280,+0.000719,+0.000077/        SOLANG.40    
      DATA CRAE/+0.1277E-02/                                               SOLANG.41    
      DATA ZCDEC/+0.006918,-0.399912,+0.070257,-0.006758,+0.000907/        SOLANG.42    
      DATA ZCEQT/+0.000075,+0.001868,-0.032077,-0.014615,-0.040849/        SOLANG.43    
                                                                           SOLANG.44    
                                                                           SOLANG.45    
C     Bug fix: year length made consistent with the remaining of           UPDMORCMB.118   
C              code. M. Bourqui 15 nov 2001                                UPDMORCMB.119   
      YEARL=360.0                                                          UPDMORCMB.120   
      API=2.0*ASIN(1.0)                                                    SOLANG.47    
      XLAT=API*alat/180.0                                                  SOLANG.48    
      XLON=API*ALON/180.0                                                  SOLANG.49    
      JDAY=INT(DOY)                                                        SOLANG.50    
      YTIME = (FLOAT(JDAY-1)+YCLOCK/2./API)/YEARL*2.*API                   SOLANG.51    
                                                                           SOLANG.52    
C                                                                          SOLANG.53    
C                                                                          SOLANG.54    
C                                                                          SOLANG.55    
C dirrnal cycle part                                                       SOLANG.56    
C                                                                          SOLANG.57    
C*    COMPUTATIONAL CONSTANTS.                                             SOLANG.58    
C     ------------- ----------                                             SOLANG.59    
C                                                                          SOLANG.60    
      ZC1YT=COS(YTIME)                                                     SOLANG.61    
      ZS1YT=SIN(YTIME)                                                     SOLANG.62    
      ZC2YT=ZC1YT**2-ZS1YT**2                                              SOLANG.63    
      ZS2YT=2.*ZS1YT*ZC1YT                                                 SOLANG.64    
      CDISSEM=ZCDIS(1)+ZCDIS(2)*ZC1YT+ZCDIS(3)*ZS1YT+ZCDIS(4)*ZC2YT        SOLANG.65    
     *       +ZCDIS(5)*ZS2YT                                               SOLANG.66    
C                                                                          SOLANG.67    
      ZCRAE=CRAE*(CRAE+2.)                                                 SOLANG.68    
C     ------------------------------------------------------------------   SOLANG.69    
C*         2.     SOLAR ANGLE AND OZONE/AEROSOL PARAMETERS COMPUTATIONS.   SOLANG.70    
C                 ----- ----- --- ------------- ---------- -------------   SOLANG.71    
C                                                                          SOLANG.72    
 200  CONTINUE                                                             SOLANG.73    
C                                                                          SOLANG.74    
C*         2.1     INTRODUCE THE LATITUDE DEPENDENCY.                      SOLANG.75    
      ZSIN = SIN(XLAT)                                                     SOLANG.76    
      ZSQCST = SQRT(1.0-ZSIN**2)                                           SOLANG.77    
      ZDECLI=ZCDEC(1)+ZCDEC(2)*ZC1YT+ZCDEC(3)*ZS1YT+ZCDEC(4)*ZC2YT         SOLANG.78    
     *       +ZCDEC(5)*ZS2YT                                               SOLANG.79    
      ZEQTIM=ZCEQT(1)+ZCEQT(2)*ZC1YT+ZCEQT(3)*ZS1YT+ZCEQT(4)*ZC2YT         SOLANG.80    
     *       +ZCEQT(5)*ZS2YT                                               SOLANG.81    
      ZZEN1=SIN(ZDECLI)                                                    SOLANG.82    
      ZZEN2=COS(ZDECLI)*COS(YCLOCK+ZEQTIM)                                 SOLANG.83    
      ZZEN3=COS(ZDECLI)*SIN(YCLOCK+ZEQTIM)                                 SOLANG.84    
C                                                                          SOLANG.85    
      ZTIM1 = ZZEN1 * ZSIN                                                 SOLANG.86    
      ZTIM2 =-ZZEN2 * ZSQCST                                               SOLANG.87    
      ZTIM3 = ZZEN3 * ZSQCST                                               SOLANG.88    
C                                                                          SOLANG.89    
C     ---------------------------------------------------------------      SOLANG.90    
C                                                                          SOLANG.91    
C*         2.     COMPUTATIONS IF DIURNAL CYCLE "ON".                      SOLANG.92    
C                 ------------ -- ------- ----- -----                      SOLANG.93    
C                                                                          SOLANG.94    
C***                                                                       SOLANG.95    
                                                                           SOLANG.96    
c      COSLON=1.0                                                          SOLANG.97    
c      SINLON=0.0                                                          SOLANG.98    
       COSLON=COS(XLON)                                                    SOLANG.99    
       SINLON=SIN(XLON)                                                    SOLANG.100   
      IF(LDIUR) THEN                                                       SOLANG.101   
C***                                                                       SOLANG.102   
      AMU0=ZTIM1+ZTIM2*COSLON+ZTIM3*SINLON                                 SOLANG.103   
      LO=AMU0.GE.0.                                                        SOLANG.104   
      AMU0=CVMGT(AMU0,0.0,LO)                                              SOLANG.105   
      RDAYL=CVMGT(1.0,0.0,LO)                                              SOLANG.106   
      IF (LO) THEN                                                         SOLANG.107   
        RDAYL=1.0                                                          SOLANG.108   
        AMU0=AMU0                                                          SOLANG.109   
      ELSE                                                                 SOLANG.110   
        RDAYL=0.0                                                          SOLANG.111   
        AMU0=0.0                                                           SOLANG.112   
      ENDIF                                                                SOLANG.113   
C                                                                          SOLANG.114   
C     -----------------------------------------------------------------    SOLANG.115   
C                                                                          SOLANG.116   
C*         3.     COMPUTATIONS IF DIURNAL CYCLE "OFF".                     SOLANG.117   
C                 ------------ -- ------- ----- ------                     SOLANG.118   
      ELSE                                                                 SOLANG.119   
C***                                                                       SOLANG.120   
      DO 301 JL=1,128                                                      SOLANG.121   
      ZL=2.*API*(JL-1.)/128.                                               SOLANG.122   
      ZMU0(JL)=ZTIM1+ZTIM2*COS(ZL)+ZTIM3*SIN(ZL)                           SOLANG.123   
                                                                           SOLANG.124   
      LO=ZMU0(JL).GE.0.                                                    SOLANG.125   
      ZMU0(JL)=CVMGT(ZMU0(JL),0.0,LO)                                      SOLANG.126   
      ZRDAYL(JL)=CVMGT(1.0,0.0,LO)                                         SOLANG.127   
  301 CONTINUE                                                             SOLANG.128   
      ZS1=SIGMA2(128,ZMU0(1),1)                                            SOLANG.129   
      ZS2=SIGMA2(128,ZRDAYL(1),1)                                          SOLANG.130   
      IF(ZS2.NE.0.) THEN                                                   SOLANG.131   
      ZS1=ZS1/ZS2                                                          SOLANG.132   
      ZS2=ZS2/128.                                                         SOLANG.133   
      END IF                                                               SOLANG.134   
      AMU0=ZS1                                                             SOLANG.135   
      RDAYL=ZS2                                                            SOLANG.136   
C***                                                                       SOLANG.137   
      END IF                                                               SOLANG.138   
C                                                                          SOLANG.139   
      AMU0=CRAE/(SQRT(AMU0**2+ZCRAE)-AMU0)                                 SOLANG.140   
                                                                           SOLANG.141   
      RETURN                                                               SOLANG.142   
      END                                                                  SOLANG.143   
*DECK GRAVD                                                                GRAVD.1     
!=====================================================                     GRAVD.2     
! Gravity wave drag subroutine                                             GRAVD.3     
!=====================================================                     GRAVD.4     
      SUBROUTINE GRAVD(JH)                                                 GRAVD.5     
      IMPLICIT NONE                                                        GRAVD.6     
*CALL PARAM1                                                               GRAVD.7     
*CALL PARAM2                                                               GRAVD.8     
*CALL PARAM3                                                               GRAVD.9     
*CALL BLANK                                                                GRAVD.10    
*CALL LEGAU                                                                GRAVD.11    
*CALL BATS                                                                 GRAVD.12    
*CALL GRIDPA3                                                              GRAVD.13    
*CALL PHYSCA                                                               GRAVD.14    
*CALL OROG_G                                                               GRAVD.15    
*CALL MPIDECK                                                              GRAVD.16    
!-----------------------------------------------------                     GRAVD.17    
! Passed argument                                                          GRAVD.18    
!-----------------------------------------------------                     GRAVD.19    
! Latitude index                                                           GRAVD.20    
      INTEGER :: JH                                                        GRAVD.21    
!-----------------------------------------------------                     GRAVD.22    
! Local variables                                                          GRAVD.23    
!-----------------------------------------------------                     GRAVD.24    
! zonal wind profile dimensionalised, breaking level                       GRAVD.25    
      REAL :: UDM(NL),VDM(NL),RLEVB(NL)                                    GRAVD.26    
! Brunt vaisala freq in trop and strat                                     GRAVD.27    
      REAL :: BVFT,BVFS                                                    GRAVD.28    
! Breaking level diagnostic                                                GRAVD.29    
      REAL :: RLEVBZM(NL,NHEM)                                             GRAVD.30    
! GW acceleration diagnostic                                               GRAVD.31    
      REAL :: FXZM(NL,NHEM)                                                GRAVD.32    
      REAL :: SQC                                                          GRAVD.33    
      REAL :: HGT                                                          GRAVD.34    
      INTEGER :: igunit                                                    GRAVD.35    
      INTEGER :: igfreq                                                    GRAVD.36    
      INTEGER :: LGSTART,LGCHECK                                           GRAVD.37    
      INTEGER :: ICPH                                                      GRAVD.38    
      REAL :: RICPH,CPH                                                    GRAVD.39    
      REAL :: ugwav                                                        GRAVD.40    
      REAL :: VARU                                                         GRAVD.41    
      INTEGER :: LEVC                                                      GRAVD.42    
      REAL :: SIGB,PSGW,PSSL                                               GRAVD.43    
      REAL :: USUM,VSUM                                                    GRAVD.44    
      REAL :: FX,FY                                                        GRAVD.45    
      INTEGER, PARAMETER :: TagRef=7000000                                 GRAVD.46    
      REAL :: HoldVar(0:NL,NHEM,2)                                         GRAVD.47    
      REAL, ALLOCATABLE :: WriteArray(:,:,:)                               GRAVD.48    
! Loop variables                                                           GRAVD.49    
      INTEGER :: I, IHEM, JGW, L                                           GRAVD.50    
!-----------------------------------------------------                     GRAVD.51    
! Cos(theta), Scale height,Rayleigh friction 1/Tau,I/O unit,freq           GRAVD.52    
!-----------------------------------------------------                     GRAVD.53    
      SQC=SQRT(CSSQ(JJ1(iRow)+JH,1))                                       GRAVD.54    
      HGT=7.0E3                                                            GRAVD.55    
      BVFS=0.02                                                            GRAVD.56    
      BVFT=0.01                                                            GRAVD.57    
      igunit=71                                                            GRAVD.58    
      igfreq=30                                                            GRAVD.59    
!-----------------------------------------------------                     GRAVD.60    
! Initialise zonal mean diags                                              GRAVD.61    
!-----------------------------------------------------                     GRAVD.62    
      IF (iCol.EQ.1) THEN                                                  GRAVD.63    
        DO IHEM=1,NHEM                                                     GRAVD.64    
          DO L=1,NL                                                        GRAVD.65    
	    RLEVBZM(L,IHEM)=0.0                                                   GRAVD.66    
	    FXZM(L,IHEM)=0.0                                                      GRAVD.67    
          ENDDO                                                            GRAVD.68    
        ENDDO                                                              GRAVD.69    
      ELSE                                                                 GRAVD.70    
	!-----------------------------------------------------                    GRAVD.71    
        ! Get the values of RLEVBZM and FXZM from previous PE column       GRAVD.72    
	!-----------------------------------------------------                    GRAVD.73    
        iSend=PeGrid(iCol-1,iRow)                                          GRAVD.74    
        nBuffSize=(nl+1)*nhem*2                                            GRAVD.75    
        iTag=TagRef+1000*(iCol-1)+iRow                                     GRAVD.76    
        CALL MPI_RECV(HoldVar,nBuffSize,ParaReal,iSend,                    GRAVD.77    
     &                iTag,MPI_COMM_WORLD,istat,ierr)                      GRAVD.78    
        RLEVBZM(1:NL,:)=HoldVar(1:NL,:,1)                                  GRAVD.79    
        FXZM(1:NL,:) =HoldVar(1:NL,:,2)                                    GRAVD.80    
      ENDIF                                                                GRAVD.81    
      !-----------------------------------------------------               GRAVD.82    
      ! Loop over hemispheres                                              GRAVD.83    
      !-----------------------------------------------------               GRAVD.84    
      DO IHEM=1,NHEM                                                       GRAVD.85    
	!-----------------------------------------------------                    GRAVD.86    
        ! Longitude loop                                                   GRAVD.87    
	!-----------------------------------------------------                    GRAVD.88    
        DO I=1,MGxx(iCol)                                                  GRAVD.89    
                                                                           GRAVD.90    
           !-----------------------------------------------------          GRAVD.91    
           ! Start gravity wave upwards from level above 250 hPa           GRAVD.92    
           ! Initialise dimensional winds UDM, VDM and surf pressure       GRAVD.93    
           !-----------------------------------------------------          GRAVD.94    
           LGSTART=2                                                       GRAVD.95    
           LGCHECK=0                                                       GRAVD.96    
           PSGW=P0*PLG3(I,IHEM,JH)                                         GRAVD.97    
	   DO L=1,NL                                                              GRAVD.98    
              IF(PSGW*SIGMA(L).gt.2.5E4.and.LGCHECK.eq.0)                  GRAVD.99    
     :        THEN                                                         GRAVD.100   
                LGSTART=L-1                                                GRAVD.101   
                LGCHECK=1                                                  GRAVD.102   
              ENDIF                                                        GRAVD.103   
	      UDM(L)=UG3(I,IHEM,JH,L)*CV/SQC                                      GRAVD.104   
	      VDM(L)=VG3(I,IHEM,JH,L)*CV/SQC                                      GRAVD.105   
	   ENDDO                                                                  GRAVD.106   
                                                                           GRAVD.107   
	   !-----------------------------------------------------                 GRAVD.108   
           ! Before calculating zonal GW drag, calculate zonal and         GRAVD.109   
           ! meridional drag at model top: this is the sponge layer        GRAVD.110   
           ! Drag formulation is like GWD and and momentum is              GRAVD.111   
           ! conserved (improvement on spectral Rayleigh friction)         GRAVD.112   
           ! Drag factor PSSL tuned and reduces with P0*sigma(1)/P(L)      GRAVD.113   
           ! so that drag reduces away from model top. Sponge layer        GRAVD.114   
           ! implies some wave breaking at model top                       GRAVD.115   
	   !-----------------------------------------------------                 GRAVD.116   
	   USUM=0.0                                                               GRAVD.117   
           VSUM=0.0                                                        GRAVD.118   
	   DO L=1,NLEVRF                                                          GRAVD.119   
              PSSL=0.125*MIN((SIGMA(1)*1.0E5)/(PSGW*SIGMA(L)),1.0)         GRAVD.120   
	      FX=-0.2*PSSL*GWK*(UDM(L)**3)/                                       GRAVD.121   
     &               (2.0*HGT*BVFS)                                        GRAVD.122   
	      FUG3(I,IHEM,JH,L)=FUG3(I,IHEM,JH,L)+FX*SQC/(CV*WW)                  GRAVD.123   
	      UG3(I,IHEM,JH,L)=UG3(I,IHEM,JH,L)+DELT2C*FX*SQC/(CV*WW)             GRAVD.124   
	      USUM=USUM+(FX*SQC/(CV*WW))*DSIGMA(L)/DSIGMA(NL)                     GRAVD.125   
	      FY=-0.2*PSSL*GWK*(VDM(L)**3)/                                       GRAVD.126   
     &               (2.0*HGT*BVFS)                                        GRAVD.127   
	      FVG3(I,IHEM,JH,L)=FVG3(I,IHEM,JH,L)+FY*SQC/(CV*WW)                  GRAVD.128   
	      VG3(I,IHEM,JH,L)=VG3(I,IHEM,JH,L)+DELT2C*FY*SQC/(CV*WW)             GRAVD.129   
	      VSUM=VSUM+(FY*SQC/(CV*WW))*DSIGMA(L)/DSIGMA(NL)                     GRAVD.130   
C                                                                          GRAVD.131   
	      FXZM(L,IHEM)=FXZM(L,IHEM)+FX/REAL(MG)                               GRAVD.132   
	      RLEVBZM(L,IHEM)=RLEVBZM(L,IHEM)+RLEVB(L)/REAL(MG)                   GRAVD.133   
	   ENDDO                                                                  GRAVD.134   
	   !-----------------------------------------------------                 GRAVD.135   
           ! Take tendencies off the lowest layer to conserve              GRAVD.136   
           ! momentum                                                      GRAVD.137   
	   !-----------------------------------------------------                 GRAVD.138   
           FUG3(I,IHEM,JH,NL)=FUG3(I,IHEM,JH,NL)-USUM                      GRAVD.139   
           UG3(I,IHEM,JH,NL)=UG3(I,IHEM,JH,NL)-DELT2C*USUM                 GRAVD.140   
                                                                           GRAVD.141   
           FVG3(I,IHEM,JH,NL)=FVG3(I,IHEM,JH,NL)-VSUM                      GRAVD.142   
           VG3(I,IHEM,JH,NL)=VG3(I,IHEM,JH,NL)-DELT2C*VSUM                 GRAVD.143   
                                                                           GRAVD.144   
! GW drag phase speed loop: zero is the orographic mode                    GRAVD.145   
                                                                           GRAVD.146   
           DO ICPH=-1,1                                                    GRAVD.147   
                                                                           GRAVD.148   
! Initialise breaking indicator. Zero is no breaking                       GRAVD.149   
                                                                           GRAVD.150   
	   DO L=1,NL                                                              GRAVD.151   
              RLEVB(L)=0.0                                                 GRAVD.152   
	   ENDDO                                                                  GRAVD.153   
                                                                           GRAVD.154   
           RICPH=REAL(ICPH)                                                GRAVD.155   
                                                                           GRAVD.156   
	   !-----------------------------------------------------                 GRAVD.157   
           ! Calculate zonally averaged breaking level for each            GRAVD.158   
           ! ICPH and IHEM. GW amplitude = h*U                             GRAVD.159   
           ! For orog modes h=orog sd., U=low-level wind, CPH=0            GRAVD.160   
           ! For non-orog U=10,h*U=U*GWNO, CPH=U(NL)+/-RICPH*10            GRAVD.161   
           ! VARU for non-orog modes is effectively constant               GRAVD.162   
	   !-----------------------------------------------------                 GRAVD.163   
           IF (icph.eq.0) then                                             GRAVD.164   
              UGWAV = abs(UDM(NL))                                         GRAVD.165   
C Simple Froude number criterion for orog gwd                              GRAVD.166   
              if(BVFT*TOPVAR(I,IHEM,JH)/(UGWAV+1.0E-2).gt.1.0)goto 695     GRAVD.167   
              CPH = 0.0                                                    GRAVD.168   
              VARU = UGWAV*TOPVAR(I,IHEM,JH)                               GRAVD.169   
           else                                                            GRAVD.170   
              UGWAV=10.0                                                   GRAVD.171   
              CPH = UDM(NL)+RICPH*10.0                                     GRAVD.172   
              VARU = UGWAV*GWNO                                            GRAVD.173   
           endif                                                           GRAVD.174   
	   !-----------------------------------------------------                 GRAVD.175   
           ! Iterate upwards from LGSTART to find SIGB (breaking level)    GRAVD.176   
           ! and LEVC (critical layer).                                    GRAVD.177   
	   !-----------------------------------------------------                 GRAVD.178   
           LEVC=1                                                          GRAVD.179   
           DO L=LGSTART-1,1,-1                                             GRAVD.180   
              SIGB=((BVFS*VARU)**2.0)/                                     GRAVD.181   
     &            (UGWAV*ABS((UDM(L)-CPH)**3)+1.0E-6)                      GRAVD.182   
	      !-----------------------------------------------------              GRAVD.183   
              ! Breaking wave if SIGB or wave already broken below...      GRAVD.184   
	      !-----------------------------------------------------              GRAVD.185   
	      IF(SIGB.gt.SIGMA(L).or.RLEVB(L+1).gt.1.0E-5)THEN                    GRAVD.186   
		 RLEVB(L)=1.0                                                            GRAVD.187   
	      ENDIF                                                               GRAVD.188   
	      !-----------------------------------------------------              GRAVD.189   
              ! ...unless critical level reached.                          GRAVD.190   
              ! breaking levels on either side of this                     GRAVD.191   
	      !-----------------------------------------------------              GRAVD.192   
	      IF((UDM(L)-CPH)*(UDM(L+1)-CPH).LT.0.0)THEN                          GRAVD.193   
		 LEVC=L                                                                  GRAVD.194   
		 RLEVB(L)=0.5                                                            GRAVD.195   
		 RLEVB(L+1)=0.5                                                          GRAVD.196   
		 goto 690                                                                GRAVD.197   
	      ENDIF                                                               GRAVD.198   
	   ENDDO                                                                  GRAVD.199   
 690	   CONTINUE                                                           GRAVD.200   
	   !-----------------------------------------------------                 GRAVD.201   
           ! Calculate zonal tendencies between LEVC                       GRAVD.202   
	   ! and zonal mean GWD diags. Factor of 0.2 is for                       GRAVD.203   
	   ! wave intermittency and is from Barnes (JGR 1990)                     GRAVD.204   
	   !-----------------------------------------------------                 GRAVD.205   
	   USUM=0.0                                                               GRAVD.206   
	   DO L=LEVC,LGSTART                                                      GRAVD.207   
	      FX=-0.2*RLEVB(L)*GWK*((UDM(L)-CPH)**3)/                             GRAVD.208   
     &               (2.0*HGT*BVFS)                                        GRAVD.209   
	      FUG3(I,IHEM,JH,L)=FUG3(I,IHEM,JH,L)+FX*SQC/(CV*WW)                  GRAVD.210   
	      UG3(I,IHEM,JH,L)=UG3(I,IHEM,JH,L)+DELT2C*FX*SQC/(CV*WW)             GRAVD.211   
	      USUM=USUM+(FX*SQC/(CV*WW))*DSIGMA(L)/DSIGMA(NL)                     GRAVD.212   
C                                                                          GRAVD.213   
	      FXZM(L,IHEM)=FXZM(L,IHEM)+FX/REAL(MG)                               GRAVD.214   
	      RLEVBZM(L,IHEM)=RLEVBZM(L,IHEM)+RLEVB(L)/REAL(MG)                   GRAVD.215   
	   ENDDO                                                                  GRAVD.216   
	   !-----------------------------------------------------                 GRAVD.217   
           ! Take tendencies off the lowest layer to conserve              GRAVD.218   
           ! momentum                                                      GRAVD.219   
	   !-----------------------------------------------------                 GRAVD.220   
           FUG3(I,IHEM,JH,NL)=FUG3(I,IHEM,JH,NL)-USUM                      GRAVD.221   
           UG3(I,IHEM,JH,NL)=UG3(I,IHEM,JH,NL)-DELT2C*USUM                 GRAVD.222   
                                                                           GRAVD.223   
           !-----------------------------------------------------          GRAVD.224   
	   ! Add average diagnostics to output arrays                             GRAVD.225   
           ! Factor of 3 for the 3 phase speeds                            GRAVD.226   
	   !-----------------------------------------------------                 GRAVD.227   
           do l=1,nl                                                       GRAVD.228   
            rlevbzmo(jh,ihem,l)=rlevbzmo(jh,ihem,l)+                       GRAVD.229   
     &                       rlevbzm(l,ihem)/real(ITSPD*igfreq*3)          GRAVD.230   
           enddo                                                           GRAVD.231   
                                                                           GRAVD.232   
           do l=1,nl                                                       GRAVD.233   
           fxzmo(jh,ihem,l)=fxzmo(jh,ihem,l)+                              GRAVD.234   
     &                      fxzm(l,ihem)/real(ITSPD*igfreq*3)              GRAVD.235   
           enddo                                                           GRAVD.236   
                                                                           GRAVD.237   
 695       CONTINUE                                                        GRAVD.238   
                                                                           GRAVD.239   
           END DO       ! end cph phase speed loop                         GRAVD.240   
                                                                           GRAVD.241   
        ENDDO           ! end longitude loop                               GRAVD.242   
                                                                           GRAVD.243   
      ENDDO   ! End IHEM LOOP                                              GRAVD.244   
!-----------------------------------------------------                     GRAVD.245   
! Pass RLEVBZM and FXZM to the next column of PEs                          GRAVD.246   
!-----------------------------------------------------                     GRAVD.247   
      IF ((Px.GT.1).AND.(iCol.LT.Px)) THEN                                 GRAVD.248   
        HoldVar(1:NL,:,1)=RLEVBZM(1:NL,:)                                  GRAVD.249   
        HoldVar(1:NL,:,2)=FXZM(1:NL,:)                                     GRAVD.250   
        iRecv=PeGrid(iCol+1,iRow)                                          GRAVD.251   
        nBuffSize=(nl+1)*nhem*2                                            GRAVD.252   
        iTag=TagRef+1000*iCol+iRow                                         GRAVD.253   
        CALL MPI_BSEND(HoldVar,nBuffSize,ParaReal,                         GRAVD.254   
     &                 iRecv,iTag,MPI_COMM_WORLD,ierr)                     GRAVD.255   
      ENDIF                                                                GRAVD.256   
!-----------------------------------------------------                     GRAVD.257   
! Output every IGFREQ days and re-zero output arrays                       GRAVD.258   
!-----------------------------------------------------                     GRAVD.259   
      IF (mod(kount,itspd*igfreq).EQ.0.AND.JH.EQ.JG) THEN                  GRAVD.260   
	 IF (MyPe.EQ.0) ALLOCATE(WriteArray(JG,NHEM,NL))                          GRAVD.261   
	 CALL SHAREGRID3(NL,RLEVBZMO,WriteArray)                                  GRAVD.262   
	 write(igunit,*) WriteArray                                               GRAVD.263   
	 CALL SHAREGRID3(NL,FXZMO,WriteArray)                                     GRAVD.264   
	 write(igunit+1,*) WriteArray                                             GRAVD.265   
	 call flush(igunit)                                                       GRAVD.266   
	 call flush(igunit+1)                                                     GRAVD.267   
	 IF (MyPe.EQ.0) DEALLOCATE(WriteArray)                                    GRAVD.268   
	 DO L=1,NL                                                                GRAVD.269   
	    DO IHEM=1,NHEM                                                        GRAVD.270   
	       DO JGW=1,JGyy(iRow)                                                GRAVD.271   
		  RLEVBZMO(JGW,IHEM,L)=0.0                                               GRAVD.272   
		  FXZMO(JGW,IHEM,L)=0.0                                                  GRAVD.273   
	       ENDDO                                                              GRAVD.274   
	    ENDDO                                                                 GRAVD.275   
	 ENDDO                                                                    GRAVD.276   
      ENDIF                                                                GRAVD.277   
      RETURN                                                               GRAVD.278   
      END                                                                  GRAVD.279   
*DECK INICMA                                                               INICMA.1     
c                                                                          INICMA.2     
C****                                                                      INICMA.3     
C                                                                          INICMA.4     
C**** *INICMA*  - Initialize coupled mode communication for atmosphere     INICMA.5     
C                 and exchange some initial information with Oasis         INICMA.6     
C                                                                          INICMA.7     
C     Input:                                                               INICMA.8     
C     -----                                                                INICMA.9     
C       KASTP  : total number of timesteps in atmospheric model            INICMA.10    
C       KEXCH  : frequency of exchange (in time steps)                     INICMA.11    
C       KSTEP  : length of timestep (in seconds)                           INICMA.12    
C                                                                          INICMA.13    
C     -----------------------------------------------------------          INICMA.14    
C                                                                          INICMA.15    
      SUBROUTINE inicma(kastp,kexch,kstep)                                 INICMA.16    
c                                                                          INICMA.17    
*CALL PARAMH                                                               INICMA.18    
c                                                                          INICMA.19    
      INTEGER kastp, kexch, kstep                                          INICMA.20    
      INTEGER iparal(3)                                                    INICMA.21    
      INTEGER ifcpl, idt, info, imxtag, istep, jf                          INICMA.22    
c                                                                          INICMA.23    
*CALL PARAMCOUH                                                            INICMA.24    
*CALL INCCPLH                                                              INICMA.25    
      CHARACTER*3 cljobnam      ! experiment name                          INICMA.26    
      CHARACTER*6 clmodnam      ! model name                               INICMA.27    
      CHARACTER*5 cloasis       ! coupler name (Oasis)                     INICMA.28    
      INTEGER imess(4)                                                     INICMA.29    
      INTEGER getpid            ! system functions                         INICMA.30    
      INTEGER nuout                                                        INICMA.31    
      PARAMETER (nuout = 6)                                                INICMA.32    
c                                                                          INICMA.33    
*CALL CLIMH                                                                INICMA.34    
c                                                                          INICMA.35    
c     INCLUDE 'oasis.h' ! contains the name of communication technique.    INICMA.36    
c                       ! Here cchan=CLIM only is possible.                INICMA.37    
*CALL OASISH                                                               INICMA.38    
c                                                                          INICMA.39    
C     -----------------------------------------------------------          INICMA.40    
C                                                                          INICMA.41    
C*    1. Initializations                                                   INICMA.42    
C        ---------------                                                   INICMA.43    
C                                                                          INICMA.44    
      WRITE(nuout,*) ' '                                                   INICMA.45    
      WRITE(nuout,*) ' '                                                   INICMA.46    
      WRITE(nuout,*) ' ROUTINE INICMA'                                     INICMA.47    
      WRITE(nuout,*) ' **************'                                     INICMA.48    
      WRITE(nuout,*) ' '                                                   INICMA.49    
      WRITE(nuout,*) ' '                                                   INICMA.50    
c                                                                          INICMA.51    
c     Define the model name                                                INICMA.52    
c                                                                          INICMA.53    
      clmodnam = 'toyatm'    ! as in $NBMODEL in Cpl/Nam/namcouple.tmp     INICMA.54    
c                                                                          INICMA.55    
c     Define the coupler name                                              INICMA.56    
c                                                                          INICMA.57    
      cloasis = 'Oasis'     !  always 'Oasis' as in the coupler            INICMA.58    
c                                                                          INICMA.59    
c                                                                          INICMA.60    
c     Define symbolic name for fields exchanged from atmos to coupler,     INICMA.61    
c         must be the same as (1) of the field  definition in namcouple:   INICMA.62    
c                                                                          INICMA.63    
      cl_writ(1)='CONSFTOT'                                                INICMA.64    
      cl_writ(2)='COSHFTOT'                                                INICMA.65    
      cl_writ(3)='COWATFLU'                                                INICMA.66    
      cl_writ(4)='CORUNOFF'                                                INICMA.67    
      cl_writ(5)='COZOTAUX'                                                INICMA.68    
      cl_writ(6)='COMETAUY'                                                INICMA.69    
      cl_writ(7)='COZOTAUV'                                                INICMA.70    
      cl_writ(8)='COMETAUU'                                                INICMA.71    
c                                                                          INICMA.72    
c     Define files name for fields exchanged from atmos to coupler,        INICMA.73    
c         must be the same as (6) of the field  definition in namcouple:   INICMA.74    
c                                                                          INICMA.75    
c     cl_f_writ(1)='flxatmos'                                              INICMA.76    
c     cl_f_writ(2)='flxatmos'                                              INICMA.77    
c     cl_f_writ(3)='flxatmos'                                              INICMA.78    
c     cl_f_writ(4)='flxatmos'                                              INICMA.79    
c     cl_f_writ(5)='flxatmos'                                              INICMA.80    
c     cl_f_writ(6)='flxatmos'                                              INICMA.81    
c     cl_f_writ(7)='flxatmos'                                              INICMA.82    
c     cl_f_writ(8)='flxatmos'                                              INICMA.83    
      cl_f_writ(1)='flxocean'                                              INICMA.84    
      cl_f_writ(2)='flxocean'                                              INICMA.85    
      cl_f_writ(3)='flxocean'                                              INICMA.86    
      cl_f_writ(4)='flxocean'                                              INICMA.87    
      cl_f_writ(5)='flxocean'                                              INICMA.88    
      cl_f_writ(6)='flxocean'                                              INICMA.89    
      cl_f_writ(7)='flxocean'                                              INICMA.90    
      cl_f_writ(8)='flxocean'                                              INICMA.91    
c                                                                          INICMA.92    
c                                                                          INICMA.93    
c Define symbolic name for fields exchanged from coupler to atmosphere,    INICMA.94    
c must be the same as (2) of the field  definition in namcouple:           INICMA.95    
c                                                                          INICMA.96    
      cl_read(1)='SISUTESU'                                                INICMA.97    
      cl_read(2)='SIZONCUR'                                                INICMA.98    
      cl_read(3)='SIMERCUR'                                                INICMA.99    
c                                                                          INICMA.100   
c Define files names for fields exchanged from coupler to atmosphere,      INICMA.101   
c must be the same as (7) of the field  definition in namcouple:           INICMA.102   
c                                                                          INICMA.103   
      cl_f_read(1)='sstatmos'                                              INICMA.104   
      cl_f_read(2)='sstatmos'                                              INICMA.105   
      cl_f_read(3)='sstatmos'                                              INICMA.106   
c                                                                          INICMA.107   
c     Define infos to be sent initially to oasis                           INICMA.108   
c                                                                          INICMA.109   
      imess(1) = kastp  ! total number of timesteps in atmospheric model   INICMA.110   
      imess(2) = kexch  ! period of exchange (in time steps)               INICMA.111   
      imess(3) = kstep  ! length of atmospheric timestep (in seconds)      INICMA.112   
      imess(4) = getpid()   ! PID of atmospheric model                     INICMA.113   
c                                                                          INICMA.114   
c     Initialization and exchange of initial info in the CLIM technique    INICMA.115   
c                                                                          INICMA.116   
      IF (cchan.eq.'CLIM') THEN                                            INICMA.117   
c                                                                          INICMA.118   
c     Define the experiment name :                                         INICMA.119   
c                                                                          INICMA.120   
          cljobnam = 'CLI'      ! as $JOBNAM in namcouple                  INICMA.121   
c                                                                          INICMA.122   
c         Start the coupling                                               INICMA.123   
c   (see lib/clim/src/CLIM_Init for the definition of input parameters)    INICMA.124   
c                                                                          INICMA.125   
          CALL CLIM_Init ( cljobnam, clmodnam, 3, 71,                      INICMA.126   
     *                 kastp, kexch, kstep,                                INICMA.127   
     *                 5, 3600, 3600, info )                               INICMA.128   
c                                                                          INICMA.129   
                                                                           INICMA.130   
          IF (info.ne.CLIM_Ok) THEN                                        INICMA.131   
              WRITE ( nuout, *) ' inicma : pb init clim '                  INICMA.132   
              WRITE ( nuout, *) ' error code is = ', info                  INICMA.133   
              CALL halte('STOP in inicma')                                 INICMA.134   
            ELSE                                                           INICMA.135   
              WRITE(nuout,*) 'inicma : init clim ok '                      INICMA.136   
          ENDIF                                                            INICMA.137   
c                                                                          INICMA.138   
c For each coupling field, association of a port to its symbolic name      INICMA.139   
c                                                                          INICMA.140   
c -Define the parallel decomposition associated to the port of each        INICMA.141   
c          field; here no decomposition for all ports.                     INICMA.142   
          iparal ( clim_strategy ) = clim_serial                           INICMA.143   
          iparal ( clim_length   ) = imjm                                  INICMA.144   
          iparal ( clim_offset   ) = 0                                     INICMA.145   
c                                                                          INICMA.146   
c         -Loop on total number of coupler-to-atmosphere fields            INICMA.147   
c (see lib/clim/src/CLIM_Define for the definition of input parameters)    INICMA.148   
          DO jf=1, jpfldo2a                                                INICMA.149   
            CALL CLIM_Define (cl_read(jf), clim_in , clim_double, iparal   INICMA.150   
     $          , info )                                                   INICMA.151   
          END DO                                                           INICMA.152   
c                                                                          INICMA.153   
c         -Loop on total number of atmosphere-to-coupler fields            INICMA.154   
c (see lib/clim/src/CLIM_Define for the definition of input parameters)    INICMA.155   
          DO jf=1, jpflda2o1+jpflda2o2                                     INICMA.156   
            CALL CLIM_Define (cl_writ(jf), clim_out , clim_double,         INICMA.157   
     $          iparal, info )                                             INICMA.158   
          END DO                                                           INICMA.159   
c                                                                          INICMA.160   
          WRITE(nuout,*) 'inicma : clim_define ok '                        INICMA.161   
c                                                                          INICMA.162   
c -Join a pvm group, wait for other programs and broadcast usefull         INICMA.163   
c  informations to Oasis and to the ocean (see lib/clim/src/CLIM_Start)    INICMA.164   
          CALL CLIM_Start ( imxtag, info )                                 INICMA.165   
                                                                           INICMA.166   
                                                                           INICMA.167   
          IF (info.ne.clim_ok) THEN                                        INICMA.168   
              WRITE ( nuout, *) 'inicma : pb start clim '                  INICMA.169   
              WRITE ( nuout, *) ' error code is = ', info                  INICMA.170   
              CALL halte('stop in inicma')                                 INICMA.171   
            ELSE                                                           INICMA.172   
              WRITE ( nuout, *)  'inicma : start clim ok '                 INICMA.173   
          ENDIF                                                            INICMA.174   
c                                                                          INICMA.175   
c         -Get initial information from Oasis                              INICMA.176   
c          (see lib/clim/src/CLIM_Stepi)                                   INICMA.177   
          CALL CLIM_Stepi (cloasis, istep, ifcpl, idt, info)               INICMA.178   
          IF (info .NE. clim_ok) THEN                                      INICMA.179   
              WRITE ( UNIT = nuout, FMT = *)                               INICMA.180   
     $            ' warning : problem in getting step info ',              INICMA.181   
     $            'from oasis '                                            INICMA.182   
              WRITE (UNIT = nuout, FMT = *)                                INICMA.183   
     $            ' =======   error code number = ', info                  INICMA.184   
            ELSE                                                           INICMA.185   
              WRITE (UNIT = nuout, FMT = *)                                INICMA.186   
     $            ' got step information from oasis '                      INICMA.187   
          ENDIF                                                            INICMA.188   
          WRITE ( nuout, *) ' number of tstep in oasis ', istep            INICMA.189   
          WRITE ( nuout, *) ' exchange frequency in oasis ', ifcpl         INICMA.190   
          WRITE ( nuout, *) ' length of tstep in oasis ', idt              INICMA.191   
      ENDIF                                                                INICMA.192   
                                                                           INICMA.193   
      RETURN                                                               INICMA.194   
      END                                                                  INICMA.195   
      SUBROUTINE fromcpl(kt, imjm, sst, zsc, msc)                          INICMA.196   
c ======================================================================   INICMA.197   
c S. Valcke (02/99) adapted From L.Z.X Li:this subroutine reads the SST    INICMA.198   
c and Sea-Ice provided by the coupler with the CLIM (PVM exchange)         INICMA.199   
c technique.                                                               INICMA.200   
c======================================================================    INICMA.201   
      IMPLICIT none                                                        INICMA.202   
      INTEGER imjm, kt                                                     INICMA.203   
      REAL sst(imjm)          ! sea-surface-temperature                    INICMA.204   
      REAL zsc(imjm)          ! zonal sea surface current                  INICMA.205   
      REAL msc(imjm)          ! meridional sea surface current             INICMA.206   
c                                                                          INICMA.207   
      INTEGER nuout             ! listing output unit                      INICMA.208   
      PARAMETER (nuout=6)                                                  INICMA.209   
c                                                                          INICMA.210   
      INTEGER nuread, ios, iflag, icpliter                                 INICMA.211   
      INTEGER info, jf                                                     INICMA.212   
c                                                                          INICMA.213   
*CALL CLIMH                                                                INICMA.214   
c                                                                          INICMA.215   
*CALL OASISH                                                               INICMA.216   
*CALL PARAMCOUH                                                            INICMA.217   
c                                                                          INICMA.218   
*CALL INCCPLH                                                              INICMA.219   
c                                                                          INICMA.220   
c                                                                          INICMA.221   
      WRITE (nuout,*) ' '                                                  INICMA.222   
      WRITE (nuout,*) 'Fromcpl: Reading fields from CPL, kt=',kt           INICMA.223   
      WRITE (nuout,*) ' '                                                  INICMA.224   
c     CALL flush (nuout)                                                   INICMA.225   
      CALL fish (nuout)                                                    INICMA.226   
                                                                           INICMA.227   
                                                                           INICMA.228   
      IF (cchan.eq.'CLIM') THEN                                            INICMA.229   
                                                                           INICMA.230   
c                                                                          INICMA.231   
c     -Get interpolated oceanic fields from Oasis                          INICMA.232   
c                                                                          INICMA.233   
          DO jf=1,jpfldo2a                                                 INICMA.234   
            IF (jf.eq.1) CALL CLIM_Import (cl_read(jf) , kt, sst, info)    INICMA.235   
            IF (jf.eq.2) CALL CLIM_Import (cl_read(jf) , kt, zsc, info)    INICMA.236   
            IF (jf.eq.3) CALL CLIM_Import (cl_read(jf) , kt, msc, info)    INICMA.237   
            IF ( info .NE. CLIM_Ok) THEN                                   INICMA.238   
                WRITE(nuout,*)'Pb in reading ', cl_read(jf), jf            INICMA.239   
                WRITE(nuout,*)'Couplage kt is = ',kt                       INICMA.240   
                WRITE(nuout,*)'CLIM error code is = ', info                INICMA.241   
                CALL halte('STOP in fromcpl.F')                            INICMA.242   
            ENDIF                                                          INICMA.243   
          END DO                                                           INICMA.244   
                                                                           INICMA.245   
      ENDIF                                                                INICMA.246   
c                                                                          INICMA.247   
      RETURN                                                               INICMA.248   
      END                                                                  INICMA.249   
                                                                           INICMA.250   
                                                                           INICMA.251   
      SUBROUTINE intocpl(kt, imjm, fsol, fnsol, waflx, runoff, taux,       INICMA.252   
     $    tauy, archts, last)                                              INICMA.253   
c ======================================================================   INICMA.254   
c S. Valcke (02/99) adapted From L.Z.X Li:this subroutine provides the     INICMA.255   
c atmospheric coupling fields to the coupler with the CLIM (PVM            INICMA.256   
c messages) technique.                                                     INICMA.257   
c IF last time step, writes output fields to binary files.                 INICMA.258   
c ======================================================================   INICMA.259   
      IMPLICIT NONE                                                        INICMA.260   
      INTEGER kt, imjm                                                     INICMA.261   
c                                                                          INICMA.262   
      REAL fsol(imjm)                                                      INICMA.263   
      REAL fnsol(imjm)                                                     INICMA.264   
      REAL waflx(imjm)                                                     INICMA.265   
      REAL runoff(imjm)                                                    INICMA.266   
      REAL taux(imjm)                                                      INICMA.267   
      REAL tauy(imjm)                                                      INICMA.268   
      LOGICAL last,archts                                                  INICMA.269   
c                                                                          INICMA.270   
      INTEGER nuout                                                        INICMA.271   
      PARAMETER (nuout = 6)                                                INICMA.272   
c                                                                          INICMA.273   
*CALL CLIMH                                                                INICMA.274   
*CALL PARAMCOUH                                                            INICMA.275   
*CALL INCCPLH                                                              INICMA.276   
c                                                                          INICMA.277   
      CHARACTER*8 file_name(jpmaxfld)                                      INICMA.278   
      INTEGER max_file                                                     INICMA.279   
      INTEGER file_unit_max, file_unit(jpmaxfld),                          INICMA.280   
     $    file_unit_field(jpmaxfld)                                        INICMA.281   
                                                                           INICMA.282   
      INTEGER icstep, info, jn, jf, ierror                                 INICMA.283   
      LOGICAL trouve                                                       INICMA.284   
c                                                                          INICMA.285   
*CALL OASISH                                                               INICMA.286   
c                                                                          INICMA.287   
      icstep=kt                                                            INICMA.288   
c                                                                          INICMA.289   
      WRITE(nuout,*) ' '                                                   INICMA.290   
      WRITE(nuout,*) 'Intocpl: sending fields to CPL, kt= ', kt            INICMA.291   
      WRITE(nuout,*) ' '                                                   INICMA.292   
                                                                           INICMA.293   
      IF (last.or.archts) THEN                                             INICMA.294   
c                                                                          INICMA.295   
c   -WRITE fields to binary files for coupler restart at last time step    INICMA.296   
c                                                                          INICMA.297   
c         -initialisation and files opening                                INICMA.298   
c                                                                          INICMA.299   
          max_file=1                                                       INICMA.300   
          file_unit_max=99                                                 INICMA.301   
c         -keeps first file name                                           INICMA.302   
          file_name(max_file)=cl_f_writ(max_file)                          INICMA.303   
c         -keeps first file unit                                           INICMA.304   
          file_unit(max_file)=file_unit_max                                INICMA.305   
c         -decrements file unit maximum                                    INICMA.306   
          file_unit_max=file_unit_max-1                                    INICMA.307   
c         -keeps file unit for field                                       INICMA.308   
          file_unit_field(1)=file_unit(max_file)                           INICMA.309   
c                                                                          INICMA.310   
c         -different files names counter                                   INICMA.311   
c                                                                          INICMA.312   
          DO jf= 2, jpflda2o1 + jpflda2o2                                  INICMA.313   
            trouve=.false.                                                 INICMA.314   
            DO jn= 1, max_file                                             INICMA.315   
              IF (.not.trouve) THEN                                        INICMA.316   
                  IF (cl_f_writ(jf).EQ.file_name(jn)) THEN                 INICMA.317   
c                 -keep file unit for field                                INICMA.318   
                      file_unit_field(jf)=file_unit(jn)                    INICMA.319   
                      trouve=.true.                                        INICMA.320   
                  END IF                                                   INICMA.321   
              END IF                                                       INICMA.322   
            END DO                                                         INICMA.323   
            IF (.not.trouve) then                                          INICMA.324   
c           -increment the number of different files                       INICMA.325   
                max_file=max_file+1                                        INICMA.326   
c           -keep file name                                                INICMA.327   
                file_name(max_file)=cl_f_writ(jf)                          INICMA.328   
c           -keep file unit for file                                       INICMA.329   
                file_unit(max_file)=file_unit_max                          INICMA.330   
c           -keep file unit for field                                      INICMA.331   
                file_unit_field(jf)=file_unit(max_file)                    INICMA.332   
c           -decrement unit maximum number from 99 to 98, ...              INICMA.333   
                file_unit_max=file_unit_max-1                              INICMA.334   
            END IF                                                         INICMA.335   
          END DO                                                           INICMA.336   
c                                                                          INICMA.337   
          DO jn=1, max_file                                                INICMA.338   
           OPEN (file_unit(jn), FILE=file_name(jn), FORM='UNFORMATTED')    INICMA.339   
          END DO                                                           INICMA.340   
c                                                                          INICMA.341   
c         WRITE fields to files                                            INICMA.342   
          DO jf=1, jpflda2o1 + jpflda2o2                                   INICMA.343   
            IF (jf.eq.1)                                                   INICMA.344   
     $          CALL locwrite(cl_writ(jf),fnsol, imjm,                     INICMA.345   
     $          file_unit_field(jf), ierror, nuout)                        INICMA.346   
            IF (jf.eq.2)                                                   INICMA.347   
     $          CALL locwrite(cl_writ(jf),fsol, imjm,                      INICMA.348   
     $          file_unit_field(jf), ierror, nuout)                        INICMA.349   
            IF (jf.eq.3)                                                   INICMA.350   
     $          CALL locwrite(cl_writ(jf),waflx, imjm,                     INICMA.351   
     $          file_unit_field(jf), ierror, nuout)                        INICMA.352   
            IF (jf.eq.4)                                                   INICMA.353   
     $          CALL locwrite(cl_writ(jf),runoff, imjm,                    INICMA.354   
     $          file_unit_field(jf), ierror, nuout)                        INICMA.355   
            IF (jf.eq.5)                                                   INICMA.356   
     $          CALL locwrite(cl_writ(jf),taux, imjm,                      INICMA.357   
     $          file_unit_field(jf),ierror, nuout)                         INICMA.358   
            IF (jf.eq.6)                                                   INICMA.359   
     $          CALL locwrite(cl_writ(jf),tauy, imjm,                      INICMA.360   
     $          file_unit_field(jf),ierror, nuout)                         INICMA.361   
            IF (jf.eq.7)                                                   INICMA.362   
     $          CALL locwrite(cl_writ(jf),taux, imjm,                      INICMA.363   
     $          file_unit_field(jf), ierror, nuout)                        INICMA.364   
            IF (jf.eq.8)                                                   INICMA.365   
     $          CALL locwrite(cl_writ(jf),tauy, imjm,                      INICMA.366   
     $          file_unit_field(jf), ierror, nuout)                        INICMA.367   
          END DO                                                           INICMA.368   
C                                                                          INICMA.369   
C         -simulate a FLUSH                                                INICMA.370   
C                                                                          INICMA.371   
          DO jn=1, max_file                                                INICMA.372   
            CLOSE (file_unit(jn))                                          INICMA.373   
          END DO                                                           INICMA.374   
                                                                           INICMA.375   
          end if                                                           INICMA.376   
C                                                                          INICMA.377   
C                                                                          INICMA.378   
          if (last) then                                                   INICMA.379   
                                                                           INICMA.380   
          IF(cchan.eq.'CLIM') THEN                                         INICMA.381   
C                                                                          INICMA.382   
C         -inform PVM daemon that message exchange is finished             INICMA.383   
C                                                                          INICMA.384   
              write(6,*)'calling CLIM_Quit',CLIM_ContPvm, info             INICMA.385   
              CALL CLIM_Quit (CLIM_ContPvm, info)                          INICMA.386   
              IF (info .NE. CLIM_Ok) THEN                                  INICMA.387   
                  WRITE (6, *)                                             INICMA.388   
     $                'An error occured while leaving CLIM. Error = ',     INICMA.389   
     $                info                                                 INICMA.390   
              ENDIF                                                        INICMA.391   
          END IF                                                           INICMA.392   
          RETURN                                                           INICMA.393   
      else                                                                 INICMA.394   
      write(6,*) " never got to clim quit "                                INICMA.395   
      END IF                                                               INICMA.396   
C                                                                          INICMA.397   
      IF(cchan.eq.'CLIM') THEN                                             INICMA.398   
C                                                                          INICMA.399   
C     -Give atmospheric fields to Oasis                                    INICMA.400   
C                                                                          INICMA.401   
          DO jn=1, jpflda2o1 + jpflda2o2                                   INICMA.402   
C                                                                          INICMA.403   
            IF (jn.eq.1) CALL CLIM_Export(cl_writ(jn), kt, fnsol, info)    INICMA.404   
            IF (jn.eq.2) CALL CLIM_Export(cl_writ(jn), kt, fsol, info)     INICMA.405   
            IF (jn.eq.3) CALL CLIM_Export(cl_writ(jn), kt, waflx, info)    INICMA.406   
            IF (jn.eq.4) CALL CLIM_Export(cl_writ(jn), kt, runoff, info)   INICMA.407   
            IF (jn.eq.5) CALL CLIM_Export(cl_writ(jn), kt, taux, info)     INICMA.408   
            IF (jn.eq.6) CALL CLIM_Export(cl_writ(jn), kt, tauy, info)     INICMA.409   
            IF (jn.eq.7) CALL CLIM_Export(cl_writ(jn), kt, taux, info)     INICMA.410   
            IF (jn.eq.8) CALL CLIM_Export(cl_writ(jn), kt, tauy, info)     INICMA.411   
                                                                           INICMA.412   
            IF (info .NE. CLIM_Ok) THEN                                    INICMA.413   
                WRITE (nuout,*) 'STEP : Pb giving ',cl_writ(jn), ':',jn    INICMA.414   
                WRITE (nuout,*) ' at timestep = ', icstep,'kt = ',kt       INICMA.415   
                WRITE (nuout,*) 'Clim error code is = ',info               INICMA.416   
                CALL halte('STOP in intocpl ')                             INICMA.417   
            ENDIF                                                          INICMA.418   
          END DO                                                           INICMA.419   
      ENDIF                                                                INICMA.420   
C                                                                          INICMA.421   
      RETURN                                                               INICMA.422   
      END                                                                  INICMA.423   
      SUBROUTINE locread ( cdfldn, pfield, kdimax, knulre, kflgre          INICMA.424   
     $                   , kout)                                           INICMA.425   
C****                                                                      INICMA.426   
C               *****************************                              INICMA.427   
C               * OASIS ROUTINE  -  LEVEL 0 *                              INICMA.428   
C               * -------------     ------- *                              INICMA.429   
C               *****************************                              INICMA.430   
C                                                                          INICMA.431   
C**** *locread*  - Read binary field on unit knulre                        INICMA.432   
C                                                                          INICMA.433   
C     Purpose:                                                             INICMA.434   
C     -------                                                              INICMA.435   
C     Find string cdfldn on unit knulre and read array pfield              INICMA.436   
C                                                                          INICMA.437   
C**   Interface:                                                           INICMA.438   
C     ---------                                                            INICMA.439   
C       *CALL*  *locread (cdfldn, pfield, kdimax, knulre, kflgre, kout)*   INICMA.440   
C                                                                          INICMA.441   
C     Input:                                                               INICMA.442   
C     -----                                                                INICMA.443   
C                cdfldn : character string locator                         INICMA.444   
C                kdimax : dimension of field to be read                    INICMA.445   
C                knulre : logical unit to be read                          INICMA.446   
C                kout   : logical unit to write messages                   INICMA.447   
C                                                                          INICMA.448   
C     Output:                                                              INICMA.449   
C     ------                                                               INICMA.450   
C                pfield : field array (real 1D)                            INICMA.451   
C                kflgre : error status flag                                INICMA.452   
C                                                                          INICMA.453   
C     Reference:                                                           INICMA.454   
C     ---------                                                            INICMA.455   
C     See OASIS manual (1995)                                              INICMA.456   
C                                                                          INICMA.457   
C     History:                                                             INICMA.458   
C     -------                                                              INICMA.459   
C       Version   Programmer     Date      Description                     INICMA.460   
C       -------   ----------     ----      -----------                     INICMA.461   
C       2.0       L. Terray      95/09/01  created                         INICMA.462   
C                                                                          INICMA.463   
C %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   INICMA.464   
C                                                                          INICMA.465   
      IMPLICIT CHARACTER(c)                                                INICMA.466   
      IMPLICIT LOGICAL(l)                                                  INICMA.467   
C                                                                          INICMA.468   
C*--------------------------- Argument declarations -------------------    INICMA.469   
C                                                                          INICMA.470   
      REAL pfield(kdimax)                                                  INICMA.471   
      CHARACTER*8 cdfldn                                                   INICMA.472   
C                                                                          INICMA.473   
C*--------------------------- Local declarations ----------------------    INICMA.474   
C                                                                          INICMA.475   
      CHARACTER*8 clecfl                                                   INICMA.476   
C                                                                          INICMA.477   
C*--------------------------- Poema verses ----------------------------    INICMA.478   
C                                                                          INICMA.479   
C %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    INICMA.480   
C                                                                          INICMA.481   
C*    1. Initialization                                                    INICMA.482   
C        --------------                                                    INICMA.483   
C                                                                          INICMA.484   
      WRITE (UNIT = kout,FMT = 1001) knulre                                INICMA.485   
C                                                                          INICMA.486   
C* Formats                                                                 INICMA.487   
C                                                                          INICMA.488   
 1001 FORMAT('Locread : Read binary file connected to unit = ',I3)         INICMA.489   
C                                                                          INICMA.490   
C     2. Find field in file                                                INICMA.491   
C        ------------------                                                INICMA.492   
C                                                                          INICMA.493   
      REWIND knulre                                                        INICMA.494   
 200  CONTINUE                                                             INICMA.495   
C* Find string                                                             INICMA.496   
      READ (UNIT = knulre, ERR = 200, END = 210) clecfl                    INICMA.497   
      IF (clecfl .NE. cdfldn) GO TO  200                                   INICMA.498   
C* Read associated field                                                   INICMA.499   
      READ (UNIT = knulre, ERR = 210, END = 210) pfield                    INICMA.500   
C* Reading done and ok                                                     INICMA.501   
      kflgre = 0                                                           INICMA.502   
      GO TO 220                                                            INICMA.503   
C* Problem in reading                                                      INICMA.504   
 210  kflgre = 1                                                           INICMA.505   
 220  CONTINUE                                                             INICMA.506   
C                                                                          INICMA.507   
C                                                                          INICMA.508   
C*    3. End of routine                                                    INICMA.509   
C        --------------                                                    INICMA.510   
C                                                                          INICMA.511   
      WRITE (UNIT = kout,FMT = *) 'Locread : done'                         INICMA.512   
      CALL FISH (kout)                                                     INICMA.513   
      RETURN                                                               INICMA.514   
      END                                                                  INICMA.515   
      SUBROUTINE locwrite (cdfldn, pfield, kdimax, knulre, kflgre, kout)   INICMA.516   
      IMPLICIT none                                                        INICMA.517   
C****                                                                      INICMA.518   
C               *****************************                              INICMA.519   
C               * OASIS ROUTINE  -  LEVEL 0 *                              INICMA.520   
C               * -------------     ------- *                              INICMA.521   
C               *****************************                              INICMA.522   
C                                                                          INICMA.523   
C**** *locwrite*  - Write binary field on unit knulre                      INICMA.524   
C                                                                          INICMA.525   
C     Purpose:                                                             INICMA.526   
C     -------                                                              INICMA.527   
C     Write string cdfldn and array pfield on unit knulre                  INICMA.528   
C                                                                          INICMA.529   
C**   Interface:                                                           INICMA.530   
C     ---------                                                            INICMA.531   
C      *CALL*  *locwrite (cdfldn, pfield, kdimax, knulre, kflgre, kout)*   INICMA.532   
C                                                                          INICMA.533   
C     Input:                                                               INICMA.534   
C     -----                                                                INICMA.535   
C                cdfldn : character string locator                         INICMA.536   
C                kdimax : dimension of field to be written                 INICMA.537   
C                knulre : logical unit to be written                       INICMA.538   
C                pfield : field array (real 1D)                            INICMA.539   
C                kout   : logical unit to write messages                   INICMA.540   
C                                                                          INICMA.541   
C     Output:                                                              INICMA.542   
C     ------                                                               INICMA.543   
C                kflgre : error status flag                                INICMA.544   
C                                                                          INICMA.545   
C     Workspace:                                                           INICMA.546   
C     ---------                                                            INICMA.547   
C     None                                                                 INICMA.548   
C                                                                          INICMA.549   
C     Externals:                                                           INICMA.550   
C     ---------                                                            INICMA.551   
C     None                                                                 INICMA.552   
C                                                                          INICMA.553   
C     Reference:                                                           INICMA.554   
C     ---------                                                            INICMA.555   
C     See OASIS manual (1995)                                              INICMA.556   
C                                                                          INICMA.557   
C     History:                                                             INICMA.558   
C     -------                                                              INICMA.559   
C       Version   Programmer     Date      Description                     INICMA.560   
C       -------   ----------     ----      -----------                     INICMA.561   
C       2.0       L. Terray      95/09/01  created                         INICMA.562   
C                                                                          INICMA.563   
C %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    INICMA.564   
C                                                                          INICMA.565   
C                                                                          INICMA.566   
C*--------------------------- Argument declarations -------------------    INICMA.567   
C                                                                          INICMA.568   
      INTEGER kdimax, knulre, kflgre, kout                                 INICMA.569   
      REAL pfield(kdimax)                                                  INICMA.570   
      CHARACTER*8 cdfldn                                                   INICMA.571   
C                                                                          INICMA.572   
C*--------------------------- Poema verses ----------------------------    INICMA.573   
C                                                                          INICMA.574   
C %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    INICMA.575   
C                                                                          INICMA.576   
C*    1. Initialization                                                    INICMA.577   
C        --------------                                                    INICMA.578   
C                                                                          INICMA.579   
      WRITE (UNIT = kout,FMT = 1001) knulre                                INICMA.580   
C                                                                          INICMA.581   
C* Formats                                                                 INICMA.582   
C                                                                          INICMA.583   
 1001 FORMAT(5X,' Write binary file connected to unit = ',I3)              INICMA.584   
C                                                                          INICMA.585   
C     2. Find field in file                                                INICMA.586   
C        ------------------                                                INICMA.587   
C                                                                          INICMA.588   
C* Write string                                                            INICMA.589   
      WRITE (UNIT = knulre, ERR = 210) cdfldn                              INICMA.590   
C* Write associated field                                                  INICMA.591   
      WRITE (UNIT = knulre, ERR = 210) pfield                              INICMA.592   
C* Writing done and ok                                                     INICMA.593   
      kflgre = 0                                                           INICMA.594   
      GO TO 220                                                            INICMA.595   
C* Problem in Writing                                                      INICMA.596   
 210  kflgre = 1                                                           INICMA.597   
 220  CONTINUE                                                             INICMA.598   
C                                                                          INICMA.599   
C                                                                          INICMA.600   
C*    3. End of routine                                                    INICMA.601   
C        --------------                                                    INICMA.602   
C                                                                          INICMA.603   
      WRITE (UNIT = kout,FMT = *) 'Locwrite : done'                        INICMA.604   
      CALL FISH (kout)                                                     INICMA.605   
      RETURN                                                               INICMA.606   
      END                                                                  INICMA.607   
                                                                           INICMA.608   
                                                                           INICMA.609   
                                                                           INICMA.610   
                                                                           INICMA.611   
      SUBROUTINE halte (cdtext)                                            INICMA.612   
C****                                                                      INICMA.613   
C               *****************************                              INICMA.614   
C               * OASIS ROUTINE  -  LEVEL C *                              INICMA.615   
C               * -------------     ------- *                              INICMA.616   
C               *****************************                              INICMA.617   
C                                                                          INICMA.618   
C**** *halte*  - Abort the program                                         INICMA.619   
C                                                                          INICMA.620   
C     Purpose:                                                             INICMA.621   
C     -------                                                              INICMA.622   
C     Print an error message to standard output and abort the coupler      INICMA.623   
C                                                                          INICMA.624   
C**   Interface:                                                           INICMA.625   
C     ---------                                                            INICMA.626   
C       *CALL*  *halte (cdtext)*                                           INICMA.627   
C                                                                          INICMA.628   
C     Input:                                                               INICMA.629   
C     -----                                                                INICMA.630   
C                cdtext   : character string to be printed                 INICMA.631   
C                                                                          INICMA.632   
C     Output:                                                              INICMA.633   
C     ------                                                               INICMA.634   
C     None                                                                 INICMA.635   
C                                                                          INICMA.636   
C     Workspace:                                                           INICMA.637   
C     ---------                                                            INICMA.638   
C     None                                                                 INICMA.639   
C                                                                          INICMA.640   
C     Externals:                                                           INICMA.641   
C     ---------                                                            INICMA.642   
C     None                                                                 INICMA.643   
C                                                                          INICMA.644   
C     Reference:                                                           INICMA.645   
C     ---------                                                            INICMA.646   
C     See OASIS 2.2 manual (1997)                                          INICMA.647   
C                                                                          INICMA.648   
C     History:                                                             INICMA.649   
C     -------                                                              INICMA.650   
C       Version   Programmer     Date      Description                     INICMA.651   
C       -------   ----------     ----      -----------                     INICMA.652   
C       2.2       S. Valcke      97/11/18  created                         INICMA.653   
C                                                                          INICMA.654   
C %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    INICMA.655   
C                                                                          INICMA.656   
C*----------------------- Argument declarations ----------------------     INICMA.657   
C                                                                          INICMA.658   
      CHARACTER*(*) cdtext                                                 INICMA.659   
C                                                                          INICMA.660   
C*--------------------------- Local declarations ----------------------    INICMA.661   
C                                                                          INICMA.662   
      CHARACTER cpbase                                                     INICMA.663   
      CHARACTER*10 cprpt, cpdots                                           INICMA.664   
      CHARACTER*69 cline                                                   INICMA.665   
      PARAMETER ( cpbase = '-' )                                           INICMA.666   
      PARAMETER ( cprpt = '* ===>>> :' )                                   INICMA.667   
      PARAMETER ( cpdots = '  ------  ' )                                  INICMA.668   
C                                                                          INICMA.669   
C*--------------------------- Poema verses ----------------------------    INICMA.670   
C                                                                          INICMA.671   
C %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     INICMA.672   
C                                                                          INICMA.673   
C*    1. Print text                                                        INICMA.674   
C        ----------                                                        INICMA.675   
C                                                                          INICMA.676   
          cline = ' '                                                      INICMA.677   
          ilen = len(cdtext)                                               INICMA.678   
          DO 110 jl = 1, ilen                                              INICMA.679   
            cline(jl:jl) = cpbase                                          INICMA.680   
 110      CONTINUE                                                         INICMA.681   
          nulou=6                                                          INICMA.682   
          WRITE(UNIT = nulou,FMT='(/,A,X,A)') cpdots, cline                INICMA.683   
          WRITE(UNIT = nulou,FMT='(/,A,X,A,/)') cprpt, cdtext              INICMA.684   
          WRITE(UNIT = nulou,FMT='(A,X,A,/)')cpdots, cline                 INICMA.685   
C                                                                          INICMA.686   
C                                                                          INICMA.687   
C*    2. FLUSH the coupler output                                          INICMA.688   
C        ------------------------                                          INICMA.689   
C                                                                          INICMA.690   
      CALL FISH (nulou)                                                    INICMA.691   
C                                                                          INICMA.692   
C                                                                          INICMA.693   
C*    3. Abort the coupler                                                 INICMA.694   
C        -----------------                                                 INICMA.695   
C                                                                          INICMA.696   
      CALL abort                                                           INICMA.697   
      RETURN                                                               INICMA.698   
      END                                                                  INICMA.699   
